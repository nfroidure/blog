(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.searchIndex = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/**
 * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.9
 * Copyright (C) 2020 Oliver Nightingale
 * @license MIT
 */

;(function(){

/**
 * A convenience function for configuring and constructing
 * a new lunr Index.
 *
 * A lunr.Builder instance is created and the pipeline setup
 * with a trimmer, stop word filter and stemmer.
 *
 * This builder object is yielded to the configuration function
 * that is passed as a parameter, allowing the list of fields
 * and other builder parameters to be customised.
 *
 * All documents _must_ be added within the passed config function.
 *
 * @example
 * var idx = lunr(function () {
 *   this.field('title')
 *   this.field('body')
 *   this.ref('id')
 *
 *   documents.forEach(function (doc) {
 *     this.add(doc)
 *   }, this)
 * })
 *
 * @see {@link lunr.Builder}
 * @see {@link lunr.Pipeline}
 * @see {@link lunr.trimmer}
 * @see {@link lunr.stopWordFilter}
 * @see {@link lunr.stemmer}
 * @namespace {function} lunr
 */
var lunr = function (config) {
  var builder = new lunr.Builder

  builder.pipeline.add(
    lunr.trimmer,
    lunr.stopWordFilter,
    lunr.stemmer
  )

  builder.searchPipeline.add(
    lunr.stemmer
  )

  config.call(builder, builder)
  return builder.build()
}

lunr.version = "2.3.9"
/*!
 * lunr.utils
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A namespace containing utils for the rest of the lunr library
 * @namespace lunr.utils
 */
lunr.utils = {}

/**
 * Print a warning message to the console.
 *
 * @param {String} message The message to be printed.
 * @memberOf lunr.utils
 * @function
 */
lunr.utils.warn = (function (global) {
  /* eslint-disable no-console */
  return function (message) {
    if (global.console && console.warn) {
      console.warn(message)
    }
  }
  /* eslint-enable no-console */
})(this)

/**
 * Convert an object to a string.
 *
 * In the case of `null` and `undefined` the function returns
 * the empty string, in all other cases the result of calling
 * `toString` on the passed object is returned.
 *
 * @param {Any} obj The object to convert to a string.
 * @return {String} string representation of the passed object.
 * @memberOf lunr.utils
 */
lunr.utils.asString = function (obj) {
  if (obj === void 0 || obj === null) {
    return ""
  } else {
    return obj.toString()
  }
}

/**
 * Clones an object.
 *
 * Will create a copy of an existing object such that any mutations
 * on the copy cannot affect the original.
 *
 * Only shallow objects are supported, passing a nested object to this
 * function will cause a TypeError.
 *
 * Objects with primitives, and arrays of primitives are supported.
 *
 * @param {Object} obj The object to clone.
 * @return {Object} a clone of the passed object.
 * @throws {TypeError} when a nested object is passed.
 * @memberOf Utils
 */
lunr.utils.clone = function (obj) {
  if (obj === null || obj === undefined) {
    return obj
  }

  var clone = Object.create(null),
      keys = Object.keys(obj)

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i],
        val = obj[key]

    if (Array.isArray(val)) {
      clone[key] = val.slice()
      continue
    }

    if (typeof val === 'string' ||
        typeof val === 'number' ||
        typeof val === 'boolean') {
      clone[key] = val
      continue
    }

    throw new TypeError("clone is not deep and does not support nested objects")
  }

  return clone
}
lunr.FieldRef = function (docRef, fieldName, stringValue) {
  this.docRef = docRef
  this.fieldName = fieldName
  this._stringValue = stringValue
}

lunr.FieldRef.joiner = "/"

lunr.FieldRef.fromString = function (s) {
  var n = s.indexOf(lunr.FieldRef.joiner)

  if (n === -1) {
    throw "malformed field ref string"
  }

  var fieldRef = s.slice(0, n),
      docRef = s.slice(n + 1)

  return new lunr.FieldRef (docRef, fieldRef, s)
}

lunr.FieldRef.prototype.toString = function () {
  if (this._stringValue == undefined) {
    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef
  }

  return this._stringValue
}
/*!
 * lunr.Set
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A lunr set.
 *
 * @constructor
 */
lunr.Set = function (elements) {
  this.elements = Object.create(null)

  if (elements) {
    this.length = elements.length

    for (var i = 0; i < this.length; i++) {
      this.elements[elements[i]] = true
    }
  } else {
    this.length = 0
  }
}

/**
 * A complete set that contains all elements.
 *
 * @static
 * @readonly
 * @type {lunr.Set}
 */
lunr.Set.complete = {
  intersect: function (other) {
    return other
  },

  union: function () {
    return this
  },

  contains: function () {
    return true
  }
}

/**
 * An empty set that contains no elements.
 *
 * @static
 * @readonly
 * @type {lunr.Set}
 */
lunr.Set.empty = {
  intersect: function () {
    return this
  },

  union: function (other) {
    return other
  },

  contains: function () {
    return false
  }
}

/**
 * Returns true if this set contains the specified object.
 *
 * @param {object} object - Object whose presence in this set is to be tested.
 * @returns {boolean} - True if this set contains the specified object.
 */
lunr.Set.prototype.contains = function (object) {
  return !!this.elements[object]
}

/**
 * Returns a new set containing only the elements that are present in both
 * this set and the specified set.
 *
 * @param {lunr.Set} other - set to intersect with this set.
 * @returns {lunr.Set} a new set that is the intersection of this and the specified set.
 */

lunr.Set.prototype.intersect = function (other) {
  var a, b, elements, intersection = []

  if (other === lunr.Set.complete) {
    return this
  }

  if (other === lunr.Set.empty) {
    return other
  }

  if (this.length < other.length) {
    a = this
    b = other
  } else {
    a = other
    b = this
  }

  elements = Object.keys(a.elements)

  for (var i = 0; i < elements.length; i++) {
    var element = elements[i]
    if (element in b.elements) {
      intersection.push(element)
    }
  }

  return new lunr.Set (intersection)
}

/**
 * Returns a new set combining the elements of this and the specified set.
 *
 * @param {lunr.Set} other - set to union with this set.
 * @return {lunr.Set} a new set that is the union of this and the specified set.
 */

lunr.Set.prototype.union = function (other) {
  if (other === lunr.Set.complete) {
    return lunr.Set.complete
  }

  if (other === lunr.Set.empty) {
    return this
  }

  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))
}
/**
 * A function to calculate the inverse document frequency for
 * a posting. This is shared between the builder and the index
 *
 * @private
 * @param {object} posting - The posting for a given term
 * @param {number} documentCount - The total number of documents.
 */
lunr.idf = function (posting, documentCount) {
  var documentsWithTerm = 0

  for (var fieldName in posting) {
    if (fieldName == '_index') continue // Ignore the term index, its not a field
    documentsWithTerm += Object.keys(posting[fieldName]).length
  }

  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)

  return Math.log(1 + Math.abs(x))
}

/**
 * A token wraps a string representation of a token
 * as it is passed through the text processing pipeline.
 *
 * @constructor
 * @param {string} [str=''] - The string token being wrapped.
 * @param {object} [metadata={}] - Metadata associated with this token.
 */
lunr.Token = function (str, metadata) {
  this.str = str || ""
  this.metadata = metadata || {}
}

/**
 * Returns the token string that is being wrapped by this object.
 *
 * @returns {string}
 */
lunr.Token.prototype.toString = function () {
  return this.str
}

/**
 * A token update function is used when updating or optionally
 * when cloning a token.
 *
 * @callback lunr.Token~updateFunction
 * @param {string} str - The string representation of the token.
 * @param {Object} metadata - All metadata associated with this token.
 */

/**
 * Applies the given function to the wrapped string token.
 *
 * @example
 * token.update(function (str, metadata) {
 *   return str.toUpperCase()
 * })
 *
 * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.
 * @returns {lunr.Token}
 */
lunr.Token.prototype.update = function (fn) {
  this.str = fn(this.str, this.metadata)
  return this
}

/**
 * Creates a clone of this token. Optionally a function can be
 * applied to the cloned token.
 *
 * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.
 * @returns {lunr.Token}
 */
lunr.Token.prototype.clone = function (fn) {
  fn = fn || function (s) { return s }
  return new lunr.Token (fn(this.str, this.metadata), this.metadata)
}
/*!
 * lunr.tokenizer
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A function for splitting a string into tokens ready to be inserted into
 * the search index. Uses `lunr.tokenizer.separator` to split strings, change
 * the value of this property to change how strings are split into tokens.
 *
 * This tokenizer will convert its parameter to a string by calling `toString` and
 * then will split this string on the character in `lunr.tokenizer.separator`.
 * Arrays will have their elements converted to strings and wrapped in a lunr.Token.
 *
 * Optional metadata can be passed to the tokenizer, this metadata will be cloned and
 * added as metadata to every token that is created from the object to be tokenized.
 *
 * @static
 * @param {?(string|object|object[])} obj - The object to convert into tokens
 * @param {?object} metadata - Optional metadata to associate with every token
 * @returns {lunr.Token[]}
 * @see {@link lunr.Pipeline}
 */
lunr.tokenizer = function (obj, metadata) {
  if (obj == null || obj == undefined) {
    return []
  }

  if (Array.isArray(obj)) {
    return obj.map(function (t) {
      return new lunr.Token(
        lunr.utils.asString(t).toLowerCase(),
        lunr.utils.clone(metadata)
      )
    })
  }

  var str = obj.toString().toLowerCase(),
      len = str.length,
      tokens = []

  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {
    var char = str.charAt(sliceEnd),
        sliceLength = sliceEnd - sliceStart

    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {

      if (sliceLength > 0) {
        var tokenMetadata = lunr.utils.clone(metadata) || {}
        tokenMetadata["position"] = [sliceStart, sliceLength]
        tokenMetadata["index"] = tokens.length

        tokens.push(
          new lunr.Token (
            str.slice(sliceStart, sliceEnd),
            tokenMetadata
          )
        )
      }

      sliceStart = sliceEnd + 1
    }

  }

  return tokens
}

/**
 * The separator used to split a string into tokens. Override this property to change the behaviour of
 * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.
 *
 * @static
 * @see lunr.tokenizer
 */
lunr.tokenizer.separator = /[\s\-]+/
/*!
 * lunr.Pipeline
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * lunr.Pipelines maintain an ordered list of functions to be applied to all
 * tokens in documents entering the search index and queries being ran against
 * the index.
 *
 * An instance of lunr.Index created with the lunr shortcut will contain a
 * pipeline with a stop word filter and an English language stemmer. Extra
 * functions can be added before or after either of these functions or these
 * default functions can be removed.
 *
 * When run the pipeline will call each function in turn, passing a token, the
 * index of that token in the original list of all tokens and finally a list of
 * all the original tokens.
 *
 * The output of functions in the pipeline will be passed to the next function
 * in the pipeline. To exclude a token from entering the index the function
 * should return undefined, the rest of the pipeline will not be called with
 * this token.
 *
 * For serialisation of pipelines to work, all functions used in an instance of
 * a pipeline should be registered with lunr.Pipeline. Registered functions can
 * then be loaded. If trying to load a serialised pipeline that uses functions
 * that are not registered an error will be thrown.
 *
 * If not planning on serialising the pipeline then registering pipeline functions
 * is not necessary.
 *
 * @constructor
 */
lunr.Pipeline = function () {
  this._stack = []
}

lunr.Pipeline.registeredFunctions = Object.create(null)

/**
 * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token
 * string as well as all known metadata. A pipeline function can mutate the token string
 * or mutate (or add) metadata for a given token.
 *
 * A pipeline function can indicate that the passed token should be discarded by returning
 * null, undefined or an empty string. This token will not be passed to any downstream pipeline
 * functions and will not be added to the index.
 *
 * Multiple tokens can be returned by returning an array of tokens. Each token will be passed
 * to any downstream pipeline functions and all will returned tokens will be added to the index.
 *
 * Any number of pipeline functions may be chained together using a lunr.Pipeline.
 *
 * @interface lunr.PipelineFunction
 * @param {lunr.Token} token - A token from the document being processed.
 * @param {number} i - The index of this token in the complete list of tokens for this document/field.
 * @param {lunr.Token[]} tokens - All tokens for this document/field.
 * @returns {(?lunr.Token|lunr.Token[])}
 */

/**
 * Register a function with the pipeline.
 *
 * Functions that are used in the pipeline should be registered if the pipeline
 * needs to be serialised, or a serialised pipeline needs to be loaded.
 *
 * Registering a function does not add it to a pipeline, functions must still be
 * added to instances of the pipeline for them to be used when running a pipeline.
 *
 * @param {lunr.PipelineFunction} fn - The function to check for.
 * @param {String} label - The label to register this function with
 */
lunr.Pipeline.registerFunction = function (fn, label) {
  if (label in this.registeredFunctions) {
    lunr.utils.warn('Overwriting existing registered function: ' + label)
  }

  fn.label = label
  lunr.Pipeline.registeredFunctions[fn.label] = fn
}

/**
 * Warns if the function is not registered as a Pipeline function.
 *
 * @param {lunr.PipelineFunction} fn - The function to check for.
 * @private
 */
lunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {
  var isRegistered = fn.label && (fn.label in this.registeredFunctions)

  if (!isRegistered) {
    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\n', fn)
  }
}

/**
 * Loads a previously serialised pipeline.
 *
 * All functions to be loaded must already be registered with lunr.Pipeline.
 * If any function from the serialised data has not been registered then an
 * error will be thrown.
 *
 * @param {Object} serialised - The serialised pipeline to load.
 * @returns {lunr.Pipeline}
 */
lunr.Pipeline.load = function (serialised) {
  var pipeline = new lunr.Pipeline

  serialised.forEach(function (fnName) {
    var fn = lunr.Pipeline.registeredFunctions[fnName]

    if (fn) {
      pipeline.add(fn)
    } else {
      throw new Error('Cannot load unregistered function: ' + fnName)
    }
  })

  return pipeline
}

/**
 * Adds new functions to the end of the pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.
 */
lunr.Pipeline.prototype.add = function () {
  var fns = Array.prototype.slice.call(arguments)

  fns.forEach(function (fn) {
    lunr.Pipeline.warnIfFunctionNotRegistered(fn)
    this._stack.push(fn)
  }, this)
}

/**
 * Adds a single function after a function that already exists in the
 * pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
 * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
 */
lunr.Pipeline.prototype.after = function (existingFn, newFn) {
  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)

  var pos = this._stack.indexOf(existingFn)
  if (pos == -1) {
    throw new Error('Cannot find existingFn')
  }

  pos = pos + 1
  this._stack.splice(pos, 0, newFn)
}

/**
 * Adds a single function before a function that already exists in the
 * pipeline.
 *
 * Logs a warning if the function has not been registered.
 *
 * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
 * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
 */
lunr.Pipeline.prototype.before = function (existingFn, newFn) {
  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)

  var pos = this._stack.indexOf(existingFn)
  if (pos == -1) {
    throw new Error('Cannot find existingFn')
  }

  this._stack.splice(pos, 0, newFn)
}

/**
 * Removes a function from the pipeline.
 *
 * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.
 */
lunr.Pipeline.prototype.remove = function (fn) {
  var pos = this._stack.indexOf(fn)
  if (pos == -1) {
    return
  }

  this._stack.splice(pos, 1)
}

/**
 * Runs the current list of functions that make up the pipeline against the
 * passed tokens.
 *
 * @param {Array} tokens The tokens to run through the pipeline.
 * @returns {Array}
 */
lunr.Pipeline.prototype.run = function (tokens) {
  var stackLength = this._stack.length

  for (var i = 0; i < stackLength; i++) {
    var fn = this._stack[i]
    var memo = []

    for (var j = 0; j < tokens.length; j++) {
      var result = fn(tokens[j], j, tokens)

      if (result === null || result === void 0 || result === '') continue

      if (Array.isArray(result)) {
        for (var k = 0; k < result.length; k++) {
          memo.push(result[k])
        }
      } else {
        memo.push(result)
      }
    }

    tokens = memo
  }

  return tokens
}

/**
 * Convenience method for passing a string through a pipeline and getting
 * strings out. This method takes care of wrapping the passed string in a
 * token and mapping the resulting tokens back to strings.
 *
 * @param {string} str - The string to pass through the pipeline.
 * @param {?object} metadata - Optional metadata to associate with the token
 * passed to the pipeline.
 * @returns {string[]}
 */
lunr.Pipeline.prototype.runString = function (str, metadata) {
  var token = new lunr.Token (str, metadata)

  return this.run([token]).map(function (t) {
    return t.toString()
  })
}

/**
 * Resets the pipeline by removing any existing processors.
 *
 */
lunr.Pipeline.prototype.reset = function () {
  this._stack = []
}

/**
 * Returns a representation of the pipeline ready for serialisation.
 *
 * Logs a warning if the function has not been registered.
 *
 * @returns {Array}
 */
lunr.Pipeline.prototype.toJSON = function () {
  return this._stack.map(function (fn) {
    lunr.Pipeline.warnIfFunctionNotRegistered(fn)

    return fn.label
  })
}
/*!
 * lunr.Vector
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A vector is used to construct the vector space of documents and queries. These
 * vectors support operations to determine the similarity between two documents or
 * a document and a query.
 *
 * Normally no parameters are required for initializing a vector, but in the case of
 * loading a previously dumped vector the raw elements can be provided to the constructor.
 *
 * For performance reasons vectors are implemented with a flat array, where an elements
 * index is immediately followed by its value. E.g. [index, value, index, value]. This
 * allows the underlying array to be as sparse as possible and still offer decent
 * performance when being used for vector calculations.
 *
 * @constructor
 * @param {Number[]} [elements] - The flat list of element index and element value pairs.
 */
lunr.Vector = function (elements) {
  this._magnitude = 0
  this.elements = elements || []
}


/**
 * Calculates the position within the vector to insert a given index.
 *
 * This is used internally by insert and upsert. If there are duplicate indexes then
 * the position is returned as if the value for that index were to be updated, but it
 * is the callers responsibility to check whether there is a duplicate at that index
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @returns {Number}
 */
lunr.Vector.prototype.positionForIndex = function (index) {
  // For an empty vector the tuple can be inserted at the beginning
  if (this.elements.length == 0) {
    return 0
  }

  var start = 0,
      end = this.elements.length / 2,
      sliceLength = end - start,
      pivotPoint = Math.floor(sliceLength / 2),
      pivotIndex = this.elements[pivotPoint * 2]

  while (sliceLength > 1) {
    if (pivotIndex < index) {
      start = pivotPoint
    }

    if (pivotIndex > index) {
      end = pivotPoint
    }

    if (pivotIndex == index) {
      break
    }

    sliceLength = end - start
    pivotPoint = start + Math.floor(sliceLength / 2)
    pivotIndex = this.elements[pivotPoint * 2]
  }

  if (pivotIndex == index) {
    return pivotPoint * 2
  }

  if (pivotIndex > index) {
    return pivotPoint * 2
  }

  if (pivotIndex < index) {
    return (pivotPoint + 1) * 2
  }
}

/**
 * Inserts an element at an index within the vector.
 *
 * Does not allow duplicates, will throw an error if there is already an entry
 * for this index.
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @param {Number} val - The value to be inserted into the vector.
 */
lunr.Vector.prototype.insert = function (insertIdx, val) {
  this.upsert(insertIdx, val, function () {
    throw "duplicate index"
  })
}

/**
 * Inserts or updates an existing index within the vector.
 *
 * @param {Number} insertIdx - The index at which the element should be inserted.
 * @param {Number} val - The value to be inserted into the vector.
 * @param {function} fn - A function that is called for updates, the existing value and the
 * requested value are passed as arguments
 */
lunr.Vector.prototype.upsert = function (insertIdx, val, fn) {
  this._magnitude = 0
  var position = this.positionForIndex(insertIdx)

  if (this.elements[position] == insertIdx) {
    this.elements[position + 1] = fn(this.elements[position + 1], val)
  } else {
    this.elements.splice(position, 0, insertIdx, val)
  }
}

/**
 * Calculates the magnitude of this vector.
 *
 * @returns {Number}
 */
lunr.Vector.prototype.magnitude = function () {
  if (this._magnitude) return this._magnitude

  var sumOfSquares = 0,
      elementsLength = this.elements.length

  for (var i = 1; i < elementsLength; i += 2) {
    var val = this.elements[i]
    sumOfSquares += val * val
  }

  return this._magnitude = Math.sqrt(sumOfSquares)
}

/**
 * Calculates the dot product of this vector and another vector.
 *
 * @param {lunr.Vector} otherVector - The vector to compute the dot product with.
 * @returns {Number}
 */
lunr.Vector.prototype.dot = function (otherVector) {
  var dotProduct = 0,
      a = this.elements, b = otherVector.elements,
      aLen = a.length, bLen = b.length,
      aVal = 0, bVal = 0,
      i = 0, j = 0

  while (i < aLen && j < bLen) {
    aVal = a[i], bVal = b[j]
    if (aVal < bVal) {
      i += 2
    } else if (aVal > bVal) {
      j += 2
    } else if (aVal == bVal) {
      dotProduct += a[i + 1] * b[j + 1]
      i += 2
      j += 2
    }
  }

  return dotProduct
}

/**
 * Calculates the similarity between this vector and another vector.
 *
 * @param {lunr.Vector} otherVector - The other vector to calculate the
 * similarity with.
 * @returns {Number}
 */
lunr.Vector.prototype.similarity = function (otherVector) {
  return this.dot(otherVector) / this.magnitude() || 0
}

/**
 * Converts the vector to an array of the elements within the vector.
 *
 * @returns {Number[]}
 */
lunr.Vector.prototype.toArray = function () {
  var output = new Array (this.elements.length / 2)

  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {
    output[j] = this.elements[i]
  }

  return output
}

/**
 * A JSON serializable representation of the vector.
 *
 * @returns {Number[]}
 */
lunr.Vector.prototype.toJSON = function () {
  return this.elements
}
/* eslint-disable */
/*!
 * lunr.stemmer
 * Copyright (C) 2020 Oliver Nightingale
 * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt
 */

/**
 * lunr.stemmer is an english language stemmer, this is a JavaScript
 * implementation of the PorterStemmer taken from http://tartarus.org/~martin
 *
 * @static
 * @implements {lunr.PipelineFunction}
 * @param {lunr.Token} token - The string to stem
 * @returns {lunr.Token}
 * @see {@link lunr.Pipeline}
 * @function
 */
lunr.stemmer = (function(){
  var step2list = {
      "ational" : "ate",
      "tional" : "tion",
      "enci" : "ence",
      "anci" : "ance",
      "izer" : "ize",
      "bli" : "ble",
      "alli" : "al",
      "entli" : "ent",
      "eli" : "e",
      "ousli" : "ous",
      "ization" : "ize",
      "ation" : "ate",
      "ator" : "ate",
      "alism" : "al",
      "iveness" : "ive",
      "fulness" : "ful",
      "ousness" : "ous",
      "aliti" : "al",
      "iviti" : "ive",
      "biliti" : "ble",
      "logi" : "log"
    },

    step3list = {
      "icate" : "ic",
      "ative" : "",
      "alize" : "al",
      "iciti" : "ic",
      "ical" : "ic",
      "ful" : "",
      "ness" : ""
    },

    c = "[^aeiou]",          // consonant
    v = "[aeiouy]",          // vowel
    C = c + "[^aeiouy]*",    // consonant sequence
    V = v + "[aeiou]*",      // vowel sequence

    mgr0 = "^(" + C + ")?" + V + C,               // [C]VC... is m>0
    meq1 = "^(" + C + ")?" + V + C + "(" + V + ")?$",  // [C]VC[V] is m=1
    mgr1 = "^(" + C + ")?" + V + C + V + C,       // [C]VCVC... is m>1
    s_v = "^(" + C + ")?" + v;                   // vowel in stem

  var re_mgr0 = new RegExp(mgr0);
  var re_mgr1 = new RegExp(mgr1);
  var re_meq1 = new RegExp(meq1);
  var re_s_v = new RegExp(s_v);

  var re_1a = /^(.+?)(ss|i)es$/;
  var re2_1a = /^(.+?)([^s])s$/;
  var re_1b = /^(.+?)eed$/;
  var re2_1b = /^(.+?)(ed|ing)$/;
  var re_1b_2 = /.$/;
  var re2_1b_2 = /(at|bl|iz)$/;
  var re3_1b_2 = new RegExp("([^aeiouylsz])\\1$");
  var re4_1b_2 = new RegExp("^" + C + v + "[^aeiouwxy]$");

  var re_1c = /^(.+?[^aeiou])y$/;
  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;

  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;

  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
  var re2_4 = /^(.+?)(s|t)(ion)$/;

  var re_5 = /^(.+?)e$/;
  var re_5_1 = /ll$/;
  var re3_5 = new RegExp("^" + C + v + "[^aeiouwxy]$");

  var porterStemmer = function porterStemmer(w) {
    var stem,
      suffix,
      firstch,
      re,
      re2,
      re3,
      re4;

    if (w.length < 3) { return w; }

    firstch = w.substr(0,1);
    if (firstch == "y") {
      w = firstch.toUpperCase() + w.substr(1);
    }

    // Step 1a
    re = re_1a
    re2 = re2_1a;

    if (re.test(w)) { w = w.replace(re,"$1$2"); }
    else if (re2.test(w)) { w = w.replace(re2,"$1$2"); }

    // Step 1b
    re = re_1b;
    re2 = re2_1b;
    if (re.test(w)) {
      var fp = re.exec(w);
      re = re_mgr0;
      if (re.test(fp[1])) {
        re = re_1b_2;
        w = w.replace(re,"");
      }
    } else if (re2.test(w)) {
      var fp = re2.exec(w);
      stem = fp[1];
      re2 = re_s_v;
      if (re2.test(stem)) {
        w = stem;
        re2 = re2_1b_2;
        re3 = re3_1b_2;
        re4 = re4_1b_2;
        if (re2.test(w)) { w = w + "e"; }
        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,""); }
        else if (re4.test(w)) { w = w + "e"; }
      }
    }

    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)
    re = re_1c;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      w = stem + "i";
    }

    // Step 2
    re = re_2;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      suffix = fp[2];
      re = re_mgr0;
      if (re.test(stem)) {
        w = stem + step2list[suffix];
      }
    }

    // Step 3
    re = re_3;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      suffix = fp[2];
      re = re_mgr0;
      if (re.test(stem)) {
        w = stem + step3list[suffix];
      }
    }

    // Step 4
    re = re_4;
    re2 = re2_4;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = re_mgr1;
      if (re.test(stem)) {
        w = stem;
      }
    } else if (re2.test(w)) {
      var fp = re2.exec(w);
      stem = fp[1] + fp[2];
      re2 = re_mgr1;
      if (re2.test(stem)) {
        w = stem;
      }
    }

    // Step 5
    re = re_5;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = re_mgr1;
      re2 = re_meq1;
      re3 = re3_5;
      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {
        w = stem;
      }
    }

    re = re_5_1;
    re2 = re_mgr1;
    if (re.test(w) && re2.test(w)) {
      re = re_1b_2;
      w = w.replace(re,"");
    }

    // and turn initial Y back to y

    if (firstch == "y") {
      w = firstch.toLowerCase() + w.substr(1);
    }

    return w;
  };

  return function (token) {
    return token.update(porterStemmer);
  }
})();

lunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')
/*!
 * lunr.stopWordFilter
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * lunr.generateStopWordFilter builds a stopWordFilter function from the provided
 * list of stop words.
 *
 * The built in lunr.stopWordFilter is built using this generator and can be used
 * to generate custom stopWordFilters for applications or non English languages.
 *
 * @function
 * @param {Array} token The token to pass through the filter
 * @returns {lunr.PipelineFunction}
 * @see lunr.Pipeline
 * @see lunr.stopWordFilter
 */
lunr.generateStopWordFilter = function (stopWords) {
  var words = stopWords.reduce(function (memo, stopWord) {
    memo[stopWord] = stopWord
    return memo
  }, {})

  return function (token) {
    if (token && words[token.toString()] !== token.toString()) return token
  }
}

/**
 * lunr.stopWordFilter is an English language stop word list filter, any words
 * contained in the list will not be passed through the filter.
 *
 * This is intended to be used in the Pipeline. If the token does not pass the
 * filter then undefined will be returned.
 *
 * @function
 * @implements {lunr.PipelineFunction}
 * @params {lunr.Token} token - A token to check for being a stop word.
 * @returns {lunr.Token}
 * @see {@link lunr.Pipeline}
 */
lunr.stopWordFilter = lunr.generateStopWordFilter([
  'a',
  'able',
  'about',
  'across',
  'after',
  'all',
  'almost',
  'also',
  'am',
  'among',
  'an',
  'and',
  'any',
  'are',
  'as',
  'at',
  'be',
  'because',
  'been',
  'but',
  'by',
  'can',
  'cannot',
  'could',
  'dear',
  'did',
  'do',
  'does',
  'either',
  'else',
  'ever',
  'every',
  'for',
  'from',
  'get',
  'got',
  'had',
  'has',
  'have',
  'he',
  'her',
  'hers',
  'him',
  'his',
  'how',
  'however',
  'i',
  'if',
  'in',
  'into',
  'is',
  'it',
  'its',
  'just',
  'least',
  'let',
  'like',
  'likely',
  'may',
  'me',
  'might',
  'most',
  'must',
  'my',
  'neither',
  'no',
  'nor',
  'not',
  'of',
  'off',
  'often',
  'on',
  'only',
  'or',
  'other',
  'our',
  'own',
  'rather',
  'said',
  'say',
  'says',
  'she',
  'should',
  'since',
  'so',
  'some',
  'than',
  'that',
  'the',
  'their',
  'them',
  'then',
  'there',
  'these',
  'they',
  'this',
  'tis',
  'to',
  'too',
  'twas',
  'us',
  'wants',
  'was',
  'we',
  'were',
  'what',
  'when',
  'where',
  'which',
  'while',
  'who',
  'whom',
  'why',
  'will',
  'with',
  'would',
  'yet',
  'you',
  'your'
])

lunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')
/*!
 * lunr.trimmer
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * lunr.trimmer is a pipeline function for trimming non word
 * characters from the beginning and end of tokens before they
 * enter the index.
 *
 * This implementation may not work correctly for non latin
 * characters and should either be removed or adapted for use
 * with languages with non-latin characters.
 *
 * @static
 * @implements {lunr.PipelineFunction}
 * @param {lunr.Token} token The token to pass through the filter
 * @returns {lunr.Token}
 * @see lunr.Pipeline
 */
lunr.trimmer = function (token) {
  return token.update(function (s) {
    return s.replace(/^\W+/, '').replace(/\W+$/, '')
  })
}

lunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')
/*!
 * lunr.TokenSet
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * A token set is used to store the unique list of all tokens
 * within an index. Token sets are also used to represent an
 * incoming query to the index, this query token set and index
 * token set are then intersected to find which tokens to look
 * up in the inverted index.
 *
 * A token set can hold multiple tokens, as in the case of the
 * index token set, or it can hold a single token as in the
 * case of a simple query token set.
 *
 * Additionally token sets are used to perform wildcard matching.
 * Leading, contained and trailing wildcards are supported, and
 * from this edit distance matching can also be provided.
 *
 * Token sets are implemented as a minimal finite state automata,
 * where both common prefixes and suffixes are shared between tokens.
 * This helps to reduce the space used for storing the token set.
 *
 * @constructor
 */
lunr.TokenSet = function () {
  this.final = false
  this.edges = {}
  this.id = lunr.TokenSet._nextId
  lunr.TokenSet._nextId += 1
}

/**
 * Keeps track of the next, auto increment, identifier to assign
 * to a new tokenSet.
 *
 * TokenSets require a unique identifier to be correctly minimised.
 *
 * @private
 */
lunr.TokenSet._nextId = 1

/**
 * Creates a TokenSet instance from the given sorted array of words.
 *
 * @param {String[]} arr - A sorted array of strings to create the set from.
 * @returns {lunr.TokenSet}
 * @throws Will throw an error if the input array is not sorted.
 */
lunr.TokenSet.fromArray = function (arr) {
  var builder = new lunr.TokenSet.Builder

  for (var i = 0, len = arr.length; i < len; i++) {
    builder.insert(arr[i])
  }

  builder.finish()
  return builder.root
}

/**
 * Creates a token set from a query clause.
 *
 * @private
 * @param {Object} clause - A single clause from lunr.Query.
 * @param {string} clause.term - The query clause term.
 * @param {number} [clause.editDistance] - The optional edit distance for the term.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.fromClause = function (clause) {
  if ('editDistance' in clause) {
    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)
  } else {
    return lunr.TokenSet.fromString(clause.term)
  }
}

/**
 * Creates a token set representing a single string with a specified
 * edit distance.
 *
 * Insertions, deletions, substitutions and transpositions are each
 * treated as an edit distance of 1.
 *
 * Increasing the allowed edit distance will have a dramatic impact
 * on the performance of both creating and intersecting these TokenSets.
 * It is advised to keep the edit distance less than 3.
 *
 * @param {string} str - The string to create the token set from.
 * @param {number} editDistance - The allowed edit distance to match.
 * @returns {lunr.Vector}
 */
lunr.TokenSet.fromFuzzyString = function (str, editDistance) {
  var root = new lunr.TokenSet

  var stack = [{
    node: root,
    editsRemaining: editDistance,
    str: str
  }]

  while (stack.length) {
    var frame = stack.pop()

    // no edit
    if (frame.str.length > 0) {
      var char = frame.str.charAt(0),
          noEditNode

      if (char in frame.node.edges) {
        noEditNode = frame.node.edges[char]
      } else {
        noEditNode = new lunr.TokenSet
        frame.node.edges[char] = noEditNode
      }

      if (frame.str.length == 1) {
        noEditNode.final = true
      }

      stack.push({
        node: noEditNode,
        editsRemaining: frame.editsRemaining,
        str: frame.str.slice(1)
      })
    }

    if (frame.editsRemaining == 0) {
      continue
    }

    // insertion
    if ("*" in frame.node.edges) {
      var insertionNode = frame.node.edges["*"]
    } else {
      var insertionNode = new lunr.TokenSet
      frame.node.edges["*"] = insertionNode
    }

    if (frame.str.length == 0) {
      insertionNode.final = true
    }

    stack.push({
      node: insertionNode,
      editsRemaining: frame.editsRemaining - 1,
      str: frame.str
    })

    // deletion
    // can only do a deletion if we have enough edits remaining
    // and if there are characters left to delete in the string
    if (frame.str.length > 1) {
      stack.push({
        node: frame.node,
        editsRemaining: frame.editsRemaining - 1,
        str: frame.str.slice(1)
      })
    }

    // deletion
    // just removing the last character from the str
    if (frame.str.length == 1) {
      frame.node.final = true
    }

    // substitution
    // can only do a substitution if we have enough edits remaining
    // and if there are characters left to substitute
    if (frame.str.length >= 1) {
      if ("*" in frame.node.edges) {
        var substitutionNode = frame.node.edges["*"]
      } else {
        var substitutionNode = new lunr.TokenSet
        frame.node.edges["*"] = substitutionNode
      }

      if (frame.str.length == 1) {
        substitutionNode.final = true
      }

      stack.push({
        node: substitutionNode,
        editsRemaining: frame.editsRemaining - 1,
        str: frame.str.slice(1)
      })
    }

    // transposition
    // can only do a transposition if there are edits remaining
    // and there are enough characters to transpose
    if (frame.str.length > 1) {
      var charA = frame.str.charAt(0),
          charB = frame.str.charAt(1),
          transposeNode

      if (charB in frame.node.edges) {
        transposeNode = frame.node.edges[charB]
      } else {
        transposeNode = new lunr.TokenSet
        frame.node.edges[charB] = transposeNode
      }

      if (frame.str.length == 1) {
        transposeNode.final = true
      }

      stack.push({
        node: transposeNode,
        editsRemaining: frame.editsRemaining - 1,
        str: charA + frame.str.slice(2)
      })
    }
  }

  return root
}

/**
 * Creates a TokenSet from a string.
 *
 * The string may contain one or more wildcard characters (*)
 * that will allow wildcard matching when intersecting with
 * another TokenSet.
 *
 * @param {string} str - The string to create a TokenSet from.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.fromString = function (str) {
  var node = new lunr.TokenSet,
      root = node

  /*
   * Iterates through all characters within the passed string
   * appending a node for each character.
   *
   * When a wildcard character is found then a self
   * referencing edge is introduced to continually match
   * any number of any characters.
   */
  for (var i = 0, len = str.length; i < len; i++) {
    var char = str[i],
        final = (i == len - 1)

    if (char == "*") {
      node.edges[char] = node
      node.final = final

    } else {
      var next = new lunr.TokenSet
      next.final = final

      node.edges[char] = next
      node = next
    }
  }

  return root
}

/**
 * Converts this TokenSet into an array of strings
 * contained within the TokenSet.
 *
 * This is not intended to be used on a TokenSet that
 * contains wildcards, in these cases the results are
 * undefined and are likely to cause an infinite loop.
 *
 * @returns {string[]}
 */
lunr.TokenSet.prototype.toArray = function () {
  var words = []

  var stack = [{
    prefix: "",
    node: this
  }]

  while (stack.length) {
    var frame = stack.pop(),
        edges = Object.keys(frame.node.edges),
        len = edges.length

    if (frame.node.final) {
      /* In Safari, at this point the prefix is sometimes corrupted, see:
       * https://github.com/olivernn/lunr.js/issues/279 Calling any
       * String.prototype method forces Safari to "cast" this string to what
       * it's supposed to be, fixing the bug. */
      frame.prefix.charAt(0)
      words.push(frame.prefix)
    }

    for (var i = 0; i < len; i++) {
      var edge = edges[i]

      stack.push({
        prefix: frame.prefix.concat(edge),
        node: frame.node.edges[edge]
      })
    }
  }

  return words
}

/**
 * Generates a string representation of a TokenSet.
 *
 * This is intended to allow TokenSets to be used as keys
 * in objects, largely to aid the construction and minimisation
 * of a TokenSet. As such it is not designed to be a human
 * friendly representation of the TokenSet.
 *
 * @returns {string}
 */
lunr.TokenSet.prototype.toString = function () {
  // NOTE: Using Object.keys here as this.edges is very likely
  // to enter 'hash-mode' with many keys being added
  //
  // avoiding a for-in loop here as it leads to the function
  // being de-optimised (at least in V8). From some simple
  // benchmarks the performance is comparable, but allowing
  // V8 to optimize may mean easy performance wins in the future.

  if (this._str) {
    return this._str
  }

  var str = this.final ? '1' : '0',
      labels = Object.keys(this.edges).sort(),
      len = labels.length

  for (var i = 0; i < len; i++) {
    var label = labels[i],
        node = this.edges[label]

    str = str + label + node.id
  }

  return str
}

/**
 * Returns a new TokenSet that is the intersection of
 * this TokenSet and the passed TokenSet.
 *
 * This intersection will take into account any wildcards
 * contained within the TokenSet.
 *
 * @param {lunr.TokenSet} b - An other TokenSet to intersect with.
 * @returns {lunr.TokenSet}
 */
lunr.TokenSet.prototype.intersect = function (b) {
  var output = new lunr.TokenSet,
      frame = undefined

  var stack = [{
    qNode: b,
    output: output,
    node: this
  }]

  while (stack.length) {
    frame = stack.pop()

    // NOTE: As with the #toString method, we are using
    // Object.keys and a for loop instead of a for-in loop
    // as both of these objects enter 'hash' mode, causing
    // the function to be de-optimised in V8
    var qEdges = Object.keys(frame.qNode.edges),
        qLen = qEdges.length,
        nEdges = Object.keys(frame.node.edges),
        nLen = nEdges.length

    for (var q = 0; q < qLen; q++) {
      var qEdge = qEdges[q]

      for (var n = 0; n < nLen; n++) {
        var nEdge = nEdges[n]

        if (nEdge == qEdge || qEdge == '*') {
          var node = frame.node.edges[nEdge],
              qNode = frame.qNode.edges[qEdge],
              final = node.final && qNode.final,
              next = undefined

          if (nEdge in frame.output.edges) {
            // an edge already exists for this character
            // no need to create a new node, just set the finality
            // bit unless this node is already final
            next = frame.output.edges[nEdge]
            next.final = next.final || final

          } else {
            // no edge exists yet, must create one
            // set the finality bit and insert it
            // into the output
            next = new lunr.TokenSet
            next.final = final
            frame.output.edges[nEdge] = next
          }

          stack.push({
            qNode: qNode,
            output: next,
            node: node
          })
        }
      }
    }
  }

  return output
}
lunr.TokenSet.Builder = function () {
  this.previousWord = ""
  this.root = new lunr.TokenSet
  this.uncheckedNodes = []
  this.minimizedNodes = {}
}

lunr.TokenSet.Builder.prototype.insert = function (word) {
  var node,
      commonPrefix = 0

  if (word < this.previousWord) {
    throw new Error ("Out of order word insertion")
  }

  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {
    if (word[i] != this.previousWord[i]) break
    commonPrefix++
  }

  this.minimize(commonPrefix)

  if (this.uncheckedNodes.length == 0) {
    node = this.root
  } else {
    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child
  }

  for (var i = commonPrefix; i < word.length; i++) {
    var nextNode = new lunr.TokenSet,
        char = word[i]

    node.edges[char] = nextNode

    this.uncheckedNodes.push({
      parent: node,
      char: char,
      child: nextNode
    })

    node = nextNode
  }

  node.final = true
  this.previousWord = word
}

lunr.TokenSet.Builder.prototype.finish = function () {
  this.minimize(0)
}

lunr.TokenSet.Builder.prototype.minimize = function (downTo) {
  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {
    var node = this.uncheckedNodes[i],
        childKey = node.child.toString()

    if (childKey in this.minimizedNodes) {
      node.parent.edges[node.char] = this.minimizedNodes[childKey]
    } else {
      // Cache the key for this node since
      // we know it can't change anymore
      node.child._str = childKey

      this.minimizedNodes[childKey] = node.child
    }

    this.uncheckedNodes.pop()
  }
}
/*!
 * lunr.Index
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * An index contains the built index of all documents and provides a query interface
 * to the index.
 *
 * Usually instances of lunr.Index will not be created using this constructor, instead
 * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be
 * used to load previously built and serialized indexes.
 *
 * @constructor
 * @param {Object} attrs - The attributes of the built search index.
 * @param {Object} attrs.invertedIndex - An index of term/field to document reference.
 * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors
 * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.
 * @param {string[]} attrs.fields - The names of indexed document fields.
 * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.
 */
lunr.Index = function (attrs) {
  this.invertedIndex = attrs.invertedIndex
  this.fieldVectors = attrs.fieldVectors
  this.tokenSet = attrs.tokenSet
  this.fields = attrs.fields
  this.pipeline = attrs.pipeline
}

/**
 * A result contains details of a document matching a search query.
 * @typedef {Object} lunr.Index~Result
 * @property {string} ref - The reference of the document this result represents.
 * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.
 * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.
 */

/**
 * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple
 * query language which itself is parsed into an instance of lunr.Query.
 *
 * For programmatically building queries it is advised to directly use lunr.Query, the query language
 * is best used for human entered text rather than program generated text.
 *
 * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported
 * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'
 * or 'world', though those that contain both will rank higher in the results.
 *
 * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can
 * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding
 * wildcards will increase the number of documents that will be found but can also have a negative
 * impact on query performance, especially with wildcards at the beginning of a term.
 *
 * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term
 * hello in the title field will match this query. Using a field not present in the index will lead
 * to an error being thrown.
 *
 * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term
 * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported
 * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.
 * Avoid large values for edit distance to improve query performance.
 *
 * Each term also supports a presence modifier. By default a term's presence in document is optional, however
 * this can be changed to either required or prohibited. For a term's presence to be required in a document the
 * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and
 * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not
 * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.
 *
 * To escape special characters the backslash character '\' can be used, this allows searches to include
 * characters that would normally be considered modifiers, e.g. `foo\~2` will search for a term "foo~2" instead
 * of attempting to apply a boost of 2 to the search term "foo".
 *
 * @typedef {string} lunr.Index~QueryString
 * @example <caption>Simple single term query</caption>
 * hello
 * @example <caption>Multiple term query</caption>
 * hello world
 * @example <caption>term scoped to a field</caption>
 * title:hello
 * @example <caption>term with a boost of 10</caption>
 * hello^10
 * @example <caption>term with an edit distance of 2</caption>
 * hello~2
 * @example <caption>terms with presence modifiers</caption>
 * -foo +bar baz
 */

/**
 * Performs a search against the index using lunr query syntax.
 *
 * Results will be returned sorted by their score, the most relevant results
 * will be returned first.  For details on how the score is calculated, please see
 * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.
 *
 * For more programmatic querying use lunr.Index#query.
 *
 * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.
 * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.
 * @returns {lunr.Index~Result[]}
 */
lunr.Index.prototype.search = function (queryString) {
  return this.query(function (query) {
    var parser = new lunr.QueryParser(queryString, query)
    parser.parse()
  })
}

/**
 * A query builder callback provides a query object to be used to express
 * the query to perform on the index.
 *
 * @callback lunr.Index~queryBuilder
 * @param {lunr.Query} query - The query object to build up.
 * @this lunr.Query
 */

/**
 * Performs a query against the index using the yielded lunr.Query object.
 *
 * If performing programmatic queries against the index, this method is preferred
 * over lunr.Index#search so as to avoid the additional query parsing overhead.
 *
 * A query object is yielded to the supplied function which should be used to
 * express the query to be run against the index.
 *
 * Note that although this function takes a callback parameter it is _not_ an
 * asynchronous operation, the callback is just yielded a query object to be
 * customized.
 *
 * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.
 * @returns {lunr.Index~Result[]}
 */
lunr.Index.prototype.query = function (fn) {
  // for each query clause
  // * process terms
  // * expand terms from token set
  // * find matching documents and metadata
  // * get document vectors
  // * score documents

  var query = new lunr.Query(this.fields),
      matchingFields = Object.create(null),
      queryVectors = Object.create(null),
      termFieldCache = Object.create(null),
      requiredMatches = Object.create(null),
      prohibitedMatches = Object.create(null)

  /*
   * To support field level boosts a query vector is created per
   * field. An empty vector is eagerly created to support negated
   * queries.
   */
  for (var i = 0; i < this.fields.length; i++) {
    queryVectors[this.fields[i]] = new lunr.Vector
  }

  fn.call(query, query)

  for (var i = 0; i < query.clauses.length; i++) {
    /*
     * Unless the pipeline has been disabled for this term, which is
     * the case for terms with wildcards, we need to pass the clause
     * term through the search pipeline. A pipeline returns an array
     * of processed terms. Pipeline functions may expand the passed
     * term, which means we may end up performing multiple index lookups
     * for a single query term.
     */
    var clause = query.clauses[i],
        terms = null,
        clauseMatches = lunr.Set.empty

    if (clause.usePipeline) {
      terms = this.pipeline.runString(clause.term, {
        fields: clause.fields
      })
    } else {
      terms = [clause.term]
    }

    for (var m = 0; m < terms.length; m++) {
      var term = terms[m]

      /*
       * Each term returned from the pipeline needs to use the same query
       * clause object, e.g. the same boost and or edit distance. The
       * simplest way to do this is to re-use the clause object but mutate
       * its term property.
       */
      clause.term = term

      /*
       * From the term in the clause we create a token set which will then
       * be used to intersect the indexes token set to get a list of terms
       * to lookup in the inverted index
       */
      var termTokenSet = lunr.TokenSet.fromClause(clause),
          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()

      /*
       * If a term marked as required does not exist in the tokenSet it is
       * impossible for the search to return any matches. We set all the field
       * scoped required matches set to empty and stop examining any further
       * clauses.
       */
      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {
        for (var k = 0; k < clause.fields.length; k++) {
          var field = clause.fields[k]
          requiredMatches[field] = lunr.Set.empty
        }

        break
      }

      for (var j = 0; j < expandedTerms.length; j++) {
        /*
         * For each term get the posting and termIndex, this is required for
         * building the query vector.
         */
        var expandedTerm = expandedTerms[j],
            posting = this.invertedIndex[expandedTerm],
            termIndex = posting._index

        for (var k = 0; k < clause.fields.length; k++) {
          /*
           * For each field that this query term is scoped by (by default
           * all fields are in scope) we need to get all the document refs
           * that have this term in that field.
           *
           * The posting is the entry in the invertedIndex for the matching
           * term from above.
           */
          var field = clause.fields[k],
              fieldPosting = posting[field],
              matchingDocumentRefs = Object.keys(fieldPosting),
              termField = expandedTerm + "/" + field,
              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)

          /*
           * if the presence of this term is required ensure that the matching
           * documents are added to the set of required matches for this clause.
           *
           */
          if (clause.presence == lunr.Query.presence.REQUIRED) {
            clauseMatches = clauseMatches.union(matchingDocumentsSet)

            if (requiredMatches[field] === undefined) {
              requiredMatches[field] = lunr.Set.complete
            }
          }

          /*
           * if the presence of this term is prohibited ensure that the matching
           * documents are added to the set of prohibited matches for this field,
           * creating that set if it does not yet exist.
           */
          if (clause.presence == lunr.Query.presence.PROHIBITED) {
            if (prohibitedMatches[field] === undefined) {
              prohibitedMatches[field] = lunr.Set.empty
            }

            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)

            /*
             * Prohibited matches should not be part of the query vector used for
             * similarity scoring and no metadata should be extracted so we continue
             * to the next field
             */
            continue
          }

          /*
           * The query field vector is populated using the termIndex found for
           * the term and a unit value with the appropriate boost applied.
           * Using upsert because there could already be an entry in the vector
           * for the term we are working with. In that case we just add the scores
           * together.
           */
          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })

          /**
           * If we've already seen this term, field combo then we've already collected
           * the matching documents and metadata, no need to go through all that again
           */
          if (termFieldCache[termField]) {
            continue
          }

          for (var l = 0; l < matchingDocumentRefs.length; l++) {
            /*
             * All metadata for this term/field/document triple
             * are then extracted and collected into an instance
             * of lunr.MatchData ready to be returned in the query
             * results
             */
            var matchingDocumentRef = matchingDocumentRefs[l],
                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),
                metadata = fieldPosting[matchingDocumentRef],
                fieldMatch

            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {
              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)
            } else {
              fieldMatch.add(expandedTerm, field, metadata)
            }

          }

          termFieldCache[termField] = true
        }
      }
    }

    /**
     * If the presence was required we need to update the requiredMatches field sets.
     * We do this after all fields for the term have collected their matches because
     * the clause terms presence is required in _any_ of the fields not _all_ of the
     * fields.
     */
    if (clause.presence === lunr.Query.presence.REQUIRED) {
      for (var k = 0; k < clause.fields.length; k++) {
        var field = clause.fields[k]
        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)
      }
    }
  }

  /**
   * Need to combine the field scoped required and prohibited
   * matching documents into a global set of required and prohibited
   * matches
   */
  var allRequiredMatches = lunr.Set.complete,
      allProhibitedMatches = lunr.Set.empty

  for (var i = 0; i < this.fields.length; i++) {
    var field = this.fields[i]

    if (requiredMatches[field]) {
      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])
    }

    if (prohibitedMatches[field]) {
      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])
    }
  }

  var matchingFieldRefs = Object.keys(matchingFields),
      results = [],
      matches = Object.create(null)

  /*
   * If the query is negated (contains only prohibited terms)
   * we need to get _all_ fieldRefs currently existing in the
   * index. This is only done when we know that the query is
   * entirely prohibited terms to avoid any cost of getting all
   * fieldRefs unnecessarily.
   *
   * Additionally, blank MatchData must be created to correctly
   * populate the results.
   */
  if (query.isNegated()) {
    matchingFieldRefs = Object.keys(this.fieldVectors)

    for (var i = 0; i < matchingFieldRefs.length; i++) {
      var matchingFieldRef = matchingFieldRefs[i]
      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)
      matchingFields[matchingFieldRef] = new lunr.MatchData
    }
  }

  for (var i = 0; i < matchingFieldRefs.length; i++) {
    /*
     * Currently we have document fields that match the query, but we
     * need to return documents. The matchData and scores are combined
     * from multiple fields belonging to the same document.
     *
     * Scores are calculated by field, using the query vectors created
     * above, and combined into a final document score using addition.
     */
    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),
        docRef = fieldRef.docRef

    if (!allRequiredMatches.contains(docRef)) {
      continue
    }

    if (allProhibitedMatches.contains(docRef)) {
      continue
    }

    var fieldVector = this.fieldVectors[fieldRef],
        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),
        docMatch

    if ((docMatch = matches[docRef]) !== undefined) {
      docMatch.score += score
      docMatch.matchData.combine(matchingFields[fieldRef])
    } else {
      var match = {
        ref: docRef,
        score: score,
        matchData: matchingFields[fieldRef]
      }
      matches[docRef] = match
      results.push(match)
    }
  }

  /*
   * Sort the results objects by score, highest first.
   */
  return results.sort(function (a, b) {
    return b.score - a.score
  })
}

/**
 * Prepares the index for JSON serialization.
 *
 * The schema for this JSON blob will be described in a
 * separate JSON schema file.
 *
 * @returns {Object}
 */
lunr.Index.prototype.toJSON = function () {
  var invertedIndex = Object.keys(this.invertedIndex)
    .sort()
    .map(function (term) {
      return [term, this.invertedIndex[term]]
    }, this)

  var fieldVectors = Object.keys(this.fieldVectors)
    .map(function (ref) {
      return [ref, this.fieldVectors[ref].toJSON()]
    }, this)

  return {
    version: lunr.version,
    fields: this.fields,
    fieldVectors: fieldVectors,
    invertedIndex: invertedIndex,
    pipeline: this.pipeline.toJSON()
  }
}

/**
 * Loads a previously serialized lunr.Index
 *
 * @param {Object} serializedIndex - A previously serialized lunr.Index
 * @returns {lunr.Index}
 */
lunr.Index.load = function (serializedIndex) {
  var attrs = {},
      fieldVectors = {},
      serializedVectors = serializedIndex.fieldVectors,
      invertedIndex = Object.create(null),
      serializedInvertedIndex = serializedIndex.invertedIndex,
      tokenSetBuilder = new lunr.TokenSet.Builder,
      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)

  if (serializedIndex.version != lunr.version) {
    lunr.utils.warn("Version mismatch when loading serialised index. Current version of lunr '" + lunr.version + "' does not match serialized index '" + serializedIndex.version + "'")
  }

  for (var i = 0; i < serializedVectors.length; i++) {
    var tuple = serializedVectors[i],
        ref = tuple[0],
        elements = tuple[1]

    fieldVectors[ref] = new lunr.Vector(elements)
  }

  for (var i = 0; i < serializedInvertedIndex.length; i++) {
    var tuple = serializedInvertedIndex[i],
        term = tuple[0],
        posting = tuple[1]

    tokenSetBuilder.insert(term)
    invertedIndex[term] = posting
  }

  tokenSetBuilder.finish()

  attrs.fields = serializedIndex.fields

  attrs.fieldVectors = fieldVectors
  attrs.invertedIndex = invertedIndex
  attrs.tokenSet = tokenSetBuilder.root
  attrs.pipeline = pipeline

  return new lunr.Index(attrs)
}
/*!
 * lunr.Builder
 * Copyright (C) 2020 Oliver Nightingale
 */

/**
 * lunr.Builder performs indexing on a set of documents and
 * returns instances of lunr.Index ready for querying.
 *
 * All configuration of the index is done via the builder, the
 * fields to index, the document reference, the text processing
 * pipeline and document scoring parameters are all set on the
 * builder before indexing.
 *
 * @constructor
 * @property {string} _ref - Internal reference to the document reference field.
 * @property {string[]} _fields - Internal reference to the document fields to index.
 * @property {object} invertedIndex - The inverted index maps terms to document fields.
 * @property {object} documentTermFrequencies - Keeps track of document term frequencies.
 * @property {object} documentLengths - Keeps track of the length of documents added to the index.
 * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.
 * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.
 * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.
 * @property {number} documentCount - Keeps track of the total number of documents indexed.
 * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.
 * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.
 * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.
 * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.
 */
lunr.Builder = function () {
  this._ref = "id"
  this._fields = Object.create(null)
  this._documents = Object.create(null)
  this.invertedIndex = Object.create(null)
  this.fieldTermFrequencies = {}
  this.fieldLengths = {}
  this.tokenizer = lunr.tokenizer
  this.pipeline = new lunr.Pipeline
  this.searchPipeline = new lunr.Pipeline
  this.documentCount = 0
  this._b = 0.75
  this._k1 = 1.2
  this.termIndex = 0
  this.metadataWhitelist = []
}

/**
 * Sets the document field used as the document reference. Every document must have this field.
 * The type of this field in the document should be a string, if it is not a string it will be
 * coerced into a string by calling toString.
 *
 * The default ref is 'id'.
 *
 * The ref should _not_ be changed during indexing, it should be set before any documents are
 * added to the index. Changing it during indexing can lead to inconsistent results.
 *
 * @param {string} ref - The name of the reference field in the document.
 */
lunr.Builder.prototype.ref = function (ref) {
  this._ref = ref
}

/**
 * A function that is used to extract a field from a document.
 *
 * Lunr expects a field to be at the top level of a document, if however the field
 * is deeply nested within a document an extractor function can be used to extract
 * the right field for indexing.
 *
 * @callback fieldExtractor
 * @param {object} doc - The document being added to the index.
 * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.
 * @example <caption>Extracting a nested field</caption>
 * function (doc) { return doc.nested.field }
 */

/**
 * Adds a field to the list of document fields that will be indexed. Every document being
 * indexed should have this field. Null values for this field in indexed documents will
 * not cause errors but will limit the chance of that document being retrieved by searches.
 *
 * All fields should be added before adding documents to the index. Adding fields after
 * a document has been indexed will have no effect on already indexed documents.
 *
 * Fields can be boosted at build time. This allows terms within that field to have more
 * importance when ranking search results. Use a field boost to specify that matches within
 * one field are more important than other fields.
 *
 * @param {string} fieldName - The name of a field to index in all documents.
 * @param {object} attributes - Optional attributes associated with this field.
 * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.
 * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.
 * @throws {RangeError} fieldName cannot contain unsupported characters '/'
 */
lunr.Builder.prototype.field = function (fieldName, attributes) {
  if (/\//.test(fieldName)) {
    throw new RangeError ("Field '" + fieldName + "' contains illegal character '/'")
  }

  this._fields[fieldName] = attributes || {}
}

/**
 * A parameter to tune the amount of field length normalisation that is applied when
 * calculating relevance scores. A value of 0 will completely disable any normalisation
 * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b
 * will be clamped to the range 0 - 1.
 *
 * @param {number} number - The value to set for this tuning parameter.
 */
lunr.Builder.prototype.b = function (number) {
  if (number < 0) {
    this._b = 0
  } else if (number > 1) {
    this._b = 1
  } else {
    this._b = number
  }
}

/**
 * A parameter that controls the speed at which a rise in term frequency results in term
 * frequency saturation. The default value is 1.2. Setting this to a higher value will give
 * slower saturation levels, a lower value will result in quicker saturation.
 *
 * @param {number} number - The value to set for this tuning parameter.
 */
lunr.Builder.prototype.k1 = function (number) {
  this._k1 = number
}

/**
 * Adds a document to the index.
 *
 * Before adding fields to the index the index should have been fully setup, with the document
 * ref and all fields to index already having been specified.
 *
 * The document must have a field name as specified by the ref (by default this is 'id') and
 * it should have all fields defined for indexing, though null or undefined values will not
 * cause errors.
 *
 * Entire documents can be boosted at build time. Applying a boost to a document indicates that
 * this document should rank higher in search results than other documents.
 *
 * @param {object} doc - The document to add to the index.
 * @param {object} attributes - Optional attributes associated with this document.
 * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.
 */
lunr.Builder.prototype.add = function (doc, attributes) {
  var docRef = doc[this._ref],
      fields = Object.keys(this._fields)

  this._documents[docRef] = attributes || {}
  this.documentCount += 1

  for (var i = 0; i < fields.length; i++) {
    var fieldName = fields[i],
        extractor = this._fields[fieldName].extractor,
        field = extractor ? extractor(doc) : doc[fieldName],
        tokens = this.tokenizer(field, {
          fields: [fieldName]
        }),
        terms = this.pipeline.run(tokens),
        fieldRef = new lunr.FieldRef (docRef, fieldName),
        fieldTerms = Object.create(null)

    this.fieldTermFrequencies[fieldRef] = fieldTerms
    this.fieldLengths[fieldRef] = 0

    // store the length of this field for this document
    this.fieldLengths[fieldRef] += terms.length

    // calculate term frequencies for this field
    for (var j = 0; j < terms.length; j++) {
      var term = terms[j]

      if (fieldTerms[term] == undefined) {
        fieldTerms[term] = 0
      }

      fieldTerms[term] += 1

      // add to inverted index
      // create an initial posting if one doesn't exist
      if (this.invertedIndex[term] == undefined) {
        var posting = Object.create(null)
        posting["_index"] = this.termIndex
        this.termIndex += 1

        for (var k = 0; k < fields.length; k++) {
          posting[fields[k]] = Object.create(null)
        }

        this.invertedIndex[term] = posting
      }

      // add an entry for this term/fieldName/docRef to the invertedIndex
      if (this.invertedIndex[term][fieldName][docRef] == undefined) {
        this.invertedIndex[term][fieldName][docRef] = Object.create(null)
      }

      // store all whitelisted metadata about this token in the
      // inverted index
      for (var l = 0; l < this.metadataWhitelist.length; l++) {
        var metadataKey = this.metadataWhitelist[l],
            metadata = term.metadata[metadataKey]

        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {
          this.invertedIndex[term][fieldName][docRef][metadataKey] = []
        }

        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)
      }
    }

  }
}

/**
 * Calculates the average document length for this index
 *
 * @private
 */
lunr.Builder.prototype.calculateAverageFieldLengths = function () {

  var fieldRefs = Object.keys(this.fieldLengths),
      numberOfFields = fieldRefs.length,
      accumulator = {},
      documentsWithField = {}

  for (var i = 0; i < numberOfFields; i++) {
    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
        field = fieldRef.fieldName

    documentsWithField[field] || (documentsWithField[field] = 0)
    documentsWithField[field] += 1

    accumulator[field] || (accumulator[field] = 0)
    accumulator[field] += this.fieldLengths[fieldRef]
  }

  var fields = Object.keys(this._fields)

  for (var i = 0; i < fields.length; i++) {
    var fieldName = fields[i]
    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]
  }

  this.averageFieldLength = accumulator
}

/**
 * Builds a vector space model of every document using lunr.Vector
 *
 * @private
 */
lunr.Builder.prototype.createFieldVectors = function () {
  var fieldVectors = {},
      fieldRefs = Object.keys(this.fieldTermFrequencies),
      fieldRefsLength = fieldRefs.length,
      termIdfCache = Object.create(null)

  for (var i = 0; i < fieldRefsLength; i++) {
    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
        fieldName = fieldRef.fieldName,
        fieldLength = this.fieldLengths[fieldRef],
        fieldVector = new lunr.Vector,
        termFrequencies = this.fieldTermFrequencies[fieldRef],
        terms = Object.keys(termFrequencies),
        termsLength = terms.length


    var fieldBoost = this._fields[fieldName].boost || 1,
        docBoost = this._documents[fieldRef.docRef].boost || 1

    for (var j = 0; j < termsLength; j++) {
      var term = terms[j],
          tf = termFrequencies[term],
          termIndex = this.invertedIndex[term]._index,
          idf, score, scoreWithPrecision

      if (termIdfCache[term] === undefined) {
        idf = lunr.idf(this.invertedIndex[term], this.documentCount)
        termIdfCache[term] = idf
      } else {
        idf = termIdfCache[term]
      }

      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)
      score *= fieldBoost
      score *= docBoost
      scoreWithPrecision = Math.round(score * 1000) / 1000
      // Converts 1.23456789 to 1.234.
      // Reducing the precision so that the vectors take up less
      // space when serialised. Doing it now so that they behave
      // the same before and after serialisation. Also, this is
      // the fastest approach to reducing a number's precision in
      // JavaScript.

      fieldVector.insert(termIndex, scoreWithPrecision)
    }

    fieldVectors[fieldRef] = fieldVector
  }

  this.fieldVectors = fieldVectors
}

/**
 * Creates a token set of all tokens in the index using lunr.TokenSet
 *
 * @private
 */
lunr.Builder.prototype.createTokenSet = function () {
  this.tokenSet = lunr.TokenSet.fromArray(
    Object.keys(this.invertedIndex).sort()
  )
}

/**
 * Builds the index, creating an instance of lunr.Index.
 *
 * This completes the indexing process and should only be called
 * once all documents have been added to the index.
 *
 * @returns {lunr.Index}
 */
lunr.Builder.prototype.build = function () {
  this.calculateAverageFieldLengths()
  this.createFieldVectors()
  this.createTokenSet()

  return new lunr.Index({
    invertedIndex: this.invertedIndex,
    fieldVectors: this.fieldVectors,
    tokenSet: this.tokenSet,
    fields: Object.keys(this._fields),
    pipeline: this.searchPipeline
  })
}

/**
 * Applies a plugin to the index builder.
 *
 * A plugin is a function that is called with the index builder as its context.
 * Plugins can be used to customise or extend the behaviour of the index
 * in some way. A plugin is just a function, that encapsulated the custom
 * behaviour that should be applied when building the index.
 *
 * The plugin function will be called with the index builder as its argument, additional
 * arguments can also be passed when calling use. The function will be called
 * with the index builder as its context.
 *
 * @param {Function} plugin The plugin to apply.
 */
lunr.Builder.prototype.use = function (fn) {
  var args = Array.prototype.slice.call(arguments, 1)
  args.unshift(this)
  fn.apply(this, args)
}
/**
 * Contains and collects metadata about a matching document.
 * A single instance of lunr.MatchData is returned as part of every
 * lunr.Index~Result.
 *
 * @constructor
 * @param {string} term - The term this match data is associated with
 * @param {string} field - The field in which the term was found
 * @param {object} metadata - The metadata recorded about this term in this field
 * @property {object} metadata - A cloned collection of metadata associated with this document.
 * @see {@link lunr.Index~Result}
 */
lunr.MatchData = function (term, field, metadata) {
  var clonedMetadata = Object.create(null),
      metadataKeys = Object.keys(metadata || {})

  // Cloning the metadata to prevent the original
  // being mutated during match data combination.
  // Metadata is kept in an array within the inverted
  // index so cloning the data can be done with
  // Array#slice
  for (var i = 0; i < metadataKeys.length; i++) {
    var key = metadataKeys[i]
    clonedMetadata[key] = metadata[key].slice()
  }

  this.metadata = Object.create(null)

  if (term !== undefined) {
    this.metadata[term] = Object.create(null)
    this.metadata[term][field] = clonedMetadata
  }
}

/**
 * An instance of lunr.MatchData will be created for every term that matches a
 * document. However only one instance is required in a lunr.Index~Result. This
 * method combines metadata from another instance of lunr.MatchData with this
 * objects metadata.
 *
 * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.
 * @see {@link lunr.Index~Result}
 */
lunr.MatchData.prototype.combine = function (otherMatchData) {
  var terms = Object.keys(otherMatchData.metadata)

  for (var i = 0; i < terms.length; i++) {
    var term = terms[i],
        fields = Object.keys(otherMatchData.metadata[term])

    if (this.metadata[term] == undefined) {
      this.metadata[term] = Object.create(null)
    }

    for (var j = 0; j < fields.length; j++) {
      var field = fields[j],
          keys = Object.keys(otherMatchData.metadata[term][field])

      if (this.metadata[term][field] == undefined) {
        this.metadata[term][field] = Object.create(null)
      }

      for (var k = 0; k < keys.length; k++) {
        var key = keys[k]

        if (this.metadata[term][field][key] == undefined) {
          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]
        } else {
          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])
        }

      }
    }
  }
}

/**
 * Add metadata for a term/field pair to this instance of match data.
 *
 * @param {string} term - The term this match data is associated with
 * @param {string} field - The field in which the term was found
 * @param {object} metadata - The metadata recorded about this term in this field
 */
lunr.MatchData.prototype.add = function (term, field, metadata) {
  if (!(term in this.metadata)) {
    this.metadata[term] = Object.create(null)
    this.metadata[term][field] = metadata
    return
  }

  if (!(field in this.metadata[term])) {
    this.metadata[term][field] = metadata
    return
  }

  var metadataKeys = Object.keys(metadata)

  for (var i = 0; i < metadataKeys.length; i++) {
    var key = metadataKeys[i]

    if (key in this.metadata[term][field]) {
      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])
    } else {
      this.metadata[term][field][key] = metadata[key]
    }
  }
}
/**
 * A lunr.Query provides a programmatic way of defining queries to be performed
 * against a {@link lunr.Index}.
 *
 * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method
 * so the query object is pre-initialized with the right index fields.
 *
 * @constructor
 * @property {lunr.Query~Clause[]} clauses - An array of query clauses.
 * @property {string[]} allFields - An array of all available fields in a lunr.Index.
 */
lunr.Query = function (allFields) {
  this.clauses = []
  this.allFields = allFields
}

/**
 * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.
 *
 * This allows wildcards to be added to the beginning and end of a term without having to manually do any string
 * concatenation.
 *
 * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.
 *
 * @constant
 * @default
 * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour
 * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists
 * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists
 * @see lunr.Query~Clause
 * @see lunr.Query#clause
 * @see lunr.Query#term
 * @example <caption>query term with trailing wildcard</caption>
 * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })
 * @example <caption>query term with leading and trailing wildcard</caption>
 * query.term('foo', {
 *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING
 * })
 */

lunr.Query.wildcard = new String ("*")
lunr.Query.wildcard.NONE = 0
lunr.Query.wildcard.LEADING = 1
lunr.Query.wildcard.TRAILING = 2

/**
 * Constants for indicating what kind of presence a term must have in matching documents.
 *
 * @constant
 * @enum {number}
 * @see lunr.Query~Clause
 * @see lunr.Query#clause
 * @see lunr.Query#term
 * @example <caption>query term with required presence</caption>
 * query.term('foo', { presence: lunr.Query.presence.REQUIRED })
 */
lunr.Query.presence = {
  /**
   * Term's presence in a document is optional, this is the default value.
   */
  OPTIONAL: 1,

  /**
   * Term's presence in a document is required, documents that do not contain
   * this term will not be returned.
   */
  REQUIRED: 2,

  /**
   * Term's presence in a document is prohibited, documents that do contain
   * this term will not be returned.
   */
  PROHIBITED: 3
}

/**
 * A single clause in a {@link lunr.Query} contains a term and details on how to
 * match that term against a {@link lunr.Index}.
 *
 * @typedef {Object} lunr.Query~Clause
 * @property {string[]} fields - The fields in an index this clause should be matched against.
 * @property {number} [boost=1] - Any boost that should be applied when matching this clause.
 * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.
 * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.
 * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.
 * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.
 */

/**
 * Adds a {@link lunr.Query~Clause} to this query.
 *
 * Unless the clause contains the fields to be matched all fields will be matched. In addition
 * a default boost of 1 is applied to the clause.
 *
 * @param {lunr.Query~Clause} clause - The clause to add to this query.
 * @see lunr.Query~Clause
 * @returns {lunr.Query}
 */
lunr.Query.prototype.clause = function (clause) {
  if (!('fields' in clause)) {
    clause.fields = this.allFields
  }

  if (!('boost' in clause)) {
    clause.boost = 1
  }

  if (!('usePipeline' in clause)) {
    clause.usePipeline = true
  }

  if (!('wildcard' in clause)) {
    clause.wildcard = lunr.Query.wildcard.NONE
  }

  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {
    clause.term = "*" + clause.term
  }

  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {
    clause.term = "" + clause.term + "*"
  }

  if (!('presence' in clause)) {
    clause.presence = lunr.Query.presence.OPTIONAL
  }

  this.clauses.push(clause)

  return this
}

/**
 * A negated query is one in which every clause has a presence of
 * prohibited. These queries require some special processing to return
 * the expected results.
 *
 * @returns boolean
 */
lunr.Query.prototype.isNegated = function () {
  for (var i = 0; i < this.clauses.length; i++) {
    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {
      return false
    }
  }

  return true
}

/**
 * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}
 * to the list of clauses that make up this query.
 *
 * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion
 * to a token or token-like string should be done before calling this method.
 *
 * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an
 * array, each term in the array will share the same options.
 *
 * @param {object|object[]} term - The term(s) to add to the query.
 * @param {object} [options] - Any additional properties to add to the query clause.
 * @returns {lunr.Query}
 * @see lunr.Query#clause
 * @see lunr.Query~Clause
 * @example <caption>adding a single term to a query</caption>
 * query.term("foo")
 * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>
 * query.term("foo", {
 *   fields: ["title"],
 *   boost: 10,
 *   wildcard: lunr.Query.wildcard.TRAILING
 * })
 * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>
 * query.term(lunr.tokenizer("foo bar"))
 */
lunr.Query.prototype.term = function (term, options) {
  if (Array.isArray(term)) {
    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)
    return this
  }

  var clause = options || {}
  clause.term = term.toString()

  this.clause(clause)

  return this
}
lunr.QueryParseError = function (message, start, end) {
  this.name = "QueryParseError"
  this.message = message
  this.start = start
  this.end = end
}

lunr.QueryParseError.prototype = new Error
lunr.QueryLexer = function (str) {
  this.lexemes = []
  this.str = str
  this.length = str.length
  this.pos = 0
  this.start = 0
  this.escapeCharPositions = []
}

lunr.QueryLexer.prototype.run = function () {
  var state = lunr.QueryLexer.lexText

  while (state) {
    state = state(this)
  }
}

lunr.QueryLexer.prototype.sliceString = function () {
  var subSlices = [],
      sliceStart = this.start,
      sliceEnd = this.pos

  for (var i = 0; i < this.escapeCharPositions.length; i++) {
    sliceEnd = this.escapeCharPositions[i]
    subSlices.push(this.str.slice(sliceStart, sliceEnd))
    sliceStart = sliceEnd + 1
  }

  subSlices.push(this.str.slice(sliceStart, this.pos))
  this.escapeCharPositions.length = 0

  return subSlices.join('')
}

lunr.QueryLexer.prototype.emit = function (type) {
  this.lexemes.push({
    type: type,
    str: this.sliceString(),
    start: this.start,
    end: this.pos
  })

  this.start = this.pos
}

lunr.QueryLexer.prototype.escapeCharacter = function () {
  this.escapeCharPositions.push(this.pos - 1)
  this.pos += 1
}

lunr.QueryLexer.prototype.next = function () {
  if (this.pos >= this.length) {
    return lunr.QueryLexer.EOS
  }

  var char = this.str.charAt(this.pos)
  this.pos += 1
  return char
}

lunr.QueryLexer.prototype.width = function () {
  return this.pos - this.start
}

lunr.QueryLexer.prototype.ignore = function () {
  if (this.start == this.pos) {
    this.pos += 1
  }

  this.start = this.pos
}

lunr.QueryLexer.prototype.backup = function () {
  this.pos -= 1
}

lunr.QueryLexer.prototype.acceptDigitRun = function () {
  var char, charCode

  do {
    char = this.next()
    charCode = char.charCodeAt(0)
  } while (charCode > 47 && charCode < 58)

  if (char != lunr.QueryLexer.EOS) {
    this.backup()
  }
}

lunr.QueryLexer.prototype.more = function () {
  return this.pos < this.length
}

lunr.QueryLexer.EOS = 'EOS'
lunr.QueryLexer.FIELD = 'FIELD'
lunr.QueryLexer.TERM = 'TERM'
lunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'
lunr.QueryLexer.BOOST = 'BOOST'
lunr.QueryLexer.PRESENCE = 'PRESENCE'

lunr.QueryLexer.lexField = function (lexer) {
  lexer.backup()
  lexer.emit(lunr.QueryLexer.FIELD)
  lexer.ignore()
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexTerm = function (lexer) {
  if (lexer.width() > 1) {
    lexer.backup()
    lexer.emit(lunr.QueryLexer.TERM)
  }

  lexer.ignore()

  if (lexer.more()) {
    return lunr.QueryLexer.lexText
  }
}

lunr.QueryLexer.lexEditDistance = function (lexer) {
  lexer.ignore()
  lexer.acceptDigitRun()
  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexBoost = function (lexer) {
  lexer.ignore()
  lexer.acceptDigitRun()
  lexer.emit(lunr.QueryLexer.BOOST)
  return lunr.QueryLexer.lexText
}

lunr.QueryLexer.lexEOS = function (lexer) {
  if (lexer.width() > 0) {
    lexer.emit(lunr.QueryLexer.TERM)
  }
}

// This matches the separator used when tokenising fields
// within a document. These should match otherwise it is
// not possible to search for some tokens within a document.
//
// It is possible for the user to change the separator on the
// tokenizer so it _might_ clash with any other of the special
// characters already used within the search string, e.g. :.
//
// This means that it is possible to change the separator in
// such a way that makes some words unsearchable using a search
// string.
lunr.QueryLexer.termSeparator = lunr.tokenizer.separator

lunr.QueryLexer.lexText = function (lexer) {
  while (true) {
    var char = lexer.next()

    if (char == lunr.QueryLexer.EOS) {
      return lunr.QueryLexer.lexEOS
    }

    // Escape character is '\'
    if (char.charCodeAt(0) == 92) {
      lexer.escapeCharacter()
      continue
    }

    if (char == ":") {
      return lunr.QueryLexer.lexField
    }

    if (char == "~") {
      lexer.backup()
      if (lexer.width() > 0) {
        lexer.emit(lunr.QueryLexer.TERM)
      }
      return lunr.QueryLexer.lexEditDistance
    }

    if (char == "^") {
      lexer.backup()
      if (lexer.width() > 0) {
        lexer.emit(lunr.QueryLexer.TERM)
      }
      return lunr.QueryLexer.lexBoost
    }

    // "+" indicates term presence is required
    // checking for length to ensure that only
    // leading "+" are considered
    if (char == "+" && lexer.width() === 1) {
      lexer.emit(lunr.QueryLexer.PRESENCE)
      return lunr.QueryLexer.lexText
    }

    // "-" indicates term presence is prohibited
    // checking for length to ensure that only
    // leading "-" are considered
    if (char == "-" && lexer.width() === 1) {
      lexer.emit(lunr.QueryLexer.PRESENCE)
      return lunr.QueryLexer.lexText
    }

    if (char.match(lunr.QueryLexer.termSeparator)) {
      return lunr.QueryLexer.lexTerm
    }
  }
}

lunr.QueryParser = function (str, query) {
  this.lexer = new lunr.QueryLexer (str)
  this.query = query
  this.currentClause = {}
  this.lexemeIdx = 0
}

lunr.QueryParser.prototype.parse = function () {
  this.lexer.run()
  this.lexemes = this.lexer.lexemes

  var state = lunr.QueryParser.parseClause

  while (state) {
    state = state(this)
  }

  return this.query
}

lunr.QueryParser.prototype.peekLexeme = function () {
  return this.lexemes[this.lexemeIdx]
}

lunr.QueryParser.prototype.consumeLexeme = function () {
  var lexeme = this.peekLexeme()
  this.lexemeIdx += 1
  return lexeme
}

lunr.QueryParser.prototype.nextClause = function () {
  var completedClause = this.currentClause
  this.query.clause(completedClause)
  this.currentClause = {}
}

lunr.QueryParser.parseClause = function (parser) {
  var lexeme = parser.peekLexeme()

  if (lexeme == undefined) {
    return
  }

  switch (lexeme.type) {
    case lunr.QueryLexer.PRESENCE:
      return lunr.QueryParser.parsePresence
    case lunr.QueryLexer.FIELD:
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.TERM:
      return lunr.QueryParser.parseTerm
    default:
      var errorMessage = "expected either a field or a term, found " + lexeme.type

      if (lexeme.str.length >= 1) {
        errorMessage += " with value '" + lexeme.str + "'"
      }

      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }
}

lunr.QueryParser.parsePresence = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  switch (lexeme.str) {
    case "-":
      parser.currentClause.presence = lunr.Query.presence.PROHIBITED
      break
    case "+":
      parser.currentClause.presence = lunr.Query.presence.REQUIRED
      break
    default:
      var errorMessage = "unrecognised presence operator'" + lexeme.str + "'"
      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    var errorMessage = "expecting term or field, found nothing"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.FIELD:
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.TERM:
      return lunr.QueryParser.parseTerm
    default:
      var errorMessage = "expecting term or field, found '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseField = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  if (parser.query.allFields.indexOf(lexeme.str) == -1) {
    var possibleFields = parser.query.allFields.map(function (f) { return "'" + f + "'" }).join(', '),
        errorMessage = "unrecognised field '" + lexeme.str + "', possible fields: " + possibleFields

    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.fields = [lexeme.str]

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    var errorMessage = "expecting term, found nothing"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      return lunr.QueryParser.parseTerm
    default:
      var errorMessage = "expecting term, found '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseTerm = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  parser.currentClause.term = lexeme.str.toLowerCase()

  if (lexeme.str.indexOf("*") != -1) {
    parser.currentClause.usePipeline = false
  }

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    case lunr.QueryLexer.PRESENCE:
      parser.nextClause()
      return lunr.QueryParser.parsePresence
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseEditDistance = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  var editDistance = parseInt(lexeme.str, 10)

  if (isNaN(editDistance)) {
    var errorMessage = "edit distance must be numeric"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.editDistance = editDistance

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    case lunr.QueryLexer.PRESENCE:
      parser.nextClause()
      return lunr.QueryParser.parsePresence
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

lunr.QueryParser.parseBoost = function (parser) {
  var lexeme = parser.consumeLexeme()

  if (lexeme == undefined) {
    return
  }

  var boost = parseInt(lexeme.str, 10)

  if (isNaN(boost)) {
    var errorMessage = "boost must be numeric"
    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)
  }

  parser.currentClause.boost = boost

  var nextLexeme = parser.peekLexeme()

  if (nextLexeme == undefined) {
    parser.nextClause()
    return
  }

  switch (nextLexeme.type) {
    case lunr.QueryLexer.TERM:
      parser.nextClause()
      return lunr.QueryParser.parseTerm
    case lunr.QueryLexer.FIELD:
      parser.nextClause()
      return lunr.QueryParser.parseField
    case lunr.QueryLexer.EDIT_DISTANCE:
      return lunr.QueryParser.parseEditDistance
    case lunr.QueryLexer.BOOST:
      return lunr.QueryParser.parseBoost
    case lunr.QueryLexer.PRESENCE:
      parser.nextClause()
      return lunr.QueryParser.parsePresence
    default:
      var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'"
      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)
  }
}

  /**
   * export the module via AMD, CommonJS or as a browser global
   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js
   */
  ;(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(factory)
    } else if (typeof exports === 'object') {
      /**
       * Node. Does not work with strict CommonJS, but
       * only CommonJS-like enviroments that support module.exports,
       * like Node.
       */
      module.exports = factory()
    } else {
      // Browser globals (root is window)
      root.lunr = factory()
    }
  }(this, function () {
    /**
     * Just return a value to define the module export.
     * This example returns an object, but the module
     * can return a function as the exported value.
     */
    return lunr
  }))
})();

},{}],2:[function(require,module,exports){
'use strict'; // The following module is dynamically generated
// TODO: Cleanup that shit

var searchIndex = require('./search.index'); // eslint-disable-line


module.exports = searchIndex;
},{"./search.index":3}],3:[function(require,module,exports){
"use strict";var lunr=require('lunr');var documents={doc0:JSON.parse('{"path":"contents/pages/404.html","title":"Nicolas Froidure\'s Homepage","description":"Fullstack JavaScript développer, NodeJS lover, GitHub addict and \\nOSS consumer/contributor.","shortTitle":"Index","shortDesc":"Choose your language","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nOOOPS! 404\\n A gif with pink flamingos saying \\"Wat?\\" [https://media.giphy.com/media/12mPcp41D9a1i0/giphy.gif]\\n\\nTwitter [https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] \\nNPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc1:JSON.parse('{"path":"contents/pages/index.html","title":"Nicolas Froidure\'s Homepage","description":"Fullstack JavaScript développer, NodeJS lover, GitHub addict and \\nOSS consumer/contributor.","shortTitle":"Index","shortDesc":"Choose your language","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nNICOLAS FROIDURE\'S HOMEPAGE\\nWelcome on my home page. I try to write my contents in both english and french\\nso choose your language!\\n\\nTwitter [https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] \\nNPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc2:JSON.parse('{"path":"contents/pages/fr/a_propos.html","title":"À propos de moi","description":"Découvrez mon côté mégalo. Cette description n\'engage que moi et\\n ne saurait être le reflet de l\'avis qu\'ont mes proches de moi :).","shortTitle":"À propos","shortDesc":"Learn more about me","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nA PROPOS DE MOI\\nJe poursuis l’idéal d’une technologie au service de l’homme en mettant en\\npratique des principes éthiques qui me sont chers : écologie, humanisme et\\npartage des connaissances.\\n\\nJ’ai trouvé dans le développement Web et l’IT un moyen simple d’agir sur le\\nmonde de manière positive.\\n\\nJe suis plus particulièrement intéressé par la création de produits innovants et\\nl’open-source, domaines dans lesquels je trouve le plus de sens.\\n\\nSi mon parcours vous intéresse, vous pouvez consulter monprofil LinkedIn\\n[https://www.linkedin.com/in/nfroidure/] que je prends le temps de mettre à jour\\nau fil de mes diverses expériences.\\n\\nJ’ai ouvert ce blog afin de partager mes découvertes, un peu comme un aide\\nmémoire qui peut servir à tous.\\n\\nMon objectif est de parler des fondamentaux architecturaux en premier lieu\\nplutôt que de technologies en particulier. Quand je parle d’une technologie\\nc’est avant tout pour illustrer les concepts qu’elle implémente.\\n\\nJ’espère que vous aurez autant de plaisir à le lire que j’en ai à l’écrire et\\nvous souhaite une bonne lecture !\\n\\n< Accueil [/fr/index.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc3:JSON.parse('{"path":"contents/pages/fr/index.html","title":"Blog d\'un développeur JavaScript/NodeJS à Lille","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Accueil","shortDesc":"Retour à l\'accueil","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBIENVENUE\\nCeci est ma part de Web, vous pouvez y lire un peu de choses sur moi et beaucoup\\nd’autres sur les technologies web et autres geekeries.\\n\\nVous pouvez découvrir mes divers projets [projets.html], lire mes articles de\\nblog [blog/index.html] ou en savoir plus à mon sujet [a_propos.html].\\n\\nLa source de ce site [https://github.com/nfroidure/blog] est publique. Vous êtes\\ndonc invités à participer si vous trouvez des bugs ou des fautes d’orthographe.\\n\\n< Index [/index.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc4:JSON.parse('{"path":"contents/pages/fr/projets.html","title":"Mes projets","description":"Découvrez tous les projets que je mène et qui touchent de près ou de loin au développement web.","shortTitle":"Projets","shortDesc":"Découvrez mes divers projets","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nPROJETS\\nMODULES JAVASCRIPT / NODEJS\\nEn tant qu’amoureux du JavaScript, je maintiens de nombreuses librairies ainsi\\nqu’un bon nombre de modules NodeJS.\\n\\nJe suis particulièrement intéressé par les parseurs (texte ou binaires), les\\nstreams, la création de plugins et d’outils pour simplifier la vie des\\ndéveloppeurses.\\n\\nJ’utilise également intensivement TypeScript, et je me passione pour les\\nlangages comme Rust.\\n\\nAPPLICATIONS WEB\\nPour rester à jour et pour le fun, je crée régulièrement des applications web\\ndont quelques jeux HTML5 :\\n\\n * BeloreRE [https://belote.insertafter.com/] : Jeu de Belote en solo contre\\n   l’IA,\\n * Sumuraÿ [http://sumuray.insertafter.com/] : Jeu de calcul mental où l’on doit\\n   trouver une somme,\\n * Memory [http://memory.insertafter.com/] : Jeu de mémoire,\\n * Break’It [https://breakit.insertafter.com/]: Casse brique WTF.\\n\\nJe crée parfois des apps pendant des hackathons:\\n\\n * Trip Story [https://github.com/nfroidure/TripStory] : Raconter l’histoire de\\n   ses voyages.\\n\\nEt d’autres choses un peu bizarres :\\n\\n * Web MIDI Karaoke player [https://karaoke.insertafter.com/]: Pour faire du\\n   Karaoké comme dans les années 90,\\n * Hexa [https://hexa.insertafter.com/]: éditeur hexadécimal bien pratique pour\\n   voir rapidement un fichier en mode binaire.\\n\\nEXTENSIONS FIREFOX / CHROME / OPÉRA\\nLes dinosaures du web connaissent sûrement quelques-unes des extensions Firefox\\nque j’ai développées et maintenues pendant plusieurs années (KGen\\n[https://github.com/nfroidure/KGen],BBComposer\\n[https://github.com/nfroidure/BBComposer],BugMeBack\\n[https://github.com/nfroidure/BugMeBack] etCanImage\\n[https://github.com/nfroidure/CanImage]).\\n\\nIl y eu aussiCapsKiller\\n[https://addons.mozilla.org/thunderbird/addon/caps-killer/] pour Thunderbird\\n(plus maintenue depuis quelques années).\\n\\nLes versions pour Chrome deBugMeBack\\n[https://chrome.google.com/webstore/detail/bugmeback/hgmagcomobmjhaomdoihiggpdekaehmg?hl=fr]\\netKGen\\n[https://chrome.google.com/webstore/detail/kgen/jkpcelefglapiahikhocfdcigfpaagcl?hl=fr]\\nne sont plus maintenues mais semblent toujours fonctionnelles.\\n\\nMAIS AUSSI\\nVous trouverez sur mon dépôt GitHub [http://github.com/nfroidure] tous les\\nautres projets et travaux que je mets à disposition de la communauté.\\nPrincipalement des bouts de codes qui me sont utiles et qui pourraient profiter\\nà d’autres.\\n\\nVous pouvez également vois mes modules open-source surNPM\\n[https://www.npmjs.org/~nfroidure].\\n\\nRetrouvez également les projets open-source que j’ai créé dans le cadre de mes\\nemplois successifs chezDiagRAMS Technologies\\n[https://github.com/DiagRAMS-Technologies],Sencrop [https://github.com/Sencrop], \\n7Digital [https://github.com/7Digital]et SimpliField\\n[https://github.com/SimpliField].\\n\\n< Accueil [/fr/index.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc5:JSON.parse('{"path":"contents/pages/en/about.html","title":"About Nicolas Froidure","description":"Read how I define myself. My thoughts, not those of my family.","shortTitle":"About","shortDesc":"Learn more about me","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nABOUT\\nI follow an ideal of getting technologies to really help the mankind by putting\\nin practice my ethical principles : ecology, humanism and knowledge sharing.\\n\\nI found in the web and ITs a way to impact the world in a positive manner.\\n\\nI like to invent and share so I am particurlarly interested in creating\\ninnovative products.\\n\\nI’m mainly blogging about web technologies, historically in French, but I try to\\ntranslate the most interesting posts into English. Feel free to add your\\ncomments or to contact me if you want to give me your point of view or ask some\\nexplanations about the content I share here.\\n\\nI wish you’ll find this blog useful and hope to see you soon!\\n\\n< Home [/en/index.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc6:JSON.parse('{"path":"contents/pages/en/index.html","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper","description":"Welcome to my website! Let\'s meet!","shortTitle":"Home","shortDesc":"Back to home","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nWELCOME\\nThis is my piece of Web. It’s a bit about me and a lot about technologies, Web\\nand all that geeky stuffs you’re probably here to read ;).\\n\\nYou can learn more about my projects [projects.html], read my blogs posts\\n[blog/index.html] or even know more about me [about.html].\\n\\nThe source code of this website is actually available on GitHub\\n[https://github.com/nfroidure/blog], feel free to give a hand if you find bugs\\nor grammar fails.\\n\\n< Index [/index.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc7:JSON.parse('{"path":"contents/pages/en/projects.html","title":"Projects","description":"Discover my side projects (web apps, games, add-ons etc.).","shortTitle":"Projects","shortDesc":"Learn more about my projects","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nPROJECTS\\nI’m involved in a lot of different projects from add-ons to games, It’s a good\\nway to stay informed on new development features and improve my skills.\\n\\nI particularily like JavaScript, TypeScript and Rust languages.\\n\\nNODEJS\\nAs an early NodeJS user, I made several modules Ipublished on NPM\\n[https://www.npmjs.org/~nfroidure].\\n\\nIn particular, I like to create JavaScript parsers (CSV, VarStream, SVG…), work\\nwith streams, make plugins and tools for developers.\\n\\nWEB APPS\\nI also build HTML5 games for fun and skills, like:\\n\\n * BeloreRE [https://belote.insertafter.com/]: a simple french card game (close\\n   to the bridge game),\\n * Sumuraÿ [http://sumuray.insertafter.com/]: a simple math game where you must\\n   find sums,\\n * Memory [http://memory.insertafter.com/]: a multiplayer memory game,\\n * Break’It [https://breakit.insertafter.com/]: a WTF breakit game.\\n\\nI sometimes make some apps during hackathons with friends:\\n\\n * Trip Story [https://github.com/nfroidure/TripStory]: a travel app made during\\n   a hackaton.\\n\\nAnd other wierd stuff:\\n\\n * WEB MIDI Karaoke player [https://karaoke.insertafter.com/]: a simple tool to\\n   Karaoke like in the 90’s,\\n * Hexadecimal Editor [https://hexa.insertafter.com/]: a web based hexadecimal\\n   editor.\\n\\nFIREFOX / CHROME / OPERA ADD-ONS\\nIf you are old enough and used to work with SEO/web contents, you may have used\\nsome of my now unmaintained Firefox add-ons (KGen\\n[https://github.com/nfroidure/KGen],BBComposer\\n[https://github.com/nfroidure/BBComposer],BugMeBack\\n[https://github.com/nfroidure/BugMeBack] etCanImage\\n[https://github.com/nfroidure/CanImage]), may they rest in peace.\\n\\nCapsKiller [https://addons.mozilla.org/thunderbird/addon/caps-killer/], a\\nThunderbird add-on, is still alive but no maintenance either.\\n\\nAt the moment, only the Chrome version ofBugMeBack\\n[https://chrome.google.com/webstore/detail/bugmeback/hgmagcomobmjhaomdoihiggpdekaehmg?hl=fr]\\nandKGen\\n[https://chrome.google.com/webstore/detail/kgen/jkpcelefglapiahikhocfdcigfpaagcl?hl=fr]\\nseems live but with no maintenance either.\\n\\nAND MANY MORE\\nYou can get the source of my public projects in my GitHub home\\n[https://github.com/nfroidure].\\n\\nYou can also find open-source projects I made for my successive employers:\\nSencrop [https://github.com/Sencrop], 7Digital [https://github.com/7Digital]and \\nSimpliField [https://github.com/SimpliField].\\n\\n< Home [/en/index.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc8:JSON.parse('{"path":"contents/pages/fr/blog/accelerometre_casse_briques.html","title":"Utilisation de l\'accéléromètre dans le Casse Brique","description":"HTML5 expose via l\'API accelerometer des information sur l\'inclinaison de l\'appareil en fonction des trois axes de l\'espace, utilisons les pour notre Casse brique.","shortTitle":"Accéléromètre et Casse Brique","shortDesc":"En savoir plus sur ce format de donnée que j\'ai créé","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUTILISATION DE L\'ACCÉLÉROMÈTRE DANS LE CASSE BRIQUE\\nHTML5 expose via l\'API accelerometer des information sur l\'inclinaison de\\nl\'appareil en fonction des trois axes de l\'espace, utilisons les pour notre\\nCasse brique.\\n\\nEn effet, il pourrait être intéressant de faire bouger la barre du casse brique\\nen fonction des mouvements du téléphone.\\n\\nJe me suis donc mis à l\'ouvrage et ai commencé à explorer l\'API Accelerometer \\ntrès bien documentée\\n[https://developer.mozilla.org/en-US/docs/Web/API/Detecting_device_orientation]\\npar le Mozilla Developper Network.\\n\\nObtenir les coodonnées de l\'accéléromètre est assez simple. Il suffit d\'ajouter\\nun écouteur d\'évènement sur l\'objet window. On récupère ainsi dans la fonction\\npassée en paramètre les évènements relatifs au changement d\'orientation du\\ntéléphone ou autre appareil contenant un accéléromètre.\\n\\n\\nwindow.addEventListener(\'deviceorientation\', this.orientationHandler.bind(this), true);\\n\\nEn revanche, il est plus compliqué d\'interpréter ces coordonnées. En effet, en\\nfonction de la valeur de event.absolute, le référenciel peut varier. Soit ce\\ndernier est relatif à la position de la terre, soit le référenciel est\\narbitraire (a priori, relatif au périphérique lui même voire à la position\\ninitiale ou à la gravité vu que c\'est un peu le principe de l\'acceleromètre).\\n\\nLes deux coordonnées qui m\'interessent sont les rotations de gauche à droite\\n(pour guider la barre) et l\'inclinaison d\'avant en arrière (pour utiliser le tir\\nlaser ou fusil). Seulement, celles-ci changent selon que le périphérique est en\\nmode paysage ou en mode portrait. J\'ai donc du passer par une détection du mode\\nvia les media queries et la fonction bien pratique matchMedia.\\n\\nAinsi, en mode portrait, la valeur e.beta désigne l\'orientation de gauche à\\ndroite et la valeur e.gamma celle d\'avant en arrière et inversement en mode\\npaysage.\\n\\nJ\'aurai pu utiliser l\'axe e.alpha pour déterminer l\'orientation de l\'appareil,\\nmais il semble que tous les navigateurs ont leurs propres coordonnées limites et\\ncela pose donc un problème évident de détection. Voilà ma fonction finale que\\nvous retrouvez dans ce commit\\n[https://github.com/nfroidure/Breakit/commit/3fa71a35035a7289d2a67baf1786a81a0d13a4bc]\\n:\\n\\n\\norientationHandler : function(e) {\\n var portrait=(window.matchMedia&&window.matchMedia(\'(orientation: portrait)\').matches);\\n if((portrait&&e.beta<50)||((!portrait)&&(e.gamma<0&&e.gamma>-50)))\\n this.bar.fire();\\n if((portrait&&e.gamma<-15)||((!portrait)&&e.beta<-10))\\n this.bar.setDirection(-1);\\n else if((portrait&&e.gamma>15)||((!portrait)&&e.beta>10))\\n this.bar.setDirection(1);\\n else\\n this.bar.setDirection(0);\\n },\\n\\nCette dernière se contente de modifier la direction prise par la barre en\\nfonction de l\'orientation. Elle fonctionne bien sur mon Galaxy S3 mais je n\'ai\\npas d\'autre appareil pour tester la compatibilité sur d\'autres périphériques.\\nN\'hésitez donc pas à me relater vos éventuels problèmes voire à proposer vos\\ncommits. Bon jeu ! [http://breakit.insertafter.com/index.html]\\n\\nJ\'oubliais, puisqu\'un malheur n\'arrive jamais seul, j\'ai ajouté un goodie qui\\ninverse les contrôles (et donc l\'accéléromètre), attention de bien éviter ce\\ndernier, à moins que vous n\'aimiez la difficulté ;). Tout est dans ce commit\\n[https://github.com/nfroidure/Breakit/commit/413b87edbd35e75b8b7101021ab0126be0678c52]\\n.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc9:JSON.parse('{"path":"contents/pages/articles-accelerometre_casse_briques.html","title":"Utilisation de l\'accéléromètre dans le Casse Brique","description":"HTML5 expose via l\'API accelerometer des information sur l\'inclinaison de l\'appareil en fonction des trois axes de l\'espace, utilisons les pour notre Casse brique.","shortTitle":"Accéléromètre et Casse Brique","shortDesc":"En savoir plus sur ce format de donnée que j\'ai créé","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUTILISATION DE L\'ACCÉLÉROMÈTRE DANS LE CASSE BRIQUE\\nHTML5 expose via l\'API accelerometer des information sur l\'inclinaison de\\nl\'appareil en fonction des trois axes de l\'espace, utilisons les pour notre\\nCasse brique.\\n\\nEn effet, il pourrait être intéressant de faire bouger la barre du casse brique\\nen fonction des mouvements du téléphone.\\n\\nJe me suis donc mis à l\'ouvrage et ai commencé à explorer l\'API Accelerometer \\ntrès bien documentée\\n[https://developer.mozilla.org/en-US/docs/Web/API/Detecting_device_orientation]\\npar le Mozilla Developper Network.\\n\\nObtenir les coodonnées de l\'accéléromètre est assez simple. Il suffit d\'ajouter\\nun écouteur d\'évènement sur l\'objet window. On récupère ainsi dans la fonction\\npassée en paramètre les évènements relatifs au changement d\'orientation du\\ntéléphone ou autre appareil contenant un accéléromètre.\\n\\n\\nwindow.addEventListener(\'deviceorientation\', this.orientationHandler.bind(this), true);\\n\\nEn revanche, il est plus compliqué d\'interpréter ces coordonnées. En effet, en\\nfonction de la valeur de event.absolute, le référenciel peut varier. Soit ce\\ndernier est relatif à la position de la terre, soit le référenciel est\\narbitraire (a priori, relatif au périphérique lui même voire à la position\\ninitiale ou à la gravité vu que c\'est un peu le principe de l\'acceleromètre).\\n\\nLes deux coordonnées qui m\'interessent sont les rotations de gauche à droite\\n(pour guider la barre) et l\'inclinaison d\'avant en arrière (pour utiliser le tir\\nlaser ou fusil). Seulement, celles-ci changent selon que le périphérique est en\\nmode paysage ou en mode portrait. J\'ai donc du passer par une détection du mode\\nvia les media queries et la fonction bien pratique matchMedia.\\n\\nAinsi, en mode portrait, la valeur e.beta désigne l\'orientation de gauche à\\ndroite et la valeur e.gamma celle d\'avant en arrière et inversement en mode\\npaysage.\\n\\nJ\'aurai pu utiliser l\'axe e.alpha pour déterminer l\'orientation de l\'appareil,\\nmais il semble que tous les navigateurs ont leurs propres coordonnées limites et\\ncela pose donc un problème évident de détection. Voilà ma fonction finale que\\nvous retrouvez dans ce commit\\n[https://github.com/nfroidure/Breakit/commit/3fa71a35035a7289d2a67baf1786a81a0d13a4bc]\\n:\\n\\n\\norientationHandler : function(e) {\\n var portrait=(window.matchMedia&&window.matchMedia(\'(orientation: portrait)\').matches);\\n if((portrait&&e.beta<50)||((!portrait)&&(e.gamma<0&&e.gamma>-50)))\\n this.bar.fire();\\n if((portrait&&e.gamma<-15)||((!portrait)&&e.beta<-10))\\n this.bar.setDirection(-1);\\n else if((portrait&&e.gamma>15)||((!portrait)&&e.beta>10))\\n this.bar.setDirection(1);\\n else\\n this.bar.setDirection(0);\\n },\\n\\nCette dernière se contente de modifier la direction prise par la barre en\\nfonction de l\'orientation. Elle fonctionne bien sur mon Galaxy S3 mais je n\'ai\\npas d\'autre appareil pour tester la compatibilité sur d\'autres périphériques.\\nN\'hésitez donc pas à me relater vos éventuels problèmes voire à proposer vos\\ncommits. Bon jeu ! [http://breakit.insertafter.com/index.html]\\n\\nJ\'oubliais, puisqu\'un malheur n\'arrive jamais seul, j\'ai ajouté un goodie qui\\ninverse les contrôles (et donc l\'accéléromètre), attention de bien éviter ce\\ndernier, à moins que vous n\'aimiez la difficulté ;). Tout est dans ce commit\\n[https://github.com/nfroidure/Breakit/commit/413b87edbd35e75b8b7101021ab0126be0678c52]\\n.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc10:JSON.parse('{"path":"contents/pages/fr/blog/ameliration_casse_brique.html","title":"Amélioration d\'un casse brique","description":"J\'ai cliqué via Twitter sur un lien vers un casse brique en développement. Il avait des problèmes de performance étonnants. J\'y ai mis mon grain de sel.","shortTitle":"Amélioration d\'un casse brique","shortDesc":"En savoir plus sur les modifs.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nAMÉLIORATION D\'UN CASSE-BRIQUE\\n⚠ Attention: Cet article est ancien et ne correspond pas à l\'état de l\'art de la\\ncréation de casse briques pour le navigateur.\\n\\nJ\'ai cliqué via Twitter sur un lien vers un casse-brique en développement. Il\\navait des problèmes de performance étonnants. J\'y ai mis mon grain de sel.\\n\\nUn casse-brique en création [https://github.com/jonathankowalski/CasseBriques]a\\ndonné du fil à retordre à mon CPU. Cela était assez étrange car pour l\'instant,\\nil n\'y avait que la barre et une balle qui se baladait. Rien ne justifiant ce\\nproblème de perf.\\n\\nCasse brique [/images/breakit.png]\\n\\nAprès un petit coup d\'œil sur la source, je me suis rendu compte qu\'il y avait\\nplusieurs problèmes de conception. Le premier était évident. À chaque boucle de\\njeu, le canvas était entièrement redessiné ce qui provoquait un écriture\\nrègulière de nombreux pixels blancs.\\n\\nPour pallier ce problème, j\'ai renforcé le modèle objet du petit jeu en\\ndéléguant à chaque objet la responsabilité d\'effacer sa précédente impression\\navant de s\'imprimer de nouveau.\\n\\nPour la gestion de la barre, le précédent programme écoutait l\'évènement\\nonmousemove, mettait à jour les coordonnées et la barre s\'affichait\\nperpétuellement dans la boucle principale du jeu. J\'ai connecté directement le\\ngestionnaire d\'évènement à la méthode d\'impression de la barre permettant un\\naffichage uniquement en cas de changement de coordonnées.\\n\\nLe jeu est maintenant très fluide et j\'espère que son créateur sera content de\\nmes petites modifications. C\'est la magie de GitHub, on peut participer à des\\nprojets de manière épisodique et faire avancer le schmilbick ! Cela m\'a pris une\\nheure ou deux et j\'imagine que ça peut relancer le projet de ce développeur.\\nJ\'ai bien sûr fait un pull request\\n[https://github.com/jonathankowalski/CasseBriques/pull/1].\\n\\nJ\'ai aussi rendu le jeu flexible, il suffit d\'instancier un object Game en\\npassant un élément HTML à son constructeur pour que le jeu s\'affiche dedans et\\ns\'adapte à la taille que cet élément permet d\'exploiter.\\n\\nIl reste à créer une méthode de génération de briques s\'adaptant à la taille et\\nà gérer les collisions pour avoir un jeu jouable (j\'ai aussi implémenté le\\nrebond sur la barre). Je n\'en ai pas le temps maintenant, mais pourquoi pas plus\\ntard. À moins que vous ne le fassiez avant moi !\\n\\nInformation : Finalement, j\'ai directement créé un tutoriel complet pour la\\ncréation d\'un casse-brique [html5_casse_brique.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc11:JSON.parse('{"path":"contents/pages/articles-ameliration_casse_brique.html","title":"Amélioration d\'un casse brique","description":"J\'ai cliqué via Twitter sur un lien vers un casse brique en développement. Il avait des problèmes de performance étonnants. J\'y ai mis mon grain de sel.","shortTitle":"Amélioration d\'un casse brique","shortDesc":"En savoir plus sur les modifs.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nAMÉLIORATION D\'UN CASSE-BRIQUE\\n⚠ Attention: Cet article est ancien et ne correspond pas à l\'état de l\'art de la\\ncréation de casse briques pour le navigateur.\\n\\nJ\'ai cliqué via Twitter sur un lien vers un casse-brique en développement. Il\\navait des problèmes de performance étonnants. J\'y ai mis mon grain de sel.\\n\\nUn casse-brique en création [https://github.com/jonathankowalski/CasseBriques]a\\ndonné du fil à retordre à mon CPU. Cela était assez étrange car pour l\'instant,\\nil n\'y avait que la barre et une balle qui se baladait. Rien ne justifiant ce\\nproblème de perf.\\n\\nCasse brique [/images/breakit.png]\\n\\nAprès un petit coup d\'œil sur la source, je me suis rendu compte qu\'il y avait\\nplusieurs problèmes de conception. Le premier était évident. À chaque boucle de\\njeu, le canvas était entièrement redessiné ce qui provoquait un écriture\\nrègulière de nombreux pixels blancs.\\n\\nPour pallier ce problème, j\'ai renforcé le modèle objet du petit jeu en\\ndéléguant à chaque objet la responsabilité d\'effacer sa précédente impression\\navant de s\'imprimer de nouveau.\\n\\nPour la gestion de la barre, le précédent programme écoutait l\'évènement\\nonmousemove, mettait à jour les coordonnées et la barre s\'affichait\\nperpétuellement dans la boucle principale du jeu. J\'ai connecté directement le\\ngestionnaire d\'évènement à la méthode d\'impression de la barre permettant un\\naffichage uniquement en cas de changement de coordonnées.\\n\\nLe jeu est maintenant très fluide et j\'espère que son créateur sera content de\\nmes petites modifications. C\'est la magie de GitHub, on peut participer à des\\nprojets de manière épisodique et faire avancer le schmilbick ! Cela m\'a pris une\\nheure ou deux et j\'imagine que ça peut relancer le projet de ce développeur.\\nJ\'ai bien sûr fait un pull request\\n[https://github.com/jonathankowalski/CasseBriques/pull/1].\\n\\nJ\'ai aussi rendu le jeu flexible, il suffit d\'instancier un object Game en\\npassant un élément HTML à son constructeur pour que le jeu s\'affiche dedans et\\ns\'adapte à la taille que cet élément permet d\'exploiter.\\n\\nIl reste à créer une méthode de génération de briques s\'adaptant à la taille et\\nà gérer les collisions pour avoir un jeu jouable (j\'ai aussi implémenté le\\nrebond sur la barre). Je n\'en ai pas le temps maintenant, mais pourquoi pas plus\\ntard. À moins que vous ne le fassiez avant moi !\\n\\nInformation : Finalement, j\'ai directement créé un tutoriel complet pour la\\ncréation d\'un casse-brique [html5_casse_brique.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc12:JSON.parse('{"path":"contents/pages/fr/blog/animations_css3.html","title":"Les animations sur les sites web en 2013","description":"On a d\'abord connu les animations avec Flash, puis les animations sans Flash grâce aux frameworks JavaScript. Aujourd\'hui, ce sont les animations CSS3 qui occupent le devant de la scène et, a priori, ça va durer.","shortTitle":"Les animations CSS3","shortDesc":"En savoir plus sur les bonnes pratiques pour les animations CSS3","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES ANIMATIONS SUR LES SITES WEB EN 2013\\nOn a d\'abord connu les animations avec Flash, puis les animations sans Flash\\ngrâce aux frameworks JavaScript. Aujourd\'hui, ce sont les animations CSS3 qui\\noccupent le devant de la scène et, a priori, ça va durer.\\n\\nCe billet est la filiation directe de mon article sur les polyfills et leur\\nutilisation [polyfill_or_not.html]. Dans ce dernier, j\'explique pourquoi je ne\\nsuis pas passé au doctype HTML5 pour les sites web classiques comme les sites\\nvitrines ou les sites web e-commerce. Pour résumer : parce que je n\'en ai pas\\nbesoin pour faire ce type de sites. Pourquoi alourdir mes pages et impacter\\nleurs performances pour des balises qui ne sont pas essentielles pour le\\nbusiness de mes clients ?\\n\\nAVEC CSS PAS DE PROBLÈME !\\nEn revanche, si il y a bien des nouveautés que j\'utilise dès leur parution, ce\\nsont les CSS. En effet, la façon dont fonctionnent les CSS depuis leur création\\npermet d\'utiliser des fonctionnalités supplémentaires sans casser le site sur\\nles anciens navigateurs (petit bémol pour le layout, on aimerait tous dès\\nmaintenant travailler avec le modèle de boîte flexbox :D). Aujourd\'hui, j\'ai\\nenvie de vous parler de mon approche des animations CSS3 par la construction\\nd\'une destion d\'affichage animé polyvalente.\\n\\nANIMATIONS CSS3 OU ANIMATIONS JAVASCRIPT ?\\nMon approche est la suivante : un affichage animé n\'est utile que s\'il est\\nfluide. Or, la fluidité d\'une animation est fonction de l\'ordinateur utilisé :\\n\\n * si l\'utilisateur a navigateur moderne, l\'animation sera fluide car les\\n   animations CSS3 sont performantes, \\n * si l\'utilisateur a navigateur ancien (Internet Explorer), il aura un PC\\n   ancien. Proposer des animations JavaScript sera très certainement lent car\\n   son PC est vieux et sont navigateur peu performant (pas d\'accellération\\n   matérielle, moteur JavaScript à la ramasse). \\n\\nConclusion : les animations Javascript sont une mauvaise chose puisqu\'en l\'état\\nactuel des choses, elle ne font que dégrader l\'expérience des utilisateurs :\\n\\n * ceux de navigateurs modernes car elles sous-performent les animations CSS3, \\n * ceux des anciens navigateurs car elles ne sont pas adaptées à ses conditions\\n   de navigation. \\n\\nIMPLÉMENTATION DE NOTRE AFFICHAGE POLYVALENT\\nL\'idée est de pouvoir faire aussi bien un carousel, qu\'un système d\'onglet,\\nqu\'une pagination simple ou un simple affichage tournant. Il y a beaucoup de\\nsimilarités entre ces quatre types d\'affichage que nous allons factoriser. Par\\nla suite, je parlerai de carousel pour simplifier.\\n\\nLE CHOIX DES ARMES\\nNous sommes partis pour créer un carousel avec les animations CSS3. De quoi\\navons nous besoin ?\\n\\n * d\'un peu d\'HTML : nous avons besoin de définir un certain markup que nous\\n   allons utiliser pour délimiter notre carousel, \\n * d\'un peu de Javascript : nous ne pouvons pas encore faire de carousel\\n   vraiment propre et accessible avec CSS uniquement, il va nous falloir un peu\\n   de JavaScript. \\n * de CSS3 pour faire nos animations.\\n\\nBALISAGE HTML\\nNotre carousel sera composé de :\\n\\n * pages composant le contenu du carousel\\n * boutons suivant et précédent\\n * boutons vers chaque partie du carousel\\n\\nComme dit précédemment, ce balisage ressemble fortement au balisage :\\n\\n * d\'un système d\'onglet comme on en voit beaucoup sur les fiches de produits\\n   e-commerce, il nous suffit de retirer les boutons suivant et précédent, \\n * d\'une galerie d\'image avec les boutons suivants et précédent (le menu pouvant\\n   être des miniatures ou simplement supprimé), \\n * d\'un simple affichage tournant (une liste de photos apparaissant à intervalle\\n   régulier). \\n\\nSi je résume, seules les pages de contenu de notre carousel seront vraiment\\nnécessaires, le reste des balises dépendra de l\'utilisation que nous ferons de\\nnotre carousel devenu une sorte de couteau suisse de l\'affichage web. Voici le\\nHTML que je vous propose :\\n\\n<div class=\\"carbox\\">\\n <ul class=\\"carnav\\"> \\n <li><a href=\\"#paneln\\" title=\\"Voir le panel précédent\\">Précédent</a></li>\\n <li class=\\"selected\\"><a href=\\"#panel1\\" title=\\"Voir le panel 1\\">Panel 1</a></li>\\n <li><a href=\\"#panel1\\" title=\\"Voir le panel 2\\">Panel 2</a></li>\\n <li><a href=\\"#paneln\\" title=\\"Voir le panel n\\">Panel n</a></li> \\n <li><a href=\\"#panel2\\" title=\\"Voir le panel suivant\\">Suivant</a></li>\\n </ul>\\n <div class=\\"carpanel selected\\" id=\\"carpanel1\\">\\n Panel 1\\n </div>\\n <div class=\\"carpanel\\" id=\\"carpanel1\\">\\n Panel 2\\n </div>\\n <div class=\\"carpanel\\" id=\\"carpaneln\\">\\n Panel n\\n </div>\\n</div>\\n\\nVous remarquez que le balisage est basé sur les classes. J\'ai souhaité avoir un\\nmodèle le plus souple possible de manière à pouvoir simplement mettre des\\nclasses sur du contenu existant. Vous avez peut-être aussi remarqué que les\\nboutons suivant et précédent son dans la même liste que les boutons\\ncorrespondant à chaque item. Ils pourront en réalité être indifféremment\\nregroupés ou séparés, mais pour ce billet, j\'ai simplifié. Le carousel est\\ninitialisé à un état initial donné.\\n\\nCODE JAVASCRIPT\\nVenons-en au JavaScript. Si je fais la liste de ce dont nous avons besoin :\\n\\n * ajouter des évènements sur les liens pour afficher les panels sélectionnés. \\n * manipuler le DOM (insérer des éléments, ajouter des classes).\\n * changer l\'affichage automatiquement au delà d\'un certain délai. \\n\\nLes seuls problèmes de compatibilité que je vois (même pour IE6 et 7) sont :\\nl\'ajout d\'évènements (IE<8 utilise attachEvent) et un petit\\ngetElementsByClassName. Autant dire que ça ne sert pas à grand chose de\\ns\'embarasser de ko de librairies superflues. Je vais donc m\'orienter vers\\nMooTools qui propose de télécharger uniquement ce dont on a besoin\\n[https://mootools.net/core]. J\'ai donc fait mes amplettes en sélectionnant\\nDomReady (avec toutes ses dépendances, notamment les events et les selecteurs)\\net les classes (j\'aime bien le confort qu\'elles apportent par rapport à\\nl\'héritage et notre code sera donc extensible plus facilement).\\n\\nIl y a quelques petites choses vraiment importantes quand on implémente un\\ncarousel :\\n\\n * il faut arrêter le carousel quand la souris est au dessus de lui : pour cela\\n   nous avons créé des fonctions resumer/pause qui permettrons d\'obtenir ce\\n   comportement. MooTools propose des évènements personnalisés appelés\\n   mouseenter et mouseleave qui permettent d\'obtenir exactement ce comportement\\n   [https://github.com/nfroidure/KissIsKool/blob/master/webdisplay.js#L21]. \\n * il faut arrêter le carousel aussi quand un des éléments de ce dernier obtient\\n   le focus, pour ce faire, nous devons ajouter un écouteur d\'évènement en\\n   prenant bien garde de mettre true pour le troisième argument\\n   [https://github.com/nfroidure/KissIsKool/blob/master/webdisplay.js#L23](mode\\n   capture) qui permet de capturer l\'évènement pour les noeuds enfants. \\n * il faut prendre en compte les hashs de manière à ce que si une personne\\n   visitant le site décide de trasnmettre le lien à une autre personnes,\\n   celle-ci puisse se retrouver sur le même contenu que lui. \\n\\nLe script que je propose gère tous ces aspects plus un directement lié aux\\nanimations. En effet, nous allons avoir besoin de savoir quel est l\'onglet\\nsélectionné grâce à une classe selected, mais aussi, celui qui vient juste\\nd\'être déselectionné, grâce à une classe unselected. Ainsi, nous pourrons animer\\nrespectivement l\'apparition et la disparition de ces deux éléments.\\n\\nANIMATIONS CSS3\\nNous voilà maintenant sur le terrain des animations. J\'ai fait une page\\nd\'exemple\\n[http://htmlpreview.github.io/?https://github.com/nfroidure/KissIsKool/blob/master/webdisplay.html]\\npour vous montrer quelques possibilités d\'animation. La principale difficulté\\nest que l\'on a deux contenus qui cohabitent dans la même zone : l\'onglet\\nsélectionné et celui qui vient de disparaître. Il faut donc les superposer pour\\nque le visiteur puisse voir au même endroit la disparition et l\'apparition.\\n\\nJ\'ai choisi pour cela de jouer avec position:absolute; et les z-index. De cette\\nmanière, j\'ai pu créer des animations de plusieurs genre sans problème. La\\ncontrainte est que la hauteur et la largeur doivent être fixes. Comme ce sont\\ndes exemples, je n\'en ai pas fait cas, mais une solution semble plus appropriée\\navec l\'inconvénient d\'alourdir le balisage : inclure les ognlets dans un wrapper\\nen position relative de hauteur égale à 0 et avec l\'overflow visisible. Comme\\nles éléments en position relative gardent la largeur de leur parent, on pourra\\nainsi créer un carousel à taille variable. Pour que le parent prenne tout de\\nmême la hauteur de ses enfants, une solution est de ne pas mettre de hauteur\\négale à 0 uniquement pour l\'onglet actuellement sélectionné.\\n\\nCONCLUSION\\nA mon sens, l\'ère du Javascript d\'animation est bel et bien révolue, du moins,\\npour des éléments HTML sur des sites vitrine, d\'information ou e-commerce. CSS3\\nnous offre une alternative bien plus efficace. Je vais donc petit à petit\\nconvertir mes scripts MooTools pour ne plus manipuler que des classes et en\\nfinir avec les classes de type Fx qui pour moi devraient même être retirées de\\nMooTools Core.\\n\\nCes derniers seront ajoutés au fur et à mesure sur le dépôt créé pour l\'occasion\\n[https://github.com/nfroidure/KissIsKool]et appelé KissIsKool. Vos commentaires\\net pull request sont les bienvenus.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc13:JSON.parse('{"path":"contents/pages/articles-animations_css3.html","title":"Les animations sur les sites web en 2013","description":"On a d\'abord connu les animations avec Flash, puis les animations sans Flash grâce aux frameworks JavaScript. Aujourd\'hui, ce sont les animations CSS3 qui occupent le devant de la scène et, a priori, ça va durer.","shortTitle":"Les animations CSS3","shortDesc":"En savoir plus sur les bonnes pratiques pour les animations CSS3","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES ANIMATIONS SUR LES SITES WEB EN 2013\\nOn a d\'abord connu les animations avec Flash, puis les animations sans Flash\\ngrâce aux frameworks JavaScript. Aujourd\'hui, ce sont les animations CSS3 qui\\noccupent le devant de la scène et, a priori, ça va durer.\\n\\nCe billet est la filiation directe de mon article sur les polyfills et leur\\nutilisation [polyfill_or_not.html]. Dans ce dernier, j\'explique pourquoi je ne\\nsuis pas passé au doctype HTML5 pour les sites web classiques comme les sites\\nvitrines ou les sites web e-commerce. Pour résumer : parce que je n\'en ai pas\\nbesoin pour faire ce type de sites. Pourquoi alourdir mes pages et impacter\\nleurs performances pour des balises qui ne sont pas essentielles pour le\\nbusiness de mes clients ?\\n\\nAVEC CSS PAS DE PROBLÈME !\\nEn revanche, si il y a bien des nouveautés que j\'utilise dès leur parution, ce\\nsont les CSS. En effet, la façon dont fonctionnent les CSS depuis leur création\\npermet d\'utiliser des fonctionnalités supplémentaires sans casser le site sur\\nles anciens navigateurs (petit bémol pour le layout, on aimerait tous dès\\nmaintenant travailler avec le modèle de boîte flexbox :D). Aujourd\'hui, j\'ai\\nenvie de vous parler de mon approche des animations CSS3 par la construction\\nd\'une destion d\'affichage animé polyvalente.\\n\\nANIMATIONS CSS3 OU ANIMATIONS JAVASCRIPT ?\\nMon approche est la suivante : un affichage animé n\'est utile que s\'il est\\nfluide. Or, la fluidité d\'une animation est fonction de l\'ordinateur utilisé :\\n\\n * si l\'utilisateur a navigateur moderne, l\'animation sera fluide car les\\n   animations CSS3 sont performantes, \\n * si l\'utilisateur a navigateur ancien (Internet Explorer), il aura un PC\\n   ancien. Proposer des animations JavaScript sera très certainement lent car\\n   son PC est vieux et sont navigateur peu performant (pas d\'accellération\\n   matérielle, moteur JavaScript à la ramasse). \\n\\nConclusion : les animations Javascript sont une mauvaise chose puisqu\'en l\'état\\nactuel des choses, elle ne font que dégrader l\'expérience des utilisateurs :\\n\\n * ceux de navigateurs modernes car elles sous-performent les animations CSS3, \\n * ceux des anciens navigateurs car elles ne sont pas adaptées à ses conditions\\n   de navigation. \\n\\nIMPLÉMENTATION DE NOTRE AFFICHAGE POLYVALENT\\nL\'idée est de pouvoir faire aussi bien un carousel, qu\'un système d\'onglet,\\nqu\'une pagination simple ou un simple affichage tournant. Il y a beaucoup de\\nsimilarités entre ces quatre types d\'affichage que nous allons factoriser. Par\\nla suite, je parlerai de carousel pour simplifier.\\n\\nLE CHOIX DES ARMES\\nNous sommes partis pour créer un carousel avec les animations CSS3. De quoi\\navons nous besoin ?\\n\\n * d\'un peu d\'HTML : nous avons besoin de définir un certain markup que nous\\n   allons utiliser pour délimiter notre carousel, \\n * d\'un peu de Javascript : nous ne pouvons pas encore faire de carousel\\n   vraiment propre et accessible avec CSS uniquement, il va nous falloir un peu\\n   de JavaScript. \\n * de CSS3 pour faire nos animations.\\n\\nBALISAGE HTML\\nNotre carousel sera composé de :\\n\\n * pages composant le contenu du carousel\\n * boutons suivant et précédent\\n * boutons vers chaque partie du carousel\\n\\nComme dit précédemment, ce balisage ressemble fortement au balisage :\\n\\n * d\'un système d\'onglet comme on en voit beaucoup sur les fiches de produits\\n   e-commerce, il nous suffit de retirer les boutons suivant et précédent, \\n * d\'une galerie d\'image avec les boutons suivants et précédent (le menu pouvant\\n   être des miniatures ou simplement supprimé), \\n * d\'un simple affichage tournant (une liste de photos apparaissant à intervalle\\n   régulier). \\n\\nSi je résume, seules les pages de contenu de notre carousel seront vraiment\\nnécessaires, le reste des balises dépendra de l\'utilisation que nous ferons de\\nnotre carousel devenu une sorte de couteau suisse de l\'affichage web. Voici le\\nHTML que je vous propose :\\n\\n<div class=\\"carbox\\">\\n <ul class=\\"carnav\\"> \\n <li><a href=\\"#paneln\\" title=\\"Voir le panel précédent\\">Précédent</a></li>\\n <li class=\\"selected\\"><a href=\\"#panel1\\" title=\\"Voir le panel 1\\">Panel 1</a></li>\\n <li><a href=\\"#panel1\\" title=\\"Voir le panel 2\\">Panel 2</a></li>\\n <li><a href=\\"#paneln\\" title=\\"Voir le panel n\\">Panel n</a></li> \\n <li><a href=\\"#panel2\\" title=\\"Voir le panel suivant\\">Suivant</a></li>\\n </ul>\\n <div class=\\"carpanel selected\\" id=\\"carpanel1\\">\\n Panel 1\\n </div>\\n <div class=\\"carpanel\\" id=\\"carpanel1\\">\\n Panel 2\\n </div>\\n <div class=\\"carpanel\\" id=\\"carpaneln\\">\\n Panel n\\n </div>\\n</div>\\n\\nVous remarquez que le balisage est basé sur les classes. J\'ai souhaité avoir un\\nmodèle le plus souple possible de manière à pouvoir simplement mettre des\\nclasses sur du contenu existant. Vous avez peut-être aussi remarqué que les\\nboutons suivant et précédent son dans la même liste que les boutons\\ncorrespondant à chaque item. Ils pourront en réalité être indifféremment\\nregroupés ou séparés, mais pour ce billet, j\'ai simplifié. Le carousel est\\ninitialisé à un état initial donné.\\n\\nCODE JAVASCRIPT\\nVenons-en au JavaScript. Si je fais la liste de ce dont nous avons besoin :\\n\\n * ajouter des évènements sur les liens pour afficher les panels sélectionnés. \\n * manipuler le DOM (insérer des éléments, ajouter des classes).\\n * changer l\'affichage automatiquement au delà d\'un certain délai. \\n\\nLes seuls problèmes de compatibilité que je vois (même pour IE6 et 7) sont :\\nl\'ajout d\'évènements (IE<8 utilise attachEvent) et un petit\\ngetElementsByClassName. Autant dire que ça ne sert pas à grand chose de\\ns\'embarasser de ko de librairies superflues. Je vais donc m\'orienter vers\\nMooTools qui propose de télécharger uniquement ce dont on a besoin\\n[https://mootools.net/core]. J\'ai donc fait mes amplettes en sélectionnant\\nDomReady (avec toutes ses dépendances, notamment les events et les selecteurs)\\net les classes (j\'aime bien le confort qu\'elles apportent par rapport à\\nl\'héritage et notre code sera donc extensible plus facilement).\\n\\nIl y a quelques petites choses vraiment importantes quand on implémente un\\ncarousel :\\n\\n * il faut arrêter le carousel quand la souris est au dessus de lui : pour cela\\n   nous avons créé des fonctions resumer/pause qui permettrons d\'obtenir ce\\n   comportement. MooTools propose des évènements personnalisés appelés\\n   mouseenter et mouseleave qui permettent d\'obtenir exactement ce comportement\\n   [https://github.com/nfroidure/KissIsKool/blob/master/webdisplay.js#L21]. \\n * il faut arrêter le carousel aussi quand un des éléments de ce dernier obtient\\n   le focus, pour ce faire, nous devons ajouter un écouteur d\'évènement en\\n   prenant bien garde de mettre true pour le troisième argument\\n   [https://github.com/nfroidure/KissIsKool/blob/master/webdisplay.js#L23](mode\\n   capture) qui permet de capturer l\'évènement pour les noeuds enfants. \\n * il faut prendre en compte les hashs de manière à ce que si une personne\\n   visitant le site décide de trasnmettre le lien à une autre personnes,\\n   celle-ci puisse se retrouver sur le même contenu que lui. \\n\\nLe script que je propose gère tous ces aspects plus un directement lié aux\\nanimations. En effet, nous allons avoir besoin de savoir quel est l\'onglet\\nsélectionné grâce à une classe selected, mais aussi, celui qui vient juste\\nd\'être déselectionné, grâce à une classe unselected. Ainsi, nous pourrons animer\\nrespectivement l\'apparition et la disparition de ces deux éléments.\\n\\nANIMATIONS CSS3\\nNous voilà maintenant sur le terrain des animations. J\'ai fait une page\\nd\'exemple\\n[http://htmlpreview.github.io/?https://github.com/nfroidure/KissIsKool/blob/master/webdisplay.html]\\npour vous montrer quelques possibilités d\'animation. La principale difficulté\\nest que l\'on a deux contenus qui cohabitent dans la même zone : l\'onglet\\nsélectionné et celui qui vient de disparaître. Il faut donc les superposer pour\\nque le visiteur puisse voir au même endroit la disparition et l\'apparition.\\n\\nJ\'ai choisi pour cela de jouer avec position:absolute; et les z-index. De cette\\nmanière, j\'ai pu créer des animations de plusieurs genre sans problème. La\\ncontrainte est que la hauteur et la largeur doivent être fixes. Comme ce sont\\ndes exemples, je n\'en ai pas fait cas, mais une solution semble plus appropriée\\navec l\'inconvénient d\'alourdir le balisage : inclure les ognlets dans un wrapper\\nen position relative de hauteur égale à 0 et avec l\'overflow visisible. Comme\\nles éléments en position relative gardent la largeur de leur parent, on pourra\\nainsi créer un carousel à taille variable. Pour que le parent prenne tout de\\nmême la hauteur de ses enfants, une solution est de ne pas mettre de hauteur\\négale à 0 uniquement pour l\'onglet actuellement sélectionné.\\n\\nCONCLUSION\\nA mon sens, l\'ère du Javascript d\'animation est bel et bien révolue, du moins,\\npour des éléments HTML sur des sites vitrine, d\'information ou e-commerce. CSS3\\nnous offre une alternative bien plus efficace. Je vais donc petit à petit\\nconvertir mes scripts MooTools pour ne plus manipuler que des classes et en\\nfinir avec les classes de type Fx qui pour moi devraient même être retirées de\\nMooTools Core.\\n\\nCes derniers seront ajoutés au fur et à mesure sur le dépôt créé pour l\'occasion\\n[https://github.com/nfroidure/KissIsKool]et appelé KissIsKool. Vos commentaires\\net pull request sont les bienvenus.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc14:JSON.parse('{"path":"contents/pages/fr/blog/application_des_varstreams_avec_websockipc.html","title":"Exemple de mise en oeuvre des VarStreams avec WebSockIPC et NodeJS","description":"Afin de mieux mettre en exergue l\'intérêt des VarStreams, j\'ai créé une petite application NodeJS mettant en oeuvre une communication inter processus avec les WebSockets.","shortTitle":"WebSockIPC pour NodeJS","shortDesc":"Voir l\'article sur ce sujet","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nEXEMPLE DE MISE EN OEUVRE DES VARSTREAMS AVEC WEBSOCKIPC ET NODEJS\\nAfin de mieux mettre en exergue l\'intérêt des VarStreams, j\'ai créé une petite\\napplication NodeJS mettant en oeuvre une communication inter processus avec les\\nWebSockets.\\n\\nL\'idée dérrière WebSockIPC est de maintenir, pour chaque client, un arbre de\\ndonnées synchronisé. Cela permet de simplifier la communication entre le client\\net le serveur en introduisant une couche d\'abstraction.\\n\\nAfin de l\'uliser, il faut d\'abord installer ses dépendances :\\n\\nnfroidure@server:~# npm install varstream\\nnfroidure@server:~# npm install websocket\\n\\nWebSockIPC est un simple fichier Javascript qu\'il suffit d\'executer avec NodeJS\\naprès avoir cloné le dépôt :\\n\\nnfroidure@server:~# node websockipc.js [https://github.com/nfroidure/WebSockIPC]\\n\\nOu encore plus simple, en live depuis la branche master :\\n\\n\\nnfroidure@server:~# curl https://raw.github.com/nfroidure/WebSockIPC/master/src/backend.js | node\\n\\nCe dernier se met alors à l\'écoute de nouveaux clients. Il garde en mémoire une\\ncopie de l\'arbre de données à synchroniser et reçoit les demandes de\\nsynchronisation des clients qu\'il s\'empresse de dispatcher à chacun d\'entre eux\\npour maintenir continuellement le même état.\\n\\nA titre d\'exemple, un programme client est livré\\n[https://github.com/nfroidure/WebSockIPC/blob/master/www/index.html]avec le\\nserveur. Ce dernier utilise avantageusement les setters/getters Javascript pour\\nbinder des éléments d\'interface à l\'arbre de donnée. Au final, nous avons un\\nformulaire éditable collaborativement entre les divers clients de l\'application\\ngrâce à 50 malheureuses lignes de Javascript. Elle est pas belle la vie ?\\n\\nA vous d\'innover avec les VarStreams [https://github.com/nfroidure/VarStream]et \\nWebSocketIPC [https://github.com/nfroidure/WebSockIPC], rendez-vous sur leurs\\ndépôts Git respectifs !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc15:JSON.parse('{"path":"contents/pages/articles-application_des_varstreams_avec_websockipc.html","title":"Exemple de mise en oeuvre des VarStreams avec WebSockIPC et NodeJS","description":"Afin de mieux mettre en exergue l\'intérêt des VarStreams, j\'ai créé une petite application NodeJS mettant en oeuvre une communication inter processus avec les WebSockets.","shortTitle":"WebSockIPC pour NodeJS","shortDesc":"Voir l\'article sur ce sujet","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nEXEMPLE DE MISE EN OEUVRE DES VARSTREAMS AVEC WEBSOCKIPC ET NODEJS\\nAfin de mieux mettre en exergue l\'intérêt des VarStreams, j\'ai créé une petite\\napplication NodeJS mettant en oeuvre une communication inter processus avec les\\nWebSockets.\\n\\nL\'idée dérrière WebSockIPC est de maintenir, pour chaque client, un arbre de\\ndonnées synchronisé. Cela permet de simplifier la communication entre le client\\net le serveur en introduisant une couche d\'abstraction.\\n\\nAfin de l\'uliser, il faut d\'abord installer ses dépendances :\\n\\nnfroidure@server:~# npm install varstream\\nnfroidure@server:~# npm install websocket\\n\\nWebSockIPC est un simple fichier Javascript qu\'il suffit d\'executer avec NodeJS\\naprès avoir cloné le dépôt :\\n\\nnfroidure@server:~# node websockipc.js [https://github.com/nfroidure/WebSockIPC]\\n\\nOu encore plus simple, en live depuis la branche master :\\n\\n\\nnfroidure@server:~# curl https://raw.github.com/nfroidure/WebSockIPC/master/src/backend.js | node\\n\\nCe dernier se met alors à l\'écoute de nouveaux clients. Il garde en mémoire une\\ncopie de l\'arbre de données à synchroniser et reçoit les demandes de\\nsynchronisation des clients qu\'il s\'empresse de dispatcher à chacun d\'entre eux\\npour maintenir continuellement le même état.\\n\\nA titre d\'exemple, un programme client est livré\\n[https://github.com/nfroidure/WebSockIPC/blob/master/www/index.html]avec le\\nserveur. Ce dernier utilise avantageusement les setters/getters Javascript pour\\nbinder des éléments d\'interface à l\'arbre de donnée. Au final, nous avons un\\nformulaire éditable collaborativement entre les divers clients de l\'application\\ngrâce à 50 malheureuses lignes de Javascript. Elle est pas belle la vie ?\\n\\nA vous d\'innover avec les VarStreams [https://github.com/nfroidure/VarStream]et \\nWebSocketIPC [https://github.com/nfroidure/WebSockIPC], rendez-vous sur leurs\\ndépôts Git respectifs !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc16:JSON.parse('{"path":"contents/pages/fr/blog/application_desktop_avec_chrome.html","title":"Une application desktop avec Chrome","description":"Bien que HTML5 progresse de jour en jour, on aimerait parfois pouvoir accéder à n\'importe quoi dans son navigateur. C\'est déjà possible, grâce à un nouveau petit projet NodeJS.","shortTitle":"App desktop avec Chrome","shortDesc":"En savoir plus sur cette astuce","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUNE APPLICATION DESKTOP AVEC CHROME\\n⚠ Attention: Cet article est ancien et le projet qui y est décrit a été\\nsupplanté par Electron, le moteur utilise pour Atom.\\n\\nBien que HTML5 progresse de jour en jour, on aimerait parfois pouvoir accéder à\\nn\'importe quoi dans son navigateur. C\'est déjà possible, grâce à un nouveau\\npetit projet NodeJS.\\n\\nCe projet, c\'est Node-Chrome [https://github.com/hij1nx/node-chrome]. L\'idée est\\ntoute bête, mais encore fallait-il y penser.\\n\\nLe navigateur Google Chrome possède pléthore de ligne de commandes,\\nmalheureusement peu documentées dans le man correspondant, mais disponibles ici\\n[https://peter.sh/experiments/chromium-command-line-switches/]. Deux arguments\\nsont assez intéressants :\\n\\n *  --app http://localhost : Celui-ci permet de spécifier une URL à ouvrir \\n *  --force-app-mode : Permet d\'ouvrir Chrome sans les boutons de l\'interface\\n   (sans le Chrome). \\n\\nCes options sont utilisées pour créer les raccourcis vers des applications web\\ndu Marketplace de Chrome sur le bureau.\\n\\nNode-Chrome tire parti de ces options en créant un serveur NodeJS et en lancant\\nun processus Google-Chrome. Grâce à cette exécution simultanée, l\'instance de\\nNodeJS peut donc donner accès à tous les périphériques du système.\\n\\nRésultat : promesse tenue ! Une application desktop grâce à Google Chrome et\\nNodeJS qui n\'aura aucune limite (à part celles de l\'utilisateur via lequel le\\nprocessus a été lancé).\\n\\nComme Chrome et Node sont multi-plateformes, cela donne donc une configuration\\ntout à fait portable sur n\'importe quel OS.\\n\\nOn pourrait tout à fait imaginer la même chose avec Firefox en lieu et place de\\nChrome.\\n\\nBref, une question reste en suspens, combien de temps Java va mettre pour mourir\\n?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc17:JSON.parse('{"path":"contents/pages/articles-application_desktop_avec_chrome.html","title":"Une application desktop avec Chrome","description":"Bien que HTML5 progresse de jour en jour, on aimerait parfois pouvoir accéder à n\'importe quoi dans son navigateur. C\'est déjà possible, grâce à un nouveau petit projet NodeJS.","shortTitle":"App desktop avec Chrome","shortDesc":"En savoir plus sur cette astuce","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUNE APPLICATION DESKTOP AVEC CHROME\\n⚠ Attention: Cet article est ancien et le projet qui y est décrit a été\\nsupplanté par Electron, le moteur utilise pour Atom.\\n\\nBien que HTML5 progresse de jour en jour, on aimerait parfois pouvoir accéder à\\nn\'importe quoi dans son navigateur. C\'est déjà possible, grâce à un nouveau\\npetit projet NodeJS.\\n\\nCe projet, c\'est Node-Chrome [https://github.com/hij1nx/node-chrome]. L\'idée est\\ntoute bête, mais encore fallait-il y penser.\\n\\nLe navigateur Google Chrome possède pléthore de ligne de commandes,\\nmalheureusement peu documentées dans le man correspondant, mais disponibles ici\\n[https://peter.sh/experiments/chromium-command-line-switches/]. Deux arguments\\nsont assez intéressants :\\n\\n *  --app http://localhost : Celui-ci permet de spécifier une URL à ouvrir \\n *  --force-app-mode : Permet d\'ouvrir Chrome sans les boutons de l\'interface\\n   (sans le Chrome). \\n\\nCes options sont utilisées pour créer les raccourcis vers des applications web\\ndu Marketplace de Chrome sur le bureau.\\n\\nNode-Chrome tire parti de ces options en créant un serveur NodeJS et en lancant\\nun processus Google-Chrome. Grâce à cette exécution simultanée, l\'instance de\\nNodeJS peut donc donner accès à tous les périphériques du système.\\n\\nRésultat : promesse tenue ! Une application desktop grâce à Google Chrome et\\nNodeJS qui n\'aura aucune limite (à part celles de l\'utilisateur via lequel le\\nprocessus a été lancé).\\n\\nComme Chrome et Node sont multi-plateformes, cela donne donc une configuration\\ntout à fait portable sur n\'importe quel OS.\\n\\nOn pourrait tout à fait imaginer la même chose avec Firefox en lieu et place de\\nChrome.\\n\\nBref, une question reste en suspens, combien de temps Java va mettre pour mourir\\n?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc18:JSON.parse('{"path":"contents/pages/fr/blog/applications_html5.html","title":"Un futur radieux pour les applications HTML5","description":"L\'importance des applications HTML5 va croissante, les acteurs qui parient sur ces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique.","shortTitle":"Applications HTML5","shortDesc":"En savoir plus sur l\'avenir des applications HTML5","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUN FUTUR RADIEUX POUR LES APPLICATIONS HTML5\\nL\'importance des applications HTML5 va croissante, les acteurs qui parient sur\\nces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique.\\n\\nC\'est un petit grondement de fond, de ceux qui annoncent une terrible bataille,\\npeu de gens l\'entendent, encore moins l\'écoutent. Il est brouillé par des trolls\\nassourdissants sur applications HTML5 contre les applications natives. J\'ai\\nmoi-même participé à la bataille en tentant d\'expliquer pourquoi techniquement, \\nles apps HTML5 sont supérieures aux applications natives\\n[http://server.elitwork.com/presentations/applications-mobiles.html#/intro].\\nVainement, chacun campe sur ses positions.\\n\\nMais finalement, comme les autres, j\'ai pris le problème dans le mauvais sens.\\nLa question n\'est pas quelle technologie je dois utiliser pour créer mon\\napplication, mais plutôt, quelle technologie un OS mobile doit supporter pour\\navoir du succès.\\n\\nL\'OEUF ET LA POULE\\nClairement, la technologie qu\'utilise votre app, on s\'en fout ! HTML5, Java\\netc... qu\'importe. Tant que votre application tourne convenablement sur un\\nmaximum de périphériques. L\'idée est que votre application soit utilisée que\\nvous la vendiez dans un store ou que vous la rentabilisiez avec de la pub.\\n\\nDe ce fait, vu les parts de marché d\'Android et de l\'IPhone, les applications\\nnatives commes les applications HTML5 peuvent matcher ces périphériques et donc,\\nla réponse à applications natives vs epplications HTML5 est simple : utilise ta\\nforce ! Si tu es un développeur HTML5 alors utilise HTML5, sinon, utilise ton\\nlangage de prédilection.\\n\\nOUI, MAIS APRÈS ?\\nLa voilà la vraie question. Aujourd\'hui, nous avons un marché dominé par Android\\net Apple. Mais demain, il y a fort à parier que la situation va changer,\\nvraiment changer.\\n\\nEn effet, on pourrait croire qu\'on est au pic de croissance des smartphones,\\ntout le monde en a un. Mais, ce n\'est pas encore tout à fait vrai pour les pays\\ndéveloppés et encore moins pour les autres pays. Sans compter que de très\\nnombreux appareils vont devenir des terminaux multifonctions et la révolution du\\nsmartphone va atteindre les téléviseurs, les automobiles, les mirroirs, les\\nfours, les réfrigérateurs, les interphones, les vitrinnes de magasins, les\\nsièges des avions, des trains...\\n\\nBref, le nombre de terminaux pouvant recevoir des applications pourrait bien\\nêtre multiplié par deux ou trois chaque année. Dans ce contexte, l\'omniprésence\\nd\'Android est un leurre. Il suffirai qu\'un OS concurrent perce pour que le\\nmarché se retourne une nouvelle fois.\\n\\nLA CONCURRENCE ARRIVE !\\nEt des concurrents, ce n\'est pas ce qui manque ! Qu\'il s\'agisse de FirefoxOS,\\nTizen, WebOS de très nombreux acteurs sont sur le point de faire leur entrée. Il\\ny a fort à parier que d\'ici un ou deux ans, un certain nombre d\'autres OS\\napparaîtra. La tendance à faire du navigateur un élément central des OS force\\nles vendors à créer leur propre OS, à l\'image de Mozilla et peut-être bientôt\\nd\'Opéra, qui sait ? D\'ailleurs, leur travail est facilité par la percée\\nd\'Android qui force les constructeurs à créer des firmwares pour Linux.\\n\\nPAS D\'APPS, PAS D\'UTILISATEURS\\nMaintenant, qu\'est-ce qui fait vraiment le succès d\'un OS ? Ce n\'est pas son\\ncode source, sa technicité, son modèle (proprio, ouvert, fermé) ou ses\\nperformances, c\'est son écosystème.\\n\\nLes créateur d\'OS ne ménagent pas leur efforts pour alimenter leur store, non\\nseulement parcequ\'ils en tirent des revenus, mais aussi parceque ce sont ces\\napplications qui attirent les utilisateurs.\\n\\nOr, pour tous les OS, il existe un vivier d\'application préexistant, avec une\\narmée de développeurs capables d\'en créer de nouvelles. Cette technologie, c\'est\\nHTML5. Un nouvel acteur peut arriver sur le marché et avoir des millions d\'apps\\ndisponibles sur sa place de marché pour peu qu\'il soit facile de la porter.\\n\\nQuand je vois la simplicité de soumission d\'une application sur le Chrome Web\\nStore ou sur le MarketPlace de Mozilla [comparatif_appstores.html], je me dis\\nque n\'importe quel OS proposant un support d\'HTML5 peu en quelques semaines\\nremplir son store d\'applications de très gande qualité. D\'ailleurs, grâce à\\nMozilla et sa place de marché \\"ouverte\\", n\'importe qui peut supporter le fichier\\nmanifeste\\n[https://developer.mozilla.org/en-US/docs/Archive/B2G_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS/Manifest]\\nd\'une application et la proposer sans même que le développeur ait besoin de\\nfaire quoi que ce soit.\\n\\nLE GAGNANT EST HTML5 !\\nBref, sur le moyen terme, créer des applications HTML5 ouvre la voie à des\\nmillions voire des milliards de téléchargements actuels et futurs. Une\\nrévolution qui est à mon avis largement sous-estimée par les principaux\\nintéressés. Même les développeurs des OS HTML5 comme Tizen et FirefoxOS ne se\\ndoutent pas des changements qu\'ils vont provoquer. Les trolls sur l\'application\\nde Facebook me font doucement rigoler. HTML5 will rule the world.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc19:JSON.parse('{"path":"contents/pages/articles-applications_html5.html","title":"Un futur radieux pour les applications HTML5","description":"L\'importance des applications HTML5 va croissante, les acteurs qui parient sur ces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique.","shortTitle":"Applications HTML5","shortDesc":"En savoir plus sur l\'avenir des applications HTML5","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUN FUTUR RADIEUX POUR LES APPLICATIONS HTML5\\nL\'importance des applications HTML5 va croissante, les acteurs qui parient sur\\nces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique.\\n\\nC\'est un petit grondement de fond, de ceux qui annoncent une terrible bataille,\\npeu de gens l\'entendent, encore moins l\'écoutent. Il est brouillé par des trolls\\nassourdissants sur applications HTML5 contre les applications natives. J\'ai\\nmoi-même participé à la bataille en tentant d\'expliquer pourquoi techniquement, \\nles apps HTML5 sont supérieures aux applications natives\\n[http://server.elitwork.com/presentations/applications-mobiles.html#/intro].\\nVainement, chacun campe sur ses positions.\\n\\nMais finalement, comme les autres, j\'ai pris le problème dans le mauvais sens.\\nLa question n\'est pas quelle technologie je dois utiliser pour créer mon\\napplication, mais plutôt, quelle technologie un OS mobile doit supporter pour\\navoir du succès.\\n\\nL\'OEUF ET LA POULE\\nClairement, la technologie qu\'utilise votre app, on s\'en fout ! HTML5, Java\\netc... qu\'importe. Tant que votre application tourne convenablement sur un\\nmaximum de périphériques. L\'idée est que votre application soit utilisée que\\nvous la vendiez dans un store ou que vous la rentabilisiez avec de la pub.\\n\\nDe ce fait, vu les parts de marché d\'Android et de l\'IPhone, les applications\\nnatives commes les applications HTML5 peuvent matcher ces périphériques et donc,\\nla réponse à applications natives vs epplications HTML5 est simple : utilise ta\\nforce ! Si tu es un développeur HTML5 alors utilise HTML5, sinon, utilise ton\\nlangage de prédilection.\\n\\nOUI, MAIS APRÈS ?\\nLa voilà la vraie question. Aujourd\'hui, nous avons un marché dominé par Android\\net Apple. Mais demain, il y a fort à parier que la situation va changer,\\nvraiment changer.\\n\\nEn effet, on pourrait croire qu\'on est au pic de croissance des smartphones,\\ntout le monde en a un. Mais, ce n\'est pas encore tout à fait vrai pour les pays\\ndéveloppés et encore moins pour les autres pays. Sans compter que de très\\nnombreux appareils vont devenir des terminaux multifonctions et la révolution du\\nsmartphone va atteindre les téléviseurs, les automobiles, les mirroirs, les\\nfours, les réfrigérateurs, les interphones, les vitrinnes de magasins, les\\nsièges des avions, des trains...\\n\\nBref, le nombre de terminaux pouvant recevoir des applications pourrait bien\\nêtre multiplié par deux ou trois chaque année. Dans ce contexte, l\'omniprésence\\nd\'Android est un leurre. Il suffirai qu\'un OS concurrent perce pour que le\\nmarché se retourne une nouvelle fois.\\n\\nLA CONCURRENCE ARRIVE !\\nEt des concurrents, ce n\'est pas ce qui manque ! Qu\'il s\'agisse de FirefoxOS,\\nTizen, WebOS de très nombreux acteurs sont sur le point de faire leur entrée. Il\\ny a fort à parier que d\'ici un ou deux ans, un certain nombre d\'autres OS\\napparaîtra. La tendance à faire du navigateur un élément central des OS force\\nles vendors à créer leur propre OS, à l\'image de Mozilla et peut-être bientôt\\nd\'Opéra, qui sait ? D\'ailleurs, leur travail est facilité par la percée\\nd\'Android qui force les constructeurs à créer des firmwares pour Linux.\\n\\nPAS D\'APPS, PAS D\'UTILISATEURS\\nMaintenant, qu\'est-ce qui fait vraiment le succès d\'un OS ? Ce n\'est pas son\\ncode source, sa technicité, son modèle (proprio, ouvert, fermé) ou ses\\nperformances, c\'est son écosystème.\\n\\nLes créateur d\'OS ne ménagent pas leur efforts pour alimenter leur store, non\\nseulement parcequ\'ils en tirent des revenus, mais aussi parceque ce sont ces\\napplications qui attirent les utilisateurs.\\n\\nOr, pour tous les OS, il existe un vivier d\'application préexistant, avec une\\narmée de développeurs capables d\'en créer de nouvelles. Cette technologie, c\'est\\nHTML5. Un nouvel acteur peut arriver sur le marché et avoir des millions d\'apps\\ndisponibles sur sa place de marché pour peu qu\'il soit facile de la porter.\\n\\nQuand je vois la simplicité de soumission d\'une application sur le Chrome Web\\nStore ou sur le MarketPlace de Mozilla [comparatif_appstores.html], je me dis\\nque n\'importe quel OS proposant un support d\'HTML5 peu en quelques semaines\\nremplir son store d\'applications de très gande qualité. D\'ailleurs, grâce à\\nMozilla et sa place de marché \\"ouverte\\", n\'importe qui peut supporter le fichier\\nmanifeste\\n[https://developer.mozilla.org/en-US/docs/Archive/B2G_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS/Manifest]\\nd\'une application et la proposer sans même que le développeur ait besoin de\\nfaire quoi que ce soit.\\n\\nLE GAGNANT EST HTML5 !\\nBref, sur le moyen terme, créer des applications HTML5 ouvre la voie à des\\nmillions voire des milliards de téléchargements actuels et futurs. Une\\nrévolution qui est à mon avis largement sous-estimée par les principaux\\nintéressés. Même les développeurs des OS HTML5 comme Tizen et FirefoxOS ne se\\ndoutent pas des changements qu\'ils vont provoquer. Les trolls sur l\'application\\nde Facebook me font doucement rigoler. HTML5 will rule the world.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc20:JSON.parse('{"path":"contents/pages/fr/blog/applications_vehicules.html","title":"Et si HTML5 accédait à mon véhicule ?","description":"Citroën vient de lancer un petit concours tout simple auquel je vais proposer une idée. Découvrez là, mais aussi, comment elle pourrait être mise en oeuvre.","shortTitle":"Véhicule HTML5","shortDesc":"En savoir plus sur cette idée","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nET SI HTML5 ACCÉDAIT À MON VÉHICULE ?\\nCitroën vient de lancer un petit concours tout simple auquel je vais proposer\\nune idée. Découvrez-la, mais aussi, voyez comment elle pourrait être mise en\\nœuvre.\\n\\nCONTEXTE\\nJe viens de voir passer un tweet dans ma timeline, Citroën organise un concours\\npour imaginer une application pour smartphones qui pourrait révolutionner\\nl\'usage des véhicules. L\'idée est d\'imaginer qu\'il soit possible à partir de son\\nsmartphone d\'accéder aux données du véhicule. J\'imagine qu\'ils souhaitent mettre\\nen place une API et qu\'ils voudraient des idées d\'applications à mettre en\\nœuvre, mais aussi savoir quel genre d\'informations exposer via cette API. Je me\\nsuis pris au jeu avec une petite idée assez amusante :).\\n\\nSWEETDRIVER\\n Illustration de ce que pourrait être SweetDriver [/images/sweetdriver.png]\\n\\nJe sais pas si ça vous arrive, mais même en essayant d\'être un bon conducteur,\\nil arrive toujours un moment ou je ne mets pas mon clignotant, où je dépasse la\\nlimite de vitesse autorisée etc. etc. Je pense que c\'est à cause du fait que\\nconduire est ennuyeux. Le permis juste en poche, on apprécie de se déplacer\\nlibrement, mais les années passant on se lasse et les comportements deviennent\\nplus relâchés.\\n\\nC\'est là qu\'intervient Sweet Driver ! Le but de cette application est de\\nrécompenser les conducteurs lorsqu\'il se comportent bien. Basiquement, il\\ns’agirait d\'un compteur de points incitatif qui s’incrémenterait à chaque fois\\nque le conducteur fait une bonne action. Voici quelques bonnes actions que j\'ai\\nimaginées :\\n\\n * je mets mon clignotant : 5 points\\n * je respecte les limitations de vitesse : 2 points/minute\\n * je me rabats après dépassement : 10 points\\n * je regarde bien la route (détection visage) : 2 points/minute\\n * je met mes warnings pour indiquer un ralentissement : 15 points\\n * je me déporte sur le bas-côté pour laisser passer les pompiers, une ambulance\\n   (détectés grâce au micro) : 20 points \\n * je mets ma ceinture avant toute accélération : 15 points\\n * je ralentis avant une priorité à droite : 5 points\\n * etc.\\n\\nJe pense que l\'on peut compléter cette liste indéfiniment. L\'idée est de rendre\\namusant le respect des règles de bonne conduite. On peut aussi créer des badges\\nque l\'on peut obtenir en remplissant certains critères :\\n\\n * Bodyguard : tout le monde a mis sa ceinture avant tout démarrage. \\n * GreenMan : je consomme peu d\'essence, j\'économise mes freinages. \\n * SocialDriver : j\'informe les autres conducteurs (warning, accidents,\\n   bouchons). \\n\\nEnfin, comme pour tout jeu, le plus important, la possibilité de partager ses\\nexploits sur les réseaux sociaux et pourquoi pas un classement national avec une\\nrécompense pour le meilleur conducteur.\\n\\nLES APPLICATIONS\\nOutre les particuliers, on pourrait tout à fait imaginer intégrer ce logiciel\\npour les véhicules d\'auto-école, mais aussi pour les sociétés afin de créer des\\nchallenges internes. Il pourrait même être utilisé par les compagnies\\nd\'assurance pour proposer des réductions en fonction de la conduite.\\n\\nET HTML5 ?\\nLa question qui reste en suspens est comment utiliser cela grâce à HTML5 ? Je ne\\npense pas que c\'est le choix que Citroën va faire, mais sait-on jamais, je le\\npropose tout de même ! Pour moi, obtenir les données du véhicule doit se faire\\nvia un protocole standardisé et adapté à Internet et plus particulièrement au\\nWeb.\\n\\nIl faut que le véhicule dispose d\'un serveur web local (pourquoi pas en NodeJS)\\nqui expose une API REST. De cette manière, le Smartphone, connecté en Wifi au\\nréseau local pourrait interroger ce serveur à partir d\'une application native,\\nmais aussi et surtout à partir d\'une application HTML5.\\n\\nBien-sûr, il faut un accès en lecture uniquement bien qu\'une authentification et\\nun cryptage SSL seraient à priori sans risques. L\'avantage de cette vision est\\nqu\'on peut tout à fait ajouter de nouvelles fonctionnalités au protocole sans le\\nchanger, voire, installer des applications tierces dans le serveur du véhicule\\nqui permette d\'accéder à de nouvelles données.\\n\\nOn peut par exemple imaginer un media center qui remplace l\'autoradio et que\\nchaque Smartphone du véhicule puisse lire la chanson qui lui plaît. Les\\npossibilités sont infinies c\'est ça qui est excitant avec les systèmes ouverts.\\n\\nBref, espérons que Citroën jouera le jeu des protocoles standards pour le plus\\ngrand bonheur des développeurs d\'application ! En attendant, je vais proposer\\nmon app, souhaitez moi bonne chance :).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc21:JSON.parse('{"path":"contents/pages/articles-applications_vehicules.html","title":"Et si HTML5 accédait à mon véhicule ?","description":"Citroën vient de lancer un petit concours tout simple auquel je vais proposer une idée. Découvrez là, mais aussi, comment elle pourrait être mise en oeuvre.","shortTitle":"Véhicule HTML5","shortDesc":"En savoir plus sur cette idée","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nET SI HTML5 ACCÉDAIT À MON VÉHICULE ?\\nCitroën vient de lancer un petit concours tout simple auquel je vais proposer\\nune idée. Découvrez-la, mais aussi, voyez comment elle pourrait être mise en\\nœuvre.\\n\\nCONTEXTE\\nJe viens de voir passer un tweet dans ma timeline, Citroën organise un concours\\npour imaginer une application pour smartphones qui pourrait révolutionner\\nl\'usage des véhicules. L\'idée est d\'imaginer qu\'il soit possible à partir de son\\nsmartphone d\'accéder aux données du véhicule. J\'imagine qu\'ils souhaitent mettre\\nen place une API et qu\'ils voudraient des idées d\'applications à mettre en\\nœuvre, mais aussi savoir quel genre d\'informations exposer via cette API. Je me\\nsuis pris au jeu avec une petite idée assez amusante :).\\n\\nSWEETDRIVER\\n Illustration de ce que pourrait être SweetDriver [/images/sweetdriver.png]\\n\\nJe sais pas si ça vous arrive, mais même en essayant d\'être un bon conducteur,\\nil arrive toujours un moment ou je ne mets pas mon clignotant, où je dépasse la\\nlimite de vitesse autorisée etc. etc. Je pense que c\'est à cause du fait que\\nconduire est ennuyeux. Le permis juste en poche, on apprécie de se déplacer\\nlibrement, mais les années passant on se lasse et les comportements deviennent\\nplus relâchés.\\n\\nC\'est là qu\'intervient Sweet Driver ! Le but de cette application est de\\nrécompenser les conducteurs lorsqu\'il se comportent bien. Basiquement, il\\ns’agirait d\'un compteur de points incitatif qui s’incrémenterait à chaque fois\\nque le conducteur fait une bonne action. Voici quelques bonnes actions que j\'ai\\nimaginées :\\n\\n * je mets mon clignotant : 5 points\\n * je respecte les limitations de vitesse : 2 points/minute\\n * je me rabats après dépassement : 10 points\\n * je regarde bien la route (détection visage) : 2 points/minute\\n * je met mes warnings pour indiquer un ralentissement : 15 points\\n * je me déporte sur le bas-côté pour laisser passer les pompiers, une ambulance\\n   (détectés grâce au micro) : 20 points \\n * je mets ma ceinture avant toute accélération : 15 points\\n * je ralentis avant une priorité à droite : 5 points\\n * etc.\\n\\nJe pense que l\'on peut compléter cette liste indéfiniment. L\'idée est de rendre\\namusant le respect des règles de bonne conduite. On peut aussi créer des badges\\nque l\'on peut obtenir en remplissant certains critères :\\n\\n * Bodyguard : tout le monde a mis sa ceinture avant tout démarrage. \\n * GreenMan : je consomme peu d\'essence, j\'économise mes freinages. \\n * SocialDriver : j\'informe les autres conducteurs (warning, accidents,\\n   bouchons). \\n\\nEnfin, comme pour tout jeu, le plus important, la possibilité de partager ses\\nexploits sur les réseaux sociaux et pourquoi pas un classement national avec une\\nrécompense pour le meilleur conducteur.\\n\\nLES APPLICATIONS\\nOutre les particuliers, on pourrait tout à fait imaginer intégrer ce logiciel\\npour les véhicules d\'auto-école, mais aussi pour les sociétés afin de créer des\\nchallenges internes. Il pourrait même être utilisé par les compagnies\\nd\'assurance pour proposer des réductions en fonction de la conduite.\\n\\nET HTML5 ?\\nLa question qui reste en suspens est comment utiliser cela grâce à HTML5 ? Je ne\\npense pas que c\'est le choix que Citroën va faire, mais sait-on jamais, je le\\npropose tout de même ! Pour moi, obtenir les données du véhicule doit se faire\\nvia un protocole standardisé et adapté à Internet et plus particulièrement au\\nWeb.\\n\\nIl faut que le véhicule dispose d\'un serveur web local (pourquoi pas en NodeJS)\\nqui expose une API REST. De cette manière, le Smartphone, connecté en Wifi au\\nréseau local pourrait interroger ce serveur à partir d\'une application native,\\nmais aussi et surtout à partir d\'une application HTML5.\\n\\nBien-sûr, il faut un accès en lecture uniquement bien qu\'une authentification et\\nun cryptage SSL seraient à priori sans risques. L\'avantage de cette vision est\\nqu\'on peut tout à fait ajouter de nouvelles fonctionnalités au protocole sans le\\nchanger, voire, installer des applications tierces dans le serveur du véhicule\\nqui permette d\'accéder à de nouvelles données.\\n\\nOn peut par exemple imaginer un media center qui remplace l\'autoradio et que\\nchaque Smartphone du véhicule puisse lire la chanson qui lui plaît. Les\\npossibilités sont infinies c\'est ça qui est excitant avec les systèmes ouverts.\\n\\nBref, espérons que Citroën jouera le jeu des protocoles standards pour le plus\\ngrand bonheur des développeurs d\'application ! En attendant, je vais proposer\\nmon app, souhaitez moi bonne chance :).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc22:JSON.parse('{"path":"contents/pages/fr/blog/bien_designer_url_site_applications_web.html","title":"Comment bien designer les url de son site ou application web","description":"Les URL ou URI d\'une application ou d\'un site Internet nécessitent\\n de prendre un moment pour réfléchir à leur schema. Voici quelques bonnes\\n pratiques issues de mon expérience REST.","shortTitle":"Design des URI","shortDesc":"En savoir plus sur la façon de schématiser les URL","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCOMMENT BIEN DESIGNER LES URL DE SON SITE OU APPLICATION WEB\\nLes URL ou URI d\'une application ou d\'un site Internet nécessitent de prendre un\\nmoment pour réfléchir à leur schema. Voici quelques bonnes pratiques issues de\\nmon expérience REST.\\n\\nSuite à une question de Nicolas Hoizey [https://twitter.com/nhoizey]sur Twitter,\\nj\'ai décidé de parler un peu des URI, URL ou plus communément des adresses des\\npages web des sites Internet ou applications web. On pourrait croire que ces\\ndernières ne nécessitent pas de se creuser la tête plus que cela, mais en fait\\nelle sont fondamentales et nécessitent une réflexion de fond ainsi qu\'une bonne\\ncompréhension des concepts sous-jacents.\\n\\nTOUT EST HYPER-TEXTE\\nL\'origine des URI ou URL vient de la nature hypertexte du web. Lorsqu\'il\\nl\'inventa, Tim Berners Lee voulu que le web soit hypertexte. Cela signifie,\\nqu\'il voulait que toutes les pages web puissent pointer vers n\'importe quelle\\nautre page web via un mécanisme qu\'il apperla hyperlien (ou tout simplement\\nlien).\\n\\nPour cela, il fallu permettre de schematiser l\'adresse d\'une page web à l\'aide\\nd\'une convention de nommage. C\'est ici qu\'interviennent les URI et plus\\nprécisément leurs presque sous ensemble; les URL. Les URL donnent la possibilité\\nde pointer vers une ressource (qui peut être une page web) grâce à un schema\\ndonnant le protocol à utiliser (http, ftp, irc etc...), le domaine et\\naccessoirement une clé permettant de pointer vers une ressource particulière du\\nserveur incriminé.\\n\\nNous voilà donc avec un serveur web à créer, qui doit exposer plusieurs\\nressources que nous pouvons indexer avec des clés que nous sommes dans l\'absolu\\nlibres d\'implémenter comme bon nous semble.\\n\\nSeulement voilà, un serveur web doit se fondre dans la masse qu\'est Internet et\\nnous devons créer nos URL de la meilleure manière qui soit afin d\'offrir un\\ncontexte d\'utilisation optimal à nos clients (robots ou internautes).\\n\\nUN FORMAT COMPRÉHENSIBLE ET PRÉDICTIBLE\\nSelon les principes de REST, un bon format d\'URL doit être compréhensible par un\\nhumain. Par exemple, l\'URL http://world.com/fr-FR/persons/nfroidure.html est\\nfacilement appréhendable, même par une personne peu férue d\'informatique. On\\ncomprend facilement qu\'il s\'agit de la représentation HTML de la personne\\n\\"nfroidure\\" dans la langue française.\\n\\nElle est également prédictible car je peux en conclure qu\'en remplaçant fr-FR\\npar en-US, j\'aurai la représentation en anglais si elle est prise en charge. Si\\nje sais que nhoizey est une personne qui existe sur ce site, alors, en\\nremplaçant nfroidure, je devrais accéder à son profil en HTML. Si le format JSON\\nest pris en charge, je devrait pouvoir y accéder également en remplaçant html\\npar json.\\n\\nLa hiérachie est aussi importante.en supprimant /nfroidure, je peux faire le\\npari que la liste des personnes du site me sera présentée. Et si c\'est le cas,\\nje peux conclure que si je supprime la ressource nfroidure, alors, la ressource\\nparente sera elle aussi différente lors de mon prochain accès. Cela est très\\nimportant pour que les robots clients de votre API puissent mettre à jour leur\\ncache de manière optimale.\\n\\nAJOUTONS UN PEU DE HTTP\\nPour HTTP tout est ressource. Un peu à la manière de la POO, une personne est\\nune ressource et la page HTML qui correspond à son profil est une représentation\\nde cette personne.\\n\\nGrâce à un mecanisme appelé négociation de contenu, un client, lorsqu\'il\\neffectue une requête HTTP vers une URL particulière transmet en entête une série\\nd\'information sur les types de représentation qu\'il peut traiter.\\n\\nL\'entête Accept détermine quel format de représentation un client peut lire.\\nAccept-Language détermine les langues que le client (ou plutôt que l\'utilisateur\\ndu navigateur) peut lire. L\'entête Accept-Charset donne les types de jeux de\\ncaractères autorisés par le système du client.\\n\\nSi on reprend l\'exemple précédent, une requête GET vers une URL du type\\nhttp://world.com/persons/nfroidure est sensée vous fournir une représentation\\nque votre navigateur peut interpréter en fonction des entêtes fournies par votre\\nrequête. Cela peut être du HTML, mais aussi un fichier MP3 dans le cas où\\nl\'accès se ferait via un hypothétique navigateur vocal n\'acceptant que des\\nfichiers audio.\\n\\nCependant, ces URL particulières que je nommerai URL abstractives ne sont pas\\ndes représentations. Elles sont des ressources qui peuvent potentiellement être\\nservies sous différentes représentations possibles.\\n\\nGrâce au mécanisme des redirections, le serveur redirige le client vers la bonne\\nreprésentation. Pourquoi ne pas servir directement la représentation, sans\\nredirection ? Pour des raisons pratiques. Un proxy HTTP public pourrait stocker\\nune représentation et servir cette même représentation à des clients qui ne\\npourraient pas les interpréter et pour lesquels une autre représentation serait\\nplus adéquat.\\n\\nDe plus, cela laisse la possibilité à l\'utilisateur de pointer une ressource ou\\nune représentation particulière d\'une ressource. Imaginons que notre serveur web\\nd\'exemple propose une version JPG d\'une personne. Je peut ainsi afficher une\\nimage dans une page web en allemand qui affiche cette ressource et j\'ai l\'URL\\nvers la représentation exacte que je souhaite (ici:\\nhttp://world.com/de-DE/persons/nfroidure.jpg).\\n\\nMERVEILLEUX ! SAUF QUE.\\nMalheureusement, les navigateurs affichent toujours l\'URL finale d\'une\\nredirection ce qui fait qu\'un utilisateur peu averti, même s\'il est aisé de le\\ndeviner, fera rarement un lien vers l\'URL abstractive d\'une ressource. La faute\\nà qui ? Aux navigateurs ? Peut-être devraient-il proposer le choix entre les\\ndeux type d\'URL afin d\'éduquer les utilisateurs. Aux webmasters ? Peut-être\\naussi, les bonnes pratiques citées ici sont rarement respectées, même par les\\nplus grands. Les utilisateurs n\'ont donc pas l\'habitude de considérer le format\\nd\'une URL comme représentatif du contenu qu\'elle permet de consulter.\\n\\nN\'empêche que, ces bonnes pratiques sont géniales, si vous créez une API REST en\\nrespectant ces principes, ce sera un régal de l\'utiliser et ce sera performant\\ngrâce à des caches bien rencardés. Et si vous créez juste un site web et que\\nDELETE et PUT sont des gros mots pour vous, dîtes vous bien que quand vous\\ndéciderez de partir sur du REST, votre vie en sera facilitée.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc23:JSON.parse('{"path":"contents/pages/articles-bien_designer_url_site_applications_web.html","title":"Comment bien designer les url de son site ou application web","description":"Les URL ou URI d\'une application ou d\'un site Internet nécessitent\\n de prendre un moment pour réfléchir à leur schema. Voici quelques bonnes\\n pratiques issues de mon expérience REST.","shortTitle":"Design des URI","shortDesc":"En savoir plus sur la façon de schématiser les URL","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCOMMENT BIEN DESIGNER LES URL DE SON SITE OU APPLICATION WEB\\nLes URL ou URI d\'une application ou d\'un site Internet nécessitent de prendre un\\nmoment pour réfléchir à leur schema. Voici quelques bonnes pratiques issues de\\nmon expérience REST.\\n\\nSuite à une question de Nicolas Hoizey [https://twitter.com/nhoizey]sur Twitter,\\nj\'ai décidé de parler un peu des URI, URL ou plus communément des adresses des\\npages web des sites Internet ou applications web. On pourrait croire que ces\\ndernières ne nécessitent pas de se creuser la tête plus que cela, mais en fait\\nelle sont fondamentales et nécessitent une réflexion de fond ainsi qu\'une bonne\\ncompréhension des concepts sous-jacents.\\n\\nTOUT EST HYPER-TEXTE\\nL\'origine des URI ou URL vient de la nature hypertexte du web. Lorsqu\'il\\nl\'inventa, Tim Berners Lee voulu que le web soit hypertexte. Cela signifie,\\nqu\'il voulait que toutes les pages web puissent pointer vers n\'importe quelle\\nautre page web via un mécanisme qu\'il apperla hyperlien (ou tout simplement\\nlien).\\n\\nPour cela, il fallu permettre de schematiser l\'adresse d\'une page web à l\'aide\\nd\'une convention de nommage. C\'est ici qu\'interviennent les URI et plus\\nprécisément leurs presque sous ensemble; les URL. Les URL donnent la possibilité\\nde pointer vers une ressource (qui peut être une page web) grâce à un schema\\ndonnant le protocol à utiliser (http, ftp, irc etc...), le domaine et\\naccessoirement une clé permettant de pointer vers une ressource particulière du\\nserveur incriminé.\\n\\nNous voilà donc avec un serveur web à créer, qui doit exposer plusieurs\\nressources que nous pouvons indexer avec des clés que nous sommes dans l\'absolu\\nlibres d\'implémenter comme bon nous semble.\\n\\nSeulement voilà, un serveur web doit se fondre dans la masse qu\'est Internet et\\nnous devons créer nos URL de la meilleure manière qui soit afin d\'offrir un\\ncontexte d\'utilisation optimal à nos clients (robots ou internautes).\\n\\nUN FORMAT COMPRÉHENSIBLE ET PRÉDICTIBLE\\nSelon les principes de REST, un bon format d\'URL doit être compréhensible par un\\nhumain. Par exemple, l\'URL http://world.com/fr-FR/persons/nfroidure.html est\\nfacilement appréhendable, même par une personne peu férue d\'informatique. On\\ncomprend facilement qu\'il s\'agit de la représentation HTML de la personne\\n\\"nfroidure\\" dans la langue française.\\n\\nElle est également prédictible car je peux en conclure qu\'en remplaçant fr-FR\\npar en-US, j\'aurai la représentation en anglais si elle est prise en charge. Si\\nje sais que nhoizey est une personne qui existe sur ce site, alors, en\\nremplaçant nfroidure, je devrais accéder à son profil en HTML. Si le format JSON\\nest pris en charge, je devrait pouvoir y accéder également en remplaçant html\\npar json.\\n\\nLa hiérachie est aussi importante.en supprimant /nfroidure, je peux faire le\\npari que la liste des personnes du site me sera présentée. Et si c\'est le cas,\\nje peux conclure que si je supprime la ressource nfroidure, alors, la ressource\\nparente sera elle aussi différente lors de mon prochain accès. Cela est très\\nimportant pour que les robots clients de votre API puissent mettre à jour leur\\ncache de manière optimale.\\n\\nAJOUTONS UN PEU DE HTTP\\nPour HTTP tout est ressource. Un peu à la manière de la POO, une personne est\\nune ressource et la page HTML qui correspond à son profil est une représentation\\nde cette personne.\\n\\nGrâce à un mecanisme appelé négociation de contenu, un client, lorsqu\'il\\neffectue une requête HTTP vers une URL particulière transmet en entête une série\\nd\'information sur les types de représentation qu\'il peut traiter.\\n\\nL\'entête Accept détermine quel format de représentation un client peut lire.\\nAccept-Language détermine les langues que le client (ou plutôt que l\'utilisateur\\ndu navigateur) peut lire. L\'entête Accept-Charset donne les types de jeux de\\ncaractères autorisés par le système du client.\\n\\nSi on reprend l\'exemple précédent, une requête GET vers une URL du type\\nhttp://world.com/persons/nfroidure est sensée vous fournir une représentation\\nque votre navigateur peut interpréter en fonction des entêtes fournies par votre\\nrequête. Cela peut être du HTML, mais aussi un fichier MP3 dans le cas où\\nl\'accès se ferait via un hypothétique navigateur vocal n\'acceptant que des\\nfichiers audio.\\n\\nCependant, ces URL particulières que je nommerai URL abstractives ne sont pas\\ndes représentations. Elles sont des ressources qui peuvent potentiellement être\\nservies sous différentes représentations possibles.\\n\\nGrâce au mécanisme des redirections, le serveur redirige le client vers la bonne\\nreprésentation. Pourquoi ne pas servir directement la représentation, sans\\nredirection ? Pour des raisons pratiques. Un proxy HTTP public pourrait stocker\\nune représentation et servir cette même représentation à des clients qui ne\\npourraient pas les interpréter et pour lesquels une autre représentation serait\\nplus adéquat.\\n\\nDe plus, cela laisse la possibilité à l\'utilisateur de pointer une ressource ou\\nune représentation particulière d\'une ressource. Imaginons que notre serveur web\\nd\'exemple propose une version JPG d\'une personne. Je peut ainsi afficher une\\nimage dans une page web en allemand qui affiche cette ressource et j\'ai l\'URL\\nvers la représentation exacte que je souhaite (ici:\\nhttp://world.com/de-DE/persons/nfroidure.jpg).\\n\\nMERVEILLEUX ! SAUF QUE.\\nMalheureusement, les navigateurs affichent toujours l\'URL finale d\'une\\nredirection ce qui fait qu\'un utilisateur peu averti, même s\'il est aisé de le\\ndeviner, fera rarement un lien vers l\'URL abstractive d\'une ressource. La faute\\nà qui ? Aux navigateurs ? Peut-être devraient-il proposer le choix entre les\\ndeux type d\'URL afin d\'éduquer les utilisateurs. Aux webmasters ? Peut-être\\naussi, les bonnes pratiques citées ici sont rarement respectées, même par les\\nplus grands. Les utilisateurs n\'ont donc pas l\'habitude de considérer le format\\nd\'une URL comme représentatif du contenu qu\'elle permet de consulter.\\n\\nN\'empêche que, ces bonnes pratiques sont géniales, si vous créez une API REST en\\nrespectant ces principes, ce sera un régal de l\'utiliser et ce sera performant\\ngrâce à des caches bien rencardés. Et si vous créez juste un site web et que\\nDELETE et PUT sont des gros mots pour vous, dîtes vous bien que quand vous\\ndéciderez de partir sur du REST, votre vie en sera facilitée.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc24:JSON.parse('{"path":"contents/pages/fr/blog/bref_j_ai_lu_lean_startup.html","title":"Bref, j\'ai lu Lean Startup","description":"Critique du livre Lean Startup à travers le prisme d\'un développeur.","shortTitle":"Lean Startup","shortDesc":"En savoir plus sur le livre fondateur du Lean Startup","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBREF, J\'AI LU LEAN STARTUP\\nDepuis Services Web Restful [services_web_restful.html], rarement un livre ne\\nm\'avait autant inspiré. Quand mon collègue, Arnaud, m\'a proposé de me le prêter,\\nj\'étais open, mais en même temps, une arrière pensée m\'a forcément traversée\\nl\'esprit: \\"Encore un buzzword et des méthodes à la c...\\".\\n\\nEn fait, pas du tout. Avec ce livre, j\'ai mis des mots sur des intuitions, j\'ai\\ndécouvert une méthode permettant de traduire les bonnes intentions en\\napplications concrètes.\\n\\nQU\'EST-CE QUE LE LEAN STARTUP ?\\n Le Docteur Denfer (Austin Powers), citant le Lean Startup.\\n[/images/lean-startup.jpg] [http://memegenerator.net/instance/59780980]\\n\\nLe Lean Startup [https://fr.wikipedia.org/wiki/Lean_Startup] est, grossièrement,\\nl\'application de la méthode scientifique à l\'innovation.\\n\\nQui aujourd\'hui remettrait en cause la méthode scientifique ? N\'est-elle pas la\\nsource de tous les progrès technologiques auxquels nous avons assisté depuis des\\nsiècles ?\\n\\nQU\'EST-CE QUE ÇA CHANGE POUR MOI ?\\nOr, ce livre démontre que nous avons culturellement tendance à nous éloigner de\\ncette dernière quand il s\'agit de créer un produit innovant. Plutôt que de\\ndémontrer par l\'expérience la validité de nos assertions, nous faisons des plans\\nsur la comète, gaspillant parfois des années avant de nous rendre compte de\\nnotre erreur.\\n\\nQu\'est-ce qui peut le plus faire mouche qu\'une promesse de ne jamais gaspiller\\nson temps pour un développeur ? Nous avons tous connu cette mauvaise expérience\\nde voir son code purement et simplement jetté à la poubelle ?\\n\\n Comic humoristique sur l\'annulation de projet\\n[http://www.commitstrip.com/wp-content/uploads/2015/02/Strip-Je-suis-Projet-650-final.jpg]\\nSource: CommitStrip.com\\n[http://www.commitstrip.com/fr/2015/02/06/true-story-a-moment-of-silence/]\\n\\nAutre problème fréquent, les allers-retours incessants. Ces features qu\'on\\najoute et qu\'on retire, sans même avoir vérifié quoi que ce soit empiriquement\\n[https://fr.wikipedia.org/wiki/Empirisme]. On passe parfois un temps infini sur\\nles finitions contestables d\'un produit qui risque de ne pas être adopté par les\\nutilisateurs.\\n\\nOn sait, quand on discute entre développeurs/intégrateurs/designers, que tout\\ncela ne rime à rien, mais on ne sait pas mettre de mots là-dessus. Mais, en\\nvérité, je vous le dis mes frères, ces mots sont la validation des\\napprentissages, le produit minimum viable, le design itératif et tous les autres\\ngros mots que vous découvrirez en lisant ce livre.\\n\\nUNE PHILOSOPHIE DE VIE\\nJe sais d\'expérience qu\'il est très difficile de s\'imposer une discipline lors\\nde la gestion d\'un projet. Je me souviens de rendez-vous client durant lesquels\\nje devais régulièrement recentrer le débat sur les objectifs de ce dernier qui\\navait souvent tendance à parler fonctionnalités avant même de dire où il voulait\\naller, quels étaient ses objectifs.\\n\\nLe Lean Startup ne fait pas exception, il ne suffit pas d\'être d\'accord avec ses\\nprincipes, il s\'agit d\'une discipline personnelle, d\'un lutte contre notre\\npropre tendance à extrapoler notre vision à tous, sans même prendre la peine de\\nla confronter à notre cible.\\n\\nAu delà de proposer une méthode, ce livre explique comment elle s\'est imposée à\\nson auteur, Eric Ries, au fur et à mesure de ses échecs et comment d\'autres se\\nla sont appropriée avec succès.\\n\\nBALAYER DEVANT NOTRE PORTE\\nJ\'aime notre communauté autant que je la hais. En effet, on est cool, \\"open\\" et\\nintelligents. Sauf que...\\n\\nSauf que je connais pas beaucoup de développeurs qui n\'ont pas d\'avis, qui\\ndisent simplement, je ne sais pas. C\'est une cycle itératif continuel entre this\\nis the new hotness et this is the worst bullshit.\\n\\n Célèbre mème x all the things avec le modèle {buzz_word} suggéré\\n[/images/buzz-all-the-things.jpg] [http://memegenerator.net/instance/59791291] \\nCélèbre mème x all the things avec le mot bullshit\\n[/images/bullshit-all-the-things.jpg]\\n[http://memegenerator.net/instance/59791233]\\n\\nC\'est pourquoi ce livre m\'a plût, l\'auteur tord le coup à ces comportements en\\nprenant des exemples assez judicieux de fonctionnalités qui paraissent top sur\\nle papier. Et pourtant, au final, l\'expérience a prouvé qu\'elles n\'ont pas\\napporté quoi que ce soit dans le contexte des projets exposés.\\n\\nVous savez, le genre de fonctionnalité (en l\'occurence, le pattern lazy\\nregistration [http://ui-patterns.com/pattern/LazyRegistration]) dont tout bon\\ndéveloppeur marquerait la nécessité par le sceau de l\'expertise.\\n\\nC\'est je pense le moment de placer une citation de Bertrand Russell: Even when\\nthe experts all agree, they may well be mistaken.. L\'expérience, elle, ne ment\\njamais, pour peu qu\'on la tente et qu\'on en mesure les effets.\\n\\nVous l\'aurez compris, je ne vous recommande pas ce livre, je vous somme de le\\nlire ! A fortiori si vous avez l\'intention de créer un produit innovant.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc25:JSON.parse('{"path":"contents/pages/fr/blog/browserify.html","title":"Browserify : Partager le code JavaScript entre front et back end","description":"Exécuter du JavaScript aussi bien côté serveur que dans le navigateur de vos clients devient possible grâce à Browserify.","shortTitle":"Browserify","shortDesc":"En savoir plus sur Browserify","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBROWSERIFY : PARTAGER LE CODE JAVASCRIPT ENTRE FRONT ET BACK END\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. L\'approche privilégiée aujourd\'hui pour builder du code est basée\\nsur les bundlers comme Webpack ou Rollup.\\n\\nExécuter du JavaScript aussi bien côté serveur que dans le navigateur de vos\\nclients devient possible grâce à Browserify.\\n\\n BROWSERIFY [HTTP://BROWSERIFY.ORG]: QU\'EST-CE QUE C\'EST ?\\nIl dors et déjà possible d\'exécuter du JavaScript côté client et côté serveur\\nsans utiliser Browserify. Cependant, la grande entrave actuellement est le fait\\nque les frameworks pour le front et le back end sont différents. Ainsi,\\nl\'exercice est assez périlleux car on est contraint d\'utiliser du JavaScript\\nassez rudimentaire.\\n\\nDe plus, la question des dépendances de votre projet est difficile à résoudre\\ncar les systèmes de packets sont nombreux et aucun ne sort vraiment du lot côté\\nfront.\\n\\nBrowserify résouds tous ces problèmes grâce à une technique radicale : porter la\\nplupart des modules natifs de NodeJS sur le front.\\n\\nNPM dans le navigateur\\n\\nL\'idée de browserify est de créer un fichier (bundle) contenant vos fichiers\\nJavaScript, les modules chargés grâce à la fonction require de NodeJS et enfin,\\nles modules natifs susceptibles d\'être utiles dans le navigateur.\\n\\nIl existe déjà un grand nombre de modules JavaScript compatibles avec Browserify\\npubliés sur NPM. Certains exclusivement front, d\'autres indépendamment\\nutilisables côté client et côté serveur.\\n\\nLES CAS D\'UTILISATIONS\\nJe vois déjà les sceptiques se demander pourquoi on voudrait partager du code\\nentre serveur et client. Les situations les plus fréquentes sont :\\n\\n * mutualiser la validation de données côté client et côté serveur. Dans ce cas,\\n   il faudra bien veiller à ce que cette validation se fasse en deux temps côté\\n   serveur : vérification du format puis vérification des contraintes. En effet,\\n   la plupart du temps, les contraintes dues au systèmes se font uniquement côté\\n   serveur. \\n * partage de code de génération du HTML avec un système de template\\n   fonctionnant aussi bien en front qu\'en back. Avec ce cas d\'usage vient aussi\\n   le fait de mutualiser le code gérant l\'internationalisation. \\n * soulagement des CPU des serveurs grâce à l\'exécution de code back sur les\\n   navigateurs récents. Vous générez des données que les utilisateurs peuvent\\n   télécharger ? Pourquoi ne pas les générer directement sur le poste du client\\n   ? \\n * prévisualisation côté client. J\'ai notamment utilisé cette technique pour mon \\n   générateur de fontes d\'icône full front\\n   [http://nfroidure.github.io/svgiconfont/]. \\n\\nEnfin, d\'une manière générale, ma maxime est qui peut le plus, peut le moins,\\npourquoi se priver de cette possibilité quand elle s\'offre à vous ?\\n\\nDES GAINS ÉVIDENTS\\nEn plus de ne pas avoir à écrire deux fois la même chose dans des langages\\ndifférents, le partage de code entre serveur et navigateur vous permet d\'avoir\\nun code plus solide. Le code front et back est le même, il est donc consistant\\net souffre des mêmes bugs. Un bug résolu sur le navigateur et votre code serveur\\nest amélioré. Pas la peine de vérifier à deux endroits si un changement a lieu\\ndans votre façon de vérifier les données de formulaires.\\n\\nBrowserify étant basé sur NodeJS et NPM, c\'est tout l\'écosystème de Node qu\'il\\nvous apporte (le plus dynamique actuellement). Vous seriez surpris d\'apprendre\\ntout ce qu\'on peut faire dans le navigateur avec du simple JavaScript. Il suffit\\nde vérifier que le module que vous souhaitez utiliser est bien compatible.\\n\\nEnfin, grâce à un simple npm install, toutes les dépendances de votre projet,\\nback comme front, sont automatiquement récupérées. Cela rend le déployment de\\nvotre application vraiment simple.\\n\\nTROUVER/CRÉER DES MODULES BROWSERIFY-FRIENDLY\\nPour qu\'un module soit utilisable avec Browserify, il faut qu\'il soit pur. Il ne\\ndoit pas avoir d\'état interne et uniquement exposer des API qui retourneront les\\nmêmes résultats avec les même paramètres en entrées. Cela exclue donc tout usage\\ndu système de fichier. D\'ailleurs le modules fs de NodeJS n\'est pas et ne sera\\nprobablement jamais porté sur le navigateur.\\n\\nIl vaut mieux également éviter les modules qui ont trop de dépendances. L\'idéal\\nest d\'utiliser des modules qui n\'en ont pas du tout. Au minimum, assurez-vous\\nqu\'il n\'y a pas de dépendances du style lodash ou underscore. En effet, vous\\nauriez vite fait de vous retrouver avec cinq frameworks différents faisant la\\nmême chose dans votre code front.\\n\\nLes streams de Node se prêtent parfaitement à la création de modules pour\\nBrowserify puisque leur design favorise la programmation fonctionnelle. De plus,\\nleur nature asynchrone est adaptée au développement dans le navigateur.\\n\\nLa philosophie Unix ; faîtes une seule chose, mais faîtes la bien, s\'applique\\ndonc encore plus fortement pour Browserify et ce n\'est pas un mal.\\n\\nBref, Browserify, c\'est bon, mangez-en ! Seul revers de la médaille, Browserify\\nne fonctionne qu\'avec les navigateur récents (IE9+), mais je pense qu\'avec\\nquelques polyfills, il doit être possible de matcher IE8. Pour un exemple de\\nprojet utilisant Browserify, jetez un oeil à Hexa [http://hexa.insertafter.com/]\\n.\\n\\nPour ma part, j\'ai complètement remplacé RequireJS par Browserify pour mes sides\\nprojects et je compte bien passer au pro dès que j\'aurai résolu tous les petits\\ndétails restants.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc26:JSON.parse('{"path":"contents/pages/articles-browserify.html","title":"Browserify : Partager le code JavaScript entre front et back end","description":"Exécuter du JavaScript aussi bien côté serveur que dans le navigateur de vos clients devient possible grâce à Browserify.","shortTitle":"Browserify","shortDesc":"En savoir plus sur Browserify","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBROWSERIFY : PARTAGER LE CODE JAVASCRIPT ENTRE FRONT ET BACK END\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. L\'approche privilégiée aujourd\'hui pour builder du code est basée\\nsur les bundlers comme Webpack ou Rollup.\\n\\nExécuter du JavaScript aussi bien côté serveur que dans le navigateur de vos\\nclients devient possible grâce à Browserify.\\n\\n BROWSERIFY [HTTP://BROWSERIFY.ORG]: QU\'EST-CE QUE C\'EST ?\\nIl dors et déjà possible d\'exécuter du JavaScript côté client et côté serveur\\nsans utiliser Browserify. Cependant, la grande entrave actuellement est le fait\\nque les frameworks pour le front et le back end sont différents. Ainsi,\\nl\'exercice est assez périlleux car on est contraint d\'utiliser du JavaScript\\nassez rudimentaire.\\n\\nDe plus, la question des dépendances de votre projet est difficile à résoudre\\ncar les systèmes de packets sont nombreux et aucun ne sort vraiment du lot côté\\nfront.\\n\\nBrowserify résouds tous ces problèmes grâce à une technique radicale : porter la\\nplupart des modules natifs de NodeJS sur le front.\\n\\nNPM dans le navigateur\\n\\nL\'idée de browserify est de créer un fichier (bundle) contenant vos fichiers\\nJavaScript, les modules chargés grâce à la fonction require de NodeJS et enfin,\\nles modules natifs susceptibles d\'être utiles dans le navigateur.\\n\\nIl existe déjà un grand nombre de modules JavaScript compatibles avec Browserify\\npubliés sur NPM. Certains exclusivement front, d\'autres indépendamment\\nutilisables côté client et côté serveur.\\n\\nLES CAS D\'UTILISATIONS\\nJe vois déjà les sceptiques se demander pourquoi on voudrait partager du code\\nentre serveur et client. Les situations les plus fréquentes sont :\\n\\n * mutualiser la validation de données côté client et côté serveur. Dans ce cas,\\n   il faudra bien veiller à ce que cette validation se fasse en deux temps côté\\n   serveur : vérification du format puis vérification des contraintes. En effet,\\n   la plupart du temps, les contraintes dues au systèmes se font uniquement côté\\n   serveur. \\n * partage de code de génération du HTML avec un système de template\\n   fonctionnant aussi bien en front qu\'en back. Avec ce cas d\'usage vient aussi\\n   le fait de mutualiser le code gérant l\'internationalisation. \\n * soulagement des CPU des serveurs grâce à l\'exécution de code back sur les\\n   navigateurs récents. Vous générez des données que les utilisateurs peuvent\\n   télécharger ? Pourquoi ne pas les générer directement sur le poste du client\\n   ? \\n * prévisualisation côté client. J\'ai notamment utilisé cette technique pour mon \\n   générateur de fontes d\'icône full front\\n   [http://nfroidure.github.io/svgiconfont/]. \\n\\nEnfin, d\'une manière générale, ma maxime est qui peut le plus, peut le moins,\\npourquoi se priver de cette possibilité quand elle s\'offre à vous ?\\n\\nDES GAINS ÉVIDENTS\\nEn plus de ne pas avoir à écrire deux fois la même chose dans des langages\\ndifférents, le partage de code entre serveur et navigateur vous permet d\'avoir\\nun code plus solide. Le code front et back est le même, il est donc consistant\\net souffre des mêmes bugs. Un bug résolu sur le navigateur et votre code serveur\\nest amélioré. Pas la peine de vérifier à deux endroits si un changement a lieu\\ndans votre façon de vérifier les données de formulaires.\\n\\nBrowserify étant basé sur NodeJS et NPM, c\'est tout l\'écosystème de Node qu\'il\\nvous apporte (le plus dynamique actuellement). Vous seriez surpris d\'apprendre\\ntout ce qu\'on peut faire dans le navigateur avec du simple JavaScript. Il suffit\\nde vérifier que le module que vous souhaitez utiliser est bien compatible.\\n\\nEnfin, grâce à un simple npm install, toutes les dépendances de votre projet,\\nback comme front, sont automatiquement récupérées. Cela rend le déployment de\\nvotre application vraiment simple.\\n\\nTROUVER/CRÉER DES MODULES BROWSERIFY-FRIENDLY\\nPour qu\'un module soit utilisable avec Browserify, il faut qu\'il soit pur. Il ne\\ndoit pas avoir d\'état interne et uniquement exposer des API qui retourneront les\\nmêmes résultats avec les même paramètres en entrées. Cela exclue donc tout usage\\ndu système de fichier. D\'ailleurs le modules fs de NodeJS n\'est pas et ne sera\\nprobablement jamais porté sur le navigateur.\\n\\nIl vaut mieux également éviter les modules qui ont trop de dépendances. L\'idéal\\nest d\'utiliser des modules qui n\'en ont pas du tout. Au minimum, assurez-vous\\nqu\'il n\'y a pas de dépendances du style lodash ou underscore. En effet, vous\\nauriez vite fait de vous retrouver avec cinq frameworks différents faisant la\\nmême chose dans votre code front.\\n\\nLes streams de Node se prêtent parfaitement à la création de modules pour\\nBrowserify puisque leur design favorise la programmation fonctionnelle. De plus,\\nleur nature asynchrone est adaptée au développement dans le navigateur.\\n\\nLa philosophie Unix ; faîtes une seule chose, mais faîtes la bien, s\'applique\\ndonc encore plus fortement pour Browserify et ce n\'est pas un mal.\\n\\nBref, Browserify, c\'est bon, mangez-en ! Seul revers de la médaille, Browserify\\nne fonctionne qu\'avec les navigateur récents (IE9+), mais je pense qu\'avec\\nquelques polyfills, il doit être possible de matcher IE8. Pour un exemple de\\nprojet utilisant Browserify, jetez un oeil à Hexa [http://hexa.insertafter.com/]\\n.\\n\\nPour ma part, j\'ai complètement remplacé RequireJS par Browserify pour mes sides\\nprojects et je compte bien passer au pro dès que j\'aurai résolu tous les petits\\ndétails restants.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc27:JSON.parse('{"path":"contents/pages/fr/blog/bugmeback.html","title":"BugMeBack : La solution pour venir à bout de vos bugs ?","description":"Le problème avec les bugs, c\'est qu\'ils ont la facheuse tendance à\\n être détectés par des novices. C\'est alors le parcours du combattant pour se\\n les faire expliquer. BugMeBack va vous aider !","shortTitle":"BugMeBack","shortDesc":"En savoir plus sur BugMeBack","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBUGMEBACK : LA SOLUTION POUR VENIR À BOUT DE VOS BUGS ?\\n⚠ Attention: Cet article est ancien et l\'extension qui y est décrite est\\nabandonnée. J\'aime toujours autant le principe et j\'aurais aimé qu\'il rencontre\\nplus de traction, cependant, impossible de faire bouger les lignes quand on ne\\ns\'appelle pas Goolge ou Facebook ;).\\n\\nLe problème avec les bugs, c\'est qu\'ils ont la facheuse tendance à être détectés\\npar des novices. C\'est alors le parcours du combattant pour se les faire\\nexpliquer. BugMeBack va vous aider !\\n\\nDécidément, ParisWeb 2012 aura généré son lot de réflexions. Suite à la\\nconférence \\"Freelance, tu aurais besoin d\'un petit recadrage\\", j\'ai repensé à\\ncette discussion que nous avions eu sur la difficulté qu\'ont les développeurs\\nweb à se faire rapporter des bugs qui soient de véritables bugs. C\'est à dire :\\n\\n * reproductibles : si on ne peut pas le reproduire, alors il n\'y a pas de bug. \\n * détaillés : combien d\'entre nous ont eu le droit à des \\"ça marche pas\\" sans\\n   autre explication. On est alors obligés de creuser avec parfois plusieurs\\n   échanges de mails. \\n * etc...\\n\\nBref, les bugs reportés par madame Michu, c\'est un peu la foire à la saucisse.\\n\\nLA SOLUTION : BUGMEBACK\\nC\'est pourquoi j\'ai passé cette après-midi à concocter une petite extension pour\\nGoogle Chrome (et peut-être pour Firefox plus tard). L\'idée est de demander à\\nnos utilisateurs toutes les petites informations qui vont bien afin de nous\\npermettre de répondre au mieux à leur demande de correction de bogue.\\n\\nPour ce faire, un petit bouton permet d\'ouvrir un formulaire qui permet de\\nsoumettre un bug sans oublier toutes les informations nécessaires pour le\\nrésoudre. J\'ai triché de manière éhontée sur le formulaire de soumission de bug\\nde Bugzilla comme vous pouvez vous en rendre compte sur la capture d\'écran qui\\nsuit.\\n\\n Capture d\'écran de BugMeBack [/images/bugmeback.png]\\n\\nPetit bonus, l\'url, la taille de la fenêtre et une capture d\'écran du contenu de\\ncelle-ci sont attachés au bug. J\'ai encore un peu de bidouille à faire avec les\\nAPI expérimentales de Google Chrome pour récupérer également le contenu de la\\nconsole d\'erreur automatiquement.\\n\\nAUTOMATISATION\\nPar défaut, un résumé du bug sera proposé en copier/coller, mais pour les plus\\nbraves d\'entre vous, je vous propose d\'ajouter une balise link à vos sites web\\nqui vous permettra de récupéer le contenu du bug via une requête REST. Voici le\\nformat de la balise link que je vous propose :\\n\\n\\n<link rel=\\"bugreport\\" type=\\"application/json\\" href=\\"https://example.com/bug.json\\" />\\n\\nAvec cette balise présente dans vos pages, BugMeBack fera une requête de type\\nPOST avec pour contenu le rapport de bug. Il me reste encore à créer le driver\\nRest qui permettra cette interaction et je la mettrai sur tous mes sites web.\\nN\'hésitez pas à me proposer vos idées ou propositions d\'amélioration puisque\\npour le moment, rien n\'est écrit dans le marbre.\\n\\nVous pouvez installer cette extension depuis le Chrome Web Store\\n[https://chrome.google.com/webstore/detail/bugmeback/hgmagcomobmjhaomdoihiggpdekaehmg]\\n. Le projet est bien-sûr sur GitHub [https://github.com/nfroidure/BugMeBack],\\ntous les codeurs sont invités à la fête !\\n\\n Edition du billet le 31 octobre 2012 : suite à une proposition au WhatWG\\n[http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2012-October/037745.html],\\non m\'a suggéré d\'utiliser la balise link plutôt qu\'une balise meta ce qui se\\njustifie, j\'ai donc changé cet article en conséquence ainsi que l\'extension\\nBugMeBack.\\n\\n Edition du 12 novembre 2012 : l\'extension a été portée sur Opéra\\n[https://addons.opera.com/en/extensions/details/bugmeback/?display=fr], il ne\\nreste plus que Firefox, à moins qu\'un volontaire ne se déclare pour Internet\\nExplorer également.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc28:JSON.parse('{"path":"contents/pages/articles-bugmeback.html","title":"BugMeBack : La solution pour venir à bout de vos bugs ?","description":"Le problème avec les bugs, c\'est qu\'ils ont la facheuse tendance à\\n être détectés par des novices. C\'est alors le parcours du combattant pour se\\n les faire expliquer. BugMeBack va vous aider !","shortTitle":"BugMeBack","shortDesc":"En savoir plus sur BugMeBack","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBUGMEBACK : LA SOLUTION POUR VENIR À BOUT DE VOS BUGS ?\\n⚠ Attention: Cet article est ancien et l\'extension qui y est décrite est\\nabandonnée. J\'aime toujours autant le principe et j\'aurais aimé qu\'il rencontre\\nplus de traction, cependant, impossible de faire bouger les lignes quand on ne\\ns\'appelle pas Goolge ou Facebook ;).\\n\\nLe problème avec les bugs, c\'est qu\'ils ont la facheuse tendance à être détectés\\npar des novices. C\'est alors le parcours du combattant pour se les faire\\nexpliquer. BugMeBack va vous aider !\\n\\nDécidément, ParisWeb 2012 aura généré son lot de réflexions. Suite à la\\nconférence \\"Freelance, tu aurais besoin d\'un petit recadrage\\", j\'ai repensé à\\ncette discussion que nous avions eu sur la difficulté qu\'ont les développeurs\\nweb à se faire rapporter des bugs qui soient de véritables bugs. C\'est à dire :\\n\\n * reproductibles : si on ne peut pas le reproduire, alors il n\'y a pas de bug. \\n * détaillés : combien d\'entre nous ont eu le droit à des \\"ça marche pas\\" sans\\n   autre explication. On est alors obligés de creuser avec parfois plusieurs\\n   échanges de mails. \\n * etc...\\n\\nBref, les bugs reportés par madame Michu, c\'est un peu la foire à la saucisse.\\n\\nLA SOLUTION : BUGMEBACK\\nC\'est pourquoi j\'ai passé cette après-midi à concocter une petite extension pour\\nGoogle Chrome (et peut-être pour Firefox plus tard). L\'idée est de demander à\\nnos utilisateurs toutes les petites informations qui vont bien afin de nous\\npermettre de répondre au mieux à leur demande de correction de bogue.\\n\\nPour ce faire, un petit bouton permet d\'ouvrir un formulaire qui permet de\\nsoumettre un bug sans oublier toutes les informations nécessaires pour le\\nrésoudre. J\'ai triché de manière éhontée sur le formulaire de soumission de bug\\nde Bugzilla comme vous pouvez vous en rendre compte sur la capture d\'écran qui\\nsuit.\\n\\n Capture d\'écran de BugMeBack [/images/bugmeback.png]\\n\\nPetit bonus, l\'url, la taille de la fenêtre et une capture d\'écran du contenu de\\ncelle-ci sont attachés au bug. J\'ai encore un peu de bidouille à faire avec les\\nAPI expérimentales de Google Chrome pour récupérer également le contenu de la\\nconsole d\'erreur automatiquement.\\n\\nAUTOMATISATION\\nPar défaut, un résumé du bug sera proposé en copier/coller, mais pour les plus\\nbraves d\'entre vous, je vous propose d\'ajouter une balise link à vos sites web\\nqui vous permettra de récupéer le contenu du bug via une requête REST. Voici le\\nformat de la balise link que je vous propose :\\n\\n\\n<link rel=\\"bugreport\\" type=\\"application/json\\" href=\\"https://example.com/bug.json\\" />\\n\\nAvec cette balise présente dans vos pages, BugMeBack fera une requête de type\\nPOST avec pour contenu le rapport de bug. Il me reste encore à créer le driver\\nRest qui permettra cette interaction et je la mettrai sur tous mes sites web.\\nN\'hésitez pas à me proposer vos idées ou propositions d\'amélioration puisque\\npour le moment, rien n\'est écrit dans le marbre.\\n\\nVous pouvez installer cette extension depuis le Chrome Web Store\\n[https://chrome.google.com/webstore/detail/bugmeback/hgmagcomobmjhaomdoihiggpdekaehmg]\\n. Le projet est bien-sûr sur GitHub [https://github.com/nfroidure/BugMeBack],\\ntous les codeurs sont invités à la fête !\\n\\n Edition du billet le 31 octobre 2012 : suite à une proposition au WhatWG\\n[http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2012-October/037745.html],\\non m\'a suggéré d\'utiliser la balise link plutôt qu\'une balise meta ce qui se\\njustifie, j\'ai donc changé cet article en conséquence ainsi que l\'extension\\nBugMeBack.\\n\\n Edition du 12 novembre 2012 : l\'extension a été portée sur Opéra\\n[https://addons.opera.com/en/extensions/details/bugmeback/?display=fr], il ne\\nreste plus que Firefox, à moins qu\'un volontaire ne se déclare pour Internet\\nExplorer également.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc29:JSON.parse('{"path":"contents/pages/fr/blog/capskiller_stop_aux_majuscules.html","title":"CapsKiller : Stop aux majuscules","description":"Les digital natives supportent mal les majuscules dans les courriels. En effet, cela est assimilé à des cris. Malheureusement, tout le monde n\'en fait pas grand cas. CapsKiller pour Thunderbird est là pour vous en protéger.","shortTitle":"CapsKiller","shortDesc":"En savoir plus sur cette extension Thunderbird","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCAPSKILLER : STOP AUX MAJUSCULES\\nLes digital natives supportent mal les majuscules dans les courriels. En effet,\\ncela est assimilé à des cris. Malheureusement, tout le monde n\'en fait pas grand\\ncas. CapsKiller pour Thunderbird est là pour vous en protéger.\\n\\nLES MAJUSCULES, CE FLÉAU\\nTout le monde ne le sait pas encore, mais il est très impoli d\'écrire\\nentièrement en majuscule un message sur Internet. La Nétiquette, charte éthique\\nsur Internet, le rappelle dans ses conseils pour la mise en forme\\n[https://fr.wikipedia.org/wiki/N%C3%A9tiquette#Mise_en_forme]. Malheureusement,\\npar ignorance ou par négligence, je reçois encore parfois des e-mails écrits\\nentièrement en capitales. Cela a le don de m\'exaspérer, je le vis comme un\\nmanque de respect.\\n\\nJe me suis récemment permis de le préciser à un client. Cela n\'a pas plût. Il\\nest vrai que c\'est toujours difficile et aventureux de rappeler à quelqu\'un les\\nrègles de politesse, mais dans le même temps, je ne voulais pas subir 5 e-mails\\npar jour en majuscules.\\n\\nBref, il a fallut que j\'explique pourquoi des e-mails en majuscules nuisent à\\nmon ambiance de travail, que cela ne coûtait pas grand chose de mettre en forme\\nun e-mail. Je ne suis d\'ailleurs pas sûr d\'avoir convaincu ce client...\\n\\nPuis j\'ai réfléchi au problème et je me suis dit que je ne pouvais pas passer\\nune demi-heure au téléphone à expliquer des règles qui sont la base du savoir\\nvivre selon moi. Qui écrirai une lettre papier entièrement en majuscules ?\\nPourquoi serait-ce normal dans un e-mail ? Bref, j\'ai finalement trouvé une\\nsolution.\\n\\nFILTRER LES MAJUSCULES\\nC\'est tout bête, mais diablement efficace. Pour ne pas subir l\'ignorance ou la\\nbêtise, rien de tel que le filtrage. Je me suis donc mis à la recherche d\'une\\nextension pour Thunderbird qui filtre les messages pour passer les majuscules en\\ntrop en minuscule, mais je n\'ai rien trouvé.\\n\\nJe me suis dit que ça prendrai pas trop de temps de la faire vu que je connais\\nbien l\'univers des extensions pour Firefox. Alors je m\'y suis mis, et j\'ai déjà\\nquelques résultats.\\n\\nCAPSKILLER\\n Logo actuel de CapsKiller [/images/capskiller.png]Bref, j\'ai créé CapsKiller.\\nComme son nom l\'indique, cette extension pour Thunderbird supprime toutes les\\nmajuscules utilisées de manière abusive et les remplace par des minuscules. Pour\\nl\'instant dans les sujets des e-mails, mais je pense parvenir à filtrer\\négalement le contenu des e-mails (edition du 25 février 2013 : c\'est maintenant\\nfait !). Vous pouvez télécharger Caps Killer sur le site des extensions pour\\nThunderbird [https://addons.mozilla.org/fr/thunderbird/addon/caps-killer/].\\n\\nJ\'ai créé un dépôt GitHub [https://github.com/nfroidure/CapsKiller]pour vous\\npermettre de regarder la source, voire de me filer un coup de main. Comme toutes\\nmes extensions, le code est sous licence GNU/GPL donc faîtes vous plaisir.\\n\\nSi une âme charitable se sent capable de créer un logo mieux que celui que je\\nviens de faire, qu\'il se fasse connaître (ça ne devrait pas être trop difficile\\nde faire mieux).\\n\\nCapsKiller est compatible avec Thunderbird 3 et supérieur. Pour tester cette\\nextension, il vous suffit de cloner le projet et de créer un fichier nommé\\n\\"capskiller@elitwork.com\\" contenant le chemin vers le dossier où vous avez cloné\\nla source et de le mettre dans le dossier extensions de votre profil\\nThunderbird. C\'est expliqué plus en détail dans le fichier README.md du dépôt.\\n\\nJe réfléchis à filtrer tous les autres petits trucs énervants, comme : ??? ou\\n!!! ou ... à la fin d\'une phrase ou d\'un sujet. Surtout n\'hésitez pas à me\\ndonner d\'autres exemples qu\'on se constitue une petite liste des trucs qu\'on a\\npas envie de voir dans un e-mail.\\n\\nEn attendant, j\'ai déjà vu passer un ou deux filtrages, les spams sont friands\\ndes majuscules, même s\'il ne sont pas filtrés par le logiciel anti-spam, au\\nmoins, leur majuscules ne me piquent plus les yeux :).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc30:JSON.parse('{"path":"contents/pages/articles-capskiller_stop_aux_majuscules.html","title":"CapsKiller : Stop aux majuscules","description":"Les digital natives supportent mal les majuscules dans les courriels. En effet, cela est assimilé à des cris. Malheureusement, tout le monde n\'en fait pas grand cas. CapsKiller pour Thunderbird est là pour vous en protéger.","shortTitle":"CapsKiller","shortDesc":"En savoir plus sur cette extension Thunderbird","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCAPSKILLER : STOP AUX MAJUSCULES\\nLes digital natives supportent mal les majuscules dans les courriels. En effet,\\ncela est assimilé à des cris. Malheureusement, tout le monde n\'en fait pas grand\\ncas. CapsKiller pour Thunderbird est là pour vous en protéger.\\n\\nLES MAJUSCULES, CE FLÉAU\\nTout le monde ne le sait pas encore, mais il est très impoli d\'écrire\\nentièrement en majuscule un message sur Internet. La Nétiquette, charte éthique\\nsur Internet, le rappelle dans ses conseils pour la mise en forme\\n[https://fr.wikipedia.org/wiki/N%C3%A9tiquette#Mise_en_forme]. Malheureusement,\\npar ignorance ou par négligence, je reçois encore parfois des e-mails écrits\\nentièrement en capitales. Cela a le don de m\'exaspérer, je le vis comme un\\nmanque de respect.\\n\\nJe me suis récemment permis de le préciser à un client. Cela n\'a pas plût. Il\\nest vrai que c\'est toujours difficile et aventureux de rappeler à quelqu\'un les\\nrègles de politesse, mais dans le même temps, je ne voulais pas subir 5 e-mails\\npar jour en majuscules.\\n\\nBref, il a fallut que j\'explique pourquoi des e-mails en majuscules nuisent à\\nmon ambiance de travail, que cela ne coûtait pas grand chose de mettre en forme\\nun e-mail. Je ne suis d\'ailleurs pas sûr d\'avoir convaincu ce client...\\n\\nPuis j\'ai réfléchi au problème et je me suis dit que je ne pouvais pas passer\\nune demi-heure au téléphone à expliquer des règles qui sont la base du savoir\\nvivre selon moi. Qui écrirai une lettre papier entièrement en majuscules ?\\nPourquoi serait-ce normal dans un e-mail ? Bref, j\'ai finalement trouvé une\\nsolution.\\n\\nFILTRER LES MAJUSCULES\\nC\'est tout bête, mais diablement efficace. Pour ne pas subir l\'ignorance ou la\\nbêtise, rien de tel que le filtrage. Je me suis donc mis à la recherche d\'une\\nextension pour Thunderbird qui filtre les messages pour passer les majuscules en\\ntrop en minuscule, mais je n\'ai rien trouvé.\\n\\nJe me suis dit que ça prendrai pas trop de temps de la faire vu que je connais\\nbien l\'univers des extensions pour Firefox. Alors je m\'y suis mis, et j\'ai déjà\\nquelques résultats.\\n\\nCAPSKILLER\\n Logo actuel de CapsKiller [/images/capskiller.png]Bref, j\'ai créé CapsKiller.\\nComme son nom l\'indique, cette extension pour Thunderbird supprime toutes les\\nmajuscules utilisées de manière abusive et les remplace par des minuscules. Pour\\nl\'instant dans les sujets des e-mails, mais je pense parvenir à filtrer\\négalement le contenu des e-mails (edition du 25 février 2013 : c\'est maintenant\\nfait !). Vous pouvez télécharger Caps Killer sur le site des extensions pour\\nThunderbird [https://addons.mozilla.org/fr/thunderbird/addon/caps-killer/].\\n\\nJ\'ai créé un dépôt GitHub [https://github.com/nfroidure/CapsKiller]pour vous\\npermettre de regarder la source, voire de me filer un coup de main. Comme toutes\\nmes extensions, le code est sous licence GNU/GPL donc faîtes vous plaisir.\\n\\nSi une âme charitable se sent capable de créer un logo mieux que celui que je\\nviens de faire, qu\'il se fasse connaître (ça ne devrait pas être trop difficile\\nde faire mieux).\\n\\nCapsKiller est compatible avec Thunderbird 3 et supérieur. Pour tester cette\\nextension, il vous suffit de cloner le projet et de créer un fichier nommé\\n\\"capskiller@elitwork.com\\" contenant le chemin vers le dossier où vous avez cloné\\nla source et de le mettre dans le dossier extensions de votre profil\\nThunderbird. C\'est expliqué plus en détail dans le fichier README.md du dépôt.\\n\\nJe réfléchis à filtrer tous les autres petits trucs énervants, comme : ??? ou\\n!!! ou ... à la fin d\'une phrase ou d\'un sujet. Surtout n\'hésitez pas à me\\ndonner d\'autres exemples qu\'on se constitue une petite liste des trucs qu\'on a\\npas envie de voir dans un e-mail.\\n\\nEn attendant, j\'ai déjà vu passer un ou deux filtrages, les spams sont friands\\ndes majuscules, même s\'il ne sont pas filtrés par le logiciel anti-spam, au\\nmoins, leur majuscules ne me piquent plus les yeux :).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc31:JSON.parse('{"path":"contents/pages/fr/blog/champs_set_et_group_by.html","title":"Les champs SET et les requêtes GROUP BY","description":"J\'adore utiliser les champs de type SET pour leur souplesse et leur nature multivaluées, mais quand GROUP BY entre dans la place, attention les dégâts !","shortTitle":"A propos de SET & GROUP BY","shortDesc":"En savoir plus sur SET & GROUP BY utilisés conjointement","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES CHAMPS SET ET LES REQUÊTES GROUP BY\\nJ\'adore utiliser les champs de type SET pour leur souplesse et leur nature\\nmultivaluées, mais quand GROUP BY entre dans la place, attention les dégâts !\\n\\nPETIT RAPPEL SUR LES CHAMPS SET DANS MYSQL\\nSi j\'aime tant utiliser les champs SET dans mes tables, c\'est que contrairement\\naux champs à première vue similaires de type ENUM, ces derniers peuvent être\\nmultivalués. Imaginons la table suivante permettant de stocker des documents\\ntechniques, relatifs à des modèles d\'équipements, qui peuvent être de plusieurs\\ntypes prédéfinis :\\n\\nCREATE TABLE `documents` (\\n `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\\n `label` varchar(75) NOT NULL DEFAULT \'\',\\n `model` mediumint(8) unsigned DEFAULT NULL COMMENT \'link:equipmentModels\',\\n `type` set(\'standard\',\'law\',\'rule\',\'assemblynotice\',\'washnotice\',\'usenotice\',\'certificate\',\'testreport\',\'implant\') NOT NULL DEFAULT \'law\',\\n `description` text,\\n `applicationDate` date NOT NULL DEFAULT \'0000-00-00\',\\n PRIMARY KEY (`id`),\\n KEY `model` (`model`),\\n KEY `applicationDate` (`applicationDate`),\\n KEY `type` (`type`)\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1175 ;\\n\\nL\'avantage du champs SET est que pour un set prédéfini de valeurs qui n\'est pas\\namené à évoluer, on fait l\'économie d\'une table de jointure qui rendrait plus\\ncomplexe notre schema. Mais ce n\'est pas le seul avantage de ce type de champs.\\nEn effet, les valeurs ne sont pas stockées sous une forme textuelle dans la base\\nde donnée, mais sous la forme d\'un entier particulier.\\n\\nUn peu comme pour les droits UNIX, chaque valeurs du champs SET se voit assigner\\nen correspondance un entier dont le bit de poids faible indique la position dans\\nla liste des valeurs [https://dev.mysql.com/doc/refman/8.0/en/set.html]acceptées\\npar le champs de type SET. Pour notre table, on a donc standard=1, law=2,\\nrule=4, assemblynotice=8, washnotice=16, usenotice=32, certificate=64,\\ntestreport=128, implant=256. Un champs SET ne peut avoir que 64 valeurs ce qui\\ncorrespond à la valeur maximale d\'un entier non signé sur un système 64bits.\\n\\nAinsi, si je souhaite obtenir la liste des documents contenant une notice\\nd\'utilisation, je peux indifféremment utiliser les deux requêtes suivantes :\\n\\nSELECT * FROM `documents` WHERE `type` LIKE \'%usenotice%\' # ici type est converti en chaîne\\nSELECT * FROM `documents` WHERE `type`&32\' # ici type est converti en entier\\nSELECT * FROM `documents` WHERE FIND_IN_SET(`type`,\'usenotice\')>0 # ici une fonction spécifique aux champs SET est utilisé\\n\\nIdéalement, il vaut mieux utiliser la fonction dédiée ou la conversion en chaîne\\ncar elles sont indépendantes de l\'ordre des valeurs dans le champs SET \\ncontrairement à la technique de l\'opérateur binaire &. Mais il existe un cas où\\ncela peut sauver la vie, c\'est ce qui vient de m\'arriver pour cette table.\\n\\nET UN JOUR GROUP BY ARRIVA\\nLe problème vient quand votre client vous demande si il serait possible de\\nsortir une liste des modèles d\'équipement pour lesquels certains documents ne\\nsont pas présents. La difficulté ici est qu\'à un modèle d\'équipement peuvent\\ncorrespondre plusieurs lignes de la table documents. Nous avons donc besoin de\\nréunir toutes les lignes correspondant au modèle associé et de \\"merger\\" les\\nvaleurs du champs type pour pouvoir y rechercher les valeurs supposées absentes.\\n\\nCe fût alors le moment d\'utiliser la valeur numérique des champs SET. Mon\\npremier réflexe fût d\'essayer de coupler la fonction SUM avec l\'opérateur\\nbinaire au sein d\'une seule et même requête, mais MySQL n\'accepte pas cette\\nforme, j\'ai donc dû utiliser les requêtes imbriquées, voilà le résultat :\\n\\nSELECT * FROM\\n (\\n SELECT organizations.label AS organization, equipmentModels.model AS eqtModel, equipmentModels.reference AS eqtRef,\\n equipmentModels.description AS eqtDesc, SUM(documents.type) AS docTypesInt, GROUP_CONCAT(documents.type) AS docTypesString\\n FROM `equipmentModels`\\n LEFT JOIN documents ON documents.model = equipmentModels.id\\n LEFT JOIN organizations ON organizations.id = equipmentModels.builder\\n GROUP BY equipmentModels.id\\n ORDER BY equipmentModels.builder\\n ) AS temp\\nWHERE docTypesInt IS NULL\\n # OR NOT docTypesInt&1 # standard\\n # OR NOT docTypesInt&2 # law\\n # OR NOT docTypesInt&4 # rule\\n OR NOT docTypesInt&8 #assemblynotice\\n OR NOT docTypesInt&16 #washnotice\\n OR NOT docTypesInt&32 #usernotice\\n OR NOT docTypesInt&64 #certificate\\n # OR NOT docTypesInt&128 #testreport\\n OR NOT docTypesInt&256 #implant\\n\\nLe principe est simple, on fait la somme des valeurs du champs type pour toutes\\nles lignes concernant le même équipement (grâce à la clause GROUP BY). Cette\\nsomme obtenue, on peut utiliser l\'opérateur binaire afin de vérifier la présence\\nd\'une ou plusieurs valeurs au sein de ces champs. la ligne docTypeInt IS NULL\\nsert à prendre également en compte le cas où il n\'y a aucune valeur de type\\ncorrespondant au modèle.\\n\\nLe lecteur averti aura remarqué une vaine tentative d\'utilisation de la fonction \\nGROUP_CONCAT qui aurait peut-être pu servir à continuer d\'utiliser une\\ncomparaison à partir de chaînes, mais le problème est qu\'il n\'y aura pas de\\nvirgule insérée entre chaque valeurs du champs type. J\'ai cherché après la\\nfonction GROUP_CONCAT_WS, mais elle n\'existe pas encore.\\n\\nBref, les champs SET c\'est pratique, mais il faut bien connaître leur nature\\npour pouvoir en profiter pleinement. Et vous, que faîtes vous avec vos SET ?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc32:JSON.parse('{"path":"contents/pages/articles-champs_set_et_group_by.html","title":"Les champs SET et les requêtes GROUP BY","description":"J\'adore utiliser les champs de type SET pour leur souplesse et leur nature multivaluées, mais quand GROUP BY entre dans la place, attention les dégâts !","shortTitle":"A propos de SET & GROUP BY","shortDesc":"En savoir plus sur SET & GROUP BY utilisés conjointement","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES CHAMPS SET ET LES REQUÊTES GROUP BY\\nJ\'adore utiliser les champs de type SET pour leur souplesse et leur nature\\nmultivaluées, mais quand GROUP BY entre dans la place, attention les dégâts !\\n\\nPETIT RAPPEL SUR LES CHAMPS SET DANS MYSQL\\nSi j\'aime tant utiliser les champs SET dans mes tables, c\'est que contrairement\\naux champs à première vue similaires de type ENUM, ces derniers peuvent être\\nmultivalués. Imaginons la table suivante permettant de stocker des documents\\ntechniques, relatifs à des modèles d\'équipements, qui peuvent être de plusieurs\\ntypes prédéfinis :\\n\\nCREATE TABLE `documents` (\\n `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\\n `label` varchar(75) NOT NULL DEFAULT \'\',\\n `model` mediumint(8) unsigned DEFAULT NULL COMMENT \'link:equipmentModels\',\\n `type` set(\'standard\',\'law\',\'rule\',\'assemblynotice\',\'washnotice\',\'usenotice\',\'certificate\',\'testreport\',\'implant\') NOT NULL DEFAULT \'law\',\\n `description` text,\\n `applicationDate` date NOT NULL DEFAULT \'0000-00-00\',\\n PRIMARY KEY (`id`),\\n KEY `model` (`model`),\\n KEY `applicationDate` (`applicationDate`),\\n KEY `type` (`type`)\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1175 ;\\n\\nL\'avantage du champs SET est que pour un set prédéfini de valeurs qui n\'est pas\\namené à évoluer, on fait l\'économie d\'une table de jointure qui rendrait plus\\ncomplexe notre schema. Mais ce n\'est pas le seul avantage de ce type de champs.\\nEn effet, les valeurs ne sont pas stockées sous une forme textuelle dans la base\\nde donnée, mais sous la forme d\'un entier particulier.\\n\\nUn peu comme pour les droits UNIX, chaque valeurs du champs SET se voit assigner\\nen correspondance un entier dont le bit de poids faible indique la position dans\\nla liste des valeurs [https://dev.mysql.com/doc/refman/8.0/en/set.html]acceptées\\npar le champs de type SET. Pour notre table, on a donc standard=1, law=2,\\nrule=4, assemblynotice=8, washnotice=16, usenotice=32, certificate=64,\\ntestreport=128, implant=256. Un champs SET ne peut avoir que 64 valeurs ce qui\\ncorrespond à la valeur maximale d\'un entier non signé sur un système 64bits.\\n\\nAinsi, si je souhaite obtenir la liste des documents contenant une notice\\nd\'utilisation, je peux indifféremment utiliser les deux requêtes suivantes :\\n\\nSELECT * FROM `documents` WHERE `type` LIKE \'%usenotice%\' # ici type est converti en chaîne\\nSELECT * FROM `documents` WHERE `type`&32\' # ici type est converti en entier\\nSELECT * FROM `documents` WHERE FIND_IN_SET(`type`,\'usenotice\')>0 # ici une fonction spécifique aux champs SET est utilisé\\n\\nIdéalement, il vaut mieux utiliser la fonction dédiée ou la conversion en chaîne\\ncar elles sont indépendantes de l\'ordre des valeurs dans le champs SET \\ncontrairement à la technique de l\'opérateur binaire &. Mais il existe un cas où\\ncela peut sauver la vie, c\'est ce qui vient de m\'arriver pour cette table.\\n\\nET UN JOUR GROUP BY ARRIVA\\nLe problème vient quand votre client vous demande si il serait possible de\\nsortir une liste des modèles d\'équipement pour lesquels certains documents ne\\nsont pas présents. La difficulté ici est qu\'à un modèle d\'équipement peuvent\\ncorrespondre plusieurs lignes de la table documents. Nous avons donc besoin de\\nréunir toutes les lignes correspondant au modèle associé et de \\"merger\\" les\\nvaleurs du champs type pour pouvoir y rechercher les valeurs supposées absentes.\\n\\nCe fût alors le moment d\'utiliser la valeur numérique des champs SET. Mon\\npremier réflexe fût d\'essayer de coupler la fonction SUM avec l\'opérateur\\nbinaire au sein d\'une seule et même requête, mais MySQL n\'accepte pas cette\\nforme, j\'ai donc dû utiliser les requêtes imbriquées, voilà le résultat :\\n\\nSELECT * FROM\\n (\\n SELECT organizations.label AS organization, equipmentModels.model AS eqtModel, equipmentModels.reference AS eqtRef,\\n equipmentModels.description AS eqtDesc, SUM(documents.type) AS docTypesInt, GROUP_CONCAT(documents.type) AS docTypesString\\n FROM `equipmentModels`\\n LEFT JOIN documents ON documents.model = equipmentModels.id\\n LEFT JOIN organizations ON organizations.id = equipmentModels.builder\\n GROUP BY equipmentModels.id\\n ORDER BY equipmentModels.builder\\n ) AS temp\\nWHERE docTypesInt IS NULL\\n # OR NOT docTypesInt&1 # standard\\n # OR NOT docTypesInt&2 # law\\n # OR NOT docTypesInt&4 # rule\\n OR NOT docTypesInt&8 #assemblynotice\\n OR NOT docTypesInt&16 #washnotice\\n OR NOT docTypesInt&32 #usernotice\\n OR NOT docTypesInt&64 #certificate\\n # OR NOT docTypesInt&128 #testreport\\n OR NOT docTypesInt&256 #implant\\n\\nLe principe est simple, on fait la somme des valeurs du champs type pour toutes\\nles lignes concernant le même équipement (grâce à la clause GROUP BY). Cette\\nsomme obtenue, on peut utiliser l\'opérateur binaire afin de vérifier la présence\\nd\'une ou plusieurs valeurs au sein de ces champs. la ligne docTypeInt IS NULL\\nsert à prendre également en compte le cas où il n\'y a aucune valeur de type\\ncorrespondant au modèle.\\n\\nLe lecteur averti aura remarqué une vaine tentative d\'utilisation de la fonction \\nGROUP_CONCAT qui aurait peut-être pu servir à continuer d\'utiliser une\\ncomparaison à partir de chaînes, mais le problème est qu\'il n\'y aura pas de\\nvirgule insérée entre chaque valeurs du champs type. J\'ai cherché après la\\nfonction GROUP_CONCAT_WS, mais elle n\'existe pas encore.\\n\\nBref, les champs SET c\'est pratique, mais il faut bien connaître leur nature\\npour pouvoir en profiter pleinement. Et vous, que faîtes vous avec vos SET ?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc33:JSON.parse('{"path":"contents/pages/fr/blog/choisir_module_nodejs.html","title":"Bien choisir ses modules NodeJS : ma méthode","description":"Hier à la troisième édition de ChtiJS, un question a été soulevée sur la confiance que l\'on pouvait avoir dans les modules NodeJS. Je vous dévoile donc ma méthode pour trancher entre npm install et npm remove ;).","shortTitle":"Choisir les modules NodeJS","shortDesc":"En savoir plus sur ma méthode pour choisir des modules pour NodeJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBIEN CHOISIR SES MODULES NODEJS : MA MÉTHODE\\nHier à la troisième édition de ChtiJS, un question a été soulevée sur la\\nconfiance que l\'on pouvait avoir dans les modules NodeJS. Je vous dévoile donc\\nma méthode pour trancher entre npm install et npm remove ;).\\n\\nIl existe deux types de modules. Les natifs que l\'on retrouve à l\'installation\\nde NodeJS et qui peuvent être utilisés via un simple require. Et les modules NPM\\n(Node Package Manager) que l\'on télécharge grâce à la commande npm install et\\nque l\'on peut consulter sur le site dédié aux modules NodeJS [http://npmjs.org].\\n\\nLES MODULES NATIFS\\nPour avoir créé des applications node assez tôt, je peux affirmer que même les\\nmodules instables cassent rarement la compatibilité. Si ils le font, c\'est\\nrarement brutal. On observe un message indiquant que telle ou telle méthode est\\ndépréciée plusieurs versions avant le retrait définitif. En général, on observe\\nplutôt un ajout de fonctionnalités plutôt qu\'une refonte des API.\\n\\nCependant, un excellent moyen d\'être informé des problèmes éventuels est de\\nsuivre le flux RSS du blog du projet [http://blog.nodejs.org/]qui pour chque\\nnouvelle version indique les ajout et modifications réalisés ainsi que les\\nproblèmes qui peuvent en résulter.\\n\\nLES MODULES TIERS\\nN\'importe qui peut soumettre un module NodeJS avec NPM. C\'est pour cette raison\\nqu\'il est nécessaire d\'être attentif à la sélection de ces derniers. L\'un des\\npremiers discriminants est l\'absence de tests.\\n\\nCHOISIR DES MODULES TESTÉS\\nLes chiffres mis en avant par un projet d\'examem des modules NPM sont sur ce\\npoint peu rassurant. Seuls 50% des modules possèderaient des tests. Parmi eux,\\nseul 50% passeraient leurs propres tests.\\n\\nUn projet qui ne passe pas tous les tests n\'est pas forcément mauvais. Il peut\\ns\'agir d\'un module réalisé en TDD et ainsi, les fonctionnalités futures dont les\\ntests sont déjà écrits mais pas encore implémentés ne passent logiquement pas.\\n\\nCHOISIR DES MODULES OPEN-SOURCE/COLLABORATIFS\\nUn autre point fondamental est la manière dont le développement est réalisé. Si\\nle projet est sur GitHub et possède une licence libre, c\'est déjà un bon point.\\nSi en plus il est vivant (mis en favoris, commit réguliers de diverses\\npersonnes, issues rapidement résolues etc...), alors vous pouvez avoir confiance\\ndans ce module.\\n\\nLa documentation doit également être bonne. Le fameux \\"Get started\\" dans le\\nfichier README est un must-have. Un documentation plus complète est un gros\\nplus. On peut prendre l\'exemple de RequireJS qui pousse le bouchon jusqu\'à\\ninsérer les URL du manuel pertinentes dans le texte de ses exceptions (vous\\nn\'avez plus qu\'à cliquer :p).\\n\\nINSPECTER LE CODE SOURCE\\nRien de mieux pour juger de la qualité d\'un module que d\'inspecter son code. Ma\\nméthode pour ce faire est très simple :\\n\\n * consultation du fichier package.json : on peut ainsi y trouver la dépendance\\n   à d\'autres modules. En effet, un module basé sur un mauvais est forcément\\n   mauvais, qu\'importe la qualité de ce dernier. Autre info utile, on y retrouve\\n   le fichier principal (propriété main). Cela va vous servir de point de départ\\n   pour la lectuire de la source. Enfin, la propriété scripts.test permet de\\n   savoir si des tests sont présents ou non et l\'endroit où ils se trouvent. \\n * lecture du dichier principal : il ne nous reste plus qu\'à examiner le code.\\n   Les appels à la fonction require nous permettent d\'accèder aux autres\\n   fichiers du module pour inspecter plus profondément ce dernier. \\n\\nVoilà, j\'espère vous avoir aidé à choisir vos modules, n\'hésitez pas à me\\nproposer vos méthodes en commentaire, je serai ravi d\'enrichir celle-ci avec vos\\nidées.\\n\\n Maintenant que vous savez comment choisir vos modules NodeJS, découvrez comment\\nles tenir à l\'œil [watchdeps.html]! \\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc34:JSON.parse('{"path":"contents/pages/articles-choisir_module_nodejs.html","title":"Bien choisir ses modules NodeJS : ma méthode","description":"Hier à la troisième édition de ChtiJS, un question a été soulevée sur la confiance que l\'on pouvait avoir dans les modules NodeJS. Je vous dévoile donc ma méthode pour trancher entre npm install et npm remove ;).","shortTitle":"Choisir les modules NodeJS","shortDesc":"En savoir plus sur ma méthode pour choisir des modules pour NodeJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBIEN CHOISIR SES MODULES NODEJS : MA MÉTHODE\\nHier à la troisième édition de ChtiJS, un question a été soulevée sur la\\nconfiance que l\'on pouvait avoir dans les modules NodeJS. Je vous dévoile donc\\nma méthode pour trancher entre npm install et npm remove ;).\\n\\nIl existe deux types de modules. Les natifs que l\'on retrouve à l\'installation\\nde NodeJS et qui peuvent être utilisés via un simple require. Et les modules NPM\\n(Node Package Manager) que l\'on télécharge grâce à la commande npm install et\\nque l\'on peut consulter sur le site dédié aux modules NodeJS [http://npmjs.org].\\n\\nLES MODULES NATIFS\\nPour avoir créé des applications node assez tôt, je peux affirmer que même les\\nmodules instables cassent rarement la compatibilité. Si ils le font, c\'est\\nrarement brutal. On observe un message indiquant que telle ou telle méthode est\\ndépréciée plusieurs versions avant le retrait définitif. En général, on observe\\nplutôt un ajout de fonctionnalités plutôt qu\'une refonte des API.\\n\\nCependant, un excellent moyen d\'être informé des problèmes éventuels est de\\nsuivre le flux RSS du blog du projet [http://blog.nodejs.org/]qui pour chque\\nnouvelle version indique les ajout et modifications réalisés ainsi que les\\nproblèmes qui peuvent en résulter.\\n\\nLES MODULES TIERS\\nN\'importe qui peut soumettre un module NodeJS avec NPM. C\'est pour cette raison\\nqu\'il est nécessaire d\'être attentif à la sélection de ces derniers. L\'un des\\npremiers discriminants est l\'absence de tests.\\n\\nCHOISIR DES MODULES TESTÉS\\nLes chiffres mis en avant par un projet d\'examem des modules NPM sont sur ce\\npoint peu rassurant. Seuls 50% des modules possèderaient des tests. Parmi eux,\\nseul 50% passeraient leurs propres tests.\\n\\nUn projet qui ne passe pas tous les tests n\'est pas forcément mauvais. Il peut\\ns\'agir d\'un module réalisé en TDD et ainsi, les fonctionnalités futures dont les\\ntests sont déjà écrits mais pas encore implémentés ne passent logiquement pas.\\n\\nCHOISIR DES MODULES OPEN-SOURCE/COLLABORATIFS\\nUn autre point fondamental est la manière dont le développement est réalisé. Si\\nle projet est sur GitHub et possède une licence libre, c\'est déjà un bon point.\\nSi en plus il est vivant (mis en favoris, commit réguliers de diverses\\npersonnes, issues rapidement résolues etc...), alors vous pouvez avoir confiance\\ndans ce module.\\n\\nLa documentation doit également être bonne. Le fameux \\"Get started\\" dans le\\nfichier README est un must-have. Un documentation plus complète est un gros\\nplus. On peut prendre l\'exemple de RequireJS qui pousse le bouchon jusqu\'à\\ninsérer les URL du manuel pertinentes dans le texte de ses exceptions (vous\\nn\'avez plus qu\'à cliquer :p).\\n\\nINSPECTER LE CODE SOURCE\\nRien de mieux pour juger de la qualité d\'un module que d\'inspecter son code. Ma\\nméthode pour ce faire est très simple :\\n\\n * consultation du fichier package.json : on peut ainsi y trouver la dépendance\\n   à d\'autres modules. En effet, un module basé sur un mauvais est forcément\\n   mauvais, qu\'importe la qualité de ce dernier. Autre info utile, on y retrouve\\n   le fichier principal (propriété main). Cela va vous servir de point de départ\\n   pour la lectuire de la source. Enfin, la propriété scripts.test permet de\\n   savoir si des tests sont présents ou non et l\'endroit où ils se trouvent. \\n * lecture du dichier principal : il ne nous reste plus qu\'à examiner le code.\\n   Les appels à la fonction require nous permettent d\'accèder aux autres\\n   fichiers du module pour inspecter plus profondément ce dernier. \\n\\nVoilà, j\'espère vous avoir aidé à choisir vos modules, n\'hésitez pas à me\\nproposer vos méthodes en commentaire, je serai ravi d\'enrichir celle-ci avec vos\\nidées.\\n\\n Maintenant que vous savez comment choisir vos modules NodeJS, découvrez comment\\nles tenir à l\'œil [watchdeps.html]! \\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc35:JSON.parse('{"path":"contents/pages/fr/blog/comparatif_appstores.html","title":"Comparatif des webapp stores","description":"Une fois qu\'une application web est développée, il peut être intéressant de lui donner de la visibilité. Les AppStores sont censés aider les développeurs dans cette tâche.","shortTitle":"Comparatif WebApp Stores","shortDesc":"En savoir plus sur les AppStores","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCOMPARATIF DES WEBAPP STORES\\n⚠ Attention: Cet article est ancien et son contenu n\'est plus d\'actualité. Les\\napplications web sont maintenant intégrées simplement grâce au mouvement des PWA \\net l\'installation est directement proposée depuis ces dernières.\\n\\nUne fois qu\'une application web est développée, il peut être intéressant de lui\\ndonner de la visibilité. Les AppStores sont censés aider les développeurs dans\\ncette tâche.\\n\\nJ\'ai soumis le casse brique développé récement sur le Chrome Web Store (plus\\ndésormais [https://twitter.com/nfroidure/status/571987728352612352]) et Mozilla\\nMarket Place. Les deux plateformes ont un look complètement différent, mais\\nc\'est aussi la façon de mettre en avant qui diffère. Petit résumé de mes\\npérigrinations.\\n\\nCHROME WEB STORE\\nJ\'avais déjà posté une application (extension Firefox KGen) sur le Chrome Web\\nStore, mais cette fois il s\'agissait d\'une application web. Il y a deux\\npossibilités, créer une application web hébergée ou packagée. La première permet\\nde n\'avoir à créer qu\'un fichier manifest et à packager ce dernier tandis que la\\nseconde nécessite des mises à jour, mais réduit le trafic sur vos serveurs.\\n\\nPour ma part, j\'ai choisi une version hébergée ce qui me facilite la publication\\nsur diverses places de marchés pour applications web (on va garder WebApp Stores\\n:-x). La présentation est très commerciale, mais laisse peu de place aux petits\\nacteurs.\\n\\nEn effet, actuellement, la seule façon de trouver mon Casse Brique sur ce site\\nest de taper \\"Break It\\" dans la barre de recherche. Autant dire que je ne suis\\npas prêt d\'avoir 1000 utilisateurs... J\'avais constaté ce même problème pour\\nKGen pour Chrome qui n\'a jamais vraiment percé et j\'avoue que cela a un peu\\négratiné ma motivation à continuer son développement.\\n\\nMOZILLA MARKETPLACE\\nLes développeurs d\'extensions Firefox se sentiront à l\'aise sur ce site qui\\nn\'est pas encore ouvert au public. Là où Chrome a validé mon app automatiquement\\nsans aucune validation, la soumission sur le site de Mozilla est soumise à une\\nrevue complète. Avantage : à priori, pas d\'applications borderline dans le store\\nde Mozilla.\\n\\nAutre bonne surprise, il est possible de trier les applications par date de\\nmodification ce qui fait que les petits acteurs peuvent être trouvés plus\\nfacilement que sur Chrome Web Store. Même sans être mis en avant, cela permet au\\nmoins d\'obtenir une masse d\'utilisateur qui permettront ou non à votre\\napplication de décoller. En effet, si votre application séduit, vous serez aussi\\ndans le tri par popularité augmentant exponentiellement votre visibilité. C\'est\\nun gros avantage par rapport à Chrome Web Store dont le tri par \\"Tendance\\" est\\nassez flou et peut être facilement manipulé.\\n\\nEn revanche, le look est moins séduisant, moins commercial oserai-je dire. Je\\ncomprends aussi mal l\'intérêt de n\'afficher que 20 applications de la catégorie\\nplutôt que d\'afficher la liste complète dès le départ.\\n\\nTechniquement, il suffit de créer un fichier manifest à placer sur votre domaine\\net à remplir le formulaire de soumission. Simple, mais pas trop. J\'ai dû m\'y\\nreprendre à deux fois.\\n\\nBref, vous l\'aurez compris, bien que la présence d\'une application web sur les\\ndeux est souhaitable, je pense que le modèle de Mozilla est meilleur pour les\\ndéveloppeurs indépendants qui n\'ont pas leurs entrées dans la Silicon Valley ;).\\n\\n\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc36:JSON.parse('{"path":"contents/pages/articles-comparatif_appstores.html","title":"Comparatif des webapp stores","description":"Une fois qu\'une application web est développée, il peut être intéressant de lui donner de la visibilité. Les AppStores sont censés aider les développeurs dans cette tâche.","shortTitle":"Comparatif WebApp Stores","shortDesc":"En savoir plus sur les AppStores","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCOMPARATIF DES WEBAPP STORES\\n⚠ Attention: Cet article est ancien et son contenu n\'est plus d\'actualité. Les\\napplications web sont maintenant intégrées simplement grâce au mouvement des PWA \\net l\'installation est directement proposée depuis ces dernières.\\n\\nUne fois qu\'une application web est développée, il peut être intéressant de lui\\ndonner de la visibilité. Les AppStores sont censés aider les développeurs dans\\ncette tâche.\\n\\nJ\'ai soumis le casse brique développé récement sur le Chrome Web Store (plus\\ndésormais [https://twitter.com/nfroidure/status/571987728352612352]) et Mozilla\\nMarket Place. Les deux plateformes ont un look complètement différent, mais\\nc\'est aussi la façon de mettre en avant qui diffère. Petit résumé de mes\\npérigrinations.\\n\\nCHROME WEB STORE\\nJ\'avais déjà posté une application (extension Firefox KGen) sur le Chrome Web\\nStore, mais cette fois il s\'agissait d\'une application web. Il y a deux\\npossibilités, créer une application web hébergée ou packagée. La première permet\\nde n\'avoir à créer qu\'un fichier manifest et à packager ce dernier tandis que la\\nseconde nécessite des mises à jour, mais réduit le trafic sur vos serveurs.\\n\\nPour ma part, j\'ai choisi une version hébergée ce qui me facilite la publication\\nsur diverses places de marchés pour applications web (on va garder WebApp Stores\\n:-x). La présentation est très commerciale, mais laisse peu de place aux petits\\nacteurs.\\n\\nEn effet, actuellement, la seule façon de trouver mon Casse Brique sur ce site\\nest de taper \\"Break It\\" dans la barre de recherche. Autant dire que je ne suis\\npas prêt d\'avoir 1000 utilisateurs... J\'avais constaté ce même problème pour\\nKGen pour Chrome qui n\'a jamais vraiment percé et j\'avoue que cela a un peu\\négratiné ma motivation à continuer son développement.\\n\\nMOZILLA MARKETPLACE\\nLes développeurs d\'extensions Firefox se sentiront à l\'aise sur ce site qui\\nn\'est pas encore ouvert au public. Là où Chrome a validé mon app automatiquement\\nsans aucune validation, la soumission sur le site de Mozilla est soumise à une\\nrevue complète. Avantage : à priori, pas d\'applications borderline dans le store\\nde Mozilla.\\n\\nAutre bonne surprise, il est possible de trier les applications par date de\\nmodification ce qui fait que les petits acteurs peuvent être trouvés plus\\nfacilement que sur Chrome Web Store. Même sans être mis en avant, cela permet au\\nmoins d\'obtenir une masse d\'utilisateur qui permettront ou non à votre\\napplication de décoller. En effet, si votre application séduit, vous serez aussi\\ndans le tri par popularité augmentant exponentiellement votre visibilité. C\'est\\nun gros avantage par rapport à Chrome Web Store dont le tri par \\"Tendance\\" est\\nassez flou et peut être facilement manipulé.\\n\\nEn revanche, le look est moins séduisant, moins commercial oserai-je dire. Je\\ncomprends aussi mal l\'intérêt de n\'afficher que 20 applications de la catégorie\\nplutôt que d\'afficher la liste complète dès le départ.\\n\\nTechniquement, il suffit de créer un fichier manifest à placer sur votre domaine\\net à remplir le formulaire de soumission. Simple, mais pas trop. J\'ai dû m\'y\\nreprendre à deux fois.\\n\\nBref, vous l\'aurez compris, bien que la présence d\'une application web sur les\\ndeux est souhaitable, je pense que le modèle de Mozilla est meilleur pour les\\ndéveloppeurs indépendants qui n\'ont pas leurs entrées dans la Silicon Valley ;).\\n\\n\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc37:JSON.parse('{"path":"contents/pages/fr/blog/creation_insert_after.html","title":"Bonjour InsertAfter !","description":"Dix ans après, je décide de créer mon blog. Mieux vaut tard que jamais !","shortTitle":"Bonjour InsertAfter !","shortDesc":"En savoir plus sur ce nouveau blog","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBONJOUR INSERTAFTER !\\nDix ans après, je décide de créer mon blog. Mieux vaut tard que jamais !\\n\\nJe me suis toujours contenté de l\'espace qui nous est offert sur les divers\\nblogs, forums pour réagir aux actualités du développement web. Puis, j\'ai\\ndécouvert Twitter. J\'ai d\'abord beaucoup retwitté ce que je trouvais\\nintéressant, puis, j\'ai twitté les résultats de ma veille et le temps passant,\\nj\'avais de plus en plus envie d\'écrire plus de 140 caractères à la fois.\\n\\nJ\'ai donc décidé de créer ce blog professionnel à l\'antipode de la démarche de\\nla plupart des bloggers qui ont d\'abord eu un blog puis se sont mis à Twitter.\\nJe confirme donc mon côté outsider marginal devenant challenger puis peut-être\\nun jour leader de la blogosphère du développement web.\\n\\nPour ce blog, je vais je pense principalement défricher les dernières nouveautés\\nde HTML5 / CSS3, donner mon avis sur les techniques, pratiques et actualités du\\nmonde du développement. Je vais aussi informer sur mes divers projets libres,\\nmes expériences avec Linux et l\'administration système, les quelques hacks mis\\nen oeuvre ou mes petites soluces. Ce blog me servira aussi d\'aide mémoire afin\\nde formaliser mes acquis pour mieux y revenir au besoin.\\n\\nEnfin, comme son nom l\'indique ce blog servira aussi et surtout à vous permettre\\nde réagir, de compléter ou infirmer mes assertions dans le respect et la bonne\\nhumeur !\\n\\nTout un programme que je vous propose de suivre via le flux de syndication de ce\\nblog [index.atom]!\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc38:JSON.parse('{"path":"contents/pages/articles-creation_insert_after.html","title":"Bonjour InsertAfter !","description":"Dix ans après, je décide de créer mon blog. Mieux vaut tard que jamais !","shortTitle":"Bonjour InsertAfter !","shortDesc":"En savoir plus sur ce nouveau blog","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBONJOUR INSERTAFTER !\\nDix ans après, je décide de créer mon blog. Mieux vaut tard que jamais !\\n\\nJe me suis toujours contenté de l\'espace qui nous est offert sur les divers\\nblogs, forums pour réagir aux actualités du développement web. Puis, j\'ai\\ndécouvert Twitter. J\'ai d\'abord beaucoup retwitté ce que je trouvais\\nintéressant, puis, j\'ai twitté les résultats de ma veille et le temps passant,\\nj\'avais de plus en plus envie d\'écrire plus de 140 caractères à la fois.\\n\\nJ\'ai donc décidé de créer ce blog professionnel à l\'antipode de la démarche de\\nla plupart des bloggers qui ont d\'abord eu un blog puis se sont mis à Twitter.\\nJe confirme donc mon côté outsider marginal devenant challenger puis peut-être\\nun jour leader de la blogosphère du développement web.\\n\\nPour ce blog, je vais je pense principalement défricher les dernières nouveautés\\nde HTML5 / CSS3, donner mon avis sur les techniques, pratiques et actualités du\\nmonde du développement. Je vais aussi informer sur mes divers projets libres,\\nmes expériences avec Linux et l\'administration système, les quelques hacks mis\\nen oeuvre ou mes petites soluces. Ce blog me servira aussi d\'aide mémoire afin\\nde formaliser mes acquis pour mieux y revenir au besoin.\\n\\nEnfin, comme son nom l\'indique ce blog servira aussi et surtout à vous permettre\\nde réagir, de compléter ou infirmer mes assertions dans le respect et la bonne\\nhumeur !\\n\\nTout un programme que je vous propose de suivre via le flux de syndication de ce\\nblog [index.atom]!\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc39:JSON.parse('{"path":"contents/pages/fr/blog/creer_bot_irc_avec_nodejs.html","title":"Créer un bot IRC avec NodeJS","description":"J\'ai récemment pu tester la création d\'un bot NodeJS grâce à la mise en place de Marionnette, le bot IRC de FranceJS.","shortTitle":"Bot IRC NodeJS","shortDesc":"En savoir plus sur les bots IRC avec NodeJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRÉER UN BOT IRC AVEC NODEJS\\nJ\'ai récemment pu tester la création d\'un bot NodeJS grâce à la mise en place de\\nMarionnette, le bot IRC de FranceJS.\\n\\nIl est très intéressant de voir à quel point NodeJS simplifie la vie des\\ndéveloppeurs. Grâce à son système de gestion de paquets très performant et son\\nécosystème grandissant, NodeJS permet de développer des applications en un\\néclair.\\n\\nLe dernier exemple en date est le Robot IRC que j\'ai développé pour la canal IRC\\nde FranceJS [http://francejs.org/]qui a été baptisé Marionette. Un simple npm\\ninstall irc et nous voilà capables de créer un client JavaScript pour IRC\\n[https://node-irc.readthedocs.org/en/latest/API.html]prenant en charge la\\nmajorité des évènements qui peuvent avoir lieu lorsque l\'on est connecté sur\\nIRC.\\n\\nCRÉATION DU CLIENT\\nPour créer le client, rien de plus simple, il suffit d\'utiliser le constructeur \\nirc.Client après avoir inclus la librairie :\\n\\nvar irc=require(\'irc\');\\nvar client = new irc.Client(server, botName,options);\\n\\nÉCOUTE DES ÉVÈNEMENTS\\nUne fois le client créé, il suffit d\'écouter les évènements qui nous\\nintéressent. Par exemple, pour que le bot puisse traiter les messages privés :\\n\\nclient.addListener(\'pm\', function (nick, message) {\\n executeCommand(message,nick,IRC_DEST_NICK);\\n }); \\n\\nCe code est directement extrait du code de Marionnette, la fonction \\nexecuteCommand prend en argument le message à analyser, l\'utilisateur à son\\norigine et la voie par laquelle le bot IRC doit répondre (sauf mention\\ncontraire).\\n\\nTRAITEMENT DES COMMANDES\\nComme attendu, il se déroule au sein de la fonction executeCommand\\n[https://github.com/nfroidure/irc-bot/blob/master/bot.js#L123]. Son objet est de\\ndéterminer si le premier mot du message reçu est une commande qu\'il peut\\ninterpréter. Si une commande valide est trouvée, alors le code afférant est\\nexécuté.\\n\\nL\'exécution d\'une commande vise à déterminer deux variables : la variable \\nmessages qui contiendra le tableau de messages à afficher en retour de la\\ncommande et la variable dest qui pourra être modifiée pour changer l\'endroit où\\nle message sera affiché.\\n\\nLa variable dest peut prendre trois valeurs différentes pour le moment :\\n\\n *  IRC_DEST_CHAN : les messages seront affichés sur le canal #FranceJS \\n *  IRC_DEST_NICK : les messages seront envoyés en message privé à l\'initiateur\\n   de la commande \\n *  IRC_DEST_SELECT : les messages seront envoyés à l\'endroit où la commande a\\n   été envoyée. \\n\\nCela permet à des commandes comme say de fonctionner. Celle-ci permet de faire\\nparler Marionnette en lui envoyant ce qu\'elle doit dire par message privé, assez\\nfun :).\\n\\nARCHIVAGE DES MESSAGES\\nL\'une des premières fonctions du bot était de pouvoir archiver les messages\\n[https://github.com/nfroidure/irc-bot/tree/master/logs]du canal FranceJS pour\\nl\'Histoire avec un grand H :). C\'est l\'objet de la fonction logMessage\\n[https://github.com/nfroidure/irc-bot/blob/master/bot.js#L100].\\n\\nCelle-ci prend en argument le type de message (qui peut être multiple grâce au\\nBitBashing, j\'en reparlerai ici) et les champs à ajouter au fichier journal (qui\\nest au format CSV).\\n\\nCette fonction n\'écrit pas directement les messages dans le log, mais les stocke\\ndans un tampon. L\'écriture n\'est déclenchée qu\'au dela d\'une certaine durée\\n(fixée par BUFFER_TIMEOUT) ou d\'un certain nombre de lignes (BUFFER_SIZE). Cela\\névite de trop solliciter le disque dur pour de petites écritures.\\n\\nINTERACTION AVEC TWITTER\\nPour interagir avec twitter, il suffit d\'installer le package twitter\\n[https://npmjs.org/package/twitter](npm install twitter).\\n\\nRÉCUPÉRATION DES TWEETS\\nAfin d\'être au courant de ce qu\'il se passe sur Twitter à propros de FranceJS,\\nj\'ai créé la fonction getTwitts\\n[https://github.com/nfroidure/irc-bot/blob/master/bot.js#L42]qui récupère la\\nliste des twitts avec le hashtag #FranceJS, vérifie leur fraîcheur et les envoie\\nsur le canal le cas échéant.\\n\\nCelle-ci est appellée tous les TWITTER_TIMEOUT secondes pour vérifier les\\nnouveaux tweets.\\n\\nENVOIE DE TWEETS\\n La commande tweet\\n[https://github.com/nfroidure/irc-bot/blob/master/bot.js#L213]permet de tweetter\\ndirectement avec le compte FranceJS pour peu que l\'on soit administrateur.\\n\\nEXÉCUTION DE CODE JAVASCRIPT SANDBOXÉ\\nIl peut être intéressant de pouvoir exécuter des petits bouts de code JavaScript\\nsur un canal IRC pour pouvoir illustrer ses propos. Une petite recherche m\'a\\npermis de découvrir sandbox, un package node qui permet d\'exécuter du code tiers\\n(npm install sandbox).\\n\\nJ\'ai donc créé la commande eval qui permet d\'exécuter des petits snippets de\\ncode. J\'ai jeté un oeil à la source de ce paquet et il semble qu\'il crée\\ndirectement un autre processus pour exécuter le code JavaScript. Un timeout est\\négalement de la partie. Si le code JavaScript est toujours en cours d\'exécution\\naprès n millisecondes, le processus est tué. Ce modèle me semble assez sécurisé\\npour être utilisé dès maintenant.\\n\\nCONCLUSION\\nJe ne sais pas comment on faisait avant pour créer des bots IRC (à vrai dire, je\\nm\'en moque). Ce que je sais, c\'est qu\'aujourd\'hui, grâce à node, il est possible\\nde créer simplement un bot IRC fonctionnel en quelques heures de code. Mais\\nfinalement, nous pouvons élargir ce principe à un grand nombre de serveurs ou\\nclients.\\n\\nNode est vraiment l\'ami du développeur, il le rend agile et productif. Il y a\\nforcément un paquet qui fait ce que vous cherchez à faire, ce dernier est\\nforcément documenté et il a également de grande chance d\'être publié sur GitHub\\nvous permettant d\'y apporter votre contribution ou de résoudre vous même les\\nbugs qui vous bloquent.\\n\\nBref, merci JavaScript, merci NodeJS !\\n\\nPS : Vous êtes les bienvenus pour améliorer le bot et pour venir nous dire\\nbonjour sur le canal IRC de FranceJS [irc://irc.freenode.net/francejs].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc40:JSON.parse('{"path":"contents/pages/articles-creer_bot_irc_avec_nodejs.html","title":"Créer un bot IRC avec NodeJS","description":"J\'ai récemment pu tester la création d\'un bot NodeJS grâce à la mise en place de Marionnette, le bot IRC de FranceJS.","shortTitle":"Bot IRC NodeJS","shortDesc":"En savoir plus sur les bots IRC avec NodeJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRÉER UN BOT IRC AVEC NODEJS\\nJ\'ai récemment pu tester la création d\'un bot NodeJS grâce à la mise en place de\\nMarionnette, le bot IRC de FranceJS.\\n\\nIl est très intéressant de voir à quel point NodeJS simplifie la vie des\\ndéveloppeurs. Grâce à son système de gestion de paquets très performant et son\\nécosystème grandissant, NodeJS permet de développer des applications en un\\néclair.\\n\\nLe dernier exemple en date est le Robot IRC que j\'ai développé pour la canal IRC\\nde FranceJS [http://francejs.org/]qui a été baptisé Marionette. Un simple npm\\ninstall irc et nous voilà capables de créer un client JavaScript pour IRC\\n[https://node-irc.readthedocs.org/en/latest/API.html]prenant en charge la\\nmajorité des évènements qui peuvent avoir lieu lorsque l\'on est connecté sur\\nIRC.\\n\\nCRÉATION DU CLIENT\\nPour créer le client, rien de plus simple, il suffit d\'utiliser le constructeur \\nirc.Client après avoir inclus la librairie :\\n\\nvar irc=require(\'irc\');\\nvar client = new irc.Client(server, botName,options);\\n\\nÉCOUTE DES ÉVÈNEMENTS\\nUne fois le client créé, il suffit d\'écouter les évènements qui nous\\nintéressent. Par exemple, pour que le bot puisse traiter les messages privés :\\n\\nclient.addListener(\'pm\', function (nick, message) {\\n executeCommand(message,nick,IRC_DEST_NICK);\\n }); \\n\\nCe code est directement extrait du code de Marionnette, la fonction \\nexecuteCommand prend en argument le message à analyser, l\'utilisateur à son\\norigine et la voie par laquelle le bot IRC doit répondre (sauf mention\\ncontraire).\\n\\nTRAITEMENT DES COMMANDES\\nComme attendu, il se déroule au sein de la fonction executeCommand\\n[https://github.com/nfroidure/irc-bot/blob/master/bot.js#L123]. Son objet est de\\ndéterminer si le premier mot du message reçu est une commande qu\'il peut\\ninterpréter. Si une commande valide est trouvée, alors le code afférant est\\nexécuté.\\n\\nL\'exécution d\'une commande vise à déterminer deux variables : la variable \\nmessages qui contiendra le tableau de messages à afficher en retour de la\\ncommande et la variable dest qui pourra être modifiée pour changer l\'endroit où\\nle message sera affiché.\\n\\nLa variable dest peut prendre trois valeurs différentes pour le moment :\\n\\n *  IRC_DEST_CHAN : les messages seront affichés sur le canal #FranceJS \\n *  IRC_DEST_NICK : les messages seront envoyés en message privé à l\'initiateur\\n   de la commande \\n *  IRC_DEST_SELECT : les messages seront envoyés à l\'endroit où la commande a\\n   été envoyée. \\n\\nCela permet à des commandes comme say de fonctionner. Celle-ci permet de faire\\nparler Marionnette en lui envoyant ce qu\'elle doit dire par message privé, assez\\nfun :).\\n\\nARCHIVAGE DES MESSAGES\\nL\'une des premières fonctions du bot était de pouvoir archiver les messages\\n[https://github.com/nfroidure/irc-bot/tree/master/logs]du canal FranceJS pour\\nl\'Histoire avec un grand H :). C\'est l\'objet de la fonction logMessage\\n[https://github.com/nfroidure/irc-bot/blob/master/bot.js#L100].\\n\\nCelle-ci prend en argument le type de message (qui peut être multiple grâce au\\nBitBashing, j\'en reparlerai ici) et les champs à ajouter au fichier journal (qui\\nest au format CSV).\\n\\nCette fonction n\'écrit pas directement les messages dans le log, mais les stocke\\ndans un tampon. L\'écriture n\'est déclenchée qu\'au dela d\'une certaine durée\\n(fixée par BUFFER_TIMEOUT) ou d\'un certain nombre de lignes (BUFFER_SIZE). Cela\\névite de trop solliciter le disque dur pour de petites écritures.\\n\\nINTERACTION AVEC TWITTER\\nPour interagir avec twitter, il suffit d\'installer le package twitter\\n[https://npmjs.org/package/twitter](npm install twitter).\\n\\nRÉCUPÉRATION DES TWEETS\\nAfin d\'être au courant de ce qu\'il se passe sur Twitter à propros de FranceJS,\\nj\'ai créé la fonction getTwitts\\n[https://github.com/nfroidure/irc-bot/blob/master/bot.js#L42]qui récupère la\\nliste des twitts avec le hashtag #FranceJS, vérifie leur fraîcheur et les envoie\\nsur le canal le cas échéant.\\n\\nCelle-ci est appellée tous les TWITTER_TIMEOUT secondes pour vérifier les\\nnouveaux tweets.\\n\\nENVOIE DE TWEETS\\n La commande tweet\\n[https://github.com/nfroidure/irc-bot/blob/master/bot.js#L213]permet de tweetter\\ndirectement avec le compte FranceJS pour peu que l\'on soit administrateur.\\n\\nEXÉCUTION DE CODE JAVASCRIPT SANDBOXÉ\\nIl peut être intéressant de pouvoir exécuter des petits bouts de code JavaScript\\nsur un canal IRC pour pouvoir illustrer ses propos. Une petite recherche m\'a\\npermis de découvrir sandbox, un package node qui permet d\'exécuter du code tiers\\n(npm install sandbox).\\n\\nJ\'ai donc créé la commande eval qui permet d\'exécuter des petits snippets de\\ncode. J\'ai jeté un oeil à la source de ce paquet et il semble qu\'il crée\\ndirectement un autre processus pour exécuter le code JavaScript. Un timeout est\\négalement de la partie. Si le code JavaScript est toujours en cours d\'exécution\\naprès n millisecondes, le processus est tué. Ce modèle me semble assez sécurisé\\npour être utilisé dès maintenant.\\n\\nCONCLUSION\\nJe ne sais pas comment on faisait avant pour créer des bots IRC (à vrai dire, je\\nm\'en moque). Ce que je sais, c\'est qu\'aujourd\'hui, grâce à node, il est possible\\nde créer simplement un bot IRC fonctionnel en quelques heures de code. Mais\\nfinalement, nous pouvons élargir ce principe à un grand nombre de serveurs ou\\nclients.\\n\\nNode est vraiment l\'ami du développeur, il le rend agile et productif. Il y a\\nforcément un paquet qui fait ce que vous cherchez à faire, ce dernier est\\nforcément documenté et il a également de grande chance d\'être publié sur GitHub\\nvous permettant d\'y apporter votre contribution ou de résoudre vous même les\\nbugs qui vous bloquent.\\n\\nBref, merci JavaScript, merci NodeJS !\\n\\nPS : Vous êtes les bienvenus pour améliorer le bot et pour venir nous dire\\nbonjour sur le canal IRC de FranceJS [irc://irc.freenode.net/francejs].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc41:JSON.parse('{"path":"contents/pages/fr/blog/creer_un_bon_service_rest.html","title":"Créer un service Rest","description":"Rest est de plus en plus utilisé pour la création de services web. J\'ai moi-même créé un framework basé sur ce principe. Découvrez mes petits plus pour créer un bon service Rest !","shortTitle":"Un bon service Rest","shortDesc":"En savoir plus sur ma façon de créer un service Rest","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRÉER UN SERVICE REST\\n⚠ Attention: Bien que la plupart des principes décrits dans cet article restent\\nvalables, l\'implémentation PHP décrite n\'est plus utilisée. J\'utilise maintenant \\nWhook [https://github.com/nfroidure/whook] qui améliore ces principes tout en\\nutilisant une stack moderne basée sur NodeJS.\\n\\nRest est de plus en plus utilisé pour la création de services web. J\'ai moi-même\\ncréé un framework basé sur ce principe. Découvrez mes petits plus pour créer un\\nbon service Rest !\\n\\nEn effet, Rest est à la mode, mais bien que ce type d\'architecture soit le\\nmeilleur selon moi, l\'implémentation doit être bien cadrée pour arriver à un\\nrésultat intéressant. La première condition est de bien connaître les principes\\nfondamentaux de l\'architecture orientée ressource.\\n\\nPRÉSENTATION DE REST\\nRest (Representational State Tranfert) est une architecture épousant les\\nprincipes fondateurs du web et de son protocole originel : HTTP.\\n\\nAinsi, chaque donnée exposée par une application web est représentée par une URI\\n(Uniform Ressource Identifier). Cette URI est un identifiant permettant\\nd\'effectuer diverses opérations sur la dîte ressource grâce aux verbes HTTP (ou\\nméthodes HTTP).\\n\\nLe plus connu étant GET qui permet de récupérer un état (ou représentation)\\nd\'une ressource. Ceux les plus utilisés étant POST (peu utilisé dans une\\napproche REST pure), PUT, DELETE, OPTIONS, HEAD.\\n\\nRest peut-être complémenté des principes dits RESTful que l\'on retrouvera dans\\nle fameux livre Services Web RESTful de Leonard Richardson et Sam Ruby aux\\néditions O\'Reilly. Voyons les principes que j\'ai repris.\\n\\nRESPECT DE L\'INTERFACE UNIFORME\\nChaque verbe HTTP doit être utilisé en connaissance de cause en fonction de ses\\ncaractéristiques propres.\\n\\n GET, PUT et DELETE doivent être idempotentes. Cela signifie que répéter\\nplusieurs fois la même requête doit mener au même résultat à chaque fois.\\nImaginez que vous envoyez une requête PUT qui enregistre le contenu d\'une entrée\\nde base de donnée. Malheureusement un problème de réseau vous empêche de\\nrecevoir la réponse à cette requête.\\n\\nVous êtes alors incapable de déterminer si la requête n\'a pas du tout été\\ntraitée (l\'entrée n\'a pas été modifiée) ou si elle a été traitée, mais que vous\\nn\'avez pas reçu la réponse le confirmant à cause de la coupure. La nature\\nidempotente de PUT vous permet de réenvoyer la requête en étant certain que\\ncelle-ci fonctionnera, que le serveur ait pris en compte la précédente ou non,\\net que la réponse envoyée sera identique en tout point à celle que vous auriez\\nreçu si il n\'y avait pas eu cette déconnexion.\\n\\n GET et HEAD doivent être sûres. Votre implémentation de GET et HEAD doit\\nassurer à ses utilisateurs que les requêtes GET et HEAD ne changent jamais\\nl\'état du système. Ils ne doivent entraîner aucun effet de bord qui pourrait\\nrendre leur utilisation non-sûre.\\n\\nRESPECT DE LA NATURE SANS ÉTAT DE HTTP\\nChaque requête doit être complètement indépendante des autres requête. Les\\nsessions et autres cookies doivent être bannis de votre implémentation. Cela\\ndevient le rôle du répartiteur de charge de s\'en préoccuper en surcouche de\\nvotre service. Il en résulte l\'utilisation de l\'identification HTTP (Basic,\\nDigest) ou d\'un système de token distribué à tous les utilisateurs de votre API\\nRest.\\n\\nUNE REPRÉSENTATION, UNE RESSOURCE\\nLe mécanisme de négociation de contenu de HTTP est très puissant pour fournir\\nune représentation d\'une ressource adaptée à ses préférences utilisateur :\\nlangue parlée (entête Accept-Language), type de contenu acceptés (entête Accept)\\netc... Cependant, l\'implémentation de ce mécanisme doit, par le biais de\\nredirections 301, rediriger vers l\'URI qui désigne la représentation adéquate de\\nla ressource. Ainsi, on distingue les ressources négociables (qui mènent\\ntoujours à une redirection 301) et les ressources qualifiées (qui pointent vers\\nune représentation donnée d\'une ressource). Vous pouvez vous référer à ce billet\\nqui traite la question des uri [bien_designer_url_site_applications_web.html]\\nplus en profondeur.\\n\\nMES PRINCIPES COMPLÉMENTAIRES\\nRest est une très bonne base, mais pour plusieurs raisons techniques, j\'ai\\ndégagé des principes complémentaires qui gagnent à être exploités dans votre\\nimplémentation.\\n\\nUNICITÉ STRICTE DES URI\\nDeux URI ne peuvent exposer une représentation de ressource identique. Il faut\\ndonc s\'assurer de l\'unicité des URI par divers moyens : ordre stricte des\\nparamètres de requête (query params), et même de leur valeurs lorsqu\'elles\\npeuvent provoquer un doublon.\\n\\nPar exemple, dans mon implémentation, cette uri est valide :\\n/db/mabase/matable/list.dat?limit=20&orderby=title, mais pas celle-ci :\\n/db/mabase/matable/list.dat?orderby=title&limit=20. Cette dernière retournera\\nune erreur HTTP 400 Bad Request. En effet, si la deuxième version était permise,\\nalors ces deux URIs exposeraient exactement la même chose. On pourrait alors se\\nretrouver avec un cache qui contiendrait deux fois la même chose ce qui serait\\ninnefficient.\\n\\nIl en est de même pour l\'URI /test.dat?param=a¶m=b qui est valide et\\n/test.dat?param=b¶m=a qui ne l\'est pas. Ici, le principe est que les valeurs\\nsoient classées dans l\'ordre alphabétique.\\n\\nLe résultat de ceci fait que le tableau PHP $_GET devient inutilisable. J\'ai\\ndonc réécrit un parser respectant la précédence des paramètres et des valeurs.\\n\\nRESSOURCES COMPOSITES\\nLe concept de ressource composite repose sur la formule suivante avec A et B\\nétant des ressources :\\n\\nSi A ∩ B ≠ 0 alors A c B || B c A (si l\'intersection entre les ressources A et B\\nn\'est pas nulle, alors A inclus B ou B inclus A).\\n\\nPar exemple, si la génération d\'une représentation necessite l\'accès à une autre\\nressource, cet accès doit être effectué via l\'interface uniforme. De cette\\nfaçon, si la ressource qui entre dans sa composition est déjà présente dans le\\ncache, cette dernière ne sera pas à nouveau régénérée.\\n\\nLe respect de cette règle n\'est pas stricte et dépend des considérations en\\nmatière de performance et admet quelques exceptions. Par exemple, il faut éviter\\nd\'appliquer ce principe lorsque l\'accès à deux ressources interrogeant le\\nserveur SQL diviserait en deux une récupération d\'informations qui auraient pu\\nêtre obtenues en une seule requête SQL.\\n\\nPOO AU SERVICE DE REST\\nLes concepts de la Programmation Orientée Objet se subliment avec l\'utilisation\\nde Rest, comme la surcharge des exceptions pour les rendre compatibles avec\\nRest. L\'idée est qu\'au sein d\'une architecture Rest, les exceptions sont des\\ncodes d\'erreurs HTTP directement transmissibles aux clients.\\n\\nJ\'ai égalmeent utilisé le chargement de classe dynamique pour ne charger que ce\\nqui est nécessaire à la fourniture d\'une ressource. L\'héritage est également une\\nbonne façon de déclarer les filiations entre les divers ressources.\\n\\nDÉTAILS DE MON IMPLÉMENTATION\\nINTERFACE UNIFORME POUR TOUTES LES RESSOURCES\\nRest est un goulot d\'étranglement grâce auquel on va pouvoir agir de manière\\nstandardisée sur toutes les ressources exposées. La première étape a été\\nl\'exposition des principales ressources nécessaires à une application/un site\\nsous forme de drivers Rest dont voici les plus remarquables :\\n\\n * Db : ce driver permet d\'accéder à tous les niveaux d\'un base de donnée (liste\\n   des bases, liste des table, liste des entrées, entrées). C\'est une sorte\\n   d\'ORM fournie au format REST. Par exemple, GET /db/matable.dat expose le\\n   schema de la table matable. \\n * Fs : ce driver permet d\'accéder au système de fichier (contenu des fichiers\\n   et des répertoires). Il possède plusieurs variantes : fsi pour la\\n   récupération des informations, mpfs qui est un clone de fs mais en\\n   environnement multipath (cf ini_path de php.ini). \\n * Http : fait office de proxy http.\\n * Feed : met à disposition un ou plusieurs flux RSS/Atom.\\n * App : simple moteur de template/localisation pour applications web.\\n * Site : driver servant à la mise en place de sites web.\\n * Cache : Le cache lui même est une ressource, on peut donc agir sur ce dernier\\n   via l\'interface uniforme. \\n * Auth : L\'authentification et les droits qu\'elle concède est encapsulée dans\\n   un driver Rest permettant une mise en cache de celle ci par exemple. \\n\\nOn peut imaginer des tas d\'autres drivers comme pour la minification des\\nfichiers (minfs?), le redimensionnement à la volée d\'images/vidéos etc...\\n\\nL\'utilisation de cette interface uniforme pour toutes les ressources\\nexploitables permet d\'agir sur toutes ces ressources de manière macroscopique\\ngrâce à différents systèmes listés ci dessous.\\n\\nMIS EN CACHE DES RESSOURCES\\nPlus la peine de gérer de nombreux caches compliqués pour chaque source de\\ndonnées, le cache est implémenté directement au nouveau de Rest. Il se compose\\nde trois niveaux. L\'un côté client/proxy, habituel, mais ici bien plus puissant\\ncar le respect de la nature de HTTP permet son fonctionnement optimal. Les deux\\nautres côté serveur. Un « compteur » de ressource interne à chaque instance de\\nPHP garde une référence à chaque objet accédé afin d\'éviter deux accès pour une\\nmême ressource (important pour les ressources composites complexes). Un système\\nde cache (XCache, APC, ou Fs) stocke le résultat des ressources pouvant être\\ncachées et réutilisées par d\'autres instances de PHP.\\n\\nPour ce dernier un système de Callback garanti qu\'une ressource composite sera\\nbien supprimée dans le cas où une des ressources la composant serait modifiée.\\nPlus généralement, un GET permet la mise en cache alors que les requêtes de type\\nPOST, DELETE et PUT génèrent un nettoyage a posteriori des ressources liées.\\n\\nLe cache est optimisé car une application web est susceptible d\'accéder aux\\nmêmes ressources que le site web réduisant ainsi les redondances au sein du\\ncache. En effet, si j\'accède à la ressource /db/mabase/users/1.dat dans une page\\ndu site générée côté serveur ou si j\'y accède directement via HTTP depuis un\\njavascript utilisant XMLHttpRequest, je suis sûr qu\'au moins une des deux\\nrequêtes sera servie à partir du cache.\\n\\nGESTION DES DROITS\\nLes droits son gérés à l\'aide de masques sur les URI permettant une gestion très\\nfine des autorisations des différents utilisateurs. Ces droits peuvent être\\nassociés directement à l\'utilisateur ou via les groupes auxquels il appartient.\\nDe plus, les différents verbes HTTP (GET, PUT, DELETE, POST) représentent divers\\nniveau d\'accès aux ressources qui peuvent également être accordé ou non en\\nfonction des utilisateurs.\\n\\nGESTION DES CONNECTIONS INSTABLES\\nL\'avantage de l\'idempotence des requêtes est qu\'on peut tout à fait faire\\nplusieurs requêtes GET, DELETE ou PUT plusieurs fois sans qu\'il y ait d\'effet de\\nbord. Par exemple, dans une application HTML5, on peut tout à fait créer un\\nmécanisme générique de rétention des requêtes HTTP idempotentes tant qu\'aucune\\nréponse n\'est reçue. Dans mon cas, cela a été implémenté grâce à localStorage\\n(avec une limite néanmoins dans la taille du stockage).\\n\\nAinsi, si une requête est exécutée deux fois, cela est sans incidence sur\\nl\'intégrité dus systèmes et des données. Dans une certaine mesure, on peut «\\nenrober » une requête POST pour obtenir un comportement équivalent.\\n\\nTESTS UNITAIRES\\nL\'uniformité des ressources Rest permet d\'implémenter un système simple de tests\\nunitaires, soit en ligne de commande avec curl, soit comme dans notre cas en\\ncréant une ressource dédiée. L\'avantage est que l\'on écrit moins de tests tout\\nen garantissant le bon fonctionnement de l\'application. On crée plusieurs\\nscénarios d\'utilisation composé d\'une suite de diverses requêtes et on compare\\nles résultats (entêtes, code HTTP, contenu) à ceux attendus.\\n\\nRÉPARTITION DE CHARGE\\nOn peut tout à fait tirer parti de cette interface uniforme pour répartir la\\ncharge sur différents serveurs (serveur de ressources SQL séparé par exemple)\\ngrâce à un routage fin en amont (proxy ou server apache avec rewrite rules).\\n\\nBIENTÔT CHEZ VOUS\\nCette implémentation PHP est déjà utilisée chez un client et au sein de mon\\nentreprise pour la gestion des relations client et la comptabilité. Je dois\\nencore lui trouver un nom et supprimer quelques dépendances vis à vis du CMS\\ninterne de la boîte et son code sera disponible sous double licence : GNU/GPL +\\nLicence commerciale pour ceux qui voudraient pouvoir garder leurs modifications\\nsecrètes.\\n\\nJe compte offrir des licences commerciales aux contributeurs les plus fréquents.\\nL\'objectif de cette double licence étant que les amateurs du gratuit qui ne\\ncontribuent jamais supportent les contraintes de la licence GNU/GPL.\\n\\nEn attendant, je cherche des développeurs PHP intéressés par ce projet, prêts à\\nm\'aider à le finaliser, à l\'utiliser et à me faire des premiers retours afin de\\nmettre en ligne une version plus stable, plus universelle et surtout avec déjà\\nune petite communauté capable de réagir en cas de bug ou de faille de sécurité.\\n\\nLes manques actuels sont : une installation facilitée grâce à des tutos/scripts,\\nplusieurs contextes d\'utilisation afin de valider la pluralité des champs\\nd\'application et le support de la plateforme Windows voire de plateformes plus\\nhétérogènes que mon Debian Squeeze + MPM Prefork + MySQL.\\n\\nBref, toutes les bonnes volonté peuvent me contacter [contact.html] à ce sujet.\\nDe mon côté, je prépare une démo en ligne pour tester le framework à sa guise.\\nVous serez tenus au courant sur ce blog de la suite des évènements.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc42:JSON.parse('{"path":"contents/pages/articles-creer_un_bon_service_rest.html","title":"Créer un service Rest","description":"Rest est de plus en plus utilisé pour la création de services web. J\'ai moi-même créé un framework basé sur ce principe. Découvrez mes petits plus pour créer un bon service Rest !","shortTitle":"Un bon service Rest","shortDesc":"En savoir plus sur ma façon de créer un service Rest","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRÉER UN SERVICE REST\\n⚠ Attention: Bien que la plupart des principes décrits dans cet article restent\\nvalables, l\'implémentation PHP décrite n\'est plus utilisée. J\'utilise maintenant \\nWhook [https://github.com/nfroidure/whook] qui améliore ces principes tout en\\nutilisant une stack moderne basée sur NodeJS.\\n\\nRest est de plus en plus utilisé pour la création de services web. J\'ai moi-même\\ncréé un framework basé sur ce principe. Découvrez mes petits plus pour créer un\\nbon service Rest !\\n\\nEn effet, Rest est à la mode, mais bien que ce type d\'architecture soit le\\nmeilleur selon moi, l\'implémentation doit être bien cadrée pour arriver à un\\nrésultat intéressant. La première condition est de bien connaître les principes\\nfondamentaux de l\'architecture orientée ressource.\\n\\nPRÉSENTATION DE REST\\nRest (Representational State Tranfert) est une architecture épousant les\\nprincipes fondateurs du web et de son protocole originel : HTTP.\\n\\nAinsi, chaque donnée exposée par une application web est représentée par une URI\\n(Uniform Ressource Identifier). Cette URI est un identifiant permettant\\nd\'effectuer diverses opérations sur la dîte ressource grâce aux verbes HTTP (ou\\nméthodes HTTP).\\n\\nLe plus connu étant GET qui permet de récupérer un état (ou représentation)\\nd\'une ressource. Ceux les plus utilisés étant POST (peu utilisé dans une\\napproche REST pure), PUT, DELETE, OPTIONS, HEAD.\\n\\nRest peut-être complémenté des principes dits RESTful que l\'on retrouvera dans\\nle fameux livre Services Web RESTful de Leonard Richardson et Sam Ruby aux\\néditions O\'Reilly. Voyons les principes que j\'ai repris.\\n\\nRESPECT DE L\'INTERFACE UNIFORME\\nChaque verbe HTTP doit être utilisé en connaissance de cause en fonction de ses\\ncaractéristiques propres.\\n\\n GET, PUT et DELETE doivent être idempotentes. Cela signifie que répéter\\nplusieurs fois la même requête doit mener au même résultat à chaque fois.\\nImaginez que vous envoyez une requête PUT qui enregistre le contenu d\'une entrée\\nde base de donnée. Malheureusement un problème de réseau vous empêche de\\nrecevoir la réponse à cette requête.\\n\\nVous êtes alors incapable de déterminer si la requête n\'a pas du tout été\\ntraitée (l\'entrée n\'a pas été modifiée) ou si elle a été traitée, mais que vous\\nn\'avez pas reçu la réponse le confirmant à cause de la coupure. La nature\\nidempotente de PUT vous permet de réenvoyer la requête en étant certain que\\ncelle-ci fonctionnera, que le serveur ait pris en compte la précédente ou non,\\net que la réponse envoyée sera identique en tout point à celle que vous auriez\\nreçu si il n\'y avait pas eu cette déconnexion.\\n\\n GET et HEAD doivent être sûres. Votre implémentation de GET et HEAD doit\\nassurer à ses utilisateurs que les requêtes GET et HEAD ne changent jamais\\nl\'état du système. Ils ne doivent entraîner aucun effet de bord qui pourrait\\nrendre leur utilisation non-sûre.\\n\\nRESPECT DE LA NATURE SANS ÉTAT DE HTTP\\nChaque requête doit être complètement indépendante des autres requête. Les\\nsessions et autres cookies doivent être bannis de votre implémentation. Cela\\ndevient le rôle du répartiteur de charge de s\'en préoccuper en surcouche de\\nvotre service. Il en résulte l\'utilisation de l\'identification HTTP (Basic,\\nDigest) ou d\'un système de token distribué à tous les utilisateurs de votre API\\nRest.\\n\\nUNE REPRÉSENTATION, UNE RESSOURCE\\nLe mécanisme de négociation de contenu de HTTP est très puissant pour fournir\\nune représentation d\'une ressource adaptée à ses préférences utilisateur :\\nlangue parlée (entête Accept-Language), type de contenu acceptés (entête Accept)\\netc... Cependant, l\'implémentation de ce mécanisme doit, par le biais de\\nredirections 301, rediriger vers l\'URI qui désigne la représentation adéquate de\\nla ressource. Ainsi, on distingue les ressources négociables (qui mènent\\ntoujours à une redirection 301) et les ressources qualifiées (qui pointent vers\\nune représentation donnée d\'une ressource). Vous pouvez vous référer à ce billet\\nqui traite la question des uri [bien_designer_url_site_applications_web.html]\\nplus en profondeur.\\n\\nMES PRINCIPES COMPLÉMENTAIRES\\nRest est une très bonne base, mais pour plusieurs raisons techniques, j\'ai\\ndégagé des principes complémentaires qui gagnent à être exploités dans votre\\nimplémentation.\\n\\nUNICITÉ STRICTE DES URI\\nDeux URI ne peuvent exposer une représentation de ressource identique. Il faut\\ndonc s\'assurer de l\'unicité des URI par divers moyens : ordre stricte des\\nparamètres de requête (query params), et même de leur valeurs lorsqu\'elles\\npeuvent provoquer un doublon.\\n\\nPar exemple, dans mon implémentation, cette uri est valide :\\n/db/mabase/matable/list.dat?limit=20&orderby=title, mais pas celle-ci :\\n/db/mabase/matable/list.dat?orderby=title&limit=20. Cette dernière retournera\\nune erreur HTTP 400 Bad Request. En effet, si la deuxième version était permise,\\nalors ces deux URIs exposeraient exactement la même chose. On pourrait alors se\\nretrouver avec un cache qui contiendrait deux fois la même chose ce qui serait\\ninnefficient.\\n\\nIl en est de même pour l\'URI /test.dat?param=a¶m=b qui est valide et\\n/test.dat?param=b¶m=a qui ne l\'est pas. Ici, le principe est que les valeurs\\nsoient classées dans l\'ordre alphabétique.\\n\\nLe résultat de ceci fait que le tableau PHP $_GET devient inutilisable. J\'ai\\ndonc réécrit un parser respectant la précédence des paramètres et des valeurs.\\n\\nRESSOURCES COMPOSITES\\nLe concept de ressource composite repose sur la formule suivante avec A et B\\nétant des ressources :\\n\\nSi A ∩ B ≠ 0 alors A c B || B c A (si l\'intersection entre les ressources A et B\\nn\'est pas nulle, alors A inclus B ou B inclus A).\\n\\nPar exemple, si la génération d\'une représentation necessite l\'accès à une autre\\nressource, cet accès doit être effectué via l\'interface uniforme. De cette\\nfaçon, si la ressource qui entre dans sa composition est déjà présente dans le\\ncache, cette dernière ne sera pas à nouveau régénérée.\\n\\nLe respect de cette règle n\'est pas stricte et dépend des considérations en\\nmatière de performance et admet quelques exceptions. Par exemple, il faut éviter\\nd\'appliquer ce principe lorsque l\'accès à deux ressources interrogeant le\\nserveur SQL diviserait en deux une récupération d\'informations qui auraient pu\\nêtre obtenues en une seule requête SQL.\\n\\nPOO AU SERVICE DE REST\\nLes concepts de la Programmation Orientée Objet se subliment avec l\'utilisation\\nde Rest, comme la surcharge des exceptions pour les rendre compatibles avec\\nRest. L\'idée est qu\'au sein d\'une architecture Rest, les exceptions sont des\\ncodes d\'erreurs HTTP directement transmissibles aux clients.\\n\\nJ\'ai égalmeent utilisé le chargement de classe dynamique pour ne charger que ce\\nqui est nécessaire à la fourniture d\'une ressource. L\'héritage est également une\\nbonne façon de déclarer les filiations entre les divers ressources.\\n\\nDÉTAILS DE MON IMPLÉMENTATION\\nINTERFACE UNIFORME POUR TOUTES LES RESSOURCES\\nRest est un goulot d\'étranglement grâce auquel on va pouvoir agir de manière\\nstandardisée sur toutes les ressources exposées. La première étape a été\\nl\'exposition des principales ressources nécessaires à une application/un site\\nsous forme de drivers Rest dont voici les plus remarquables :\\n\\n * Db : ce driver permet d\'accéder à tous les niveaux d\'un base de donnée (liste\\n   des bases, liste des table, liste des entrées, entrées). C\'est une sorte\\n   d\'ORM fournie au format REST. Par exemple, GET /db/matable.dat expose le\\n   schema de la table matable. \\n * Fs : ce driver permet d\'accéder au système de fichier (contenu des fichiers\\n   et des répertoires). Il possède plusieurs variantes : fsi pour la\\n   récupération des informations, mpfs qui est un clone de fs mais en\\n   environnement multipath (cf ini_path de php.ini). \\n * Http : fait office de proxy http.\\n * Feed : met à disposition un ou plusieurs flux RSS/Atom.\\n * App : simple moteur de template/localisation pour applications web.\\n * Site : driver servant à la mise en place de sites web.\\n * Cache : Le cache lui même est une ressource, on peut donc agir sur ce dernier\\n   via l\'interface uniforme. \\n * Auth : L\'authentification et les droits qu\'elle concède est encapsulée dans\\n   un driver Rest permettant une mise en cache de celle ci par exemple. \\n\\nOn peut imaginer des tas d\'autres drivers comme pour la minification des\\nfichiers (minfs?), le redimensionnement à la volée d\'images/vidéos etc...\\n\\nL\'utilisation de cette interface uniforme pour toutes les ressources\\nexploitables permet d\'agir sur toutes ces ressources de manière macroscopique\\ngrâce à différents systèmes listés ci dessous.\\n\\nMIS EN CACHE DES RESSOURCES\\nPlus la peine de gérer de nombreux caches compliqués pour chaque source de\\ndonnées, le cache est implémenté directement au nouveau de Rest. Il se compose\\nde trois niveaux. L\'un côté client/proxy, habituel, mais ici bien plus puissant\\ncar le respect de la nature de HTTP permet son fonctionnement optimal. Les deux\\nautres côté serveur. Un « compteur » de ressource interne à chaque instance de\\nPHP garde une référence à chaque objet accédé afin d\'éviter deux accès pour une\\nmême ressource (important pour les ressources composites complexes). Un système\\nde cache (XCache, APC, ou Fs) stocke le résultat des ressources pouvant être\\ncachées et réutilisées par d\'autres instances de PHP.\\n\\nPour ce dernier un système de Callback garanti qu\'une ressource composite sera\\nbien supprimée dans le cas où une des ressources la composant serait modifiée.\\nPlus généralement, un GET permet la mise en cache alors que les requêtes de type\\nPOST, DELETE et PUT génèrent un nettoyage a posteriori des ressources liées.\\n\\nLe cache est optimisé car une application web est susceptible d\'accéder aux\\nmêmes ressources que le site web réduisant ainsi les redondances au sein du\\ncache. En effet, si j\'accède à la ressource /db/mabase/users/1.dat dans une page\\ndu site générée côté serveur ou si j\'y accède directement via HTTP depuis un\\njavascript utilisant XMLHttpRequest, je suis sûr qu\'au moins une des deux\\nrequêtes sera servie à partir du cache.\\n\\nGESTION DES DROITS\\nLes droits son gérés à l\'aide de masques sur les URI permettant une gestion très\\nfine des autorisations des différents utilisateurs. Ces droits peuvent être\\nassociés directement à l\'utilisateur ou via les groupes auxquels il appartient.\\nDe plus, les différents verbes HTTP (GET, PUT, DELETE, POST) représentent divers\\nniveau d\'accès aux ressources qui peuvent également être accordé ou non en\\nfonction des utilisateurs.\\n\\nGESTION DES CONNECTIONS INSTABLES\\nL\'avantage de l\'idempotence des requêtes est qu\'on peut tout à fait faire\\nplusieurs requêtes GET, DELETE ou PUT plusieurs fois sans qu\'il y ait d\'effet de\\nbord. Par exemple, dans une application HTML5, on peut tout à fait créer un\\nmécanisme générique de rétention des requêtes HTTP idempotentes tant qu\'aucune\\nréponse n\'est reçue. Dans mon cas, cela a été implémenté grâce à localStorage\\n(avec une limite néanmoins dans la taille du stockage).\\n\\nAinsi, si une requête est exécutée deux fois, cela est sans incidence sur\\nl\'intégrité dus systèmes et des données. Dans une certaine mesure, on peut «\\nenrober » une requête POST pour obtenir un comportement équivalent.\\n\\nTESTS UNITAIRES\\nL\'uniformité des ressources Rest permet d\'implémenter un système simple de tests\\nunitaires, soit en ligne de commande avec curl, soit comme dans notre cas en\\ncréant une ressource dédiée. L\'avantage est que l\'on écrit moins de tests tout\\nen garantissant le bon fonctionnement de l\'application. On crée plusieurs\\nscénarios d\'utilisation composé d\'une suite de diverses requêtes et on compare\\nles résultats (entêtes, code HTTP, contenu) à ceux attendus.\\n\\nRÉPARTITION DE CHARGE\\nOn peut tout à fait tirer parti de cette interface uniforme pour répartir la\\ncharge sur différents serveurs (serveur de ressources SQL séparé par exemple)\\ngrâce à un routage fin en amont (proxy ou server apache avec rewrite rules).\\n\\nBIENTÔT CHEZ VOUS\\nCette implémentation PHP est déjà utilisée chez un client et au sein de mon\\nentreprise pour la gestion des relations client et la comptabilité. Je dois\\nencore lui trouver un nom et supprimer quelques dépendances vis à vis du CMS\\ninterne de la boîte et son code sera disponible sous double licence : GNU/GPL +\\nLicence commerciale pour ceux qui voudraient pouvoir garder leurs modifications\\nsecrètes.\\n\\nJe compte offrir des licences commerciales aux contributeurs les plus fréquents.\\nL\'objectif de cette double licence étant que les amateurs du gratuit qui ne\\ncontribuent jamais supportent les contraintes de la licence GNU/GPL.\\n\\nEn attendant, je cherche des développeurs PHP intéressés par ce projet, prêts à\\nm\'aider à le finaliser, à l\'utiliser et à me faire des premiers retours afin de\\nmettre en ligne une version plus stable, plus universelle et surtout avec déjà\\nune petite communauté capable de réagir en cas de bug ou de faille de sécurité.\\n\\nLes manques actuels sont : une installation facilitée grâce à des tutos/scripts,\\nplusieurs contextes d\'utilisation afin de valider la pluralité des champs\\nd\'application et le support de la plateforme Windows voire de plateformes plus\\nhétérogènes que mon Debian Squeeze + MPM Prefork + MySQL.\\n\\nBref, toutes les bonnes volonté peuvent me contacter [contact.html] à ce sujet.\\nDe mon côté, je prépare une démo en ligne pour tester le framework à sa guise.\\nVous serez tenus au courant sur ce blog de la suite des évènements.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc43:JSON.parse('{"path":"contents/pages/fr/blog/critique_livre_base_de_donnees.html","title":"Bases de données : Concepts, utilisation et développement de Jean-Luc Hainaut","description":"J\'ai terminé ce livre sur les bases de donnée et je l\'ai trouvé très intéressant et instructif, voici un petit résumé de ce qu\'il m\'a apporté.","shortTitle":"Bases de données - J. L. Hainaut","shortDesc":"Connaître mon avis sur ce livre","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBASES DE DONNÉES : CONCEPTS, UTILISATION ET DÉVELOPPEMENT DE JEAN-LUC HAINAUT\\nJ\'ai terminé ce livre sur les bases de donnée et je l\'ai trouvé très intéressant\\net instructif, voici un petit résumé de ce qu\'il m\'a apporté.\\n\\nJ\'ai lu ce livre un peu chapitre par chapitre de manière espacée car mon\\nactivité professionnelle ne me permet pas toujours de prendre le temps de lire\\nun peu le soir.\\n\\nMais bonne nouvelle, le format du livre le permet vraiment car les chapitres\\nsont bien cloisonnés sur un thème particulier et sont assez courts pour être lus\\nen 15-20 minutes pour la plupart.\\n\\nEn dix ans de pratiques des bases de données, j\'ai forcément appris des choses,\\nmais ce livre a le mérite de bien introduire les bases de données, leur concepts\\nfondamentaux et ses deux languages SQL- DDL et SQL-DMLde manière exhaustive.\\n\\nJ\'ai donc appris que l\'algèbre relationnel permettait de représenter les\\nconcepts des bases de données de manière mathématique. J\'ai aussi appris\\nl\'existance des domaines personnalisés, bien que je ne trouve pas que ces\\nderniers soient vraiment utiles. J\'ai également ré-entendu parlé de l\'opérateur\\n<> qui semble être plus standard que l\'opérateur != que j\'ai toujours utilisé\\njusqu\'ici car plus naturel étant donné mon penchant pour la programmation.\\n\\nJ\'ai pu défricher la norme SQL-3 et apprendre tout ce que cette dernière\\npropose. Bon, j\'avoue que j\'ai pas vraiment pour projet d\'utiliser les objets\\ndans mes bases de données, mais bon, c\'est toujours bon à savoir que ça existe.\\n\\nJ\'ai aussi découvert le piège des valeurs NULL que certains déconseilleraient\\ncarrément à l\'usage selon ce livre.\\n\\nEnfin, une piqûre de rappel sur le modèle entité-relation ne m\'a pas fait de\\nmal.\\n\\nVous l\'aurez deviné, je conseille fortement ce livre car il vous apprendra tout\\nce que j\'ai pu accumuler en 10ans de pérégrinations sur le web en une seule\\nlecture (et même plus).\\n\\nIl ne vous restera alors plus qu\'à choisir votre SGDB préféré et d\'en apprendre\\nles (nombreuses) spécificités.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc44:JSON.parse('{"path":"contents/pages/articles-critique_livre_base_de_donnees.html","title":"Bases de données : Concepts, utilisation et développement de Jean-Luc Hainaut","description":"J\'ai terminé ce livre sur les bases de donnée et je l\'ai trouvé très intéressant et instructif, voici un petit résumé de ce qu\'il m\'a apporté.","shortTitle":"Bases de données - J. L. Hainaut","shortDesc":"Connaître mon avis sur ce livre","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBASES DE DONNÉES : CONCEPTS, UTILISATION ET DÉVELOPPEMENT DE JEAN-LUC HAINAUT\\nJ\'ai terminé ce livre sur les bases de donnée et je l\'ai trouvé très intéressant\\net instructif, voici un petit résumé de ce qu\'il m\'a apporté.\\n\\nJ\'ai lu ce livre un peu chapitre par chapitre de manière espacée car mon\\nactivité professionnelle ne me permet pas toujours de prendre le temps de lire\\nun peu le soir.\\n\\nMais bonne nouvelle, le format du livre le permet vraiment car les chapitres\\nsont bien cloisonnés sur un thème particulier et sont assez courts pour être lus\\nen 15-20 minutes pour la plupart.\\n\\nEn dix ans de pratiques des bases de données, j\'ai forcément appris des choses,\\nmais ce livre a le mérite de bien introduire les bases de données, leur concepts\\nfondamentaux et ses deux languages SQL- DDL et SQL-DMLde manière exhaustive.\\n\\nJ\'ai donc appris que l\'algèbre relationnel permettait de représenter les\\nconcepts des bases de données de manière mathématique. J\'ai aussi appris\\nl\'existance des domaines personnalisés, bien que je ne trouve pas que ces\\nderniers soient vraiment utiles. J\'ai également ré-entendu parlé de l\'opérateur\\n<> qui semble être plus standard que l\'opérateur != que j\'ai toujours utilisé\\njusqu\'ici car plus naturel étant donné mon penchant pour la programmation.\\n\\nJ\'ai pu défricher la norme SQL-3 et apprendre tout ce que cette dernière\\npropose. Bon, j\'avoue que j\'ai pas vraiment pour projet d\'utiliser les objets\\ndans mes bases de données, mais bon, c\'est toujours bon à savoir que ça existe.\\n\\nJ\'ai aussi découvert le piège des valeurs NULL que certains déconseilleraient\\ncarrément à l\'usage selon ce livre.\\n\\nEnfin, une piqûre de rappel sur le modèle entité-relation ne m\'a pas fait de\\nmal.\\n\\nVous l\'aurez deviné, je conseille fortement ce livre car il vous apprendra tout\\nce que j\'ai pu accumuler en 10ans de pérégrinations sur le web en une seule\\nlecture (et même plus).\\n\\nIl ne vous restera alors plus qu\'à choisir votre SGDB préféré et d\'en apprendre\\nles (nombreuses) spécificités.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc45:JSON.parse('{"path":"contents/pages/fr/blog/desasembler_apk.html","title":"Décompiler/désassembler un paquet Android (.apk)","description":"Grâce à la combinaison de deux outils simples et pratiques, il est possible d\'obtenir un code source assez fidèle à celui d\'origine pour un paquet Android.","shortTitle":"Décompiler les APK","shortDesc":"Voir l\'astuce pour faire cette décompilation","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDÉCOMPILER/DÉSASSEMBLER UN PAQUET ANDROID (.APK)\\nGrâce à la combinaison de deux outils simples et pratiques, il est possible\\nd\'obtenir un code source assez fidèle à celui d\'origine pour un paquet Android.\\n\\nLes applications Android sont packagées sous la forme d\'une archive compressée\\n.apk. A l\'intérieur, le bytecode des fichiers Java sous la forme de fichiers\\nd\'extension .dex (bytecode généré pour Dalvik, la machine virtuelle Java\\nutilisée par Android). Premier problème, les fichiers XML de description de\\nl\'interface et des ressources ne sont pas lisible à l\'oeil nu puisque compilés\\neux aussi.\\n\\nLa première chose à faire est donc de les passer à la moulinette de Android APK\\nTool [http://ibotpeaches.github.io/Apktool/]qui va gentiment vous restituer les\\nfichiers XML sous un format texte.\\n\\nMaintenant passons aux fichiers Dex. Sous cette forme, il n\'existe pas encore\\nd\'outils permettant de décompiler ces fichiers. Il va donc falloir passer par un\\nintermédiaire pour obtenir du bytecode comptatible avec la machine virtuelle\\nJava habituelle.\\n\\nCet outil, c\'est dex2jar [http://code.google.com/p/dex2jar/]. Grâce à ce\\ndernier, vous serez en mesure de récupérer un code source Java relativement\\nfidèle à l\'original en utilisant jd-gui [http://jd.benow.ca/].\\n\\nLe proof of concept de cet article est ce petit client REST\\n[https://github.com/nfroidure/SimpleRestAndroidClient]que j\'ai eu le malheur de\\ndévelopper sur un coin de table tant et si bien que je n\'avais plus que le\\nfichier apk.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc46:JSON.parse('{"path":"contents/pages/articles-desasembler_apk.html","title":"Décompiler/désassembler un paquet Android (.apk)","description":"Grâce à la combinaison de deux outils simples et pratiques, il est possible d\'obtenir un code source assez fidèle à celui d\'origine pour un paquet Android.","shortTitle":"Décompiler les APK","shortDesc":"Voir l\'astuce pour faire cette décompilation","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDÉCOMPILER/DÉSASSEMBLER UN PAQUET ANDROID (.APK)\\nGrâce à la combinaison de deux outils simples et pratiques, il est possible\\nd\'obtenir un code source assez fidèle à celui d\'origine pour un paquet Android.\\n\\nLes applications Android sont packagées sous la forme d\'une archive compressée\\n.apk. A l\'intérieur, le bytecode des fichiers Java sous la forme de fichiers\\nd\'extension .dex (bytecode généré pour Dalvik, la machine virtuelle Java\\nutilisée par Android). Premier problème, les fichiers XML de description de\\nl\'interface et des ressources ne sont pas lisible à l\'oeil nu puisque compilés\\neux aussi.\\n\\nLa première chose à faire est donc de les passer à la moulinette de Android APK\\nTool [http://ibotpeaches.github.io/Apktool/]qui va gentiment vous restituer les\\nfichiers XML sous un format texte.\\n\\nMaintenant passons aux fichiers Dex. Sous cette forme, il n\'existe pas encore\\nd\'outils permettant de décompiler ces fichiers. Il va donc falloir passer par un\\nintermédiaire pour obtenir du bytecode comptatible avec la machine virtuelle\\nJava habituelle.\\n\\nCet outil, c\'est dex2jar [http://code.google.com/p/dex2jar/]. Grâce à ce\\ndernier, vous serez en mesure de récupérer un code source Java relativement\\nfidèle à l\'original en utilisant jd-gui [http://jd.benow.ca/].\\n\\nLe proof of concept de cet article est ce petit client REST\\n[https://github.com/nfroidure/SimpleRestAndroidClient]que j\'ai eu le malheur de\\ndévelopper sur un coin de table tant et si bien que je n\'avais plus que le\\nfichier apk.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc47:JSON.parse('{"path":"contents/pages/fr/blog/design_base_donnee_mongodb.html","title":"Design de bases de données MongoDB","description":"Le design de bases de données MongoDB est une activité complexe qui\\n nécessite d\'avoir une profonde connaissance des implications des divers choix\\n possibles.","shortTitle":"Techniques de conception MongoDB","shortDesc":"Découvrez quelques techniques et principes pour la conception de vos\\ncollections MongoDB.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDESIGN DE BASES DE DONNÉES MONGODB\\nComme nous l\'avons vu précédemment, la conception de bases de données avec\\nMongoDB est bien différente [retour_xp_mongodb.html] de la conception avec les\\nbases de données relationnelles.\\n\\nDans cet article, je vous propose d\'aller un peu plus loin dans les techniques\\nde conception de schéma avec MongoDB. Voici quelques conseils et patterns que\\nj\'ai eu à utiliser pour le backend de l\'application SaaS que nous développons\\nchez SimpliField.\\n\\nCOLLECTION != MODÈLE != RESSOURCE\\nLes documents MongoDB sont stockés dans des collections. Cette appellation n\'est\\npas innocente. Il faut voir une collection comme un amas de documents pas\\nforcément uniformes et sans aucune corrélation avec les concepts que vous\\nmanipulez dans vos applications.\\n\\nAinsi, il ne faut pas chercher à associer les ressources de votre API REST aux\\ncollection MongoDB. Prenons, par exemple, la structure de document suivante :\\n\\n\\n{\\n  _id: ObjectId,\\n  user: {\\n    email: String,\\n    name: String\\n  },\\n  auth: {\\n    password: String\\n  },\\n  preferences: [{\\n    name: String,\\n    value: String|Boolean|Number\\n  }],\\n  tags: [{\\n    name: String,\\n    value: String\\n  }],\\n  locations_ids: [ObjectId],\\n  coworkers_ids: [ObjectId],\\n  updates: [{\\n    when: Date,\\n    by: ObjectId,\\n    ip: String\\n  }]\\n}\\n\\n\\nPour une telle structure, on pourra trouver des points d\'API de ce type :\\n\\n * GET /users - Pour obtenir la liste des utilisateurs ;\\n * POST /users - Pour ajouter un utilisateur ;\\n * GET|PUT /users/:id - Pour lire/écrire un utilisateur ;\\n * GET|PUT /users/:id/preferences/:name - Pour lire/écrire une préférence ; \\n * GET|PUT /users/:id/tags - Pour lire/écrire les tags associés ;\\n * GET|PUT /users/:id/locations - Pour lire/éditer les lieux de l\'utilisateur ; \\n * GET|PUT /users/:id/coworkers - Pour lire/éditer les collèges de l\'utilisateur\\n   ; \\n\\nOn voit donc clairement ici le découplage total entre collections et ressources.\\nIci, on a une collection qui \\"contient\\" plusieurs ressources, mais dans d\'autres\\ncas, on peut avoir une ressource dont le contenu est réparti entre plusieurs\\ncollections. Ce serait le cas d\'une ressource permettant d\'accéder aux tags\\nassociés à tous les concepts du système (lieux, utilisateurs, produits...).\\n\\nPAS D\'ODM\\nPuisqu\'il n\'y a aucune corrélation entre modèles, ressources et collections, je\\nvous déconseille fortement l\'utilisation d\'ODM du type Mongoose. Je ne suis\\nclairement pas fan de ce type d\'outils pour les bases de données relationnelles\\nmais dans le cas de MongoDB, ceci est d\'autant plus vrai.\\n\\nPour tout dire, je l\'ai appris dans la douleur. Mongoose a retardé ma\\ncompréhension de la philosophie de MongoDB. Qu\'on adhère ou non à cette\\ndernière, si on utilise MongoDB comme une base de donnée relationnelle, alors,\\non a le pire des deux mondes (et de gros problèmes de performances).\\n\\nSi vous me demandez mon avis sur l\'API du driver natif de MongoDB, je vous\\nrépondrai qu\'il y a une bonne marge d\'amélioration, mais cette dernière est\\nencore le meilleur moyen de profiter de toutes les fonctionnalités qu\'un ORM\\ncomme Mongoose vous cache.\\n\\nPrenons l\'exemple précédent, avec Mongoose, pour mettre à jour les lieux de\\nl\'utilisateur, vous feriez instinctivement ceci :\\n\\n\\n// On s\'assure que les ids donnés sont corrects\\nLocationModel.find({\\n  _id: {\\n    $in: myNewLocationsIds\\n  }\\n}, function(err, locations) {\\n  if(locations.length != myNewLocationsIds.length) {\\n    throw new Error(\'Bad locations ids\');\\n  }\\n  // On met à jour l\'utilisateur\\n  UserModel.find({\\n    _id:ObjectId(\'abbacacaabbacacaabbacaca\')\\n  }, function(err, user) {\\n      user.locations_ids = myNewLocationsIds;\\n    user.save();\\n  });\\n});\\n\\n\\nSauf qu\'ici, vous récupérez toutes les données des documents pour simplement\\nmodifier une propriété de celle-ci. Ce n\'est pas très optimal et même contraire\\nà l\'esprit de MongoDB. Avec le driver natif, vous écririez simplement :\\n\\n\\n// On s\'assure que les ids donnés sont corrects\\ndb.collection(\'location\').count({\\n  _id: {\\n    $in: myNewLocationsIds\\n  }\\n}, function(err, count) {\\n  if(count != myNewLocationsIds.length) {\\n    throw new Error(\'Bad locations ids\');\\n  }\\n  // On met à jour l\'utilisateur\\n  UserModel.update({\\n    _id:ObjectId(\'abbacacaabbacacaabbacaca\')\\n  }, {\\n    $set: {\\n      locations_ids: myNewLocationsIds\\n    }\\n  }, {multi: true});\\n});\\n\\n\\nCertains argueront que Mongoose permet tout de même d\'utiliser le driver natif,\\nmais c\'est moins visible et difficile de réexploiter la validation de Mongoose\\npour ces modifications en dehors de l\'API Mongoose.\\n\\nSi vous avez lu mon précédent article sur MongoDB, vous savez que la conception\\nd\'une base de donnée nécessite une réflexion au moment de l\'implémentation et\\nfonction des principes de MongoDB. Utiliser le driver natif vous garanti de ne\\npas y échapper.\\n\\nDÉCOUPLER DONNÉES ET LOGIQUE\\nSurtout, une fois débarrassé de Mongoose, ne vous précipitez pas pour créer\\nvotre propre ODM. Il faut considérer le contenu de vos collections comme des\\ndonnées que vous filtrerez en entrée comme en sortie avec des fonctions pures.\\n\\nDe cette façon, vous avez toute liberté pour utiliser vos fonctions de\\nvalidation/transformation où bon vous semble, quand bon vous semble sans\\nutiliser ces horribles choses que sont l\'héritage et les mixins.\\n\\nDOCUMENTS != REPRÉSENTATIONS JSON\\nUne autre erreur à ne pas commettre est de penser que la structure des documents\\nde votre collection doit être la même que celle des représentations JSON de\\nvotre API REST.\\n\\nEn pratique, c\'est souvent le contraire. Par exemple, dans la collection\\nutilisateurs ci-dessus, on peut vouloir créer un point d\'API qui expose\\nl\'utilisateur et ses préférences. On a donc une décorrelation entre la\\nreprésentation d\'un utilisateur au niveau de l\'API REST et au niveau des\\ndocuments de la collection MongoDB.\\n\\nRIEN À LA RACINE DES DOCUMENTS\\nUne autre bonne pratique est d\'éviter de stocker des propriétés d\'un même\\nconcept à la racine des documents d\'une collection. Par exemple, vous pourriez\\nvous demander pourquoi j\'ai créé une propriété user dans laquelle j\'ai mis les\\ninformations concernant l\'utilisateur plutôt que de simplement mettre ces\\npropriétés à la racine.\\n\\nLa raison à cela est simple. Si un consommateur de l\'API fait une requête PUT \\nvers le point d\'API /users/:id, alors, je vais modifier toutes les informations\\nconcernant l\'utilisateur. Il sera bien plus simple de faire une requête de type \\nupdate comme ceci :\\n\\n\\ndb.collection(\'users\').update({\\n  _id: userId\\n}, {\\n  $set: {\\n    \'user\': {\\n      name: \'new name\',\\n      email: \'new@email.net\'\\n    }\\n  }\\n}, {multi: true});\\n\\n\\nComme vous pouvez le voir une fois encore, nos collections sont taillées selon\\nl\'usage que nous en faisons.\\n\\nLINÉARISATION DE L\'APPARTENANCE\\nOn pourrait être tenté de donner à nos documents une structure qui reflète les\\nrelations d\'appartenance entre les divers concepts qu\'elles rassemblent. Par\\nexemple, les préférences appartenant à l\'utilisateur seraient peut-être mieux\\ndans l\'objet utilisateur.\\n\\nC\'est clairement une mauvaise idée. Toujours pour pouvoir modifier ces concepts\\nsimplement, il est généralement préférable de linéariser les concepts au sein\\ndes documents.\\n\\nDe la même façon, il est préférable d\'aplatir les structures arborescentes dans\\nun unique tableau quitte à la reconstituer en entrée et en sortie de votre API\\nREST.\\n\\nEn effet, pour tirer parti des performances des pipes d\'agrégation, c\'est une\\nvéritable nécessité.\\n\\nLAZY EMBEDDING\\nComme nous l\'avions vu dans mon billet précédent, le point de compression des\\nperformances dans une application MongoDB est la gestion des relations inter\\ncollections. Puisqu\'il n\'existe pas de jointure, on fait parfois ce qui\\ns\'apparente au désormais bien connu SELECT dans une boucle honni des DBA.\\n\\nBien qu\'il y aura toujours des cas où ce ne sera pas possible de faire\\nautrement, toutes les stratégies sont bonnes pour les éviter. Parmi elles, la\\ntechnique que j\'appelle le lazy embedding permet de stocker ces relations dans\\nles collections afin d\'éviter de les requêter à chaque accès.\\n\\nImaginons que nous voulions donner le nom des lieux d\'un utilisateur dans la\\nressource du même nom. Nous devrions effectuer une requête pour aller chercher\\nl\'utilisateur, puis, une autre pour aller chercher les noms de ses lieux :\\n\\n\\ndb.collection(\'user\').find({\\n  _id: ObjectId(\'abbacacaabbacacaabbacaca\')\\n}, function(err, user) {\\n  db.collection(\'locations\').update({\\n    query: {\\n      _id: {\\n        $in: user.locations_ids\\n      }\\n    },\\n    fields: [\\n      \'_id\',\\n      \'location.name\'\\n    ]\\n  }, function(err, locations) {\\n    user.locations = locations;\\n  }, {multi: true});\\n});\\n\\n\\nL\'idée du lazy embedding est de faire cette requête à la première demande,\\nd\'envoyer le résultat à l\'utilisateur puis de la stocker pour les prochains\\nappels, ce qui donne :\\n\\n\\ndb.collection(\'user\').find({\\n  _id: ObjectId(\'abbacacaabbacacaabbacaca\')\\n}, function(err, user) {\\n  if(!user.locations) {\\n    db.collection(\'locations\').find({\\n      query: {\\n        _id: {\\n          $in: user.locations_ids\\n        }\\n      },\\n      fields: [\\n        \'_id\',\\n        \'location.name\'\\n      ]\\n    }, function(err, locations) {\\n      user.locations = locations;\\n      db.collection(\'user\').update({\\n        _id: ObjectId(\'abbacacaabbacacaabbacaca\')\\n      }, {\\n        $set: {\\n          _locations: locations\\n        }\\n      }, {multi: true});\\n    });\\n  }\\n});\\n\\n\\nBien entendu, dans les triggers de modification d\'un lieu, nous devrons\\nmaintenant invalider les utilisateurs concernés par ce dernier :\\n\\n\\ndb.collection(\'user\').update({\\n  locations_ids: {\\n    $elemMatch:  modifiedLocationId\\n  }\\n}, {\\n  $unset: {\\n    _locations: \'\'\\n  }\\n}, {multi: true});\\n\\n\\nForcément, ceci présuppose que vos utilisateurs sont bien plus souvent consultés\\nque vos lieux ne sont modifiés ce qui est généralement le cas dans la plupart\\ndes applications.\\n\\nDans le cas contraire, grâce à la linéarisation, il reste possible d\'utiliser\\ncette stratégie. Par exemple, imaginons que les tags des lieux changent très\\nsouvent, si les documents de la collection lieux sont structurés comme nos\\ndocuments utilisateurs, nous n\'aurons pas de problème.\\n\\nLISTES CAPÉES\\nVous avez peut-être remarqué la propriété updates dans la structure des\\ndocuments utilisateurs. C\'est un tableau dans lequel on stocke les divers\\nupdates de l\'objet à des fins de débogage a posteriori.\\n\\nCependant, il nous faut bien caper ce tableau pour éviter qu\'il ne sature nos\\ndocuments. On trouve dans les divers opérateurs une possibilité de réaliser ce\\ntype d\'opération en une seule requête. Ainsi, la modification d\'un utilisateur\\ndevient :\\n\\n\\ndb.collection(\'users\').update({\\n  _id: userId\\n}, {\\n  $set: {\\n    \'user\': {\\n      name: \'new name\',\\n      email: \'new@email.net\'\\n    }\\n  }, {\\n    $push : {\\n      updates: {\\n        $each: [{\\n          when: new Date(),\\n          by: connectedUserId,\\n          ip: connectedUserIp\\n        }],\\n        $slice: -10\\n      }\\n    }\\n  }\\n}, {multi: true});\\n\\n\\nCet exemple montre encore une fois l\'intérêt du driver MongoDB natif. Comme il\\nn\'existe pas de notion de transaction en Mongo, nous devons tout faire pour\\nlimiter la concurrence des requêtes et quoi de mieux pour ce faire que de\\nlimiter leur nombre ?\\n\\nIl y a encore tellement de techniques dont je n\'ai pas parlé, mais cet article\\nétant déjà très long, je vous dévoilerai certainement ces dernières dans\\nd\'autres billets.\\n\\nEn attendant, n\'hésitez pas à me livrer les vôtres en commentaire ou à donner\\ndes alternatives aux techniques que je vous ai présenté.\\n\\n Petite précision, j\'ai du faire une modification des sources présentées dans\\ncet article pour ajouter les options {multi: true} qui permettent aux requêtes\\nde mise à jour de fonctionner sur plusieurs entrées. C\'est un peu bizarre, mais\\nc\'est comme ça, par défaut les requêtes de mise à jour ne modifient que la\\npremière entrée. \\n\\nJe vous propose de monter en abstraction en vous proposant ma vision\\nprobabiliste de l\'utilisation de MongoDB [./design_probabiliste_mongodb.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc48:JSON.parse('{"path":"contents/pages/fr/blog/design_probabiliste_mongodb.html","title":"MongoDB ou la conception probabiliste","description":"Concevoir une base de donnée MongoDB c\'est composer avec le hasard.\\n Dans ce billet je vous propose de découvrir pourquoi et comment.","shortTitle":"MongoDB & le hasard","shortDesc":"Découvrez la philosophie que je développe sur MongoDB.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMONGODB OU LA CONCEPTION PROBABILISTE\\nComme je ne vous ai pas tout dit dans mon dernier billet sur le design de base\\nde donnée avec MongoDB [./design_base_donnee_mongodb.html], je me fends d\'un\\nsecond billet plus généraliste sur la philosophie que je mets en œuvre pour la\\ngestion d\'une base de donnée MongoDB.\\n\\nLa majeure partie des décisions en matière d\'architecture et de conception de\\nschéma avec MongoDB se résume à un calcul de probabilité (les plus pessimistes\\ndiront risque) d\'inconsistance des données. Et ça, pour un DBA, c\'est plutôt,\\nnouveau.\\n\\n \\n\\nD\'ailleurs, quand on gratte un peu la surface, on se rend compte que ces\\nprobabilités sont au cœur de la conception de MongoDB lui même. Pour illustrer\\nce fait, parlons un peu de l\'ObjectId.\\n\\nOBJECTID, THE WTF PRIMARY KEY\\nLes clés utilisées par MongoDB, les ObjectIds\\n[https://docs.mongodb.com/manual/reference/method/ObjectId/], sont facilement\\nreconnaissables sous forme de chaîne de caractère. Derrière cette séquence\\nhexadécimale de 24 caractères (ex. : babacafebabacafebabacafebabacafe) se cache\\nbien des concepts.\\n\\nContrairement aux clés auto-incrémentées que l\'on observe dans la plupart, sinon\\nla totalité, des bases de données relationnelles, les clés de MongoDB sont\\ngénérées grâce à une combinaison de quatre valeurs (un timestamp représentant le\\nnombre de secondes écoulées depuis l\'Epoch Unix, un identifiant \\"machine\\", le\\npid du processus qui a généré l\'ObjectId et enfin un compteur incrémenté\\nautomatiquement à chaque création d\'id avec une valeur aléatoire comme base).\\n\\nLa question légitime que vous êtes probablement entrain de vous poser est\\npourquoi ? A première vue, c\'est bien plus compliqué à retenir qu\'un simple\\nidentifiant numérique.\\n\\nLa raison est simple : pouvoir créer un identifiant sans avoir besoin de\\nsynchroniser toutes les instances de MongoDB.\\n\\nEn effet, il est déjà difficile d\'incrémenter un simple un entier\\n[http://highscalability.com/blog/2015/3/9/the-architecture-of-algolias-distributed-search-network.html]\\nentre les diverses instances d\'un cluster alors imaginez si c\'était le cas pour\\ntoutes les collections de MongoDB. Le parti pris est donc de créer cette clé\\nunique d\'une façon telle qu\'il devient impossible de créer la même clé sur deux\\ninstances différentes.\\n\\nOu presque ;). Il existe bel et bien une probabilité que ceci arrive, mais cette\\ndernière est tellement faible qu\'elle devient négligeable. En effet, il faudrait\\nque deux machines, ayant chacune un processus avec le même pid (ou identifiant\\nde processus [https://fr.wikipedia.org/wiki/Identifiant_de_processus]) et le\\nmême identifiant machine, créent dans la même milliseconde, un ObjectId alors\\nque leur compteur interne a la même valeur.\\n\\nDans la conception d\'API REST, cette caractéristique devient même un précieux\\navantage puisqu\'elle permet de générer l\'ObjectId de cette ressource directement\\nsur le client qui consomme cette même API. Ainsi, tirer avantage des requêtes\\ncréationnelles idempotentes du type PUT et PATCH devient un jeu d\'enfant. En\\nembarquant une bibliothèque permettant de générer des ObjectIds\\n[https://github.com/justaprogrammer/ObjectId.js]on peu s\'assurer de l\'unicité\\ndes ressources créées côté mobile malgré les très probables coupures\\nintempestives typiques des connexions itinérantes.\\n\\nTRANSACTIONS OPTIMISTES\\nMongoDB ne propose pas de système de transaction. C\'est d\'ailleurs ce qui m\'a\\nrebuté de prime abord quand j\'ai découvert MongoDB. Les données étant le cœur de\\ntout système, ne pouvoir garantir l\'état de ces dernières et risquer de les voir\\nlentement se dégrader est inenvisageable pour un concepteur de service web qui\\nse respecte.\\n\\nAlors que faire ? Faîtes comme dans la vraie vie. Quand vous prenez votre\\nvoiture pour aller chercher du pain, vous savez que ce n\'est pas sans risque.\\nVous pourriez crever un pneu, avoir un accident etc... Malheureusement, vous ne\\npouvez pas réduire le risque à néant.\\n\\nEn sortant quand même de chez vous, vous arbitrez sur le fait que ces risques\\nsont somme toute négligeables et que la seule façon d\'arriver à vos fins\\nefficacement est de prendre ce risque. Vous le prenez cependant de manière\\nintelligente.\\n\\nVous avez un véhicule contrôlé techniquement tous les deux ans, vos pneus sont\\nvérifiés régulièrement. Vous avez mis en place toute une batterie de mesures\\npour réduire ce risque.\\n\\nVous avez également une roue de secours, une trousse de premier soins, un\\nchasuble peut-être même une couverture au cas où vous seriez bloqué par la\\nneige. Vous avez pris des mesures pour anticiper ce risque, pour être prêt si\\npar malchance il se réalisait.\\n\\nBref, vous faîtes une transaction optimiste. Selon toute vraisemblance dans 20\\nminutes vous serez de retour chez vous avec du pain. Et vous pourrez passer à\\nl\'opération suivante, préparer le petit déjeuner.\\n\\nLà où les bases relationnelles sont basées sur le fait qu\'avec les transactions,\\nthéoriquement, il n\'y a aucun risque, les bases de données NoSQL se basent sur\\nle fait que généralement, tout se passe bien.\\n\\nC\'est pourquoi la conception avec MongoDB est plus complexe. Elle demande une\\nbonne réflexion et une bonne capacité à mesurer et anticiper les risques là où\\nune conception relationnelle demande simplement du formalisme.\\n\\nReprenons mon exemple du billet précédent dans lequel on met à jour les lieux\\nassociés à un utilisateur :\\n\\n\\n// On s\'assure que les ids donnés sont corrects\\ndb.collection(\'location\').count({\\n  _id: {\\n    $in: myNewLocationsIds\\n  }\\n}, function(err, count) {\\n  if(count != myNewLocationsIds.length) {\\n    throw new Error(\'Bad locations ids\');\\n  }\\n  // On met à jour l\'utilisateur\\n  UserModel.update({\\n    _id:ObjectId(\'abbacacaabbacacaabbacaca\')\\n  }, {\\n    $set: {\\n      locations_ids: myNewLocationsIds\\n    }\\n  }, {multi: true});\\n});\\n\\n\\nQuels sont les risques ? La majorité des risques se situent souvent entre deux\\nrequêtes (d\'où l\'intérêt des techniques présentées dans l\'article précédent pour\\nles limiter). Le risque se situe donc entre la vérification de l\'existence des\\nlieux liés et la liaison effective des lieux dans le document correspondant à\\nl\'utilisateur.\\n\\nPour que ce risque se réalise, il faudrait que l\'un de ces lieux soit supprimé\\nentre la requête de vérification et celle de modification. Soyons clairs, ce\\nrisque bien qu\'existant est infime. Il est si infime, qu\'on ne peut pas vraiment\\nle réduire. On peut, par contre, très certainement l\'augmenter en utilisant\\nMongoose ;) (voir billet précédent).\\n\\nEn revanche, puisque le risque existe, il s\'agit de ne pas l\'ignorer. Accepter\\nla probabilité qu\'un accident survienne en allant chercher du pain ne signifie\\npas mettre des œillères et se retrouver dépourvu face à sa réalisation.\\n\\n \\n\\nPlusieurs stratégies peuvent être mises en œuvre pour pallier à ces risques,\\nparfois conjointement.\\n\\nRÉSILIENCE FACE À L\'INCONSISTANCE\\nLa première stratégie qui, selon moi, se doit d\'être automatique. Votre\\nplateforme se doit de continuer de fonctionner en cas d\'inconsistance. Dans le\\ncas de l\'exemple ci-dessus, si il s\'avère qu\'un lieu n\'existe plus quand vous\\ncherchez à obtenir la liste des lieux d\'un utilisateur, vous devez donc\\nsilencieusement l\'invalider et non renvoyer une erreur aux consommateurs de\\nvotre API. Vous devez aussi logger cette erreur avec une flag reconnaissable\\npour votre supervision.\\n\\nTypiquement, l\'architecte logiciel se chargera d\'ajouter des tests à la base de\\ncode pour les risques d\'inconsistance identifiés et acceptés par sa conception\\nde façon à alerter les développeurs de ces derniers. Au niveau code, ceci\\ndonnerait :\\n\\n\\n// Récupération des identifiants des lieux de l\'utilisateur\\ndb.users.find({\\n  query: {\\n    _id: ObjectId(\'abbacacaabbacacaabbacacaabbacaca\')\\n  },\\n  fields: [\\n    \'locations_ids\'\\n  ]\\n}, function(err, results) {\\n  // Récupération des lieux\\n  db.locations.find({\\n    query: {\\n      _id: {\\n        $in: results[0].locations_ids\\n      }\\n    },\\n    fields: [\'location\']\\n  }, function(err, results) {\\n    // On a uniquement les lieux trouvé donc, si un identifiant était\\n    // mauvais, osef\\n    var locations = results.map(function(result) {\\n      return result.location;\\n    });\\n  });\\n});\\n\\n\\nIci, le système de querying de MongoDB nous épargne la peine de prendre le cas\\nen charge dans le code. Il doit cependant, je le répète, être pris en charge par\\nles tests.\\n\\nCONTRÔLE D\'INTÉGRITÉ PÉRIODIQUE\\nVotre base de donnée peu devenir inconsistante. Donc, créez des scripts ! Ça\\npeut paraître bête, mais créer des scripts pour contrôler et réparer les\\npossibles inconsistances de votre base MongoDB est un excellent moyen de lutter\\ncontre elles. Ces scripts peuvent également servir de reminder de toutes les\\ninconsistances possibles.\\n\\nVous serez également bien contents de les avoir sous la main dans la cas où une\\ninconsistance surviendrait plus souvent que prévu. Afin de pouvoir les utiliser\\ncomme palliatif le temps de réduire la probabilité de leur survenance grâce aux\\ntechniques que je vous ai présenté.\\n\\nCONTRÔLE ET TRAITEMENT OPPORTUNISTE D\'INTÉGRITÉ\\nMais il y a mieux :). Dans notre exemple de code tolérant à l\'inconsistance, je\\nvois une belle opportunité de gérer à posteriori les inconsistances. En effet,\\npuisque nous avons fait les requêtes permettant de voir l\'inconsistance,\\npourquoi ne pas la corriger ?\\n\\n\\n// Récupération des identifiants des lieux de l\'utilisateur\\ndb.users.find({\\n  query: {\\n    _id: ObjectId(\'abbacacaabbacacaabbacacaabbacaca\')\\n  },\\n  fields: [\\n    \'locations_ids\'\\n  ]\\n}, function(err, results) {\\n  var locationsIds = results[0].locations_ids;\\n  // Récupération des lieux\\n  db.locations.find({\\n    query: {\\n      _id: {\\n        $in: locationsIds\\n      }\\n    },\\n    fields: [\'location\']\\n  }, function(err, results) {\\n    // On a uniquement les lieux trouvé donc, si un identifiant était\\n    // mauvais, osef\\n    var locations = results.map(function(result) {\\n      return result.location;\\n    });\\n    // Petit ajout pour traiter les inconsistances\\n    var badLocationsIds = locationsIds.filter(function(locationId) {\\n      return locations.every(function(location) {\\n        return location._id.toString() !== locationId.toString();\\n      });\\n    });\\n    // Si on en a, on fait la requête qui va bien\\n    if(badLocationsIds.length) {\\n      db.users.update({\\n        _id: ObjectId(\'abbacacaabbacacaabbacacaabbacaca\')\\n      }, {\\n        $pullAll: {\\n          locations_ids: badLocationsIds\\n        }\\n      })\\n    }\\n  });\\n});\\n\\n\\nOn peut s\'inquiéter de l\'empreinte de cette correction d\'inconsistance sur les\\nperformances du système. Il faut cependant tempérer cette crainte par le fait\\nque les inconsistances dans un système bien conçu sont rares.\\n\\nDe plus, il est possible d\'utiliser la fonction setTimeout() de JavaScript pour\\ndécoupler ces vérifications du reste du code pour ne pas nuire aux performances\\nsi cela s\'avérait nécessaire.\\n\\nISOLATION\\nVous avez probablement remarqué que les risques d\'inconsistances sont souvent\\ndûs à la concurrence possible sur les même données de deux utilisateurs\\ndifférents de votre API.\\n\\nLa résultante de ceci est bien sûr que le trafic sur votre plateforme change\\ntotalement les probabilités d\'inconsistance. Ainsi, si vous avez un seul\\nutilisateur elles sont quasi nulles, en revanche, si des millions d\'utilisateurs\\nl\'utilisent, elles deviennent plus probables.\\n\\nUn bon moyen de limiter les inconsistances est donc la création de silos\\nartificiels. Par exemple, si votre plateforme contient des organisations\\ndifférentes et qu\'aucun document n\'est partagé entre deux organisations à aucun\\nmoment, félicitations, vous avez divisé le risque d\'inconsistance dû au trafic\\npar le nombre d\'organisations existantes.\\n\\nSUPERVISION\\nTraiter silencieusement les inconsistances n\'est pas suffisant. Vous devez\\nrecueillir du feedback sur ces dernières de manière à pouvoir faire évoluer\\nvotre système en connaissance de causes.\\n\\nLa supervision et l\'analyse des logs doit être une priorité. Par chance, les\\ninconsistances sont sensées être rares. C\'est pourquoi, ceci ne devrait pas être\\ntrop compliqué à gérer. Je suis pour ma part, partisan de l\'envoi de mail à\\nchaque inconsistance tant que c\'est soutenable (l\'idée est de tout faire pour\\nque ça le reste ;) ).\\n\\nToutes ces stratégies permettent de gérer l\'incertitude pour obtenir un système\\nscalable. Ce qui est clair, c\'est que cette nouvelle façon d\'appréhender la\\ngestion des données m\'a clairement fait sortir de ma zone de confort, mais\\nl\'essentiel est d\'avoir retrouvé un niveau de confiance presque équivalent à\\ncelui induit par l\'utilisation d\'une base de données relationnelle.\\n\\n \\n\\nINCEPTION\\nOn pourrait ébrécher cette confiance en réfléchissant à toutes les stratégies\\nmises en œuvre ci-dessus. Puisqu\'elles-mêmes agissent sur les données, elles\\npeuvent donc également générer des inconsistances.\\n\\nIl est possible que la suppression d\'un identifiant de lieu dans la liste des\\nlieux d\'un utilisateur supprime en fait une association parfaitement légitime.\\n\\n \\n\\nEn effet, on a vu qu\'il était possible que deux identifiants MongoDB soient\\ncréés en même temps et soient identiques. Il est donc possible qu\'un lieu soit\\ncréé avec l\'un de ces identifiants et associé à l\'utilisateur alors même qu\'on\\nest entrain de supprimer cet identifiant par ailleurs pour rétablir une\\nintégrité supposée :).\\n\\n \\n\\nCONCEPTION ORGANIQUE\\nJ\'aime bien le terme de conception organique. Là où les bases de données\\nrelationnelles sont comme une négation de la nature imprévisible de l\'univers,\\nMongoDB impose une conception qui rejoint l\'approche naturelle. Une conception\\norganique.\\n\\nJ\'aime cette vision philosophique de l\'état d\'un système qui jongle avec les\\nprobabilité et compose avec l\'infini. MongoDB, c\'est aussi une conception\\noptimiste, car oui, dans la nature, les choses se passent plus souvent bien que\\nmal.\\n\\n \\n\\nJ\'aime ces points de jonction entre la science et la vie. N\'est-ce pas ainsi\\nqu\'on explique désormais la plupart des mystères de l\'univers ?\\n\\nToutes les bonnes choses ont une fin, je pense que je reparlerai de MongoDB sur\\nce blog, en attendant, n\'hésitez pas à donner votre avis. Désolé pour les gifs\\n:p.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc49:JSON.parse('{"path":"contents/pages/fr/blog/devcamp_microsoft_lille.html","title":"Dev camp Microsoft Lille : Bienvenue en boîte !","description":"Hier je suis allé au Devcamp Microsoft organisé à Lille pour découvrir le nouveau Windows et ses nouvelles possibilités pour la création de logiciels. Je pense que l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5 / Javascript.","shortTitle":"Devcamp Windows 8","shortDesc":"En savoir plus sur le déroulement de cette journée.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDEV CAMP MICROSOFT LILLE : BIENVENUE EN BOÎTE !\\nHier je suis allé au Devcamp Microsoft organisé à Lille pour découvrir le\\nnouveau Windows et ses nouvelles possibilités pour la création de logiciels. Je\\npense que l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5\\n/ Javascript.\\n\\nChristophe Peugnet, développeur spécialisé Windows, éditeur de logiciels de\\nplanification, m\'a convié à cet évènement Microsoft pour me permettre de\\ndécouvrir ce fameux Windows 8 qui devrait sortir dans peu de temps, mais\\nsurtout, de jouer un peu avec ses APIs et outils.\\n\\nVous connaissez sûrement mon penchant pour Linux et vous vous demandez sûrement\\nce qui a bien pu me motiver. C\'est simplement HTML5. En effet, selon Microsoft,\\nle développement d\'applications en HTML5 / Javascript est intégré à la nouvelle\\nmouture de Windows. Cela a donc piqué ma curiosité.\\n\\nJ\'avais justement sous la main mon Casse Brique et le projet Tank Arena, j\'ai\\ndonc décidé de les intégrer au sein d\'une application packagée pour Windows au\\ncours de cette journée.\\n\\nFAÎTES CE QUE J\'EDI, MAIS PAS CE QUE JE FAIS\\nIl a d\'abord fallu que j\'installe Windows 8 sur un disque dur vacant puis Visual\\nStudio. Venant des mondes du web et d\'Unix, j\'ai tout d\'abord été choqué par\\nl\'obligation d\'utiliser un EDI. En effet, les développeurs Javascript ne sont\\npas habitués à devoir cliquer tous azimuts pour faire tourner du code et créer\\ndes apps. De plus l\'interface est assez complexe et ne permet pas d\'être\\nefficace rapidement.\\n\\nUn peu déconcerté par cette salle où on entendait plus les clics que les touches\\ndu clavier (on aurait pu penser qu\'on faisait un LAN Starcraft), je me suis mis\\nà découvrir ce qu\'on pouvait faire en Javascript sur Windows8.\\n\\nJACQUES A DIT HTML5 !\\nAprès un peu de démotivation, je trouve de la ressource en constatant que mon\\nCasse Brique et Tank Arena fonctionnaient tous les deux forts bien (à part un\\npetit bug son) sur Internet Explorer. De ce côté, on peut dire que Microsoft a\\ntenu sa promesse de sortir Windows 8 avec un vrai navigateur prêt pour le HTML5\\nd\'aujourd\'hui.\\n\\nBref, je crée un projet HTML5 / Javascript sous Visual Studio et là grosse\\nfrayeur. Je vois que le projet de départ est bien du Javascript, ça en a le\\ngoût, ça en a l\'odeur, mais quelques petits trucs clochent.\\n\\nEn effet, Windows 8, propose sont propre Framework du coup, le Javascript qu\'on\\ntrouve dans les projets \\"prédéfinis\\" ne ressemble pas à ce qu\'on peut trouver\\ndans une page web. Les requêtes xhr à titre d\'exemple ressemblent à ça :\\n\\n\\nWinJS.xhr(\'/monfichier.json\').then(function moncallback(xhr) { alert(xhr.responseText); }); \\n\\nDeux questions me submergent à ce moment là :\\n\\n * mon JS pourra-t-il fonctionner out of the box avec Windows 8 ? Vais-je devoir\\n   réécrire toutes les fonction XHR ? Est-ce la seule syntaxe propre à ce fameux\\n   WinJS qu\'on retrouve partout ? \\n * ces développeurs DotNet qui m\'entourent et qui n\'ont pas l\'air versé dans le\\n   JS, vont-ils apprendre ce JS là ? Si oui, ne risquent-ils pas de se sentir\\n   trompés dès lors qu\'ils voudront se tourner vers d\'autres horizons ? \\n\\nHeureusement, après avoir importé les fichiers du Casse Brique, je me rend\\ncompte que le JS classique fonctionne. On peut donc faire tourner un projet JS\\nexistant assez facilement. Il suffit d\'importer les fichiers JS et les autres\\nressources éventuelles, puis d\'appeler sa fonction principale au sein du fichier\\njavascript default.js (créé lors de la fabrication du projet par défaut).\\n\\nD\'ailleurs on observe dans ce fichier default.js un comportement fort\\nressemblant à Android avec plusieurs niveaux de notifications en fonction de\\nl\'état de l\'application. Cela permet de donner des directives à son application\\ndans le cas où il serait necessaire d\'enregistrer des données avant la fermeture\\nprématurée ou volontaire de cette dernière.\\n\\nLa deuxième question reste en suspend, mais elle va finalement converger avec\\nune autre réflexion initiée l\'ors du repas. Bref, finalement, l\'application a\\nfonctionné, même le son a fini par marcher (.ogg remplacés par des .mp3). Donc,\\noui, je confirme, Windows 8 est ok pour le HTML5 d\'aujourd\'hui.\\n\\nOUI, MAIS DEMAIN\\nUne question est cependant restée en suspens. En effet, le problème de Microsoft\\nn\'a jamais été d\'être inovant à un instant t. Le problème a été de le rester\\ndurant tout le cycle de vie du produit, par la force des mises à jour.\\nL\'impossibilité d\'installer Internet Explorer 9 sur XP en est un exemple.\\n\\nA cela, vous pouvez rétorquer que XP c\'est mort et ça pue. Je dirai pas que vous\\navez tort. Mais le métier d\'une éditeur de logiciel est d\'accompagner ses\\nclients en mettant à jour les logiciels qu\'il lui fournit. Soit en encourageant\\nle passage à la version supérieure de l\'OS (par des tarifs acceptables ou mieux\\ngratuitement), mais certainement pas en attendant que l\'utilisateur renouvelle\\nson matériel ! D\'ailleurs les licences sont liées au matériel. Qu\'est-ce que ça\\ncoûterait à Microsoft de laisser les gens upgrader ?\\n\\nBon, en fait, ça leur coûterait car ils devraient développer leurs nouveaux OS\\nde manière plus responsable pour qu\'ils consomment moins de mémoire, moins de\\nCPU et ainsi qu\'ils puissent toujours être utilisés sur de vielles machines.\\nMais ça, c\'est dû à un mauvais choix dès le départ qui a été de faire payer aux\\nutilisateurs un renouvellement de matériel, plutôt qu\'un renouvellement de\\nlicence seulement.\\n\\nBref, le rapport avec HTML5, c\'est que Windows est prêt pour le HTML5\\nd\'aujourd\'hui, mais il n\'a pas démontré sa capacité à être prêt pour le HTML5 de\\ndemain. HTML5 évolue très rapidement, Windows doit suivre, sinon, il aura vendu\\nHTML5 avec de la publicité mensongère. HTML5, c\'est pas le code de 2012, c\'est\\ncelui de 2014 quand le draft sera enfin finalisé.\\n\\nUNIVERS FERMÉ\\nMalheureusement, un autre point sur lequel Microsoft n\'a pas changé est que\\nWindows reste un univers fermé. A moins de changer de business model, cela\\nrisque de ne pas changer. Au même titre qu\'avec iOS d\'Apple et dans une moindre\\nmesure Android de Google, on ne peut développer une application qu\'avec les\\noutils qui sont édités par cette entreprise.\\n\\nAinsi, en tant qu\'utilisateur Linux, le monde iOS et le monde Windows 8 me sont\\nfermés. Si je veux y accéder d\'un point de vue business, je dois posséder une\\nlicence (Windows + Visual Studio). C\'est ici que le business model d\'Android est\\nbrillant. Quel que soit l\'OS utilisé, les développeurs d\'Android ont su\\nfactoriser les technologies afin de permettre une ouverture maximale du marché\\nde leur applications.\\n\\nQuand on vient du web, on vit cela encore plus durement. En effet, malgré la\\nguerre des navigateurs, les technologies web ont toujours été accessibles quel\\nque soit l\'OS, l\'éditeur ou l\'EDI utilisé. Et ça, on s\'en rend vraiment compte\\nquand on entre dans l\'univers de Microsoft, on le vit très mal.\\n\\nJe remercie quand même Microsoft de m\'avoir invité à cet évènement qui malgré\\ntout m\'a montré qu\'ils vont dans le bon sens. J\'ai d\'ailleurs été très bien reçu\\net être respecté ça fait toujours plaisir.\\n\\nJe vais terminer par une petite phrase que j\'ai dîte aux organisateurs lors du\\nrepas et qui je pense résume assez bien mon avis sur Microsoft, Apple et Google,\\nle cloud et tous ces rêves qu(\'on veut vendre aux développeurs : \\"Autrefois vous\\nvendiez des radios portables, aujourd\'hui vous vendez des entrées en discothèque\\n: tout le monde ne peut pas rentrer, les consommations sont hors de prix, tu\\npeux être sorti à tout moment et une fois dehors, la musique s\'arrête.\\".\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc50:JSON.parse('{"path":"contents/pages/articles-devcamp_microsoft_lille.html","title":"Dev camp Microsoft Lille : Bienvenue en boîte !","description":"Hier je suis allé au Devcamp Microsoft organisé à Lille pour découvrir le nouveau Windows et ses nouvelles possibilités pour la création de logiciels. Je pense que l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5 / Javascript.","shortTitle":"Devcamp Windows 8","shortDesc":"En savoir plus sur le déroulement de cette journée.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDEV CAMP MICROSOFT LILLE : BIENVENUE EN BOÎTE !\\nHier je suis allé au Devcamp Microsoft organisé à Lille pour découvrir le\\nnouveau Windows et ses nouvelles possibilités pour la création de logiciels. Je\\npense que l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5\\n/ Javascript.\\n\\nChristophe Peugnet, développeur spécialisé Windows, éditeur de logiciels de\\nplanification, m\'a convié à cet évènement Microsoft pour me permettre de\\ndécouvrir ce fameux Windows 8 qui devrait sortir dans peu de temps, mais\\nsurtout, de jouer un peu avec ses APIs et outils.\\n\\nVous connaissez sûrement mon penchant pour Linux et vous vous demandez sûrement\\nce qui a bien pu me motiver. C\'est simplement HTML5. En effet, selon Microsoft,\\nle développement d\'applications en HTML5 / Javascript est intégré à la nouvelle\\nmouture de Windows. Cela a donc piqué ma curiosité.\\n\\nJ\'avais justement sous la main mon Casse Brique et le projet Tank Arena, j\'ai\\ndonc décidé de les intégrer au sein d\'une application packagée pour Windows au\\ncours de cette journée.\\n\\nFAÎTES CE QUE J\'EDI, MAIS PAS CE QUE JE FAIS\\nIl a d\'abord fallu que j\'installe Windows 8 sur un disque dur vacant puis Visual\\nStudio. Venant des mondes du web et d\'Unix, j\'ai tout d\'abord été choqué par\\nl\'obligation d\'utiliser un EDI. En effet, les développeurs Javascript ne sont\\npas habitués à devoir cliquer tous azimuts pour faire tourner du code et créer\\ndes apps. De plus l\'interface est assez complexe et ne permet pas d\'être\\nefficace rapidement.\\n\\nUn peu déconcerté par cette salle où on entendait plus les clics que les touches\\ndu clavier (on aurait pu penser qu\'on faisait un LAN Starcraft), je me suis mis\\nà découvrir ce qu\'on pouvait faire en Javascript sur Windows8.\\n\\nJACQUES A DIT HTML5 !\\nAprès un peu de démotivation, je trouve de la ressource en constatant que mon\\nCasse Brique et Tank Arena fonctionnaient tous les deux forts bien (à part un\\npetit bug son) sur Internet Explorer. De ce côté, on peut dire que Microsoft a\\ntenu sa promesse de sortir Windows 8 avec un vrai navigateur prêt pour le HTML5\\nd\'aujourd\'hui.\\n\\nBref, je crée un projet HTML5 / Javascript sous Visual Studio et là grosse\\nfrayeur. Je vois que le projet de départ est bien du Javascript, ça en a le\\ngoût, ça en a l\'odeur, mais quelques petits trucs clochent.\\n\\nEn effet, Windows 8, propose sont propre Framework du coup, le Javascript qu\'on\\ntrouve dans les projets \\"prédéfinis\\" ne ressemble pas à ce qu\'on peut trouver\\ndans une page web. Les requêtes xhr à titre d\'exemple ressemblent à ça :\\n\\n\\nWinJS.xhr(\'/monfichier.json\').then(function moncallback(xhr) { alert(xhr.responseText); }); \\n\\nDeux questions me submergent à ce moment là :\\n\\n * mon JS pourra-t-il fonctionner out of the box avec Windows 8 ? Vais-je devoir\\n   réécrire toutes les fonction XHR ? Est-ce la seule syntaxe propre à ce fameux\\n   WinJS qu\'on retrouve partout ? \\n * ces développeurs DotNet qui m\'entourent et qui n\'ont pas l\'air versé dans le\\n   JS, vont-ils apprendre ce JS là ? Si oui, ne risquent-ils pas de se sentir\\n   trompés dès lors qu\'ils voudront se tourner vers d\'autres horizons ? \\n\\nHeureusement, après avoir importé les fichiers du Casse Brique, je me rend\\ncompte que le JS classique fonctionne. On peut donc faire tourner un projet JS\\nexistant assez facilement. Il suffit d\'importer les fichiers JS et les autres\\nressources éventuelles, puis d\'appeler sa fonction principale au sein du fichier\\njavascript default.js (créé lors de la fabrication du projet par défaut).\\n\\nD\'ailleurs on observe dans ce fichier default.js un comportement fort\\nressemblant à Android avec plusieurs niveaux de notifications en fonction de\\nl\'état de l\'application. Cela permet de donner des directives à son application\\ndans le cas où il serait necessaire d\'enregistrer des données avant la fermeture\\nprématurée ou volontaire de cette dernière.\\n\\nLa deuxième question reste en suspend, mais elle va finalement converger avec\\nune autre réflexion initiée l\'ors du repas. Bref, finalement, l\'application a\\nfonctionné, même le son a fini par marcher (.ogg remplacés par des .mp3). Donc,\\noui, je confirme, Windows 8 est ok pour le HTML5 d\'aujourd\'hui.\\n\\nOUI, MAIS DEMAIN\\nUne question est cependant restée en suspens. En effet, le problème de Microsoft\\nn\'a jamais été d\'être inovant à un instant t. Le problème a été de le rester\\ndurant tout le cycle de vie du produit, par la force des mises à jour.\\nL\'impossibilité d\'installer Internet Explorer 9 sur XP en est un exemple.\\n\\nA cela, vous pouvez rétorquer que XP c\'est mort et ça pue. Je dirai pas que vous\\navez tort. Mais le métier d\'une éditeur de logiciel est d\'accompagner ses\\nclients en mettant à jour les logiciels qu\'il lui fournit. Soit en encourageant\\nle passage à la version supérieure de l\'OS (par des tarifs acceptables ou mieux\\ngratuitement), mais certainement pas en attendant que l\'utilisateur renouvelle\\nson matériel ! D\'ailleurs les licences sont liées au matériel. Qu\'est-ce que ça\\ncoûterait à Microsoft de laisser les gens upgrader ?\\n\\nBon, en fait, ça leur coûterait car ils devraient développer leurs nouveaux OS\\nde manière plus responsable pour qu\'ils consomment moins de mémoire, moins de\\nCPU et ainsi qu\'ils puissent toujours être utilisés sur de vielles machines.\\nMais ça, c\'est dû à un mauvais choix dès le départ qui a été de faire payer aux\\nutilisateurs un renouvellement de matériel, plutôt qu\'un renouvellement de\\nlicence seulement.\\n\\nBref, le rapport avec HTML5, c\'est que Windows est prêt pour le HTML5\\nd\'aujourd\'hui, mais il n\'a pas démontré sa capacité à être prêt pour le HTML5 de\\ndemain. HTML5 évolue très rapidement, Windows doit suivre, sinon, il aura vendu\\nHTML5 avec de la publicité mensongère. HTML5, c\'est pas le code de 2012, c\'est\\ncelui de 2014 quand le draft sera enfin finalisé.\\n\\nUNIVERS FERMÉ\\nMalheureusement, un autre point sur lequel Microsoft n\'a pas changé est que\\nWindows reste un univers fermé. A moins de changer de business model, cela\\nrisque de ne pas changer. Au même titre qu\'avec iOS d\'Apple et dans une moindre\\nmesure Android de Google, on ne peut développer une application qu\'avec les\\noutils qui sont édités par cette entreprise.\\n\\nAinsi, en tant qu\'utilisateur Linux, le monde iOS et le monde Windows 8 me sont\\nfermés. Si je veux y accéder d\'un point de vue business, je dois posséder une\\nlicence (Windows + Visual Studio). C\'est ici que le business model d\'Android est\\nbrillant. Quel que soit l\'OS utilisé, les développeurs d\'Android ont su\\nfactoriser les technologies afin de permettre une ouverture maximale du marché\\nde leur applications.\\n\\nQuand on vient du web, on vit cela encore plus durement. En effet, malgré la\\nguerre des navigateurs, les technologies web ont toujours été accessibles quel\\nque soit l\'OS, l\'éditeur ou l\'EDI utilisé. Et ça, on s\'en rend vraiment compte\\nquand on entre dans l\'univers de Microsoft, on le vit très mal.\\n\\nJe remercie quand même Microsoft de m\'avoir invité à cet évènement qui malgré\\ntout m\'a montré qu\'ils vont dans le bon sens. J\'ai d\'ailleurs été très bien reçu\\net être respecté ça fait toujours plaisir.\\n\\nJe vais terminer par une petite phrase que j\'ai dîte aux organisateurs lors du\\nrepas et qui je pense résume assez bien mon avis sur Microsoft, Apple et Google,\\nle cloud et tous ces rêves qu(\'on veut vendre aux développeurs : \\"Autrefois vous\\nvendiez des radios portables, aujourd\'hui vous vendez des entrées en discothèque\\n: tout le monde ne peut pas rentrer, les consommations sont hors de prix, tu\\npeux être sorti à tout moment et une fois dehors, la musique s\'arrête.\\".\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc51:JSON.parse('{"path":"contents/pages/fr/blog/developpement_systeme_sous_linux.html","title":"Critique du livre : Développement système sous Linux de Christophe Blaess","description":"Cette semaine, j\'ai lu l\'un des livres les plus intéressants qu\'il m\'ait été donné de lire.","shortTitle":"Livre sur le dév. Linux","shortDesc":"En savoir plus","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : DÉVELOPPEMENT SYSTÈME SOUS LINUX DE CHRISTOPHE BLAESS\\nCette semaine, j\'ai lu l\'un des livres les plus intéressants qu\'il m\'ait été\\ndonné de lire.\\n\\nJ\'ai déjà lu de nombreux livre sur Linux, notamment ceux de Raphaël Hertzog sur\\nDebian GNU/Linux, ma distribution desktop et serveur. Mais là, j\'ai découvert\\nune perle qui surclasse tous les autres en terme de technicité.\\n\\nDeveloppement système sous Linux est une mine d\'or pour qui souhaite comprendre\\nle fonctionnement de Linux. Je n\'ai pas forcément vocation à écrire des\\nprogrammes en C, mais cet ouvrage m\'a permis d\'avoir une compréhension très fine\\nde la façon dont les programmes exploitent les capacités de Linux.\\n\\nAutant j\'ai eu beaucoup de plaisir à lire les livres sur l\'aspect théorique de\\nC++, autant celui-là m\'a permis de me rapprocher au plus près de la plateforme.\\nJe me sers maintenant quotidiennement des principes appris dans ce livre pour de\\nl\'administration système.\\n\\nComment fonctionnent les processus, qu\'est-ce que les signaux, comment sont-il\\ngérés ? Comment la mémoire est gérée ?\\n\\nOn en apprend aussi beaucoup sur les entrées sorties, le fonctionnement des\\npipes, les sockets etc...\\n\\nCe livre est un must-have, même pour ceux qui ne font pas du C tous les jours\\ncar il permet de savoir développer de petits programmes qui rendent bien\\nservice.\\n\\nJ\'ai, par exemple, créé avec l\'aide de ce livre, un programme en ligne de\\ncommande [https://github.com/nfroidure/X1-GPS-Logger]qui logge les positions GPS\\némises avec un boitier X1 Intellitrac (pour finir, j\'ai fais un billet sur ce\\nlogger et xinetd [xinetd_super_server.html]). En utilisant xinetd, j\'ai pu créer\\nun serveur simple et performant gérant une flotte d\'une trentaine de véhicules.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc52:JSON.parse('{"path":"contents/pages/articles-developpement_systeme_sous_linux.html","title":"Critique du livre : Développement système sous Linux de Christophe Blaess","description":"Cette semaine, j\'ai lu l\'un des livres les plus intéressants qu\'il m\'ait été donné de lire.","shortTitle":"Livre sur le dév. Linux","shortDesc":"En savoir plus","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : DÉVELOPPEMENT SYSTÈME SOUS LINUX DE CHRISTOPHE BLAESS\\nCette semaine, j\'ai lu l\'un des livres les plus intéressants qu\'il m\'ait été\\ndonné de lire.\\n\\nJ\'ai déjà lu de nombreux livre sur Linux, notamment ceux de Raphaël Hertzog sur\\nDebian GNU/Linux, ma distribution desktop et serveur. Mais là, j\'ai découvert\\nune perle qui surclasse tous les autres en terme de technicité.\\n\\nDeveloppement système sous Linux est une mine d\'or pour qui souhaite comprendre\\nle fonctionnement de Linux. Je n\'ai pas forcément vocation à écrire des\\nprogrammes en C, mais cet ouvrage m\'a permis d\'avoir une compréhension très fine\\nde la façon dont les programmes exploitent les capacités de Linux.\\n\\nAutant j\'ai eu beaucoup de plaisir à lire les livres sur l\'aspect théorique de\\nC++, autant celui-là m\'a permis de me rapprocher au plus près de la plateforme.\\nJe me sers maintenant quotidiennement des principes appris dans ce livre pour de\\nl\'administration système.\\n\\nComment fonctionnent les processus, qu\'est-ce que les signaux, comment sont-il\\ngérés ? Comment la mémoire est gérée ?\\n\\nOn en apprend aussi beaucoup sur les entrées sorties, le fonctionnement des\\npipes, les sockets etc...\\n\\nCe livre est un must-have, même pour ceux qui ne font pas du C tous les jours\\ncar il permet de savoir développer de petits programmes qui rendent bien\\nservice.\\n\\nJ\'ai, par exemple, créé avec l\'aide de ce livre, un programme en ligne de\\ncommande [https://github.com/nfroidure/X1-GPS-Logger]qui logge les positions GPS\\némises avec un boitier X1 Intellitrac (pour finir, j\'ai fais un billet sur ce\\nlogger et xinetd [xinetd_super_server.html]). En utilisant xinetd, j\'ai pu créer\\nun serveur simple et performant gérant une flotte d\'une trentaine de véhicules.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc53:JSON.parse('{"path":"contents/pages/fr/blog/developpement_web_mobile.html","title":"Tester ses sites web sur les mobiles","description":"On ne peut pas toujours s\'offrir un téléphone haut de gamme pour tester son site web. Heureusement, les émulateurs sont là !","shortTitle":"Tester son site mobile","shortDesc":"Voir les astuces pour tester son site mobile","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nTESTER SES SITES WEB SUR LES MOBILES\\n⚠ Attention: Cet article est ancien et couvre un spectre de mobiles anciens.\\nCependant, la démarche de télécharger un émulateur pour tester ses sites mobiles\\nreste valide. Des alternatives comme Browser Stack\\n[https://www.browserstack.com/] peuvent grandement simplifier ce processus\\nmanuel. Il est également possible d\'utiliser des outils comme Sauce Labs\\n[https://saucelabs.com/] pour créer des tests automatisés.\\n\\nOn ne peut pas toujours s\'offrir un téléphone haut de gamme pour tester son site\\nweb. Heureusement, les émulateurs sont là !\\n\\nFENNEC : FIREFOX POUR LES MOBILES\\n Capture d\'écran de Fennec [/images/fennec-simulator.png]Firefox mobile propose\\nun émulateur [http://www.mozilla.org/fr/mobile/]permettant de visualiser son\\nsite ou de développer des extensions. Un binaire est disponible pour toutes les\\nplateformes. J\'ai testé la version Linux. Aucun problème, il suffit d\'exécuter\\nle binaire et on se retrouve sur Fennec.\\n\\nJ\'ai découvert ce navigateur qui semble prometteur. On retrouve cependant un des\\ngros points noir de Gecko : le flexible box model qui est mal implémenté. Sinon,\\nl\'interface utilisateur est agréable, j\'aime beaucoup le slide sur les côtés\\npour avoir des fonctions supplémentaires facilement (onglets à gauche, favoris à\\ndroite) ainsi que la taille des boutons qui sont pratiques pour les gros doigts.\\n\\nBon et puis bien sûr il y a le côté libre et ouvert de la communauté Mozilla,\\nvotre vie privée est respectée. En revanche, on ne retrouve Fennec que sur Maemo\\net Android. Et bientôt peut-être sur Boot2Gecko, le nouveau projet de téléphone\\nfull web de Mozilla.\\n\\nAttention ! Il semble que Mozilla ne propose plus de nouvelles versions de\\nFennec à éxecuter directement. De plus, le terme émulateur n\'est pas vraiment\\nopportun puisqu\'il s\'agit d\'un binaire exécutable comme Firefox. Mozilla\\nrecommande officieusement de faire tourner Fennec sur l\'émulateur Android ou de\\ncompiler soi-même les nightly builds.\\n\\nOPERA MOBILE\\n Capture d\'écran d\'Opéra Mobile [/images/opera-mobile-simulator.jpg]Opéra a\\négalement créé son émulateur. Ce dernier est très semblable à celui de Fennec,\\nil se distingue néanmoins par le fait qu\'on peut choisir parmi une liste de\\ndifférents types de téléphones afin de bénéficier de leur dimensions réèlles.\\nUne fonction de retournement permet aussi de tester le comportement de votre\\nsite en fonction de l\'orientation du périphérique.\\n\\nSur la page de téléchargement [http://www.opera.com/developer/tools/mobile/], je\\nn\'ai le choix que pour Linux, mais j\'imagine que Windows au moins est de la\\npartie. Un navigateur très pratique lui aussi qui est présent dans le monde\\nmobile depuis longtemps. Il existe une autre version d\'Opéra Mobile, Opéra Mini,\\nconçu pour les téléphones bas de gamme. Il dispose d\'un simulateur en ligne\\n[http://www.opera.com/developer/tools/mini/].\\n\\nANDROID BROWSER + GOOGLE CHROME\\nC\'est tout de suite plus compliqué pour tester vos site avec le navigateur\\nd\'Android. En effet, il faut télécharger le SDK Android, puis, télécharger les\\ndifférents packages correspondant aux différentes versions. Pour télécharger la\\nversion Béta de Chrome for Android\\n[http://www.google.com/intl/en/chrome/android/](ne fonctionne que sous Android\\n4.0), ce sera encore plus complqiué puisqu\'il faudra le trouver dans le market\\n(réputée peu efficace) et/ou se connecter à son compte Google.\\n\\nBien-sûr ces deux navigateurs embarquent le moteur de rendu webkit donc ils sont\\nassez rapides et supportent bien les nouveautés de HTML5. Le SDK d\'Android\\n[http://developer.android.com/sdk/index.html]est disponible pour MacOSX, Linux\\net Windows.\\n\\nSAFARI MOBILE\\nLe SDK est uniquement disponbile pour les possesseurs d\'un Mac et est à trouver\\nsur leur site [https://developer.apple.com/]. Je ne l\'ai pas testé car il faut\\nun Mac et il faut s\'incrire.\\n\\nWINDOWS MOBILE\\nSi vous avez Windows, vous pouvez aussi télécharger le SDK de Windows Mobile\\npour tester vos sites sur ces téléphones.\\n\\nBref, ce n\'est qu\'un aperçu de la faune des navigateurs mobiles, mais il est\\nassez représentatif de ceux que les utilisateurs utilisent vraiment. Par contre,\\nrien ne vaut le test sur un appareil mobile réèl pour se rendre compte de la\\nnécessité d\'adapter votre site aux mobiles.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc54:JSON.parse('{"path":"contents/pages/articles-developpement_web_mobile.html","title":"Tester ses sites web sur les mobiles","description":"On ne peut pas toujours s\'offrir un téléphone haut de gamme pour tester son site web. Heureusement, les émulateurs sont là !","shortTitle":"Tester son site mobile","shortDesc":"Voir les astuces pour tester son site mobile","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nTESTER SES SITES WEB SUR LES MOBILES\\n⚠ Attention: Cet article est ancien et couvre un spectre de mobiles anciens.\\nCependant, la démarche de télécharger un émulateur pour tester ses sites mobiles\\nreste valide. Des alternatives comme Browser Stack\\n[https://www.browserstack.com/] peuvent grandement simplifier ce processus\\nmanuel. Il est également possible d\'utiliser des outils comme Sauce Labs\\n[https://saucelabs.com/] pour créer des tests automatisés.\\n\\nOn ne peut pas toujours s\'offrir un téléphone haut de gamme pour tester son site\\nweb. Heureusement, les émulateurs sont là !\\n\\nFENNEC : FIREFOX POUR LES MOBILES\\n Capture d\'écran de Fennec [/images/fennec-simulator.png]Firefox mobile propose\\nun émulateur [http://www.mozilla.org/fr/mobile/]permettant de visualiser son\\nsite ou de développer des extensions. Un binaire est disponible pour toutes les\\nplateformes. J\'ai testé la version Linux. Aucun problème, il suffit d\'exécuter\\nle binaire et on se retrouve sur Fennec.\\n\\nJ\'ai découvert ce navigateur qui semble prometteur. On retrouve cependant un des\\ngros points noir de Gecko : le flexible box model qui est mal implémenté. Sinon,\\nl\'interface utilisateur est agréable, j\'aime beaucoup le slide sur les côtés\\npour avoir des fonctions supplémentaires facilement (onglets à gauche, favoris à\\ndroite) ainsi que la taille des boutons qui sont pratiques pour les gros doigts.\\n\\nBon et puis bien sûr il y a le côté libre et ouvert de la communauté Mozilla,\\nvotre vie privée est respectée. En revanche, on ne retrouve Fennec que sur Maemo\\net Android. Et bientôt peut-être sur Boot2Gecko, le nouveau projet de téléphone\\nfull web de Mozilla.\\n\\nAttention ! Il semble que Mozilla ne propose plus de nouvelles versions de\\nFennec à éxecuter directement. De plus, le terme émulateur n\'est pas vraiment\\nopportun puisqu\'il s\'agit d\'un binaire exécutable comme Firefox. Mozilla\\nrecommande officieusement de faire tourner Fennec sur l\'émulateur Android ou de\\ncompiler soi-même les nightly builds.\\n\\nOPERA MOBILE\\n Capture d\'écran d\'Opéra Mobile [/images/opera-mobile-simulator.jpg]Opéra a\\négalement créé son émulateur. Ce dernier est très semblable à celui de Fennec,\\nil se distingue néanmoins par le fait qu\'on peut choisir parmi une liste de\\ndifférents types de téléphones afin de bénéficier de leur dimensions réèlles.\\nUne fonction de retournement permet aussi de tester le comportement de votre\\nsite en fonction de l\'orientation du périphérique.\\n\\nSur la page de téléchargement [http://www.opera.com/developer/tools/mobile/], je\\nn\'ai le choix que pour Linux, mais j\'imagine que Windows au moins est de la\\npartie. Un navigateur très pratique lui aussi qui est présent dans le monde\\nmobile depuis longtemps. Il existe une autre version d\'Opéra Mobile, Opéra Mini,\\nconçu pour les téléphones bas de gamme. Il dispose d\'un simulateur en ligne\\n[http://www.opera.com/developer/tools/mini/].\\n\\nANDROID BROWSER + GOOGLE CHROME\\nC\'est tout de suite plus compliqué pour tester vos site avec le navigateur\\nd\'Android. En effet, il faut télécharger le SDK Android, puis, télécharger les\\ndifférents packages correspondant aux différentes versions. Pour télécharger la\\nversion Béta de Chrome for Android\\n[http://www.google.com/intl/en/chrome/android/](ne fonctionne que sous Android\\n4.0), ce sera encore plus complqiué puisqu\'il faudra le trouver dans le market\\n(réputée peu efficace) et/ou se connecter à son compte Google.\\n\\nBien-sûr ces deux navigateurs embarquent le moteur de rendu webkit donc ils sont\\nassez rapides et supportent bien les nouveautés de HTML5. Le SDK d\'Android\\n[http://developer.android.com/sdk/index.html]est disponible pour MacOSX, Linux\\net Windows.\\n\\nSAFARI MOBILE\\nLe SDK est uniquement disponbile pour les possesseurs d\'un Mac et est à trouver\\nsur leur site [https://developer.apple.com/]. Je ne l\'ai pas testé car il faut\\nun Mac et il faut s\'incrire.\\n\\nWINDOWS MOBILE\\nSi vous avez Windows, vous pouvez aussi télécharger le SDK de Windows Mobile\\npour tester vos sites sur ces téléphones.\\n\\nBref, ce n\'est qu\'un aperçu de la faune des navigateurs mobiles, mais il est\\nassez représentatif de ceux que les utilisateurs utilisent vraiment. Par contre,\\nrien ne vaut le test sur un appareil mobile réèl pour se rendre compte de la\\nnécessité d\'adapter votre site aux mobiles.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc55:JSON.parse('{"path":"contents/pages/fr/blog/developper_de_l_impact.html","title":"Développer de l\'impact","description":"Présentation donnée\\n lors du Club Tech à Euratechnologies.","shortTitle":"Développer de l\'impact","shortDesc":"En savoir plus sur cette présentation","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDÉVELOPPER DE L\'IMPACT\\nDÉVELOPPER DE L\'IMPACT PRODUIT\\nOù comment travailler moins pour impacter plus. \\n\\nPrésentation réalisée pour le Club Tech à Euratechnologies le 25 octobre 2017.\\n\\nOBJECTIFS\\nCette présentation a pour objectif de vous proposer une ensemble de bonnes\\npratiques et de ressources pour donner plus d\'impact à votre travail en tant que\\ndéveloppeurs/développeuses ou architecte logiciel travaillant sur un produit\\ninnovant (logiciel ou impliquant du logiciel).\\n\\nJe suis spécialisé dans la conception et le developpement de plateformes web\\npour produits innovant. Durant mon parcours et au fil de mes lectures, j\'ai pu\\nréunir un ensemble de concepts qui ont du sens lorsque l\'on tente d\'innover en\\ntant que développeur/développeuse logiciel.\\n\\nCONTEXTE PRODUIT INNOVANT\\nCommençons par une petite séquence vocabulaire/méthodologie: Créer un produit\\ninnovant, c\'est quoi ?\\n\\nVISION\\nQuand on décide de créer un produit innovant, tout part généralement d\'une\\nvision. Le sentiment qu\'un problème récurrent peut être addressé de façon\\ninédite.\\n\\nIdentifier un problème récurrent n\'est pas suffisant. Il faut trouver une\\nsolution à ce problème que les utilisateurs et utilisatrices acceptent de payer\\n(product/market fit).\\n\\nSur le papier c\'est simple, mais en réalité, c\'est probablement le plus grand\\ndéfi de l\'innovation: la connecter à la réalité économique. Pour ce faire, il\\nexiste une méthode, le Lean Startup.\\n\\nLEAN STARTUP\\nQui dit produit innovant dit Lean Startup ou autre méthodologie dérivée\\napprochante.\\n\\nC\'est important d\'en parler car pour que cette méthode fonctionne, il faut que\\nles développeurses la connaissent et facilitent sa mise en oeuvre.\\n\\nDans le Lean Startup, tout est basé sur la feedback loopqui nous permet de tirer\\ndes enseignements.\\n\\nLa première itération commence au moment de l\'hypothèse. Elle se traduit par une\\nassertion: \\"Si nous développons la solution X, la métrique Y devrait être\\nimpactée\\". Ensuite, on construit, on mesure et on apprends.\\n\\nDu point de vue de l\'équipe de développement développeur, il est important de\\nsaisir que :\\n\\n * la rigueur du développement est très importante pour que ces enseignements\\n   soient valides. Tout bug peut potentiellement fausser la mesure et entraver\\n   la démarche complète. Il s\'agit de donc bien de présenter un produit fini à\\n   l\'utilisateur,\\n * la mesure nécessite un travail en elle même et il faut donc inclure ce\\n   dernier dans vos estimations,\\n * les développements faits pour cette itération peuvent tout simplement finir à\\n   la poubelle. Il faut donc veiller à créer des branches et à dissocier le\\n   travail de refactoring du développement de features.\\n\\n MVP: MOST VALUABLE PRODUCT\\n\\n\\nAu centre de cette boucle d\'itération, se trouve le MVPqui nourrit chaque\\nitération. Discrimer les contours du MVP est difficile mais très important. Il\\ndoit être suffisamment simple pour permettre de tester une assertion rapidement,\\nmais suffisamment complet pour la tester pleinement.\\n\\nDiscriminer l\'assertion testée et le produit qui permet de la tester est la\\npartie la plus risquée. En effet, en général, on a des milliers d\'idées et bien\\nplus de variations de ces idées, mais on ne peut en tester qu\'une à chaque\\nitération.\\n\\nBACKLOG\\nAutre outil fondamental pour la conception de produits innovants: le backlog.\\nPersonnellement, j\'utilise le backlog comme une boîte à tâches qui contient tout\\nce qui pourrait avoir du sens en terme de fonctionnalité mais aussi d\'évolution\\ntechnique pure ou simplement des tâches courantes.\\n\\nL\'avantage d\'un backlog unique est que l\'on peut composer les sprints en prenant\\nen compte les tâches courantes et le refactoring. Trop souvent, on plannifie\\nuniquement les features et on oublie le reste qui est aussi important, parfois\\nmême urgent.\\n\\nDès lors, ces tâches courantes ont tendance à s\'insinuer dans les sprints et à\\nen perturber le fonctionnement par manque d\'anticipation.\\n\\nLe backlog offre une vision stratégique de ce qui peut être plannifié. Qu\'est-ce\\nqui peut être fait ? Comment ? Quand ?\\n\\nSPRINT\\nLes sprints sont empruntés à la méthode agile cependant dans un contexte\\nproduit, les sprints ne sont plus bornés par le temps mais par le périmètre\\nfonctionnel qui doit être complété entièrement pour valider l\'assertion testée.\\n\\nEn cas de drifts calendaire trop important on a toujours la possibilité de\\nstopper l\'itération et de repartir sur une assertion plus simple à tester.\\n\\nNotez comme cette personne se déplace vite. On aimerait tous que nos sprints\\nressemblent à ça, n\'est-ce pas ? Pourtant, malgré cette appellation, il ne faut\\npas oublier que créer un produit innonvant reste un marathon, ponctué certes par\\ndes sprints mais nécessitant des prises de recul régulières.\\n\\nDÉVELOPPEMENT: QUELQUES SPÉCIFICITÉS\\nUne autre mise en contexte est nécessaire pour augmenter son impact en tant que\\ndéveloppeur. Il est important de connaître les mécanismes qui sous-tendent notre\\nproductivité et la relation qu\'ils maintiennent avec notre impact final.\\n\\nCes constats son basés uniquement sur mon expérience. Je n\'ai pas encore de\\npreuves scientifiques à avancer, mais si vous en détenez qui les invalides ou\\nles valides je suis preneur.\\n\\nLA PRODUCTIVITÉ\\n[/images/evolution-productivite-developpeur.svg]\\n\\nLa productivité mesure la quantité de travail que nous sommes capables de\\nfournir. L\'évolution de la productivité d\'un développeur qui s\'inscrit dans une\\ndémarche d\'amélioration continue reste cependant capée. Du moins, tant qu\'on ne\\ndevient pas bioniques.\\n\\nENTRAVES À LA PRODUCTIVITÉ\\nCe plafond est dû à plusieurs facteurs.\\n\\nLa charge cognitive représente notre capacité à comprendre les systèmes que nous\\ncréons. Plus ils sont importants, plus ils sont difficiles à saisir.\\n\\nIl existe des moyens d\'amoindrir la charge cognitive de notre code que nous\\nverrons par la suite, mais nous ne faisons que gagner un peu de temps. La\\ntendance reste l\'augmentation exponentielle.\\n\\n[/images/evolution-charge-cognitive-quantite-de-code.svg]\\n\\nCONCENTRATION\\nJe pense avoir partagé ce petit dessin des centaine de fois. Il illustre\\nparfaitement ce qu\'est la programmation. Les développeurs ont besoin d\'une\\nconcentration extrême pour résoudre certains problèmes.\\n\\nC\'est pour cela qu\'il est important de travailler dans un environnement calme.\\nLe coût du changement de contexte est important, c\'est ici que l\'organisation en\\nsprint prend tout son sens. On plannifie et on exécute.\\n\\nL\'IMPACT\\nL\'impact est la quantité de travail fournie par vos programmes. On peine à s\'en\\nrendre compte, mais celle-ci est potentiellement exponentielle. C\'est ce qui\\nfait que notre secteur est destructeur d\'emplois.\\n\\n[/images/evolution-ideale-impact-developpeur.svg]\\n\\nCette courbe n\'est valable que pour un seul produit. Vous repartez à 0 à chaque\\nchangement d\'entreprise. En prestation de service, c\'est pire, chaque changement\\nde projet réduit à néant vos efforts précédents.\\n\\nAMÉLIORER SON IMPACT\\nLa question est donc comment puis-je améliorer mon impact ?\\n\\nAMÉLIORER SA PRODUCTIVITÉ\\nNous ne sommes pas tous des développeurs séniors en quasi-stagnation de\\nproductivité. Souvenons-nous que l\'impact est proportionnel à la productivité.\\n\\nVoici quelques pistes qui peuvent vous permettre de développer votre impact de\\npar la productivité.\\n\\nZONE D\'INFLUENCE\\n[/images/Zones-Préoccupations-Influence.svg]\\n\\nIl est très important d\'identifier sa zone de préoccupation qui nous renseigne\\nsur les sujets que l\'on doit suivre, mais il est encore plus crucial\\nd\'identifier sa zone d\'influence afin d\'accroître son impact.\\n\\nDans un contexte produit, la vision, le problème qu\'on a identifié et que l\'on\\nessaie de résoudre défini notre zone de préoccupation.\\n\\nNotre zone d\'influence représente notre marge de manoeuvre. Que puis-je faire\\nmaintenant pour avoir de l\'impact.\\n\\nVotre produit est encore sur AngularJS alors que React est la nouvelle hype ?\\nPrenez en acte et passez à l\'action. Ça ne sert à rien de ressasser\\ncontinuellement des problèmes qui sont hors de votre zone d\'influence.\\n\\nCela dit, si votre zone d\'influence est si petite que vous ressentez une\\nsensation permanente d\'inconfort, c\'est probablement le signe qu\'il faut\\nenvisager de l\'agrandir via un changement de poste / d\'entreprise.\\n\\n[/images/Zones-Préoccupations-Influence-Lean.svg]\\n\\nIl faut également noter la dimension temporelle de la zone d\'influence. En\\neffet, durant la boucle de feedback, il existe un temps pour alimenter le\\nbacklog, un temps pour le prioriser, un temps pour définir les sprints et enfin\\nun pour leur exécution. Si la méthodologie Lean Startup est réellement appliquée\\n(du moins, si l\'intention est réelle) alors vous devriez ressentir ces temps.\\n\\nTypiquement, pendant un sprint, votre zone d\'influence est très réduite. Il\\ns\'agit d\'exécuter les plans.\\n\\nMême s\'il reste possible, voire parfois souhaitable, de changer ou remettre en\\ncause un sprint en cours de route, cela reste l\'exception. Le sprint doit suivre\\nson cours sauf situation de crise réelle.\\n\\nEn revanche, pendant la définition du sprint, votre zone d\'influence est plus\\nlarge. C\'est à ce moment que votre valeur ajoutée technique peut s\'exprimer\\npleinement.\\n\\nPendant le temps de la mesure elle se contracte à nouveau car c\'est la mesure\\nqui donne la direction et l\'objectif est de laisser le moins de place possible à\\nl\'interprétation. Votre zone d\'influence ici se dessine surtout autour de la\\nvérification de la qualité de la donnée (détection de biais statistiques,\\ndécouverte de bugs impactant la mesure).\\n\\nEnfin, et c\'est tout l\'intérêt du backlog, votre zone d\'influence au niveau du\\nbacklog est totale. Il n\'y a pas de mauvais item dans un backlog. Tout ce qui a\\ndu sens pour vous peut y être inscrit. Avec le backlog on cherche des directions\\npossibles et tout ce qui peut aller dans ce sens est bon à prendre.\\n\\nEnfin, gardez à l\'esprit qu\'une zone d\'influence, ça se travaille. Aussi,\\ncertains choix techniques peuvent créer une inertie telle qu\'elle réduira à\\nterme la zone d\'influence de toute l\'équipe. À l\'inverse de bonnes bases peuvent\\nnous fournir une latitude plus large pour l\'évolution de notre produit. C\'est\\nici que l\'expérience joue un rôle prépondérant.\\n\\nEn développement produit, par exemple, on peut choisir de ne pas utiliser de\\nframework pour augmenter sa zone d\'influence car on sait qu\'on ne sera pas capé\\npar les possibilités du dit framework, ni freiné par des mises à jour non\\nrétro-compatibles.\\n\\nLe secret pour élargir notre zone d\'influence se trouve en aval dans les choix\\narchitecturaux que nous faisons. C\'est pourquoi nous devons nous concentrer sur\\nl\'important plutôt que l\'urgent.\\n\\nURGENT OU IMPORTANT ?\\n[/images/Urgent-vs-Important.svg]\\n\\nCeux d\'entre vous qui se sont intéressés à la gestion du temps connaissent\\nsûrement la matrice d\'Eisenhower illustrée ici.\\n\\nDe nos jours, l\'urgence est partout. Toutes les demandes semblent appeler une\\nréponse instantanée.\\n\\nOr, bon nombre des demandes urgentes sont en réalité non-importantes. Pour moi,\\naucune demande ne doit être traitée dans l\'immédiat sauf cas de force majeure.\\n\\nComme l\'a souligné Stephen R Covey, si nous traitons toutes les demandes dans\\nl\'immédiat, nous nous privons de toute planification et vivons alors dans la\\nréaction pure au stimilis qui nous entourent.\\n\\nEn général, quand vous passez beaucoup de temps dans le cadre de l\'urgent mais\\nnon important, c\'est le signe que des tâches importantes mais non-urgentes ont\\nété négligées.\\n\\n\\n\\nPour citer quelques exemples, si vous ne prenez pas le temps de tester votre\\ncode alors vous alimenterez le flot des bugs et le support client.\\n\\nSi vous ne prenez pas le temps de tester vos features et de vérifier leur sens\\npour le produit, il deviendra urgent de recruter pour maintenir une plateforme\\ndont les features ne seront pas utilisées.\\n\\nOn peut multiplier les exemples d\'urgences générées par un manque d\'anticipation\\net de priorisation de l\'important. C\'est pourquoi nous devons consacrer une\\nportion non négligeable de notre temps à préparer l\'avenir en menant des actions\\nde long terme.\\n\\nLe côté pernicieux de l\'urgence est qu\'elle donne un sentiment immédiat de\\nproductivité et d\'utilité. Quand se consacrer au long terme peut donner un\\nsentiment d\'inertie sur le court voire moyen terme.\\n\\nMalheureusement, trop de managers se concentrent sur la productivité et non\\nl\'impact. Ils se satisfont de voir leurs équipes gérer l\'urgence jusqu\'à des\\nheures impossibles et ne voient pas l\'incroyable gâchi de ressources que cela\\nreprésente. Menant à des situations de burnout dont ils se félicitent même\\nparfois\\n[https://medium.com/@deusexmachina667/you-fired-your-top-talent-i-hope-youre-happy-cf57c41183dd]\\n...\\n\\nCe genre d\'organisation demande une force de conviction solide pour ne pas\\nentrer dans ce jeu là. Nous verrons comment on peut à son niveau impulser de\\nnouveaux paradigmes dans l\'équipe.\\n\\nREVENIR AUX OBJECTIFS\\nSans cesse se reférer à la vision produit. En tant que développeurses, on se\\nperd facilement dans des considérations purement techniques et on s\'écarte du\\nbut premier. Prendre le temps de revenir aux fondamentaux permet souvent de\\ntrouver le chemin le plus court.\\n\\nPrendre du recul, de la hauteur vis à vis de ce que l\'on code permet souvent de\\nmieux coder. Le papier et le crayon sont le meilleur ami des développeurses.\\n\\nS\'OUTILLER\\nLes mauvais développeurses mettent en cause leurs outils, les meilleurs trouvent\\nles bons outils.\\n\\nCertains outils sont indispensables pour gérer au mieux le développement de\\nproduit innovant. Votre backlog ne peut pas être une feuille Excel, il demande\\nde l\'interactivité, de l\'immédiateté et de la disponibilité.\\n\\nIl n\'y a rien de pire que l\'email pour gérer les demandes/tâches. Il vous faut\\nun logiciel pour mettre les demandes/tâches dans une todo et un pipe qui\\nl\'alimente. Quand on est obligé de se souvenir de ce que l\'on a à faire, on est\\nmoins concentré sur sa tâche. Lire le livre «The Effective Engineer» peut suffir\\nà vous en convaincre.\\n\\nAIGUISER LA HACHE\\n Donnez-moi six heures pour abattre un arbre et je passerai les premières quatre\\nheures à aiguiser la hache. Abraham Lincoln\\n\\nAffûter ses connaissances et ses outils est un prérequis essentiel pour bien\\nutiliser son temps.\\n\\nVous vous souvenez probablement de cette personne qui a illustré le concept de\\nsprint dans le slide dédié.\\n\\nElle est vraiment impréssionnante. Si on y prête attention, on peut presque\\nressentir à quel point sa posture est millimétrée à force de répétition des\\nmêmes gestes.\\n\\nElle a préparé ce sprint pendant des mois pour au final donner tout ce qu\'elle a\\nsur une période définie.\\n\\nLes mots ont un sens. Un sprint est un sprint, nous devons consacrer un temps\\nnon négligeable pour préparer nos sprints. Aucun sprinter ne s\'entraîne en\\nsprintant. Enchaîner les sprints sans temps de repos, sans préparer le suivant,\\nsans prendre de hauteur sur les précédents n\'est pas efficace.\\n\\nPour les développeurses, aiguiser sa hache, c\'est prendre le temps d\'apprendre à\\nutiliser une base de donnée ou un framework, lire toute leur documentation,\\ncomprendre les patterns qu\'ils implémentent, le besoin qu\'ils adressent, avant\\nde l\'utiliser.\\n\\nTrop de développeurses commencent à coder au dessus du tutoriel d\'un blog en\\nrecherche de visibilité sans même se poser la question de la viabilité de cette\\ndémarche.\\n\\nBIAIS COGNITIFS\\nUn développeur est avant tout un humain et en tant qu\'humain, il est victime de\\nbiais cognitifs. Ce codex regroupe et catégorise les biais cognitifs dont nous\\nsommes tous victimes\\n[https://upload.wikimedia.org/wikipedia/commons/1/16/The_Cognitive_Bias_Codex_%28French%29_-_John_Manoogian_III_%28jm3%29.svg]\\n. Cela incite à l\'humilité et plaide pour la méthode scientifique.\\n\\nLes développeurses ayant une culture scientifique ont tendance à croire qu\'iels\\nsont objectifs par nature. Alors que ce sont plutôt les biais cognitifs qui sont\\nnaturels. Soyons humbles, reconnaissons que nous ne sommes pas toujours\\nobjectifs et évaluons notre impact à partir de critères mesurables.\\n\\nPRENDRE SOIN DE SOI\\n[/images/CNV-Developpement-personnel-durable-complet.svg]\\n\\nEnfin en tant que développeurses, nous sommes parfois omnibulés par notre\\napproche scientifique et nous laissons souvent l\'humain de côté.\\n\\nIl existe un grand nombre de compétences strictement humaines qui peuvent nous\\npermettre d\'augmenter significativement notre impact en tant que développeurses.\\n\\nPrendre soin de votre capital humain est vital. Respectez vos horaires. Même si\\nun projet contient des sprints, n\'oubliez pas que c\'est surtout un marathon.\\nVous connaissez probablement la citation «Mens Sana In Corpore Sano», elle nous\\napprend que dès l\'Antiquité, les grands esprits savaient que tout est question\\nd\'équilibre quand il s\'agit de développement personnel.\\n\\nPour éviter l\'essouflement et le manque de discernement qui finit toujours par\\nl\'accompagner accordez vous l\'usage divertissant de votre temps. C\'est la partie\\nnon-urgente et non-importante de notre matrice d\'Eisenhower. Si ce n\'est ni\\nurgent, ni important pour l\'entreprise mais que cela recharge vos batteries,\\nalors c\'est important pour vous.\\n\\nAccordez-vous également du temps pour être à l\'écoute de vos besoins, de les\\ndifférentier de vos stratégies. Déconstruisez vos carcans mentaux pour vous\\napprocher de votre vérité.\\n\\nJ\'aime beaucoup ce schéma tiré du livre «Découvrir la Communication Non\\nViolente» de Françoise Keller. Il propose de maintenir un équilibre entre nos\\nressources intérieures (notre énergie disponible, notre satisfaction), notre\\nmission personnelle (ce que l\'on accomplit) et les interactions sociales.\\n\\nLa bonne idée de ce schéma est qu\'en regardant à l\'exact opposé des divers\\nsymptômes, on trouve immédiatement la sphère que l\'on a négligé et vers laquelle\\nnous devrions de nouveau tendre.\\n\\nTout est question d\'équilibre, nous ne sommes jamais parfaitement dans le\\ndéveloppement personnel, nous tentons de nous approcher comme d\'un idéal et ce\\nschéma est une bonne bousole dans cette quête.\\n\\nAMÉLIORER L\'IMPACT DE L\'ÉQUIPE\\nPRENDRE SOIN DES AUTRES\\nLe facteur humain est une étape obligée. Si on y prend pas garde, tôt ou tard,\\nil refait surface.\\n\\nFaire preuve d\'humanité et d\'empathie est un prérequis pour garder un impact\\ndurable au sein de l\'équipe. Créer la synergie décuple l\'impact de chacun et\\nl\'impact de l\'équipe dépasse alors la somme des individualités.\\n\\nTravailler uniquement son propre impact en laissant les autres derrière soi peut\\nnous couper de l\'équipe, parfois définitivement. Il faut alors accepter\\nd\'avancer moins vite au début dans l\'amélioration de son propre impact pour\\nemmener avec soi l\'équipe et parvenir à un résultat plus fort.\\n\\nAPPRENDRE À COMMUNIQUER\\nDisons-le, nous partons souvent de loin quand on parle de communication chez les\\ndéveloppeurses. Nos compétences en la matière sont rarement exceptionnelles.\\n\\nMais les timides contrariés sont souvent les meilleurs orateurices car iels\\nutilisent consciemment des techniques avancées pour se faire comprendre. Iels ne\\nsont pas dans l\'instinctif, mais dans la démarche consciente et volontaire.\\n\\nNous avons l\'opportunité de devenir de meilleurs communiquants en nous formant\\ntout simplement à des techniques telles que la Communication Non Violente.\\n\\nCommuniquer c\'est d\'abord écouter et comprendre. Ce dessin illustre parfaitement\\nles travers dont nous sommes souvent victimes.\\n\\nRECONNAÎTRE LA COMPÉTENCE\\nLe modèle d\'acquisition de compétences de Dreyfus\\n[https://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition] nous en\\napprend beaucoup sur la nature de la compétence. Pour avoir un impact fort, il\\nest important de connaître les compétences de chacun afin de s\'addresser à la\\npersonne la plus appropriée pour résoudre un blocage que vous rencontrez.\\n\\nReconnaître la compétence repose principalement sur la mesure des résultats\\nobtenus. Même si vous n\'appréciez pas une personne, vous devez la remercier\\nquand elle vous fait profiter de son expertise.\\n\\nReconnaître la compétence, c\'est aussi reconnaître l\'incompétence. La sienne et\\ncelle des autres. Un des grands enseignements du Lean Startup est qu\'il n\'existe\\npas de vision/d\'idée parfaite qu\'il suffirait d\'appliquer. Une démarche saine\\nconsiste à reconnaître notre incompétence à prédir l\'avenir du produit et à\\nbaser toute projection sur la mesure.\\n\\nIl n\'y a rien de pire que de demander l\'avis de quelqu\'un et de ne pas\\nl\'appliquer. C\'est pourquoi il faut choisir les mots lorsqu\'on demande un avis\\nsur un sujet pour lequel personne ne peut être compétent. Demander quelle est\\nson intuition à la personne plutôt que quelle est sa recommandation peut être\\nune piste.\\n\\nTÉLÉTRAVAILLER\\nSurtout pendant les sprints car cela permet de rester focus.\\n\\nCULTURE DE L\'ÉCRIT\\nPour pouvoir prioriser des tâches concrètes, mais aussi garder des traces des\\ndécisions et des raisons qui y ont mené.\\n\\nSENS DU COLLECTIF\\nUne fois mergé, le code devient la responsabilité de tous. Il n\'y a rien de plus\\ntoxique qu\'une équipe qui fonctionne en mode blame and shame.\\n\\nRendre l\'équipe responsable de tous les choix permet de pacifier les rapports et\\nencourager la communication.\\n\\nLe pendant est l\'écoute réelle. Si la concertation ne va pas dans votre sens,\\nn\'imposez pas votre vision au risque de casser la confiance durement acquise.\\n\\nVALORISER SON IMPACT\\nC\'est la partie que je maîtrise peut être encore le moins. Pour tout dire,\\nappliquer les méthodes dont je viens de parler en entreprise relève du défi\\nintégral.\\n\\nCe n\'est pas dans les moeurs de tout faire pour ne pas travailler trop.\\nAujourd\'hui, les managers mesurent encore trop la productivité et non l\'impact\\ndes employés.\\n\\nComme le dit ce proverbe auvergnat plein de bon sens que ma moitié m\'a fait\\ndécouvrir: un morceau avalé n\'a plus de goût.\\n\\nEn cherchant l\'impact dans une entreprise qui est dans la pure réactivité aux\\nstimulis extérieurs, vous vous confronterez à de nombreuses résistances. Vous\\nserez même souvent perçu comme moins productif que les autres (ce qui sera\\nobjectivement vrai).\\n\\nC\'est pourquoi, pour ne pas passer pour le fainéant de service, vous devrez\\ncommuniquer sur l\'impact que vous générez, la différence entre impact et\\nproductivité et comment la bonne séparation entre votre travail et votre vie\\nprivée, le respect de vos horaires ou les petits arrangements négociés avec\\nvotre employeur (télétravail) vous permettent de produire cet impact.\\n\\nC\'est important de le faire car il y a un vrai risque que vos conditions de\\ntravail se dégradent pour des raisons d\'incompréhension de la part de vos\\ncollègues/managers.\\n\\nVous devez leur fournir des clés pour comprendre votre hauteur de vue. Ils\\ndoivent comprendre que vous êtes fainéant par conviction !\\n\\nCela demande un effort de votre part car si vous agissez pour développer votre\\nimpact, mais reportez votre travail en terme de productivité vous créez vous\\nmême les conditions de votre échec. Vous direz: «J\'ai réduis la facture Cloud de\\n5%» et non, «J\'ai réécris 10% du framework». Ce n\'est pas si simple que ça en a\\nl\'air et demande un effort conscient pour en faire une habitude.\\n\\nParfois, malheureusement, la différence culturelle sera trop forte et vous ne\\nparviendrez pas à changer la situation. J\'ai rencontré ce cas et, à\\ncontre-coeur, j\'ai accepté ma défaite et changé d\'emploi.\\n\\nL\'IMPACT EN ACTIONS\\nPour terminer cette présentation, je vais mettre en lumière quelques actions\\nconcrètes permettant d\'améliorer l\'impact de votre travail de développeur de\\nproduit innovant sans plus tarder.\\n\\nLE CLOUD (OU PAAS)\\nServerless, RDS, CloudAMQP... Aujourd\'hui, il est difficile de justifier le bare\\nmetal quand l\'écosystème du cloud nous propose une variété d\'outil avec très peu\\nde maintenance.\\n\\nAutant, en mode prestation de service, on peut justifier de ne pas l\'utiliser\\npour des questions de rentabilité, autant en mode produit, nous devons nous\\nconcentrer sur l\'essentiel: notre produit.\\n\\nTout ce qui est de nature à nous libérer l\'esprit est bon à prendre. Le cloud\\nest une composante essentielle de cette stratégie.\\n\\nEn revanche, tout n\'est pas bon à prendre dans le cloud. Personellement, je\\npratique du cloud «défensif». J\'évite comme la peste les fonctionnalités visant\\nà me vendor locker et me concentre sur des outils génériques ou du PaaSde\\nbriques open-source.\\n\\nLE SAAS\\nTypeform, Asana, CircleCI, Mailgun, MailChimp, LogMatic, Google Analytics,\\nSlack... Si ce n\'est pas votre métier, trouvez quelqu\'un pour qui ça l\'est et\\npayez le pour ça !\\n\\nVous n\'avez pas le temps de faire moins bien que l\'état de l\'art. La plupart des\\nSaaS ont des plans gratuits / startup, profitez-en !\\n\\nIl faut simplement être attentif aux possibilités d\'interfaçage (ie l\'API). Les\\nwebhooks et une API REST étant le minimum vital.\\n\\nÉvitez aussi comme la peste les SaaS qui font tout. En effet, si une seule\\névolution vous déplaît, vous voilà obliger de jeter le bébé avec l\'eau du bain.\\nDe plus, ce genre de Saas tombe dans le travers dans lequel vous souhaitez\\néviter de tomber en passant par eux.\\n\\nDOCUMENTATION FIRST\\nOn l\'a vu tout au long de cette présentation. Nous avons tendance à oublier ce\\nqui est important au profit de ce qui est urgent. C\'est une tendance naturelle\\nchez l\'être humain en général.\\n\\nJ\'en suis la première victime et c\'est pour cela que je mets en place un\\nvéritable forçage partout où c\'est possible de la documentation. Par exemple,\\ndans le backend de Sencrop [https://developer.sencrop.com/], il est impossible\\nde créer une route sans la documenter\\n[https://github.com/nfroidure/swagger-http-router].\\n\\nQuand il n\'est pas possible ou simple de forcer la documentation, je me repose\\nsur des workflows. Par exemple, le Readme Driven Design permet de créer des\\nmodules JavaScript en commençant par réfléchir à l\'interface d\'API finale\\nfournie aux utilisateurs.\\n\\nJ\'ai également créé JSArch [https://github.com/nfroidure/jsarch]qui me sert\\nd\'on-boarding sur mes modules JavaScript et mes applications métier. Savoir si\\nles commentaires sont utiles ou pas fait encore débat. Pour ma part j\'ai tranché\\nen partant du principe que les commentaires les plus utiles portent sur les\\nchoix architecturaux car ils ne sont pas aisément compréhensibles sur la seule\\nbase du code.\\n\\nEnfin, dès que vous faîtes du code que vous réprouvez, c\'est le signe que vous\\ndevez mettre un commentaire pour expliquer quelles contraintes (temps, bug...)\\nvous ont obligées à agir ainsi.\\n\\nGÉNÉRER LE CODE BATEAU\\nCe n\'est pas parce que c\'est du code que c\'est bien. Quand du code est trop\\nrépétitif, générez-le. Par exemple, le SDK JS de Sencrop\\n[https://github.com/sencrop/sencrop-js-api-client]est entièrement automatisé.\\n\\nNE PAS CODER\\nLe code qu\'on n\'écrit pas est maintenable et testé ;). Il ne contient aucun bug,\\nne crée pas de charge cognitive. C\'est le meilleur code possible.\\n\\nVous ne devez pas écrire de code sans chercher s\'il n\'existe pas d\'équivalent\\nsatisfaisant.\\n\\nMême en n\'écrivant que du code métier, toujours s\'interroger sur la complexité\\nrésiduelle que l\'on crée, ce qu\'elle nous apporte et si cela en vaut vraiment la\\npeine.\\n\\nLIENS UTILES\\nVoici quelques liens qui peuvent vous aider à pousser la réflexion plus loin.\\n\\nBIBLIOGRAPHIE\\nC\'est toujours très difficile de dire quel cheminement nous a amener à avoir une\\nfaçon de penser donnée. Mais je me plie à l\'exercice en vous proposant cet\\nensemble de livres hétérogènes:\\n\\nLes 7 habitudes des gens efficaces - Stephen R Covey Cessez d\'être gentil, soyez\\nvrai - Thomas D\'Ansembourg Le management bienveillant - Philippe Rodet et Yves\\nDesjacques The Effective Engineer - Edmond Lau Découvrir la Communication Non\\nViolente - Françoise Keller Lean Startup - Eric Ries Running Lean - Ash Maurya\\nClean Code - Robert Cecil Martin Ranger: L\'étincelle du bonheur - Marie Kondō La\\nmagie du \\"J\'en ai rien à foutre\\" - Sarah Knight\\n\\n < Blog [/fr/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc56:JSON.parse('{"path":"contents/pages/fr/blog/documentation_du_code.html","title":"Documentation d\'applications en JavaScript","description":"Documenter son code est parfois fastidieux. Pourtant, c\'est une\\n nécessité. Petit retour d\'expérience sur les techniques et outils que\\n j\'utilise.","shortTitle":"Documenter son code","shortDesc":"En savoir plus sur la documentation de code JavaScript","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDOCUMENTATION D\'APPLICATIONS EN JAVASCRIPT\\nDocumenter son code est parfois fastidieux mais c\'est une étape essentielle pour\\nse faire comprendre de ses pairs. Dans ce billet, je vais faire un tour\\nd\'horizon des techniques que j\'utilise pour ce faire et des outils que j\'ai créé\\nrécemment pour compléter mon arsenal.\\n\\nLA BASE\\nDIVISER POUR MIEUX RÉGNER\\nJe ne rate jamais une occasion de créer un nouveau module NPM. En effet, isoler\\nle code générique de son application dans un module open-source avec une API\\nconcise et restreinte facilite la documentation de votre application.\\n\\nDe plus, si ce module existe déjà et est lui-même bien documenté le travail est\\nencore moins important. En général, on a même l\'embarras du choix.\\nPersonnellement, en plus des conseils que j\'ai donné dans ce billet\\n[./choisir_module_nodejs.html], je privilégie les modules exposant des fonctions\\npures quand c\'est possible. Par exemple, je préfère utiliser un module comme \\ncontent-disposition [https://github.com/jshttp/content-disposition]plutôt que\\nd\'utiliser un middleware ExpressJS.\\n\\nFICHIER README\\nLe fichier README doit être simple et concis. J\'ai fait beaucoup de README\\nDriven Development, mais aujourd\'hui, je me contente d\'y décrire l\'intention du\\nmodule/de l\'application et je suis revenu à un mélange entre TDD et le\\ndéveloppement dirigé par la documentation. J\'y reviendrai, mais globalement,\\naujourd\'hui, mes fichiers README sont générés automatiquement et contiennent\\ntitre, description, badges, brief, référence de l\'API. Par exemple, celui de \\nstrict-qs [https://github.com/nfroidure/strict-qs]. Vous pouvez jeter un œil à \\nma recette\\n[https://github.com/nfroidure/metapak-nfroidure/tree/master/src/readme]pour les\\ngénérer.\\n\\nFICHIER CHANGELOG\\nJe ne l\'ai que récemment mis en place sur tous mes projets et pourtant c\'est\\nclairement nécessaire. Savoir ce qui a changé et quand est très important pour\\nles consommateurs de vos modules, à commencer par vous.\\n\\nMettre en place un bon changelog nécessite un peu de travail. Il est, par\\nexemple, préférable d\'utiliser une convention de commit. Pour ma part, j\'ai\\nchoisi commitizen [https://www.npmjs.com/package/commitizen] qui permet de gérer\\nautomatiquement le type de changement et de versionner en conséquence selon les\\nprincipes de semver.\\n\\nJ\'ai mis en place un petit hook\\n[https://github.com/nfroidure/metapak-nfroidure/blob/master/src/_common/hooks.js#L3-L13]\\npour forcer le commit avec commitizen car après des années de commit via la\\ncommande de git, difficile de changer un réflexe bien ancré ;).\\n\\nAu final, on obtient un joli changelog\\n[https://github.com/nfroidure/knifecycle/blob/master/CHANGELOG.md]qui permet de\\nne pas perdre de temps sur des informations qui peuvent être générées\\nautomatiquement.\\n\\nJSDOCS\\nJ\'ai beaucoup tergiversé sur JSDoc. Parfois je l\'utilisais, d\'autre fois non.\\nAujourd\'hui je l\'utilise de manière systématique car c\'est devenu painless. En\\neffet, grâce aux addons comme docblockr [https://atom.io/packages/docblockr] \\npour Atom, l\'autocomplétion des définitions JSDoc est une réalité.\\n\\nAussi, eslint permet d\'éviter que vos définitions JSDoc divergent de votre code.\\nMême si JSDoc n\'est pas idéal, c\'est mieux que rien ou que de se palucher une\\ndocumentation à la main. Ça a aussi le mérite de coupler la documentation avec\\nle code. En revanche, utiliser JSDocs ne sert à rien ou presque si vous ne\\nfournissez pas d\'exemple d\'utilisation comme je l\'ai fait par exemple ici\\n[https://github.com/nfroidure/knifecycle/blob/d78ecd3d58f7b1f1a95cb7e8800d0a06ff657530/src/index.js#L77-L100]\\n.\\n\\nMA TOUCHE PERSONNELLE\\nCes pratiques de base sont nécessaires mais j\'avais encore quelques points qui\\nme chagrinaient. En effet, pour les modules exposant de simple fonctions pures\\nJSDoc se suffit souvent à lui même, mais pour des applications (web services,\\nSPA ou des programmes en ligne de commande) il manque tout de même une vision\\nmacroscopique de l\'architecture du code.\\n\\nNOTES D\'ARCHITECTURE AVEC JSARCH\\nC\'est généralement dans le fichier README que l\'on met ces informations. Le\\nproblème, c\'est que souvent, on oublie de mettre à jour ce dernier quand on\\nmodifie le code, tout simplement à cause du fait que la documentation et le code\\nse trouvent dans des fichiers différents.\\n\\nJ\'ai donc récemment créé jsarch [https://github.com/nfroidure/jsarch], un module\\nridiculement simple, qui permet d\'ajouter des notes d\'architecture directement\\ndans le code. Ces notes sont ensuite regroupées, réordonnées pour créer un\\nfichier décrivant l\'architecture et pointant vers les endroits du code où ces\\nchoix prennent place.\\n\\nRien de tel que le fichier d\'architecture de jsarch\\n[https://github.com/nfroidure/jsarch/blob/master/ARCHITECTURE.md]pour illustrer\\nle type de fichier qu\'on obtient en sortie ;).\\n\\nGRAPHE DES DÉPENDANCES\\nJe n\'ai plus l\'intention d\'utiliser AngularJS et je ne suis pas particulièrement\\nfan d\'Angular2. Cela dit, le système d\'injection de dépendances de ce dernier\\nm\'a vraiment séduit. À un point tel que j\'en ai fait un clone\\n[https://github.com/nfroidure/knifecycle] que j\'utilise pour toutes mes\\napplications (CLI, backend ou frontend).\\n\\nCela me permet de séparer le monde des fonctions pures de celui des fonctions\\nqui utilisent des variables globales. C\'est pratique pour les tests, pour\\nl\'instrumentation du code ou simplement pour facilement remplacer un service par\\nun autre.\\n\\nÇa fonctionne assez bien avec React ;). Je gère le bootstrap de l\'application\\navec et, par exemple, je peux remplacer des services par d\'autres de mock pour\\nmon React storybook.\\n\\nGrâce à mon ex-collègue et ami Sébastien Elet\\n[https://twitter.com/SebastienElet], j\'ai découvert mermaid\\n[https://github.com/knsv/mermaid] un outil permettant de générer des graphes.\\nPour améliorer encore cette vision macroscopique de l\'architecture de mes\\napplications, j\'ai ajouté à Knifecycle une fonction d\'export qui me permet de\\ngénérer des graphes de dépendances comme celui que vous avez pu apercevoir dans\\nle fichier d\'architecture de jsarch ou dans le tweet suivant avec des exemple\\nissus des applications que je crée pour 7Digital.\\n\\n>  New KnifeCycle feature: Mermaid graphs for services dependencies:\\nhttps://t.co/EZH6LTMG16 [https://t.co/EZH6LTMG16]#JavaScript\\n[https://twitter.com/hashtag/JavaScript?src=hash] #NodeJS\\n[https://twitter.com/hashtag/NodeJS?src=hash] #dependency\\n[https://twitter.com/hashtag/dependency?src=hash] #injection\\n[https://twitter.com/hashtag/injection?src=hash] pic.twitter.com/f3P3vM4ezc\\n[https://t.co/f3P3vM4ezc] \\n\\n— Nicolas Froidure (@nfroidure) 10 mars 2017\\n[https://twitter.com/nfroidure/status/840202380721430528]\\nVoilà ! Si vous avez d\'autres astuces pour documenter son code JavaScript comme\\nun as, je suis clairement preneur !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc57:JSON.parse('{"path":"contents/pages/fr/blog/enseignement_dirige_par_tests.html","title":"L\'enseignement dirigé par les tests","description":"Les tests unitaires et fonctionnels ont véritablement révolutionné le développement professionnel, pourquoi pas également celui de l\'enseignement et de la formation ?","shortTitle":"Apprendre en testant","shortDesc":"En savoir plus sur cette conception de l\'apprentissage de la programmation","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nL\'ENSEIGNEMENT DIRIGÉ PAR LES TESTS\\nLes tests unitaires et fonctionnels ont véritablement révolutionné le\\ndéveloppement professionnel, pourquoi pas également celui de l\'enseignement et\\nde la formation ?\\n\\n Remi Grumeau [https://twitter.com/remi_grumeau], un développeur lillois, m\'a\\nrécemment sollicité sur l\'idée d\'un DevCamp spécial mobile dont le but serait de\\ncréer et publier sur GitHub des modules open-source. J\'ai aussi été sollicité\\npour être jury aux OpenDuWeb [http://www.open-du-web.fr/]. À première vue, rien\\nà voir avec le titre de ce post.\\n\\nJe me suis donc mis à imaginer comment de tels evènements devraient être\\norganisés et j\'ai donc pensé aux exigences que nous devrions avoir sur la\\nqualité des modules ainsi créés de manière à pouvoir rendre ces derniers utiles.\\n\\nJ\'ai donc pensé qu\'il serait intéressant de faire un travail en amont afin de\\ndéterminer quels modules il manque dans le paysage open-source voire consulter\\nla communauté JavaScript.\\n\\nJ\'ai donc commencé ma petite liste ; module UMD, philosophie Unix (faire une\\nchose mais la faire bien), tests unitaires ou fonctionnels. Problème : faire\\ncela en deux jours, ça m\'a paru un peu compliqué surtout que la plupart des gens\\nqui viennent dans un DevCamp veulent avant tout apprendre.\\n\\nPAVER LA VOIE VERS L\'APPRENTISSAGE DE LA PROGRAMMATION\\nRapidement, je me suis dit, que l\'idéal serait de mettre à profit les techniques\\nde développement dirigées par les tests. Au lieu de rédiger des spécifications,\\nautant créer directement les tests qui permettent de vérifier le résultat qu\'on\\nattend.\\n\\nDu coup, le processus devient : on crée un projet GitHub avec un README\\ndocumentant l\'API souhaitée et le workflow, on crée des stubs pour chaque\\nfonction et les tests unitaires sensés checker le bon fonctionnement de l\'API.\\nLe but du concours ou DevCamp étant de développer le module correspondant aux\\ntests fournis.\\n\\nLors de l\'évènement, si certains mauvais tests sont détectés, on alloue un point\\nau développeur qui a relevé le problème via la soumission d\'une issue, on crée\\nun pull request et on informe tous les participants de la mise à jour des tests.\\nSi le développeur révèle l\'issue et envoi un pull request associé et valide, on\\nlui attribue deux points.\\n\\nLe premier qui passe tous les tests se voit allouer un certain nombre de points.\\nIdem pour les suivants mais de manière dégressive. Pour vérifier le\\nfonctionnement du module, pas la peine d\'utiliser ses mimines, il suffit\\nd\'intégrer Travis au projet GitHub (j\'en ai parlé dans mon post précédent sur\\nles tests front [tester_javascript_frontend.html]) et les PR seront\\nautomatiquement testés.\\n\\nLe processus de détermination du vainqueur ne peut être contesté puisque\\ntransparent, les développeurs sont mis à l\'épreuve dans un contexte\\nprofessionnel et pas seulement dans le contexte d\'un hackathon où chacun fait sa\\npopote dans son coin.\\n\\nQuand le temps imparti est terminé, on fait un JSPerf avec les versions de\\nchacun et on attribue des points à ceux qui font les meilleures performances. Le\\ncalcul du résultat peut d\'ailleurs être automatisé par la même occasion.\\n\\nJe pense que dans ce cadre, les concours du genre, le meilleur développeur de\\nFrance [http://lemeilleurdevdefrance.com/]ou les Open du Web pourraient se faire\\nsans forcément se déplacer, avec une véritable légitimité et une utilité avérée.\\n\\nJOINDRE L\'UTILE À L\'AGRÉABLE\\nEn effet, c\'est une question que je me suis toujours posé, particulièrement au\\nniveau de l\'enseignement. Pourquoi les travaux qui sont demandés aux élèves ne\\nsont pas (toujours) utiles, publiés et utilisables ?\\n\\nJe ne pense pas que ça soit un problèmes de compétence des enseignants ou des\\nélèves. C\'est avant tout un problème de méthode. L\'open-source gagnerait à ce\\nque chaque étudiant puisse dans le cadre de son apprentissage apporter sa pierre\\nà l\'édifice.\\n\\nD\'où cette idée d\'enseignement de la programmation dirigé par les tests. Le\\ncontenu d\'un cours deviendrait :\\n\\n * explication théorique des concepts associés au sujet étudié (ex.: protocole\\n   POP3) ; \\n * création d\'un ou plusieurs modules sur ce même sujet selon les tests créés\\n   par l\'enseignant (ex: client, serveur, proxy ... POP3) ; \\n * mise en commun des modules, tests de performance et briefing sur les erreurs\\n   rencontrées et les solutions les plus performantes. \\n\\nCela demande un important travail de préparation au départ, mais rien n\'empêche\\nde mutualiser les travaux ou de réutiliser ces derniers d\'une année sur l\'autre.\\nLa création de contenus pour des concours de programmation peut aussi être\\npubliée de manière réutilisable par les enseignants. Un enseignant peut aussi\\nutiliser les tests d\'un projet open-source existant, de cette manière si un\\nétudiant trouve une façon très élégante de s\'y conformer, cela peut bénéficier à\\nce projet open-source via un pull request.\\n\\nBref, que pensez-vous de cette approche ? Suis-je le seul geek Bisounours ?\\nVotre avis m\'interesse !\\n\\nPS : Du même tonneau, retrouvez les défis JavaScript de FranceJS\\n[http://francejs.org/concours.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc58:JSON.parse('{"path":"contents/pages/articles-enseignement_dirige_par_tests.html","title":"L\'enseignement dirigé par les tests","description":"Les tests unitaires et fonctionnels ont véritablement révolutionné le développement professionnel, pourquoi pas également celui de l\'enseignement et de la formation ?","shortTitle":"Apprendre en testant","shortDesc":"En savoir plus sur cette conception de l\'apprentissage de la programmation","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nL\'ENSEIGNEMENT DIRIGÉ PAR LES TESTS\\nLes tests unitaires et fonctionnels ont véritablement révolutionné le\\ndéveloppement professionnel, pourquoi pas également celui de l\'enseignement et\\nde la formation ?\\n\\n Remi Grumeau [https://twitter.com/remi_grumeau], un développeur lillois, m\'a\\nrécemment sollicité sur l\'idée d\'un DevCamp spécial mobile dont le but serait de\\ncréer et publier sur GitHub des modules open-source. J\'ai aussi été sollicité\\npour être jury aux OpenDuWeb [http://www.open-du-web.fr/]. À première vue, rien\\nà voir avec le titre de ce post.\\n\\nJe me suis donc mis à imaginer comment de tels evènements devraient être\\norganisés et j\'ai donc pensé aux exigences que nous devrions avoir sur la\\nqualité des modules ainsi créés de manière à pouvoir rendre ces derniers utiles.\\n\\nJ\'ai donc pensé qu\'il serait intéressant de faire un travail en amont afin de\\ndéterminer quels modules il manque dans le paysage open-source voire consulter\\nla communauté JavaScript.\\n\\nJ\'ai donc commencé ma petite liste ; module UMD, philosophie Unix (faire une\\nchose mais la faire bien), tests unitaires ou fonctionnels. Problème : faire\\ncela en deux jours, ça m\'a paru un peu compliqué surtout que la plupart des gens\\nqui viennent dans un DevCamp veulent avant tout apprendre.\\n\\nPAVER LA VOIE VERS L\'APPRENTISSAGE DE LA PROGRAMMATION\\nRapidement, je me suis dit, que l\'idéal serait de mettre à profit les techniques\\nde développement dirigées par les tests. Au lieu de rédiger des spécifications,\\nautant créer directement les tests qui permettent de vérifier le résultat qu\'on\\nattend.\\n\\nDu coup, le processus devient : on crée un projet GitHub avec un README\\ndocumentant l\'API souhaitée et le workflow, on crée des stubs pour chaque\\nfonction et les tests unitaires sensés checker le bon fonctionnement de l\'API.\\nLe but du concours ou DevCamp étant de développer le module correspondant aux\\ntests fournis.\\n\\nLors de l\'évènement, si certains mauvais tests sont détectés, on alloue un point\\nau développeur qui a relevé le problème via la soumission d\'une issue, on crée\\nun pull request et on informe tous les participants de la mise à jour des tests.\\nSi le développeur révèle l\'issue et envoi un pull request associé et valide, on\\nlui attribue deux points.\\n\\nLe premier qui passe tous les tests se voit allouer un certain nombre de points.\\nIdem pour les suivants mais de manière dégressive. Pour vérifier le\\nfonctionnement du module, pas la peine d\'utiliser ses mimines, il suffit\\nd\'intégrer Travis au projet GitHub (j\'en ai parlé dans mon post précédent sur\\nles tests front [tester_javascript_frontend.html]) et les PR seront\\nautomatiquement testés.\\n\\nLe processus de détermination du vainqueur ne peut être contesté puisque\\ntransparent, les développeurs sont mis à l\'épreuve dans un contexte\\nprofessionnel et pas seulement dans le contexte d\'un hackathon où chacun fait sa\\npopote dans son coin.\\n\\nQuand le temps imparti est terminé, on fait un JSPerf avec les versions de\\nchacun et on attribue des points à ceux qui font les meilleures performances. Le\\ncalcul du résultat peut d\'ailleurs être automatisé par la même occasion.\\n\\nJe pense que dans ce cadre, les concours du genre, le meilleur développeur de\\nFrance [http://lemeilleurdevdefrance.com/]ou les Open du Web pourraient se faire\\nsans forcément se déplacer, avec une véritable légitimité et une utilité avérée.\\n\\nJOINDRE L\'UTILE À L\'AGRÉABLE\\nEn effet, c\'est une question que je me suis toujours posé, particulièrement au\\nniveau de l\'enseignement. Pourquoi les travaux qui sont demandés aux élèves ne\\nsont pas (toujours) utiles, publiés et utilisables ?\\n\\nJe ne pense pas que ça soit un problèmes de compétence des enseignants ou des\\nélèves. C\'est avant tout un problème de méthode. L\'open-source gagnerait à ce\\nque chaque étudiant puisse dans le cadre de son apprentissage apporter sa pierre\\nà l\'édifice.\\n\\nD\'où cette idée d\'enseignement de la programmation dirigé par les tests. Le\\ncontenu d\'un cours deviendrait :\\n\\n * explication théorique des concepts associés au sujet étudié (ex.: protocole\\n   POP3) ; \\n * création d\'un ou plusieurs modules sur ce même sujet selon les tests créés\\n   par l\'enseignant (ex: client, serveur, proxy ... POP3) ; \\n * mise en commun des modules, tests de performance et briefing sur les erreurs\\n   rencontrées et les solutions les plus performantes. \\n\\nCela demande un important travail de préparation au départ, mais rien n\'empêche\\nde mutualiser les travaux ou de réutiliser ces derniers d\'une année sur l\'autre.\\nLa création de contenus pour des concours de programmation peut aussi être\\npubliée de manière réutilisable par les enseignants. Un enseignant peut aussi\\nutiliser les tests d\'un projet open-source existant, de cette manière si un\\nétudiant trouve une façon très élégante de s\'y conformer, cela peut bénéficier à\\nce projet open-source via un pull request.\\n\\nBref, que pensez-vous de cette approche ? Suis-je le seul geek Bisounours ?\\nVotre avis m\'interesse !\\n\\nPS : Du même tonneau, retrouvez les défis JavaScript de FranceJS\\n[http://francejs.org/concours.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc59:JSON.parse('{"path":"contents/pages/fr/blog/erreurs_javascript.html","title":"Gestion des erreurs en JavaScript","description":"Gérer les erreurs en JavaScript peut paraître simple, mais il n\'est pas toujours évident de choisir entre exceptions, retours d\'erreurs et callbacks d\'erreurs.","shortTitle":"Les erreurs JS","shortDesc":"En savoir plus sur la gestion des erreurs en JavaScript","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGESTION DES ERREURS EN JAVASCRIPT\\nGérer les erreurs en JavaScript peut paraître simple, mais il n\'est pas toujours\\névident de choisir entre exceptions, retours d\'erreurs et callbacks d\'erreurs.\\n\\nLe dernier Ch\'tiJS a décidément été la source de nombreuses réflexions. L\'une\\nd\'entre elle concernait les erreurs. Tout est parti d\'une assertion simple : les\\npromises doivent-elles attraper les exceptions et les transformer en erreurs\\nrécupérables dans un then ou les laisser remonter la pile d\'exécution ?\\n\\nC\'est que fait, par exemple, RSVP.js. La logique du resolver est englobée dans \\nun bloc try...catch\\n[https://github.com/tildeio/rsvp.js/blob/277eb5eab912a9c3df8228a2647fcab84374615a/lib/rsvp/promise.js#L47]\\nqui transforme toute exception en erreur qui fait échouer la promise. Dans mon\\nimplémentation des promises [promises_javascript_ouvrons_capot.html], j\'ai\\nchoisi de ne pas utiliser cette approche afin de pouvoir décider, au cas par\\ncas, d\'attraper ou non une exception envoyée par le resolver d\'une promise.\\n\\nTYPOLOGIE DES ERREURS\\nAvant d\'aller plus loin, je voudrais revenir sur la typologie des erreurs que\\nl\'on peut rencontrer au cours de l\'exécution d\'un programme. Pour moi, il existe\\ntrois classes d\'erreurs :\\n\\n * les erreurs fatales : ce sont des erreurs qui résultent d\'une erreur de\\n   programmation. Ces dernières ont la particularité de ne pas avoir été prévues\\n   par le développeur puisqu\'elles résultent d\'un bug. Elles laissent donc le\\n   programme dans un état indéterminé. On pourrait comparer cette erreur aux\\n   erreurs HTTP 500+ ; \\n * les erreurs d\'utilisation : elles sont causées par une mauvaise utilisation\\n   du programme (mauvaise saisies de l\'utilisateur principalement) ; \\n * les erreurs d\'interaction : un programme interagit fréquemment avec d\'autres\\n   composants (le réseau, le matériel etc...). Il arrive qu\'une interaction se\\n   termine de façon imprévue ou incohérente. Un programme se doit d\'anticiper\\n   ces erreurs et de les gérer au mieux. \\n\\nAttention, certaines erreurs d\'interaction peuvent être dues à une erreur fatale\\ndans un programme avec lequel votre code interagit. C\'est le cas quand une\\nrequête XHR renvoie une erreur 500. Il faut donc veiller à ne pas confondre\\nerreurs d\'interactions et erreurs fatales. Pour ce faire, il faut bien délimiter\\nles erreurs qui sont dues à votre code.\\n\\nOn pourrait considérer que les erreurs d\'utilisation sont des erreurs\\nd\'interaction avec l\'utilisateur. D\'ailleurs, dans l\'absolu, l\'interaction avec\\ndes système tiers peut aussi induire des entrées qui nécessitent d\'être filtrées\\nde la même façon que les entrées utilisateur. Je fais néanmoins la différence\\nici car la réponse à ces erreurs sera légèrement différente.\\n\\nLA GESTION D\'ERREUR\\nJ\'imagine que ces types vous évoquent certaines stratégies pour leur gestion. En\\nJavaScript, on compte divers type de gestion d\'erreur :\\n\\n * les exceptions : elles permettent à une erreur de remonter la pile\\n   d\'exécution. On peut les attraper à tout moment à l\'aide d\'un bloc \\n   try...catch. Si elles ne sont pas attrapées, les exceptions finissent par\\n   interrompre l\'execution de votre JavaScript (plus précisément de la pile\\n   d\'exécution JavaScript). \\n * les retours d\'erreur : il s\'agit d\'exploiter le retour de fonction pour\\n   indiquer qu\'une erreur a eu lieu. On peut considérer que si parseInt retourne \\n   NaN alors on a affaire à une erreur. Cette approche est très utilisée en C\\n   pour les appels systèmes. \\n * l\'approche via une variable globale : très présente en C également avec la\\n   variable errno. En JavaScript, on évite les variables globales, on utilisera\\n   donc pas cette approche. \\n * l\'approche via callback d\'erreur : ils sont principalement utilisés pour les\\n   opérations asynchrones, bien que rien n\'empêche leur utilisation dans du code\\n   synchrone. C\'est aussi l\'approche qui est utilisée pour les promises. On\\n   passe un callback d\'erreur à la méthode then. La différence est que l\'on\\n   passe autant de callbacks d\'erreur qu\'on le souhaite. \\n\\nCOMMENT GÉRER CHAQUE TYPE D\'ERREUR ?\\nLES ERREURS FATALES\\nLes exceptions sont l\'arme ultime pour gérer les erreurs fatales. En effet,\\npuisque les erreurs fatales sont des erreurs de programmation, continuer\\nl\'exécution du programme est risqué. Cela pourrait avoir des répercussions\\ndésastreuses.\\n\\nJavaScript utilise intensivement les exceptions. Les erreurs de syntaxe, les\\nmauvaises utilisations de son API native sont signalées dans la grande majorité\\ndes cas par des exceptions. C\'est pourquoi je vous enjoins à fait de même.\\n\\nLa plupart du temps, il s\'agit de lever une exception si l\'une de vos\\nfonctions/l\'un de vos constructeurs reçoit en paramètre des arguments erronés :\\n\\nfunction repeat(n) { \\n if(n<0) throw new Error(\'Bad n value.\'); \\n //...\\n}\\n\\nDemander une répétition d\'une opération avec une nombre négatif de répétition\\nn\'a pas de sens. Lancer une exception permet d\'interrompre l\'exécution et de\\npermettre de déboguer facilement l\'erreur dans le contexte où celle-ci est\\napparue.\\n\\nEn effet, tous les outils pour développeurs permettent de placer un point\\nd\'arrêt à la levée d\'une exception afin de permettre de visualiser les variables\\nà portées, la pile d\'exécution et bien d\'autres informations très utiles.\\n\\nLES ERREURS D\'UTILISATION\\nLes erreurs d\'utilisation sont dues à l\'utilisateur. La logique veut donc que\\nl\'on traite ces erreurs en signalant celles-cis à l\'utilisateur. C\'est donc une\\nréponse par le biais de l\'interface utilisateur qui sera privilégiée.\\n\\nCependant, pour activer cette réponse, il faut en premier lieu la détecter.\\nCette détection se fait indifféremment par retour de fonction ou par callback\\nd\'erreur. D\'ailleurs il est très possible que vous deviez mixer ces deux\\ntechniques pour bâtir une propagation d\'erreur dans la pile d\'exécution et\\nannuler certaines actions suite à une erreur.\\n\\nL\'idée à retenir est d\'éviter à tout prix de gérer les erreurs des utilisateurs\\nà l\'aide d\'exceptions. En effet, vous prennez le risque de mettre fin à\\nl\'exécution pour une erreur normale dans le cycle de vie d\'une application. Les\\nutilisateurs se trompent souvent.\\n\\nOn prendra donc soin de filtrer un entier obtenu grâce à une saisie de\\nl\'utilisateur avant de l\'utiliser comme argument de la fonction repeat définie\\nci-dessus.\\n\\nLES ERREURS D\'INTERACTION\\nLorsque votre code interagit avec des éléments extérieurs, qu\'il s\'agisse de\\nserveurs distant ou du hardware, le bon sens veut que cela se fasse de manière\\nasynchrone. Les callbacks d\'erreur sont donc indiqués pour remplir le job. C\'est\\nd\'ailleurs de cette façon que l\'API JavaScript vous informe sur le succès ou\\nl\'échec d\'une opération asynchrone.\\n\\nCe n\'est malheureusement pas toujours le cas. Par exemple, une requête XHR\\nsynchrone qui échoue à cause d\'un problème réseau lance une exception. Dans ce\\ncas précis, mieux vaut être au courant afin de placer le bloc try...catch qui\\nvous permettra de gérer ce cas sans mettre en péril l\'exécution de votre\\nJavaScript.\\n\\nVous vous dîtes peut-être qu\'il peut arriver qu\'une erreur de programmation mène\\nà la mauvaise utilisation d\'une API asynchrone et que dans ce cas, un callback\\nd\'erreur sera appelé pour une erreur fatale. Ce que j\'ai totalement contre\\nindiqué tout à l\'heure.\\n\\nPour le cas d\'une API bien pensée, cela ne devrait pas être le cas. Une API\\nasynchrone doit détecter toute mauvaise utilisation et lancer une exception au\\nmoment de son lancement. Par exemple, si vous lancez une requête XHR vers une\\norigine différente de votre site, c\'est une erreur de programmation. Une\\nexception doit être lancée immédiatement.\\n\\nL\'astuce pour éviter tout effet de bord est de lancer l\'opération asynchrone\\navant d\'assigner les callbacks ou écouteurs d\'évènements. De cette façon vous\\nêtes certains que ces derniers ne seront jamais appelés en cas de levée d\'une\\nexception.\\n\\nRETOUR SUR LES PROMISES\\nAvec cette toile de fond en tête, il apparaît donc évident que les exceptions ne\\ndoivent pas être attrapées au sein des promises. En effet, au delà de l\'avantage\\nd\'une gestion au cas par cas, on voit aussi que cela pourrait compromettre la\\ndétection d\'une erreur fatale causant la continuation de l\'exécution à partir\\nd\'un état non-prévu donc indéterminé.\\n\\nOn pourrait penser épargner l\'utilisateur d\'erreurs fatales qui en définitive\\nmettent fin à l\'exécution, mais au final, on rend les erreurs de programmation\\nplus difficiles à détecter et les bugs plus sournois.\\n\\nIl faut comprendre que les erreurs fatales doivent être exceptionnelles. Un\\nprogramme qui arrive en production doit être dénué d\'erreurs fatales dans\\nl\'absolu. Malheureusement, dans le monde réel, ces erreurs peuvent survenir en\\nproduction.\\n\\nDevons nous laisser les utilisateurs face à une application qui ne fonctionne\\nplus ? Sûrement pas. L\'approche correcte pour gérer les erreurs fatales est\\nfinalement assez simple. Il suffit d\'utiliser un callback d\'erreur générique,\\nd\'informer l\'utilisateur d\'une erreur anormale et de redémarrer l\'application.\\nOn peut aussi imaginer récupérer ces erreurs fatales grâce à une requête XHR et\\nde créer directement une issue sur GitHub. Un simple exemple :\\n\\nwindow.onerror = function(msg,url, line) {\\n //demande de détails\\n var details=prompt(\'Une erreur fatale a eu lieu, vous pouvez donner quelques détails pour aider le webmaster :\');\\n // envoi des détails via XHR puis rafraîchissement de la page\\n document.location.refresh();\\n}; \\n\\nIci, j\'ai volontairement simplifié. Dans la pratique, on placera un timeout pour\\nlaisser le temps à toutes les erreurs consécutives d\'être levées avant de\\ndemander du feedback et de redémarrer l\'application. On peut aussi donner le\\ntemps à l\'utilisateur de récupérer certains contenus (un formulaire à moitié\\nrempli, par exemple) avant le rafraîchissement.\\n\\nL\'avantage de cette approche est qu\'on informe l\'utilisateur d\'un problème\\nplutôt que vouloir le lui cacher quitte à ce que ce dernier provoque un effet\\npapillon plus difficile à détecter.\\n\\nVoilà, j\'espère que cet article vous a donné envie de gérer les erreurs de vos\\napplications. Je vous propose de lire ce billet sur l\'extension BugMeBack\\n[bugmeback.html]qui propose une gestion intéressante des erreurs pour vos\\napplications.\\n\\nPetit ajout : J\'ai écrit un autre article sur les erreurs en JS\\n[erreurs_javascript_ameliorees.html]mais cette fois avec des exemples concrets.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc60:JSON.parse('{"path":"contents/pages/articles-erreurs_javascript.html","title":"Gestion des erreurs en JavaScript","description":"Gérer les erreurs en JavaScript peut paraître simple, mais il n\'est pas toujours évident de choisir entre exceptions, retours d\'erreurs et callbacks d\'erreurs.","shortTitle":"Les erreurs JS","shortDesc":"En savoir plus sur la gestion des erreurs en JavaScript","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGESTION DES ERREURS EN JAVASCRIPT\\nGérer les erreurs en JavaScript peut paraître simple, mais il n\'est pas toujours\\névident de choisir entre exceptions, retours d\'erreurs et callbacks d\'erreurs.\\n\\nLe dernier Ch\'tiJS a décidément été la source de nombreuses réflexions. L\'une\\nd\'entre elle concernait les erreurs. Tout est parti d\'une assertion simple : les\\npromises doivent-elles attraper les exceptions et les transformer en erreurs\\nrécupérables dans un then ou les laisser remonter la pile d\'exécution ?\\n\\nC\'est que fait, par exemple, RSVP.js. La logique du resolver est englobée dans \\nun bloc try...catch\\n[https://github.com/tildeio/rsvp.js/blob/277eb5eab912a9c3df8228a2647fcab84374615a/lib/rsvp/promise.js#L47]\\nqui transforme toute exception en erreur qui fait échouer la promise. Dans mon\\nimplémentation des promises [promises_javascript_ouvrons_capot.html], j\'ai\\nchoisi de ne pas utiliser cette approche afin de pouvoir décider, au cas par\\ncas, d\'attraper ou non une exception envoyée par le resolver d\'une promise.\\n\\nTYPOLOGIE DES ERREURS\\nAvant d\'aller plus loin, je voudrais revenir sur la typologie des erreurs que\\nl\'on peut rencontrer au cours de l\'exécution d\'un programme. Pour moi, il existe\\ntrois classes d\'erreurs :\\n\\n * les erreurs fatales : ce sont des erreurs qui résultent d\'une erreur de\\n   programmation. Ces dernières ont la particularité de ne pas avoir été prévues\\n   par le développeur puisqu\'elles résultent d\'un bug. Elles laissent donc le\\n   programme dans un état indéterminé. On pourrait comparer cette erreur aux\\n   erreurs HTTP 500+ ; \\n * les erreurs d\'utilisation : elles sont causées par une mauvaise utilisation\\n   du programme (mauvaise saisies de l\'utilisateur principalement) ; \\n * les erreurs d\'interaction : un programme interagit fréquemment avec d\'autres\\n   composants (le réseau, le matériel etc...). Il arrive qu\'une interaction se\\n   termine de façon imprévue ou incohérente. Un programme se doit d\'anticiper\\n   ces erreurs et de les gérer au mieux. \\n\\nAttention, certaines erreurs d\'interaction peuvent être dues à une erreur fatale\\ndans un programme avec lequel votre code interagit. C\'est le cas quand une\\nrequête XHR renvoie une erreur 500. Il faut donc veiller à ne pas confondre\\nerreurs d\'interactions et erreurs fatales. Pour ce faire, il faut bien délimiter\\nles erreurs qui sont dues à votre code.\\n\\nOn pourrait considérer que les erreurs d\'utilisation sont des erreurs\\nd\'interaction avec l\'utilisateur. D\'ailleurs, dans l\'absolu, l\'interaction avec\\ndes système tiers peut aussi induire des entrées qui nécessitent d\'être filtrées\\nde la même façon que les entrées utilisateur. Je fais néanmoins la différence\\nici car la réponse à ces erreurs sera légèrement différente.\\n\\nLA GESTION D\'ERREUR\\nJ\'imagine que ces types vous évoquent certaines stratégies pour leur gestion. En\\nJavaScript, on compte divers type de gestion d\'erreur :\\n\\n * les exceptions : elles permettent à une erreur de remonter la pile\\n   d\'exécution. On peut les attraper à tout moment à l\'aide d\'un bloc \\n   try...catch. Si elles ne sont pas attrapées, les exceptions finissent par\\n   interrompre l\'execution de votre JavaScript (plus précisément de la pile\\n   d\'exécution JavaScript). \\n * les retours d\'erreur : il s\'agit d\'exploiter le retour de fonction pour\\n   indiquer qu\'une erreur a eu lieu. On peut considérer que si parseInt retourne \\n   NaN alors on a affaire à une erreur. Cette approche est très utilisée en C\\n   pour les appels systèmes. \\n * l\'approche via une variable globale : très présente en C également avec la\\n   variable errno. En JavaScript, on évite les variables globales, on utilisera\\n   donc pas cette approche. \\n * l\'approche via callback d\'erreur : ils sont principalement utilisés pour les\\n   opérations asynchrones, bien que rien n\'empêche leur utilisation dans du code\\n   synchrone. C\'est aussi l\'approche qui est utilisée pour les promises. On\\n   passe un callback d\'erreur à la méthode then. La différence est que l\'on\\n   passe autant de callbacks d\'erreur qu\'on le souhaite. \\n\\nCOMMENT GÉRER CHAQUE TYPE D\'ERREUR ?\\nLES ERREURS FATALES\\nLes exceptions sont l\'arme ultime pour gérer les erreurs fatales. En effet,\\npuisque les erreurs fatales sont des erreurs de programmation, continuer\\nl\'exécution du programme est risqué. Cela pourrait avoir des répercussions\\ndésastreuses.\\n\\nJavaScript utilise intensivement les exceptions. Les erreurs de syntaxe, les\\nmauvaises utilisations de son API native sont signalées dans la grande majorité\\ndes cas par des exceptions. C\'est pourquoi je vous enjoins à fait de même.\\n\\nLa plupart du temps, il s\'agit de lever une exception si l\'une de vos\\nfonctions/l\'un de vos constructeurs reçoit en paramètre des arguments erronés :\\n\\nfunction repeat(n) { \\n if(n<0) throw new Error(\'Bad n value.\'); \\n //...\\n}\\n\\nDemander une répétition d\'une opération avec une nombre négatif de répétition\\nn\'a pas de sens. Lancer une exception permet d\'interrompre l\'exécution et de\\npermettre de déboguer facilement l\'erreur dans le contexte où celle-ci est\\napparue.\\n\\nEn effet, tous les outils pour développeurs permettent de placer un point\\nd\'arrêt à la levée d\'une exception afin de permettre de visualiser les variables\\nà portées, la pile d\'exécution et bien d\'autres informations très utiles.\\n\\nLES ERREURS D\'UTILISATION\\nLes erreurs d\'utilisation sont dues à l\'utilisateur. La logique veut donc que\\nl\'on traite ces erreurs en signalant celles-cis à l\'utilisateur. C\'est donc une\\nréponse par le biais de l\'interface utilisateur qui sera privilégiée.\\n\\nCependant, pour activer cette réponse, il faut en premier lieu la détecter.\\nCette détection se fait indifféremment par retour de fonction ou par callback\\nd\'erreur. D\'ailleurs il est très possible que vous deviez mixer ces deux\\ntechniques pour bâtir une propagation d\'erreur dans la pile d\'exécution et\\nannuler certaines actions suite à une erreur.\\n\\nL\'idée à retenir est d\'éviter à tout prix de gérer les erreurs des utilisateurs\\nà l\'aide d\'exceptions. En effet, vous prennez le risque de mettre fin à\\nl\'exécution pour une erreur normale dans le cycle de vie d\'une application. Les\\nutilisateurs se trompent souvent.\\n\\nOn prendra donc soin de filtrer un entier obtenu grâce à une saisie de\\nl\'utilisateur avant de l\'utiliser comme argument de la fonction repeat définie\\nci-dessus.\\n\\nLES ERREURS D\'INTERACTION\\nLorsque votre code interagit avec des éléments extérieurs, qu\'il s\'agisse de\\nserveurs distant ou du hardware, le bon sens veut que cela se fasse de manière\\nasynchrone. Les callbacks d\'erreur sont donc indiqués pour remplir le job. C\'est\\nd\'ailleurs de cette façon que l\'API JavaScript vous informe sur le succès ou\\nl\'échec d\'une opération asynchrone.\\n\\nCe n\'est malheureusement pas toujours le cas. Par exemple, une requête XHR\\nsynchrone qui échoue à cause d\'un problème réseau lance une exception. Dans ce\\ncas précis, mieux vaut être au courant afin de placer le bloc try...catch qui\\nvous permettra de gérer ce cas sans mettre en péril l\'exécution de votre\\nJavaScript.\\n\\nVous vous dîtes peut-être qu\'il peut arriver qu\'une erreur de programmation mène\\nà la mauvaise utilisation d\'une API asynchrone et que dans ce cas, un callback\\nd\'erreur sera appelé pour une erreur fatale. Ce que j\'ai totalement contre\\nindiqué tout à l\'heure.\\n\\nPour le cas d\'une API bien pensée, cela ne devrait pas être le cas. Une API\\nasynchrone doit détecter toute mauvaise utilisation et lancer une exception au\\nmoment de son lancement. Par exemple, si vous lancez une requête XHR vers une\\norigine différente de votre site, c\'est une erreur de programmation. Une\\nexception doit être lancée immédiatement.\\n\\nL\'astuce pour éviter tout effet de bord est de lancer l\'opération asynchrone\\navant d\'assigner les callbacks ou écouteurs d\'évènements. De cette façon vous\\nêtes certains que ces derniers ne seront jamais appelés en cas de levée d\'une\\nexception.\\n\\nRETOUR SUR LES PROMISES\\nAvec cette toile de fond en tête, il apparaît donc évident que les exceptions ne\\ndoivent pas être attrapées au sein des promises. En effet, au delà de l\'avantage\\nd\'une gestion au cas par cas, on voit aussi que cela pourrait compromettre la\\ndétection d\'une erreur fatale causant la continuation de l\'exécution à partir\\nd\'un état non-prévu donc indéterminé.\\n\\nOn pourrait penser épargner l\'utilisateur d\'erreurs fatales qui en définitive\\nmettent fin à l\'exécution, mais au final, on rend les erreurs de programmation\\nplus difficiles à détecter et les bugs plus sournois.\\n\\nIl faut comprendre que les erreurs fatales doivent être exceptionnelles. Un\\nprogramme qui arrive en production doit être dénué d\'erreurs fatales dans\\nl\'absolu. Malheureusement, dans le monde réel, ces erreurs peuvent survenir en\\nproduction.\\n\\nDevons nous laisser les utilisateurs face à une application qui ne fonctionne\\nplus ? Sûrement pas. L\'approche correcte pour gérer les erreurs fatales est\\nfinalement assez simple. Il suffit d\'utiliser un callback d\'erreur générique,\\nd\'informer l\'utilisateur d\'une erreur anormale et de redémarrer l\'application.\\nOn peut aussi imaginer récupérer ces erreurs fatales grâce à une requête XHR et\\nde créer directement une issue sur GitHub. Un simple exemple :\\n\\nwindow.onerror = function(msg,url, line) {\\n //demande de détails\\n var details=prompt(\'Une erreur fatale a eu lieu, vous pouvez donner quelques détails pour aider le webmaster :\');\\n // envoi des détails via XHR puis rafraîchissement de la page\\n document.location.refresh();\\n}; \\n\\nIci, j\'ai volontairement simplifié. Dans la pratique, on placera un timeout pour\\nlaisser le temps à toutes les erreurs consécutives d\'être levées avant de\\ndemander du feedback et de redémarrer l\'application. On peut aussi donner le\\ntemps à l\'utilisateur de récupérer certains contenus (un formulaire à moitié\\nrempli, par exemple) avant le rafraîchissement.\\n\\nL\'avantage de cette approche est qu\'on informe l\'utilisateur d\'un problème\\nplutôt que vouloir le lui cacher quitte à ce que ce dernier provoque un effet\\npapillon plus difficile à détecter.\\n\\nVoilà, j\'espère que cet article vous a donné envie de gérer les erreurs de vos\\napplications. Je vous propose de lire ce billet sur l\'extension BugMeBack\\n[bugmeback.html]qui propose une gestion intéressante des erreurs pour vos\\napplications.\\n\\nPetit ajout : J\'ai écrit un autre article sur les erreurs en JS\\n[erreurs_javascript_ameliorees.html]mais cette fois avec des exemples concrets.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc61:JSON.parse('{"path":"contents/pages/fr/blog/erreurs_javascript_ameliorees.html","title":"Améliorer les erreurs JavaScript","description":"Pour un meilleur débogage, il faut de meilleures erreurs. C\'est\\npourquoi j\'ai mis en place une stratégie pour les rendre plus pertinentes.","shortTitle":"De meilleures erreurs JavaScript","shortDesc":"Découvrez comment rendre vos erreurs plus pertinentes.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nAMÉLIORER LES ERREURS JAVASCRIPT\\nChez SimpliField, nous avons une base de code JavaScript très conséquente, de\\nplus, nous avons un cycle de release très court. C\'est pourquoi une gestion des\\nerreurs pertinente est une nécessité pour nous.\\n\\nJ\'ai déjà parlé de la gestion des erreurs en JavaScript\\n[erreurs_javascript.html] sur ce blog, mais de façon purement théorique et\\narchitecturale. Je voudrais parler ici de détails d\'implémentation que nous\\navons mis en pratique avec succès.\\n\\nS/MESSAGE D\'ERREUR/CODE D\'ERREUR/\\nLa première stratégie que je mets en place sur tous mes développements est de\\npréférer des codes d\'erreurs que des messages. Pour comprendre pourquoi, prenons\\nun exemple simple ; la vérification qu\'un nombre est dans un intervalle donné.\\n\\nUn choix de POO classique serait d\'utiliser une \\"classe\\" d\'erreur. En\\nJavaScript, nous en avons même une native :\\n\\n\\nfunction checkBounds(n) {\\n  if(n < 2) {\\n    throw new RangeError(\'Out of range (\' + n + \' 4) {\\n    throw new RangeError(\'Out of range (\' + n + \'>4)\');\\n  }\\n}\\n\\n\\nA priori, cette erreur peut sembler tout à fait claire et exploitable. Mais à\\nl\'usage, on va rencontrer divers problèmes, dont un majeur, la qualification de\\ncette erreur à un autre niveau du programme.\\n\\nEn effet, comment savoir, quand on l\'attrapera par ailleurs dans notre\\napplication, ce qu\'il faut en faire ? Simple me direz-vous, nous allons utiliser\\nl\'opérateur instanceof!\\n\\n\\ntry {\\n  checkBounds(6);\\n} catch(err) {\\n  if(err instanceof RangeError) {\\n    console.log(\'Erreur d\'intervalle\');\\n  }\\n}\\n\\n\\nCette approche marche dans une petite application, mais avec des applications de\\ndizaines, voire centaines, de milliers de lignes, elle n\'est plus du tout\\nviable.\\n\\nEn effet, ceci nécessiterait d\'hériter du constructeur Error pour chaque type\\nd\'erreur et créerait tout une base de code annexe bien connue des développeurs\\nJava...\\n\\nNous devons faire mieux. Une autre stratégie est de se baser sur le message\\nd\'erreur :\\n\\n\\ntry {\\n  checkBounds(6);\\n} catch(err) {\\n  if(err.message.startsWith(\'Out of range\')) {\\n    console.log(\'Erreur d\\\\\'intervalle\');\\n  }\\n}\\n\\n\\nIci, ce n\'est pas très parlant, mais un message d\'erreur sous forme de phrase\\nest la porte ouverte à tous les abus :). Si l\'auteur du message a tendance à\\nécrire un roman pour chaque erreur, votre code va se détériorer rapidement.\\n\\nSans compter qu\'au moindre changement de mot ou à la moindre correction de faute\\nd\'orthographe, vous pourrez revoir votre logique de différentiation des erreurs.\\nC\'est pour ces raisons que je n\'utilise plus de messages d\'erreur, mais plutôt\\ndes codes d\'erreur simples et concis.\\n\\nAutre problème avec cette approche, si vous souhaitez obtenir des informations\\nsur l\'erreur (du style n est supérieur ou inférieur à l\'intervalle), vous pouvez\\nsortir vos RegExp :).\\n\\n A propos des personnes qui font leur RegExp elles même, transcription sur le\\nsite de la source.\\n[https://www.commitstrip.com/wp-content/uploads/2013/03/Strips-Expressions-r%C3%A9guli%C3%A8res-550-final.jpg]\\nSource: Commit Strip\\n[https://www.commitstrip.com/fr/2013/03/06/quelquun-sy-connait-en-expressions-regulieres/]\\n\\nChez moi, la fonction de vérification d\'intervalle ressemble plutôt à ça :\\n\\n\\nvar YError = require(\'yerror\');\\nfunction checkBounds(n) {\\n  if(n < 2) {\\n    throw new YError(\'E_RANGE\', \'2\', n);\\n  }\\n  if(n > 4) {\\n    throw new YError(\'E_RANGE\', 4, n);\\n  }\\n}\\n\\n\\nEt son utilisation, à ça :\\n\\n\\ntry {\\n  checkBounds(6);\\n} catch(err) {\\n  if(\'E_RANGE\' ===  err.code) {\\n    console.log(\'Erreur d\\\\\'intervalle, n=\' + err.params[1] + \'.\');\\n  }\\n}\\n\\n\\nPlusieurs avantages :\\n\\n * le code d\'erreur se suffit à lui-même, pas besoin d\'une phrase pour le\\n   comprendre. \\n * les paramètres de l\'erreur permettent de comprendre ce qui l\'a générée et\\n   même de l\'analyser programmatiquement de façon simple. \\n * si cette erreur vient à faire planter le serveur de production, j\'ai déjà des\\n   informations pour comprendre pourquoi sans avoir à revenir dans le même état. \\n * si je souhaite afficher cette erreur à l\'utilisateur, la gestion de\\n   l\'internationalisation sera plus facile (le code étant la clé du message et\\n   les paramètres permettant de le compléter de façon internationalisée, par\\n   exemple, en affichant les nombres au format local). \\n\\nERREURS ASYNCHRONES ET TRACE D\'ERREUR\\nLe principal problème des erreurs asynchrones est qu\'elles ne permettent pas\\ntoujours de comprendre l\'origine du problème et le parcours de l\'erreur dans\\nvotre code asynchrone.\\n\\nCertaines librairies vous proposent des fonctionnalités pour gérer ceci comme la\\nméthode Promise.longStackTrace()\\n[https://github.com/petkaantonov/bluebird/blob/master/API.md#promiselongstacktraces---void]\\nde BlueBird. Mais il est assez laborieux de faire cohabiter les différentes\\nlibrairies entre elles. De plus, les traces produites sont souvent très\\nverbeuses car pas du tout sélectives.\\n\\nÀ cette fin, je préfère gérer cette long stack trace manuellement en identifiant\\nles secteurs importants de l\'application qui nécessitent que je récupère la\\ntrace en cours. Prenons la chaîne de promise suivante :\\n\\n\\nfunction updatePassword(id, passwd) {\\n  return getUser(id)\\n    .then(checkPassword(passwd))\\n    .then(changePassword(passwd))\\n    .then(sendWarningEMail)\\n    .catch(function(err) {\\n      return YError.bump(err);\\n    });\\n}\\n\\n\\nDans cette chaîne de promise, ce qui m\'intéresse, c\'est d\'avoir la stack\\ninitiale de l\'erreur et de savoir qu\'elle a eu lieu dans cette chaîne de\\npromise. Le reste n\'est que du bruit. C\'est pourquoi j\'utilise explicitement la\\nfonction YError.bump().\\n\\nREQUALIFICATION\\nBien souvent, quand on attrape une erreur, c\'est que l\'on souhaite la\\nrequalifier. En effet, une erreur de type \'undefined\' is not a function n\'a\\naucun sens pour les utilisateurs. C\'est également généralement le cas des\\nerreurs de bas niveau que vos librairies remontent.\\n\\nMalheureusement, cette requalification génère souvent une perte d\'information si\\non se contente naïvement de créer une autre erreur parallèlement. Mon approche\\ndans ce cas est d\'utiliser la méthode YError.wrap().\\n\\n\\nfunction updatePassword(id, passwd) {\\n  return getUser(id)\\n    .then(checkPassword(passwd))\\n    .catch(function(err) {\\n      return YError.wrap(err, \'E_USER_ERROR\', id);\\n    });\\n    .then(changePassword(passwd))\\n    .then(sendWarningEMail)\\n    .catch(function(err) {\\n      return YError.wrap(err, \'E_UNEXPECTED\', id);\\n    });\\n}\\n\\n\\nIci, je requalifie un échec à la récupération de l\'utilisateur ou à la\\nvérification du nouveau mot de passe pour qualifier l\'erreur comme étant due à\\nl\'utilisateur. Dans le cadre d\'une API rest, cela permettra de renvoyer une\\nerreur 400. Les autres erreurs seront quand à elles classifiées comme bug et une\\nerreur 500 sera retournée dans ce cas.\\n\\nMais le véritable avantage de cette méthode est que la trace de l\'erreur\\ncontiendra non-seulement ces nouvelles informations, mais aussi les précédentes,\\ndonnant quelque chose de cet ordre :\\n\\n\\n  E_BAD_PWD_LENGTH (5)\\n    at line XXX\\n    at (...)\\n  E_USER_ERROR (abbacacaabbacacaabbacaca)\\n    at line XXX\\n    at (...)\\n\\n\\nEn réalité, nous avons un constructeur d\'erreur dérivé de YError et basé sur le\\nmême principe créé spécifiquement pour les erreurs HTTP. Je pense que nous\\nallons l\'open-sourcer dès que nous aurons quelques minutes.\\n\\nN\'hésitez pas à partager vos recettes ! Le code de YError est, bien-sûr, \\ndisponible sur GitHub [https://github.com/SimpliField/yerror].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc62:JSON.parse('{"path":"contents/pages/fr/blog/es6_dans_ton_code.html","title":"ES6 dans ton code","description":"Présentation sur les évolutions apportées par\\nla version 6 d\'ECMAScript donnée à l\'occasion de ChtiJS.","shortTitle":"ES6","shortDesc":"Voir une présentation sur ES6","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nES6 DANS TON CODE\\nPrésentation réalisée pour la treizième édition de ChtiJS\\n[http://chtijs.francejs.org/archives/2015-07-02/index.html].\\n\\n < Blog [/fr/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc63:JSON.parse('{"path":"contents/pages/fr/blog/exercices_en_cplusplus.html","title":"Critique du livre : Exercices en langage C++","description":"Afin de parfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre d\'exercices assez bien ficelé.","shortTitle":"Exercices en c++","shortDesc":"En savoir plus sur ce livre d\'exercices","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : EXERCICES EN LANGAGE C++\\nAfin de parfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre\\nd\'exercices assez bien ficelé.\\n\\nJ\'ai acheté ce livre par curiosité, sans trop savoir à quoi m\'attendre. J\'avais\\nenvie de continuer à apprendre C++ mais mon métier de développeur web est\\nprenant et je n\'ai pas vraiment le temps d\'écrire des programmes dans ce\\nlangage.\\n\\nJ\'ai donc fait le pari que ce livre me permettrai de pratiquer un peu plus. En\\nfait, j\'ai pratiqué par \\"calcul mental\\". En effet, ce livre se prête\\nparfaitement au jeu. Il propose de créer des programmes pour résoudre des\\nénoncés ou alors de décrire la sortie d\'un programme dont la source est donnée.\\n\\nLe livre passe en revue tous les principes de C++ : fonctions, classes, objets,\\npointeurs, références, surcharge d\'opérateurs, héritage simple ou multiple,\\nfonctions virtuelles, patrons de fonction et exceptions.\\n\\nBref, un bon livre qui devrait également être utile aux professeurs.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc64:JSON.parse('{"path":"contents/pages/articles-exercices_en_cplusplus.html","title":"Critique du livre : Exercices en langage C++","description":"Afin de parfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre d\'exercices assez bien ficelé.","shortTitle":"Exercices en c++","shortDesc":"En savoir plus sur ce livre d\'exercices","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : EXERCICES EN LANGAGE C++\\nAfin de parfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre\\nd\'exercices assez bien ficelé.\\n\\nJ\'ai acheté ce livre par curiosité, sans trop savoir à quoi m\'attendre. J\'avais\\nenvie de continuer à apprendre C++ mais mon métier de développeur web est\\nprenant et je n\'ai pas vraiment le temps d\'écrire des programmes dans ce\\nlangage.\\n\\nJ\'ai donc fait le pari que ce livre me permettrai de pratiquer un peu plus. En\\nfait, j\'ai pratiqué par \\"calcul mental\\". En effet, ce livre se prête\\nparfaitement au jeu. Il propose de créer des programmes pour résoudre des\\nénoncés ou alors de décrire la sortie d\'un programme dont la source est donnée.\\n\\nLe livre passe en revue tous les principes de C++ : fonctions, classes, objets,\\npointeurs, références, surcharge d\'opérateurs, héritage simple ou multiple,\\nfonctions virtuelles, patrons de fonction et exceptions.\\n\\nBref, un bon livre qui devrait également être utile aux professeurs.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc65:JSON.parse('{"path":"contents/pages/fr/blog/faire-mieux-qu-angular-avec-require.html","title":"Faire mieux qu\'AngularJS avec require()","description":"Le système CommonJS-like de NodeJS permet un grand nombre de\\n subtilités. Je vous propose de les découvrir en reproduisant les\\n fonctionnalités du système de modules d\'AngularJS.","shortTitle":"Modules AngularJS-like avec require()","shortDesc":"Découvrir la puissance de require()","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nFAIRE MIEUX QU\'ANGULARJS AVEC REQUIRE()\\nLors de ma dernière présentation [https://www.youtube.com/watch?v=n8nvHFfEFC4]\\npour #ChtiJS10 [http://chtijs.francejs.org/archives/2015-02-05/index.html], j\'ai\\ncédé au troll à propos du système de modules d\'AngularJS. En effet, bien qu\'il\\nm\'ait paru plutôt smart au début, j\'ai vite compris ses limites.\\n\\nEn effet, le fait de devoir wrapper le moindre code JavaScript d\'une série de\\nlignes qui peuvent sembler un peu déroutante pour un non initié est\\nparticulièrement ennuyeux. De plus, la création de builds pour AngularJS est\\ntrès fastidieux du fait de l\'usage de bower pour les récupérer.\\n\\nBref, à côté de la simplicité et de l\'efficacité de NPM et des modules CommonJS\\nce système fait pâle figure. La question est donc, peut-on faire les même choses\\navec require() qu\'avec le système de gestion de modules d\'Angular ? La réponse\\nest oui et voici comment !\\n\\nSERVICE SIMPLE\\nSi vous avez déjà utilisé Angular, vous savez que l\'une des bonnes pratiques est\\nde publier votre code sous forme de services. Les services sont une sorte de\\nsingleton namespacé et configurables pour votre application :\\n\\n\\nangular.module(\'my.app.namespace\', [\\n  \'my.dep1.namespace\', \'my.dep2.namespace\'\\n]).service(\'MyService\', [\\n  \'dep1\', \'dep2\',\\n  function(dep1, dep2) {\\n\\n  var _myPrivateVar = \'secret\';\\n  var myServiceInstance = {\\n    getPrivate: function() {\\n      return _myPrivateVar;\\n    },\\n    myPublicVar: \'hello!\',\\n    myPublicFunction: function() {}\\n  };\\n\\n  return myServiceInstance;\\n}]);\\n\\n\\nCette syntaxe a plusieurs buts avoués :\\n\\n * cloisonner le code en espace de noms (pour éviter les collisions),\\n * rendre le code maintenable et réutilisable (grâce à la modularisation), \\n * rendre le code testable (grâce à l\'injection de dépendances).\\n\\nCependant, elle est assez verbeuse. Voici son équivalent sous la forme de module\\nCommonJS (pour NodeJS) :\\n\\n\\nvar dep1 = require(\'dep1\');\\nvar dep2 = require(\'./lib/dep2\');\\n\\nvar _myPrivateVar = \'secret\';\\nvar myServiceInstance = {\\n  getPrivate: function() {\\n    return _myPrivateVar;\\n  },\\n  myPublicVar: \'hello!\',\\n  myPublicFunction: function() {}\\n};\\n\\nmodule.exports = myServiceInstance;\\n\\n\\nAu delà du fait qu\'elle est plus concise, cette syntaxe est aussi plus claire.\\nIl n\'est pas nécessaire de connaître le fonctionnement de JavaScript pour\\ncomprendre ce que fait ce code.\\n\\nTout d\'abord, il requiert les dépendances dont il a besoin. Ici, les espaces de\\nnom sont gérés d\'une façon beaucoup plus intéressante. L\'unicité de la\\ndépendance dep2 est assurée par un dépôt centralisé de modules (ici NPM). Celle\\nde la dépendance dep1 quand à elle est assurée par l\'arborescence du projet.\\n\\nEnfin, il exporte le contenu de myServiceInstance comme étant le \\"contenu\\" du\\nmodule. Bref, le fonctionnement classique des modules CommonJS, jusqu\'ici, rien\\nd\'insurmontable.\\n\\nSERVICE CONFIGURÉ\\nMais un habitué d\'Angular me rétorquera que les services Angular sont\\nconfigurables, grâce aux service providers. Ce qui en Angular, donne ça :\\n\\n\\n// Définition\\nangular.module(\'my.app.namespace\', [\\n  \'my.dep1.namespace\', \'my.dep2.namespace\'\\n]).provider(\'MyServiceProvider\', [\\n  \'dep1\', \'dep2\',\\n  function(dep1, dep2) {\\n\\n  var _myPrivateVar = \'secret\';\\n\\n  this.setSecret = function(newSecret) {\\n    _myPrivateVar = newSecret;\\n  };\\n\\n  this.$get(function() {\\n\\n    var myServiceInstance = {\\n      getPrivate: function() {\\n        return _myPrivateVar;\\n      },\\n      myPublicVar: \'hello!\',\\n      myPublicFunction: function() {}\\n    };\\n\\n    return myServiceInstance;\\n  });\\n}]);\\n\\n// Configuration\\nmyApp.config(\'MyServiceProvider\', [\\n  \'MyServiceProvider\',\\n  function(MyServiceProvider) {\\n    MyServiceProvider.setSecret(\'kikoo\');\\n}]);\\n\\n// Utilisation par injection dans un controller/module...\\n// à la manière de dep1\\n\\n\\n\\nÇa en fait du code. Je vous laisse voir ça en détail sur la documentation\\nd\'AngularJS [https://docs.angularjs.org/guide/providers], retenez simplement que\\nl\'idée ici est de configurer un singleton global. Chose que l\'on réalise comme\\nceci avec CommonJS :\\n\\n\\n// Définition getmyservice.js\\nfunction getMyServiceInstance(mySecret) {\\n  var dep1 = require(\'dep1\');\\n  var dep2 = require(\'./lib/dep2\');\\n\\n  var _myPrivateVar = \'secret\';\\n  var myServiceInstance = {\\n    getPrivate: function() {\\n      return _myPrivateVar;\\n    },\\n    myPublicVar: \'hello!\',\\n    myPublicFunction: function() {}\\n  };\\n\\n  return myServiceInstance;\\n};\\n\\nmodule.exports = getMyServiceInstance;\\n\\n// Configuration myservice.js\\nmodule.exports = require(\'./getmyservice\')(\'secretdefense\')\\n\\n// Utilisation par require dans n\'importe quel module\\nvar myService = require(\'./myservice\');\\n\\nmyService.myPublicFunction(\'hello!\');\\n\\n\\nL\'idée est de créer un module qui soit simplement le retour d\'appel d\'une\\nfonction permettant de récupérer une version configurée d\'un service donné. De\\ncette façon on peut accèder à celui-ci n\'importe où dans le programme par simple\\nappel à require.\\n\\nCependant, j\'ai rarement recours à cette technique car c\'est une sorte de\\nsingleton et à vrai dire, ce design pattern est de plus en plus décrié car il\\nfait rarement sens.\\n\\nSERVICE \\"WRAPPÉS\\"\\nAngular a eu la merveilleuse idée de fournir des services pour les variables\\nglobales exposées par le système. Ainsi, pour accéder à window, il suffit\\nd\'injecter le service $window, idem pour window.location avec $location etc.\\n\\nPour le code en lui-même ceci n\'a pas d\'intérêt, mais pour les tests unitaires\\ncette façon de procéder est essentielle. Ainsi, on peut injecter un service\\ndédié au test mockant les fonctionnalités exposées par le service requis.\\n\\nAvec require(), appliquer ce principe est également possible. Il suffit de créer\\nle module correspondant. Ici, nous créeons un \\"service\\" fournissant un accès au\\nconstructeur Date:\\n\\n\\n// contenu de date.js\\nmodule.exports = Date;\\n\\n// utilisation\\nvar Date = require(\'./date\');\\n\\n\\nIl ne nous reste plus qu\'à mocker les dates lors de nos tests unitaires.\\n\\nLES TESTS\\nJustement, parlons-en ! Angular a la réputation de faciliter les tests\\nunitaires, en est-il de même pour les modules CommonJS.\\n\\nLa réponse est non. Ce n\'est pas automatique. Là où Angular vous mâche le\\ntravail en vous imposant un cadre, avec CommonJS, nous l\'avons vu, créer des\\nmodules testables est une démarche consciente et non-obligatoire.\\n\\nCela reste cependant possible grâce au module mockery. Par exemple, pour tester\\nun module qui reposerait sur notre service wrappant Date, il suffirait de\\nprocéder ainsi :\\n\\n\\nvar mockery = require(\'mockery\');\\nvar DateMock = require(\'date-mock\');\\n\\ndescribe(\'myModule\', function() {\\n\\n  beforeEach(function() {\\n    mockery.enable({ useCleanCache: true });\\n    mockery.registerMock(\'./date\', DateMock);\\n    DateMock.curTime = 360000;\\n  });\\n\\n  afterEach(function() {\\n    mockery.deregisterMock(\'./date\');\\n    mockery.disable();\\n  });\\n\\n  it(\'should do stuff\', function() {\\n    // Code des tests\\n  });\\n\\n});\\n\\n\\nIci mockery substitue à la volée le module ./date par du code qui vous permet de\\nsimuler le temps. Il est également possible de simplement remplacer la variable\\nglobale Date, mais ceci peut avoir d\'autres effets par ailleurs, je vous\\nconseille donc plutôt cette technique.\\n\\nQUEL RAPPORT AVEC LE FRONT ?\\nÀ ce stade il se peut que vous vous demandiez comment utiliser des modules\\nCommonJS pour vos projets front. Autrefois on utilisait RequireJS\\n[utiliser_requirejs.html] et on créait ses modules AMD [module_javascript.html] \\navec ses ptites mimines (ne faîtes plus ça !).\\n\\nAvec browserify [browserify.html] ou webpack vous pourrez gérer finement la\\nfaçon dont vous consommerez vos modules CommonJS sans efforts ;).\\n\\nES6\\nLes modules ES6 vont bientôt être la règle et vous vous posez sûrement la\\nquestion. Comment appliquer les préceptes ci-dessus à vos modules ES6 ?\\n\\nÀ ce jour, vos modules ES6 sont en fait transformés en modules CommonJS et\\nutilisés via require(). La question ne se pose donc pas vraiment.\\n\\nÀ l\'avenir, en revanche, nos amis d\'ECMA ont tout prévu, notamment une façon\\nd\'overrider le comportement du loader de module à la volée. Ça devrait se\\nconcrétiser via System [http://babeljs.io/docs/learn-es6/#module-loaders]. Cette\\nfonctionnalité devrait pouvoir être utilisée comme mockery pour modifier le\\ncomportement de l\'injection de dépendance d\'ES6.\\n\\nVoilà, j\'espère que ce petit article vous a plût. Pour les angulariens, sachez\\nque Angular 2.0 va supprimer son ancien système de module ce qui n\'est pas une\\nmauvaise nouvelles ;).\\n\\nPetite mise à jour pour ajouter qu\'il est possible d\'appliquer ceci aux\\napplications Angular également pour simplifier les tests et se passer de Karma, \\nvoici un exemple\\n[https://github.com/SimpliField/angular-sf-load/blob/7ae1467c4ce914fdc8fed940d96a39c6b4cce026/src/load.service.specs.js#L8-L18]\\n. \\n\\nLe système d\'injection d\'Angular reste sympa malgré tout pour gérer les états\\nglobaux, mais son principal soucis est d\'être trop intrusif sur la façon de\\ngérer le code à mon goût. C\'est pourquoi j\'ai créé Knifecycle\\n[https://github.com/nfroidure/knifecycle] qui reprend ses concepts mais de façon\\nmoins intrusive et surtout applicable pour le backend (prise en compte du\\ngraceful shutdown). \\n\\nEnfin, le système d\'injection d\'Angular2 a tiré pas mal de leçons des erreurs\\nprécédentes et même si je ne suis pas fan d\'Angular2 je reconnais qu\'il y a eu\\ndes progrès de ce côté. \\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc66:JSON.parse('{"path":"contents/pages/fr/blog/firefox_mobile_console.html","title":"Firefox Mobile Android : Accéder aux consoles d\'erreur Javascript / stderr","description":"Pour développer pour Firefox Mobile, mieux vaut avoir la console d\'erreur à portée de main. Voici la méthode.","shortTitle":"Console d\'erreur Fennec","shortDesc":"Voir la façon d\'y accèder","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nFIREFOX MOBILE ANDROID : ACCÉDER AUX CONSOLES D\'ERREUR JAVASCRIPT / STDERR\\nPour développer pour Firefox Mobile, mieux vaut avoir la console d\'erreur à\\nportée de main. Voici la méthode.\\n\\nCONSOLE D\'ERREUR\\nLa console d\'erreur générale de Firefox (sorte de flux stderr) est disponible en\\nbranchant votre téléphone via USB sur votre PC. Ensuite, il suffit d\'utiliser\\nl\'outil adb en ligne de commande disponible dans le SDK d\'Android. Cet outil\\npermet de récupérer toutes les informations renvoyées par votre appareil\\nAndroid. Un petit grep permet de nous intéresser plus particulièrement à Gecko.\\n\\nnfroidure@production:~/ adb logcat | grep Gecko\\n\\nPour les amateurs d\'interfaces graphiques, le dossier tools contient un script\\nnommé ddms qui permet d\'avoir une interface plus intuitive et de filtrer les\\nmessages qui sont assez nombreux.\\n\\nCONSOLE JAVASCRIPT\\nIl semble qu\'il ne soit pas possible de récupérer les messages d\'erreur\\nJavascript avec adb comme ça l\'est pour le navigateur par défaut des appareils\\nAndroid. La seule option que j\'ai trouvé est de se rendre sur le panneau de\\ngestion des préférences about:config et de chercher l\'option \\ndevtools.errorconsole.enabled et de la passer à true. Profitez-en pour passer la\\nconsole en mode strict, ça mange pas de pain (javascript.options.strict).\\n\\nUne fois cette petite manipulation faîte, il suffit de se rendre sur la console\\nen utilisant la sidebar de droite (celle où il y a les boutons suivant,\\nprécédent et l\'étoile des marques pages), de taper la roue crantée et dans le\\nnouvel écran, choisir l\'onglet avec l\'insecte bien connu des développeurs.\\n\\nDommage que ce soit la seule façon d\'accéder aux erreurs car ça fait pas mal de\\nmanips pour voir les erreurs alors qu\'avec adb, il suffit d\'avoir une console\\nouverte. Vous avez d\'autres astuces pour débugger sous Firefox Mobile / Fennec ?\\n\\nPetite mise à jour : il semble que les erreurs javascript soient bien reportées\\navec la nouvelle version de Firefox Mobile (14).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc67:JSON.parse('{"path":"contents/pages/articles-firefox_mobile_console.html","title":"Firefox Mobile Android : Accéder aux consoles d\'erreur Javascript / stderr","description":"Pour développer pour Firefox Mobile, mieux vaut avoir la console d\'erreur à portée de main. Voici la méthode.","shortTitle":"Console d\'erreur Fennec","shortDesc":"Voir la façon d\'y accèder","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nFIREFOX MOBILE ANDROID : ACCÉDER AUX CONSOLES D\'ERREUR JAVASCRIPT / STDERR\\nPour développer pour Firefox Mobile, mieux vaut avoir la console d\'erreur à\\nportée de main. Voici la méthode.\\n\\nCONSOLE D\'ERREUR\\nLa console d\'erreur générale de Firefox (sorte de flux stderr) est disponible en\\nbranchant votre téléphone via USB sur votre PC. Ensuite, il suffit d\'utiliser\\nl\'outil adb en ligne de commande disponible dans le SDK d\'Android. Cet outil\\npermet de récupérer toutes les informations renvoyées par votre appareil\\nAndroid. Un petit grep permet de nous intéresser plus particulièrement à Gecko.\\n\\nnfroidure@production:~/ adb logcat | grep Gecko\\n\\nPour les amateurs d\'interfaces graphiques, le dossier tools contient un script\\nnommé ddms qui permet d\'avoir une interface plus intuitive et de filtrer les\\nmessages qui sont assez nombreux.\\n\\nCONSOLE JAVASCRIPT\\nIl semble qu\'il ne soit pas possible de récupérer les messages d\'erreur\\nJavascript avec adb comme ça l\'est pour le navigateur par défaut des appareils\\nAndroid. La seule option que j\'ai trouvé est de se rendre sur le panneau de\\ngestion des préférences about:config et de chercher l\'option \\ndevtools.errorconsole.enabled et de la passer à true. Profitez-en pour passer la\\nconsole en mode strict, ça mange pas de pain (javascript.options.strict).\\n\\nUne fois cette petite manipulation faîte, il suffit de se rendre sur la console\\nen utilisant la sidebar de droite (celle où il y a les boutons suivant,\\nprécédent et l\'étoile des marques pages), de taper la roue crantée et dans le\\nnouvel écran, choisir l\'onglet avec l\'insecte bien connu des développeurs.\\n\\nDommage que ce soit la seule façon d\'accéder aux erreurs car ça fait pas mal de\\nmanips pour voir les erreurs alors qu\'avec adb, il suffit d\'avoir une console\\nouverte. Vous avez d\'autres astuces pour débugger sous Firefox Mobile / Fennec ?\\n\\nPetite mise à jour : il semble que les erreurs javascript soient bien reportées\\navec la nouvelle version de Firefox Mobile (14).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc68:JSON.parse('{"path":"contents/pages/fr/blog/generation_api_cliente.html","title":"Génération automatique de clients d\'APIs","description":"Personne de devrait perdre du temps à écrire du code \\nqui peut être généré automatiquement. Voici comment je m\'y prends \\npour les clients d\'APIs.","shortTitle":"Génération d\'API clientes","shortDesc":"Apprennez comment générer vos clients d\'API","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGÉNÉRATION AUTOMATIQUE DE CLIENTS D\'APIS\\nTL; DR:\\nGénérez du code simple et allez à l\'essentiel.\\n\\nIl paraîtrait fou de nos jours avec des outils Comme HapiJS, ExpressJS ou même\\navec un routeur perso comme le mien de créer des APIs non-documentées.\\nL\'initiative OpenAPI [https://www.openapis.org/] (anciennement la spécification\\nSwagger) nous offre aujourd\'hui une façon formelle et largement supportée de\\ndéfinir des APIs.\\n\\nLes développeurs frontends ont besoin de prendre connaissance des APIs qu\'ils\\nutilisent mais nous devons aller encore plus loin en leur proposant une API\\ncliente générée automatiquement.\\n\\nLe projet Swagger Codegen [https://swagger.io/tools/swagger-codegen/], propose\\nde nombreux générateurs prêts à l\'usage pour de nombreux environnements et\\nlanguages cibles.\\n\\nJ\'ai dû récemment générer un client d\'API pour AngularJS (qu\'au passage je\\ntrouve meilleur qu\'Angular2).\\n\\nMalheureusement, les générateurs existant ne me satisfaisaient pas. Ils\\nproposent une interface en POO (patron de conception inadapté selon moi) et\\najoutent un niveau de complexité inutile en éclatant l\'API dans plusieurs\\nfichiers.\\n\\nIls créent des fonctions ayant un paramètre pour chaque valeur déclarée dans le\\nswagger créant des signatures de fonctions à rallonge dont il faut se souvenir\\nl\'ordre des arguments. Comme notre application utilisait ES6, je voulais\\négalement tirer parti du destructuring pour avoir un interface plus moderne pour\\nnotre client d\'API.\\n\\nJ\'ai donc décidé de créer notre propre générateur en prenant en compte ce qui\\nfait d\'un client d\'API un bon client :\\n\\nDU CODE GÉNÉRÉ NE DOIT PAS ÊTRE MODIFIÉ À LA MAIN\\nEn effet, si l\'on peut générer du code une fois, on peut le faire mille fois.\\nPour moi, générer le client d\'API devrait être fait à chaque build.\\n\\nDans mon cas, j\'ai créé rapidement un chargeur Webpack pour les fichiers \\n*.swagger.json me permettant d\'importer notre client d\'API dans Angular grâce à\\nune simple ligne de code comme suit require(\'./api.swagger.json\');.\\n\\nL\'avantage de ne pas avoir à changer le code à la main est que de ce fait on se\\nfiche totalement que le code ne soit pas élégant ou que les fichiers générés\\nsoient trop long ou mal indentés. Seule la surface de l\'API a une vraie\\nimportance.\\n\\nL\'API DOIT MASQUER LES DÉTAILS HTTP\\nRien n\'est pire que d\'avoir des dizaines de milliers de lignes de code qui\\ndépendent de vos appels HTTP. D\'expérience, maintenir une API REST\\nretro-compatible est un véritable cauchemar pour la productivité, surtout quand\\non part d\'un existant peu structuré.\\n\\nSauf si votre API est publique, vous pouvez vous épargner de nombreuses peines\\nen masquant les détails de vos appels HTTP et en les englobant dans une simple\\nfonction dont l\'unique argument est un objet dont les propriétés sont les\\nparamètres acceptés par votre appel HTTP.\\n\\nPar exemple, dans mon client HTTP, GET /articles/{articleId}?token=xdevient\\nsimplement getArticle({ articleId, token }). Si demain, le paramètre token \\ndevait être ajouté dans le header Authorization au lieu des paramètres de\\nrequête, ce serait transparent pour les frontends.\\n\\nIls n\'auraient qu\'à réimporter le fichier OpenAPI et à simplement builder le\\nprojet de nouveau sans rien avoir à faire de plus.\\n\\nJe suis, en quelques sorte, pompier de vielle application Express depuis\\nquelques années. Je transforme des APIs réalisées à la hâte en API RESTful\\nprogressivement en essayant de ne rien casser. Bénéficier de ce type de\\nflexibilité est du pain béni. Par exemple, transformer les appels POST en appels\\nPUT avec un UUID généré via le client devient simple comme bonjour.\\n\\nUNE SURFACE D\'API MINIMALISTE\\nJe n\'ai fait qu\'exporter un service Angular nommé API. C\'est un simple objet\\nayant une méthode pour chaque id d\'opération du fichier Swagger. Pas de POO, pas\\nde gestion de l\'authentification, simplement un gros mapping des appels HTTP\\npossibles en fonctions.\\n\\nUtiliser ce client dans l\'application hôte revient donc à créer un autre service\\npar dessus ajoutant la logique d\'accés spécifique à l\'application.\\n\\nEFFETS DE BORD SYMPAS\\nDepuis que je fais du développement d\'API Rest dirigé par la documentation\\n(depuis assez longtemps\\n[https://github.com/Rest4/Rest4-php/blob/master/php/class.RestAuthDigestDriver.php#L7-L30] \\nen fait), je prend soin de forcer un order précis pour les paramètres de requête\\n(query parameters).\\n\\nCeci me permet d\'optimiser le cache en assurant l\'unicité des URLs pour une même\\nressource. Cependant, cela peut ennuyer les développeurs fronts qui n\'aiment pas\\nles APIs strictes. Pour plus d\'info, vous pouvez jeter un oeil à strict-qs\\n[https://github.com/nfroidure/strict-qs].\\n\\nL\'avantage de générer soit même le code du client d\'API front est que l\'on peut\\ngérer tout cela de manière transparente pour les développeurs front qui ne sont\\nplus confrontés à des erreurs dues à leur utilisation de l\'API Rest.\\n\\nET SI ON S\'AMUSAIT UN PEU?\\nBon, générer du code c\'est plus cool que de l\'écrire. Mais pourquoi ne pas\\nsaisir l\'occasion pour recycler une vielle idée ? Pourquoi ne pas créer un\\nnouveau genre de template ? J\'ai déjà exploré la puissance des arbres AST avec \\njsub [./lets_subset_javascript.html] mais je voulais expérimenter un autre\\nconcept basé là dessus que j\'ai nommé template AST.\\n\\nL\'idée est de créer des templates pour générer des fichiers JavaScript mais qui\\nsont eux-même des fichiers JavaScript valides. De cette façon, les outils de\\nlinting, d\'analyse de syntaxe et tous ceux qui sont habituellement compatibles\\navec du bon vieux JS fonctionnent.\\n\\nJ\'ai donc créé astpl [https://github.com/nfroidure/asttpl]et je vous laisse voir\\nle template de notre client d\'API AngularJS avec cet exemple\\n[https://github.com/nfroidure/asttpl/blob/master/src/realworld.mocha.js#L82-L131]\\n.\\n\\nEt voilà ! J\'espère que je vous ai donné envie de générer vos client d\'APIs et\\nque mes quelques conseils vous éviteront certains déboires ;).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc69:JSON.parse('{"path":"contents/pages/fr/blog/gerer_monnaies_logiciel.html","title":"Gérer les monnaies dans un logiciel (CRM,ERP)","description":"Je suis actuellement entrain de développer une solution CRM basée sur mon framework Rest PHP. Il faut donc gérer les différentes monnaies.","shortTitle":"Les monnaies","shortDesc":"En savoir plus sur la gestion des monnaies","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGÉRER LES MONNAIES DANS UN LOGICIEL (CRM,ERP)\\nJe suis actuellement entrain de développer une solution CRM basée sur mon\\nframework Rest PHP. Il faut donc gérer les différentes monnaies.\\n\\nIl existe un standard (ISO 4217) qui répertorie toutes les monnaies utilisées\\ndans le monde. Ce standard assigne 6 éléments à chaque monnaie :\\n\\n * une valeur numérique (978 pour l\'Euro),\\n * un code composé de trois lettres (EUR pour l\'euro, USD pour le dollar\\n   américain), \\n * le nom de la monnaie,\\n * le symbole de cette monnaie (€, $ ..),\\n * les pays dans lesquels ces monnaies sont utilisées,\\n * le nombre de décimales après la virgule.\\n\\nBref, tout ce qu\'il faut pour se constituer une petite table des monnaies\\nsimplement. Ca tombe bien, l\'organisme chargé de la maintenance de cette liste\\npropose une liste de ces dernières\\n[https://www.currency-iso.org/en/home/tables/table-a1.html]au format XML ou\\nExcel que vous n\'aurez aucun mal à importer. Il y a aussi la possibilité de\\ns\'inscrire à une liste permettant de recevoir un e-mail à chaque mise à jour de\\nla liste afin de garder votre base de donnée propre.\\n\\nL\'intérêt d\'utiliser ce standard réside dans le fait que la plupart des acteurs\\nl\'utilisent aussi. Par exemple, la majeure partie des solutions de paiement que\\nj\'ai eu à intégrer utilisent ces codes.\\n\\nVoici le format de table que j\'ai adopté :\\n\\n\\n CREATE TABLE IF NOT EXISTS `currencies` (   `id` smallint(5) unsigned NOT NULL,   `label` varchar(150) NOT NULL,   `code` varchar(3) NOT NULL,   `symbol` varchar(3) DEFAULT NULL,   `fraction` tinyint(2) NOT NULL,   PRIMARY KEY (`id`),   UNIQUE KEY `code` (`code`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\\n\\nJ\'ai utilisé la valeur numérique associée à chaque monnaie comme index primaire.\\nVous remarquerez que je n\'ai pas associé les pays dans la même table car ces\\nderniers peuvent être plusieurs pour la même monnaie. J\'ai donc créé une table\\njointure avec ma table répertoriant les pays.\\n\\nEn ce qui concerne la localisation, certains pays indiquent un montant comme\\nceci : USD 35 (Etats-Unis) et d\'autres comme cela (30 EUR), j\'ai donc ajouté une\\nfonction de formatage selon la locale utilisée.\\n\\nEt vous comment gérez vous les monnaies ?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc70:JSON.parse('{"path":"contents/pages/articles-gerer_monnaies_logiciel.html","title":"Gérer les monnaies dans un logiciel (CRM,ERP)","description":"Je suis actuellement entrain de développer une solution CRM basée sur mon framework Rest PHP. Il faut donc gérer les différentes monnaies.","shortTitle":"Les monnaies","shortDesc":"En savoir plus sur la gestion des monnaies","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGÉRER LES MONNAIES DANS UN LOGICIEL (CRM,ERP)\\nJe suis actuellement entrain de développer une solution CRM basée sur mon\\nframework Rest PHP. Il faut donc gérer les différentes monnaies.\\n\\nIl existe un standard (ISO 4217) qui répertorie toutes les monnaies utilisées\\ndans le monde. Ce standard assigne 6 éléments à chaque monnaie :\\n\\n * une valeur numérique (978 pour l\'Euro),\\n * un code composé de trois lettres (EUR pour l\'euro, USD pour le dollar\\n   américain), \\n * le nom de la monnaie,\\n * le symbole de cette monnaie (€, $ ..),\\n * les pays dans lesquels ces monnaies sont utilisées,\\n * le nombre de décimales après la virgule.\\n\\nBref, tout ce qu\'il faut pour se constituer une petite table des monnaies\\nsimplement. Ca tombe bien, l\'organisme chargé de la maintenance de cette liste\\npropose une liste de ces dernières\\n[https://www.currency-iso.org/en/home/tables/table-a1.html]au format XML ou\\nExcel que vous n\'aurez aucun mal à importer. Il y a aussi la possibilité de\\ns\'inscrire à une liste permettant de recevoir un e-mail à chaque mise à jour de\\nla liste afin de garder votre base de donnée propre.\\n\\nL\'intérêt d\'utiliser ce standard réside dans le fait que la plupart des acteurs\\nl\'utilisent aussi. Par exemple, la majeure partie des solutions de paiement que\\nj\'ai eu à intégrer utilisent ces codes.\\n\\nVoici le format de table que j\'ai adopté :\\n\\n\\n CREATE TABLE IF NOT EXISTS `currencies` (   `id` smallint(5) unsigned NOT NULL,   `label` varchar(150) NOT NULL,   `code` varchar(3) NOT NULL,   `symbol` varchar(3) DEFAULT NULL,   `fraction` tinyint(2) NOT NULL,   PRIMARY KEY (`id`),   UNIQUE KEY `code` (`code`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\\n\\nJ\'ai utilisé la valeur numérique associée à chaque monnaie comme index primaire.\\nVous remarquerez que je n\'ai pas associé les pays dans la même table car ces\\nderniers peuvent être plusieurs pour la même monnaie. J\'ai donc créé une table\\njointure avec ma table répertoriant les pays.\\n\\nEn ce qui concerne la localisation, certains pays indiquent un montant comme\\nceci : USD 35 (Etats-Unis) et d\'autres comme cela (30 EUR), j\'ai donc ajouté une\\nfonction de formatage selon la locale utilisée.\\n\\nEt vous comment gérez vous les monnaies ?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc71:JSON.parse('{"path":"contents/pages/fr/blog/gestion_collisions_html5_canvas.html","title":"Gestion des collisions 2D dans un jeu HTML5 / Javascript","description":"L\'expérience du développement de Tank Arena m\'amène à faire un petit point sur la gestion des collisions dans un jeu 2D écrit avec Javascript/HTML5.","shortTitle":"Collisions 2D","shortDesc":"En savoir plus sur la gestion des collisions dans un jeu HTML5","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGESTION DES COLLISIONS 2D DANS UN JEU HTML5 / JAVASCRIPT\\n⚠ Attention: Cet article est ancien et son contenu n\'est plus d\'actualité. Une\\napproche orientée aspect serait préférée à une approche objet de nos jours. Ce\\ntravail m\'a permis d\'affiner mes compétences mais il ne peut servir de base pour\\nimplémenter un jeu, autant repartir de zéro.\\n\\nL\'expérience du développement de Tank Arena m\'amène à faire un petit point sur\\nla gestion des collisions dans un jeu 2D écrit avec Javascript/HTML5.\\n\\nCe n\'est pas un sujet trivial et les choix sont très larges. En effet, on peut\\ns\'appuyer sur un moteur physique 2D existant, plus complet mais plus lourd, ou\\ngérer uniquement les collisions dont on a besoin. Pour ma part, j\'ai décidé de\\nm\'appuyer sur les nombreuses ressources existantes écrites en C pour implémenter\\nma propre gestion des collisions adaptée aux jeux HTML5 et dans le cas présent\\nau jeu Tank Arena que je développe durant mon temps libre et dont je vous ai\\ndéjà parlé [tank_arena_html5.html].\\n\\nDIAGRAMME DES CLASSES UML\\n Diagramme des classes UML [/images/classesdiagram-breakit2.png]\\n[https://raw.githubusercontent.com/nfroidure/TankArena/master/uml/ClassesDiagram.png]\\n\\nTous les fichiers Javascript implémentant ce modèle se trouvent sur le dépôt\\nGitHub de Tank Arena [https://github.com/nfroidure/TankArena]sous licence\\nGNU/GPL donc n\'hésitez pas à ajouter votre touche et à me proposer des commits !\\nJ\'ai mis la première version [http://tank.elitwork.com]en ligne pour éclairer la\\nsuite de cette article.\\n\\nDES SPRITES SUR UNE CARTE\\nComme vous pouvez le voir, l\'idée est d\'avoir un plan (classe Map) dans lequel\\nse trouvent des sprites (classe Sprite). La classe Sprite sert de base à tous\\nles types d\'objets évoluant sur la carte du jeu. La classe Movable la surcharge\\npour ajouter les propriétés d\'un objet se mouvant sur la carte et la classe \\nControlable indique des objets qui peuvent être contrôlés par un humain ou par\\nl\'ordinateur.\\n\\nPar exemple, les bâtiments (classe Building), sont fixes et sont donc\\ndirectement dérivés de la classe Sprite. Au contraire, les tirs (classe Shot)\\nhéritent de la classe Movable et les tanks de la classe Controlable. Pour\\najouter de nouveaux types d\'objet, il suffit d\'étendre une de ces trois classes\\nabstraites et de surcharger les méthodes dont on veut corriger le comportement.\\n\\nEnfin, la carte étant à plusieurs niveaux (avion, hélicopters), chaque sprite à\\nune propriété z indiquant à quel niveau ce dernier se trouve.\\n\\nDES SPRITES COMPOSÉS DE FORMES GÉOMÉTRIQUES\\nAfin de pouvoir calculer les collisions entre chaque objet de la carte chaque\\nsprite peut être composé de formes indiquant ses parties solides (Shapes). Pour\\nl\'instant, je n\'ai implémenté que les formes de type cercle, rectangle (non\\norientable) et point. Cela est suffisant pour obtenir un résultat satisfaisant.\\nJ\'aurai cependant pu également implémenter un rectangle orientable, et une\\ndroite, mais je les ai substitué respectivement par un cercle et par un\\nrectangle d\'un pixel de largeur.\\n\\nL\'avantage de pouvoir associer plusieurs formes positionnables à un même sprite\\nest qu\'il est possible de composer des formes plus complexes afin d\'obtenir des\\ncollisions plus fidèles à la réalité.\\n\\nDESSINONS ET ANIMONS NOS SPRITES SUR LA CARTE\\nChaque sprite possède une méthode draw permettant de dessiner ce dernier à la\\nposition à laquelle il se trouve sur l\'élément <canvas> correspondant à sa\\nposition z. De même, les sprites qui peuvent bouger possèdent une méthode move \\nqui leur permet de se déplacer en fonction de leur vitesse, leur accélération\\netc... La boucle principale de jeu appelle successivement les méthodes move et \\ndraw de chaque objet de la scène et c\'est ainsi que les sprites commencent à\\ns\'animer.\\n\\nCALCUL DES COLLISIONS\\nNous y sommes, c\'est le moment de calculer les collisions de chaque objet avec\\nceux qui l\'entourent. Le principe du calcul des collisions est simple : il\\ns\'agit d\'enregistrer la position actuelle du sprite, de la faire bouger avec la\\nfonction move, puis de calculer si ce dernier entre en collision ou non dans la\\nnouvelle position calculée. Si non, on finalise le mouvement par le dessin du\\nsprite, si oui, on replace l\'objet entré en collision dans sa position\\nantérieure avant de le redessiner.\\n\\nC\'est grâce à la méthode hits de la classe Sprite que nous y parvenons. Cette\\ndernière récupère les sprites proches de notre sprite (grâce à un tableau mis à\\njour à chaque cycle du jeu avec la méthode declarePositions), et confronte\\nchaque forme dont ils sont composés pour déduire s\'il y a bien collision ou non.\\n\\nDans notre implémentation, lorsque le tank entre en collision, on simule le\\nrecul de ce dernier en changeant sa direction et son accélération. Lorsqu\'un tir\\natteint une cible, on inflige des dégâts à cette dernière en appelant la méthode \\ndamage. Tous ces comportements sont implémentés en surchargeant la méthode de\\ncalcul des collisions.\\n\\nVous pouvez voir tous les détails du calcul des collisions entre chaque forme\\ndans la classe Shape et ses sous-classes qui déterminent quels types de formes\\nsont comparées et déduisent ainsi quelle fonction utiliser pour calculer leur\\ncollision.\\n\\nLe calcul des collisions est largement inspiré de ces deux tutoriels : Théorie\\ndes collisions\\n[http://www.siteduzero.com/tutoriel-3-254492-theorie-des-collisions.html]et \\nConception d\'un moteur physique\\n[http://gregorycorgie.developpez.com/tutoriels/physic/].\\n\\nCONCLUSION\\nLa gestion des collisions en Javascript est assez rapide, j\'ai essayé cet\\nébauche de Tank Arena sur mobile et franchement, je ne constate pas de\\nralentissements. La prochaine étape sera certainement d\'isoler le moteur\\nphysique du moteur de rendu graphique afin que l\'on puisse calculer les\\nmouvements physiques sur un serveur NodeJS et ainsi permettre un mode\\nmultijoueur qui sera bien plus fun que le mode contre l\'ordinateur qui est un\\npeu simple à mon goût.\\n\\nSinon, pour parler du projet Tank Arena en général, il me reste à trouver le\\nmeilleur moyen de tester la réussite d\'une mission et à trouver un format le\\nplus léger possible pour la création de cartes. J\'ai créé un éditeur de sprites,\\nil me reste à créer un éditeur pour associer les formes à ces derniers puis un\\noutil pour \\"compiler\\" les cartes.\\n\\nBref, de quoi s\'amuser un peu en attendant le prochain article !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc72:JSON.parse('{"path":"contents/pages/articles-gestion_collisions_html5_canvas.html","title":"Gestion des collisions 2D dans un jeu HTML5 / Javascript","description":"L\'expérience du développement de Tank Arena m\'amène à faire un petit point sur la gestion des collisions dans un jeu 2D écrit avec Javascript/HTML5.","shortTitle":"Collisions 2D","shortDesc":"En savoir plus sur la gestion des collisions dans un jeu HTML5","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGESTION DES COLLISIONS 2D DANS UN JEU HTML5 / JAVASCRIPT\\n⚠ Attention: Cet article est ancien et son contenu n\'est plus d\'actualité. Une\\napproche orientée aspect serait préférée à une approche objet de nos jours. Ce\\ntravail m\'a permis d\'affiner mes compétences mais il ne peut servir de base pour\\nimplémenter un jeu, autant repartir de zéro.\\n\\nL\'expérience du développement de Tank Arena m\'amène à faire un petit point sur\\nla gestion des collisions dans un jeu 2D écrit avec Javascript/HTML5.\\n\\nCe n\'est pas un sujet trivial et les choix sont très larges. En effet, on peut\\ns\'appuyer sur un moteur physique 2D existant, plus complet mais plus lourd, ou\\ngérer uniquement les collisions dont on a besoin. Pour ma part, j\'ai décidé de\\nm\'appuyer sur les nombreuses ressources existantes écrites en C pour implémenter\\nma propre gestion des collisions adaptée aux jeux HTML5 et dans le cas présent\\nau jeu Tank Arena que je développe durant mon temps libre et dont je vous ai\\ndéjà parlé [tank_arena_html5.html].\\n\\nDIAGRAMME DES CLASSES UML\\n Diagramme des classes UML [/images/classesdiagram-breakit2.png]\\n[https://raw.githubusercontent.com/nfroidure/TankArena/master/uml/ClassesDiagram.png]\\n\\nTous les fichiers Javascript implémentant ce modèle se trouvent sur le dépôt\\nGitHub de Tank Arena [https://github.com/nfroidure/TankArena]sous licence\\nGNU/GPL donc n\'hésitez pas à ajouter votre touche et à me proposer des commits !\\nJ\'ai mis la première version [http://tank.elitwork.com]en ligne pour éclairer la\\nsuite de cette article.\\n\\nDES SPRITES SUR UNE CARTE\\nComme vous pouvez le voir, l\'idée est d\'avoir un plan (classe Map) dans lequel\\nse trouvent des sprites (classe Sprite). La classe Sprite sert de base à tous\\nles types d\'objets évoluant sur la carte du jeu. La classe Movable la surcharge\\npour ajouter les propriétés d\'un objet se mouvant sur la carte et la classe \\nControlable indique des objets qui peuvent être contrôlés par un humain ou par\\nl\'ordinateur.\\n\\nPar exemple, les bâtiments (classe Building), sont fixes et sont donc\\ndirectement dérivés de la classe Sprite. Au contraire, les tirs (classe Shot)\\nhéritent de la classe Movable et les tanks de la classe Controlable. Pour\\najouter de nouveaux types d\'objet, il suffit d\'étendre une de ces trois classes\\nabstraites et de surcharger les méthodes dont on veut corriger le comportement.\\n\\nEnfin, la carte étant à plusieurs niveaux (avion, hélicopters), chaque sprite à\\nune propriété z indiquant à quel niveau ce dernier se trouve.\\n\\nDES SPRITES COMPOSÉS DE FORMES GÉOMÉTRIQUES\\nAfin de pouvoir calculer les collisions entre chaque objet de la carte chaque\\nsprite peut être composé de formes indiquant ses parties solides (Shapes). Pour\\nl\'instant, je n\'ai implémenté que les formes de type cercle, rectangle (non\\norientable) et point. Cela est suffisant pour obtenir un résultat satisfaisant.\\nJ\'aurai cependant pu également implémenter un rectangle orientable, et une\\ndroite, mais je les ai substitué respectivement par un cercle et par un\\nrectangle d\'un pixel de largeur.\\n\\nL\'avantage de pouvoir associer plusieurs formes positionnables à un même sprite\\nest qu\'il est possible de composer des formes plus complexes afin d\'obtenir des\\ncollisions plus fidèles à la réalité.\\n\\nDESSINONS ET ANIMONS NOS SPRITES SUR LA CARTE\\nChaque sprite possède une méthode draw permettant de dessiner ce dernier à la\\nposition à laquelle il se trouve sur l\'élément <canvas> correspondant à sa\\nposition z. De même, les sprites qui peuvent bouger possèdent une méthode move \\nqui leur permet de se déplacer en fonction de leur vitesse, leur accélération\\netc... La boucle principale de jeu appelle successivement les méthodes move et \\ndraw de chaque objet de la scène et c\'est ainsi que les sprites commencent à\\ns\'animer.\\n\\nCALCUL DES COLLISIONS\\nNous y sommes, c\'est le moment de calculer les collisions de chaque objet avec\\nceux qui l\'entourent. Le principe du calcul des collisions est simple : il\\ns\'agit d\'enregistrer la position actuelle du sprite, de la faire bouger avec la\\nfonction move, puis de calculer si ce dernier entre en collision ou non dans la\\nnouvelle position calculée. Si non, on finalise le mouvement par le dessin du\\nsprite, si oui, on replace l\'objet entré en collision dans sa position\\nantérieure avant de le redessiner.\\n\\nC\'est grâce à la méthode hits de la classe Sprite que nous y parvenons. Cette\\ndernière récupère les sprites proches de notre sprite (grâce à un tableau mis à\\njour à chaque cycle du jeu avec la méthode declarePositions), et confronte\\nchaque forme dont ils sont composés pour déduire s\'il y a bien collision ou non.\\n\\nDans notre implémentation, lorsque le tank entre en collision, on simule le\\nrecul de ce dernier en changeant sa direction et son accélération. Lorsqu\'un tir\\natteint une cible, on inflige des dégâts à cette dernière en appelant la méthode \\ndamage. Tous ces comportements sont implémentés en surchargeant la méthode de\\ncalcul des collisions.\\n\\nVous pouvez voir tous les détails du calcul des collisions entre chaque forme\\ndans la classe Shape et ses sous-classes qui déterminent quels types de formes\\nsont comparées et déduisent ainsi quelle fonction utiliser pour calculer leur\\ncollision.\\n\\nLe calcul des collisions est largement inspiré de ces deux tutoriels : Théorie\\ndes collisions\\n[http://www.siteduzero.com/tutoriel-3-254492-theorie-des-collisions.html]et \\nConception d\'un moteur physique\\n[http://gregorycorgie.developpez.com/tutoriels/physic/].\\n\\nCONCLUSION\\nLa gestion des collisions en Javascript est assez rapide, j\'ai essayé cet\\nébauche de Tank Arena sur mobile et franchement, je ne constate pas de\\nralentissements. La prochaine étape sera certainement d\'isoler le moteur\\nphysique du moteur de rendu graphique afin que l\'on puisse calculer les\\nmouvements physiques sur un serveur NodeJS et ainsi permettre un mode\\nmultijoueur qui sera bien plus fun que le mode contre l\'ordinateur qui est un\\npeu simple à mon goût.\\n\\nSinon, pour parler du projet Tank Arena en général, il me reste à trouver le\\nmeilleur moyen de tester la réussite d\'une mission et à trouver un format le\\nplus léger possible pour la création de cartes. J\'ai créé un éditeur de sprites,\\nil me reste à créer un éditeur pour associer les formes à ces derniers puis un\\noutil pour \\"compiler\\" les cartes.\\n\\nBref, de quoi s\'amuser un peu en attendant le prochain article !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc73:JSON.parse('{"path":"contents/pages/fr/blog/gruntjs_font_icons.html","title":"Générer des fontes d\'icônes avec GruntJS","description":"Cette semaine, je me suis penché sur la génération de fontes automatiquement avec GruntJS. Compte rendu de mes découvertes et des développements qui les ont suivies.","shortTitle":"GruntJS : Génération de fontes","shortDesc":"En savoir plus sur la génération de fontes avec GruntJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGÉNÉRER DES FONTES D\'ICÔNES AVEC GRUNTJS\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Les fontes d\'icônes ne sont plus utilisées et les fichiers SVG sont\\ndirectement intégré dans les sites web. Vous avez été nombreux à utiliser mes\\nplugins et ce fût une belle aventure, cependant, il faut vivre avec son temps\\n;).\\n\\nCette semaine, je me suis penché sur la génération de fontes automatiquement\\navec GruntJS. Compte rendu de mes découvertes et des développements qui les ont\\nsuivies.\\n\\nIl existe de nombreux sites web qui permettent de générer des fontes\\npersonnalisées à partir de sets d\'icônes prédéfinis ou directement à partir\\nd\'icônes uploadées en SVG (Fontello [http://fontello.com/], Icomoon\\n[http://icomoon.io/]...). Malheureusement, ces derniers ne facilitent pas la\\nmaintenance de votre site car à chaque ajout d\'icônes, vous êtes contraint de\\nvous reconnecter sur leur site et de renvoyer toutes vos icônes. De plus, les\\nnuméros de caractères Unicode utilisés changent d\'une génération de fonte à\\nl\'autre. Bref, j\'ai décider de me tourner vers GruntJS pour automatiser ces\\ntâches.\\n\\nPRÉSENTATION DE GRUNTJS\\nGruntJS est un outil d\'automatisation de tâches basé sur NodeJS et son\\ngestionnaire de modules NPM. J\'ai tout d\'abord été un peu sceptique puisque\\nj\'utilise d\'ordinaire le Shell pour automatiser les actions répétitives. Mais\\nface à l\'enthousiasme de l\'écosystème JS et grâce à la présentation d\'0gust1\\n[https://github.com/0gust1]au dernier ChtiJS, j\'ai décidé de m\'y pencher avec\\npour point d\'entrée la génération des fontes.\\n\\nFinalement, l\'atout de GruntJS n\'est pas vraiment dans la façon d\'automatiser\\nles tâches proposées, mais plutôt dans son intégration avec NodeJS et NPM. En\\neffet, ce que l\'on peut faire avec Grunt, on peut bien le faire avec le Shell,\\nmais généralement on ne le fait pas.\\n\\nSimplement parce qu\'avec GruntJS c\'est facile d\'automatiser ses tâches à partir\\ndu moment où l\'on utilise déjà NodeJS au quotidien. C\'est d\'autant plus facile\\nqu\'un grand nombre de tâches Grunt existent déjà pour toute sorte de besoin.\\nBref, si ce n\'est pas déjà fait, je vous conseille d\'installer Grunt ;).\\n\\nINSTALLATION\\nInstaller GruntJS est très simple, il suffit d\'installer ce dernier via NPM et\\nde manière globale obligatoirement (sinon, cela n\'a pas grand intérêt) :\\n\\nnpm install grunt-cli\\n\\nMISE EN PLACE DE GRUNT POUR UN PROJET\\nTout projet, et en particulier, tout projet basé sur NodeJS devrait utiliser\\nGrunt pour automatiser les tâches répétitives auxquelles nous sommes\\nrégulièrement confrontés que ce soit au niveau du back-end que du front-end.\\n\\nDans le cas d\'un projet NodeJS, il suffit de créer un fichier Gruntfile.js à la\\nracine du projet qui contiendra toutes les tâches dont vous pourriez avoir\\nbesoin. Nous y reviendrons par la suite. Vous devrez aussi ajouter Grunt aux\\ndépendances de développement de votre projet NodeJS.\\n\\nRECHERCHE DE PLUGINS\\nUne fois votre projet enrichi d\'un fichier de manifeste GruntJS, il va falloir\\ntrouver les plugins existants qui vous permettront d\'automatiser vos tâches\\nrépétitives. Par exemple, pour trouver des plugins de gestion des fontes, j\'ai\\ntapé la commande suivante :\\n\\nnpm search \\"gruntplugin font\\"\\n\\nUne fois que vous avez trouvé des tâches qui vous seront utiles, il vous suffit\\nde les installer comme suit :\\n\\nnpm install grunt-svgicons2svgfont grunt-svg2ttf grunt-ttf2eot grunt-ttf2woff\\n\\nCette commande permet, par exemple, d\'installer toutes les tâches nécessaires\\npour créer des fontes custom.\\n\\nGÉNÉRATION DE FONTES\\nSuite à ce petit intermède, revenons au sujet principal de cette article. Lors\\nde mes recherches, j\'ai trouvé trois systèmes de génération de fontes. L\'un\\nd\'entre eux reposait sur des services web tiers pour générer les fontes, je l\'ai\\ndonc écarté de facto. Un autre, bien que fonctionnel, se basait sur FontForge et\\nne proposait pas de garder les mêmes codes de caractères à chaque génération de\\nfonte (une limitation due à Font Forge me semble-t-il.\\n\\nLe dernier, grunt-fontfactory était uniquement basé sur des modules NodeJS, mais\\nétait bogué (les icônes étaient affiché à l\'envers). Par contre, bien que la\\nconservation des codes de caractères unicode n\'était pas implémentée, à la\\nlecture du code, il semblait possible de le faire. J\'ai donc retroussé mes\\nmanches et proposé des modifications\\n[https://github.com/cameronhunter/grunt-fontfactory/pull/2]. Malheureusement, le\\ndéveloppeur n\'est pas très réactif, j\'ai donc décidé de créer ma propre\\nlibrairie de génération de fontes, plus souple.\\n\\nSVGICONS2SVGFONT\\nsvgicons2svgfonts permet de parcourir des icônes SVG et de les inclure dans une\\nfonte SVG. Pour créer cette librairie, j\'ai dû créer une librairie de plus bas\\nniveau permettant de manipuler le contenu des chemins SVG (attribut d des\\nbalises path de SVG), je l\'ai nommée SVGPathData\\n[https://github.com/nfroidure/SVGPathData].\\n\\nPuis, comme les outils de conversion de fontes sont assez rudimentaires, j\'ai dû\\nécrire du code qui convertisse chaque forme SVG (balises circle, rect, polygon \\netc.) en chemins SVG. Il reste encore un peu de travail pour prendre en compte\\ntous les cas possibles, mais la plupart des icônes SVG sont dors et déjà\\nsupportées. Je vous encourage d\'ailleurs à me signaler tout problème rencontré\\n[https://github.com/nfroidure/svgicons2svgfont/issues].\\n\\nLa fonctionnalité la plus importante à mes yeux a bien-sûr été implémentée. Il\\nsuffit de préfixer les fichiers SVG des icônes avec le code du caractère\\nsouhaité pour que ce dernier conserve toujours le même code pour toutes les\\ngénérations de fontes ultérieures.\\n\\nRETOUR À NOS TÂCHES GRUNT\\nJ\'ai donc créé le plug-in grunt-svgicons2svgfont\\n[https://github.com/nfroidure/grunt-svgicons2svgfont]et les plug-ins de\\ntransformation basés sur les librairies NodeJS de Fontello pour obtenir les\\nfontes dans tous les formats nécessaires au bon fonctionnement de nos icônes sur\\ntous les navigateurs (grunt-svg2ttf [https://github.com/nfroidure/grunt-svg2ttf]\\n, grunt-ttf2eot [https://github.com/nfroidure/grunt-ttf2eot], grunt-ttf2woff\\n[https://github.com/nfroidure/grunt-ttf2woff]).\\n\\nIl ne nous reste plus qu\'à générer nos fontes grâce au fichier manifeste GruntJS\\nsuivant que j\'ai commenté pour le rendre plus explicite :\\n\\n\\n\\nBref, nous avons une tâche Grunt qui régénère nos fontes de manière prédictible\\nà chaque changement, ajout ou suppression d\'icône dans le dossier de notre\\nchoix. Libre à vous d\'adapter cette tâche comme bon vous semble à votre\\nworkflow, en espérant que ces plugins vous seront autant utiles qu\'à moi ;).\\n\\nAjout du 7 décembre 2013 : Finalement je suis allé encore plus loin en créant un \\ngénérateur de fontes Front-End [http://nfroidure.github.io/svgiconfont/]qui\\nservira à illustrer le partage de code entre le serveur et le navigateur en\\nJavaScript avec NodeJS et Browserify au prochain ChtiJS qui aura lieu le 19\\ndécembre.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc74:JSON.parse('{"path":"contents/pages/articles-gruntjs_font_icons.html","title":"Générer des fontes d\'icônes avec GruntJS","description":"Cette semaine, je me suis penché sur la génération de fontes automatiquement avec GruntJS. Compte rendu de mes découvertes et des développements qui les ont suivies.","shortTitle":"GruntJS : Génération de fontes","shortDesc":"En savoir plus sur la génération de fontes avec GruntJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGÉNÉRER DES FONTES D\'ICÔNES AVEC GRUNTJS\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Les fontes d\'icônes ne sont plus utilisées et les fichiers SVG sont\\ndirectement intégré dans les sites web. Vous avez été nombreux à utiliser mes\\nplugins et ce fût une belle aventure, cependant, il faut vivre avec son temps\\n;).\\n\\nCette semaine, je me suis penché sur la génération de fontes automatiquement\\navec GruntJS. Compte rendu de mes découvertes et des développements qui les ont\\nsuivies.\\n\\nIl existe de nombreux sites web qui permettent de générer des fontes\\npersonnalisées à partir de sets d\'icônes prédéfinis ou directement à partir\\nd\'icônes uploadées en SVG (Fontello [http://fontello.com/], Icomoon\\n[http://icomoon.io/]...). Malheureusement, ces derniers ne facilitent pas la\\nmaintenance de votre site car à chaque ajout d\'icônes, vous êtes contraint de\\nvous reconnecter sur leur site et de renvoyer toutes vos icônes. De plus, les\\nnuméros de caractères Unicode utilisés changent d\'une génération de fonte à\\nl\'autre. Bref, j\'ai décider de me tourner vers GruntJS pour automatiser ces\\ntâches.\\n\\nPRÉSENTATION DE GRUNTJS\\nGruntJS est un outil d\'automatisation de tâches basé sur NodeJS et son\\ngestionnaire de modules NPM. J\'ai tout d\'abord été un peu sceptique puisque\\nj\'utilise d\'ordinaire le Shell pour automatiser les actions répétitives. Mais\\nface à l\'enthousiasme de l\'écosystème JS et grâce à la présentation d\'0gust1\\n[https://github.com/0gust1]au dernier ChtiJS, j\'ai décidé de m\'y pencher avec\\npour point d\'entrée la génération des fontes.\\n\\nFinalement, l\'atout de GruntJS n\'est pas vraiment dans la façon d\'automatiser\\nles tâches proposées, mais plutôt dans son intégration avec NodeJS et NPM. En\\neffet, ce que l\'on peut faire avec Grunt, on peut bien le faire avec le Shell,\\nmais généralement on ne le fait pas.\\n\\nSimplement parce qu\'avec GruntJS c\'est facile d\'automatiser ses tâches à partir\\ndu moment où l\'on utilise déjà NodeJS au quotidien. C\'est d\'autant plus facile\\nqu\'un grand nombre de tâches Grunt existent déjà pour toute sorte de besoin.\\nBref, si ce n\'est pas déjà fait, je vous conseille d\'installer Grunt ;).\\n\\nINSTALLATION\\nInstaller GruntJS est très simple, il suffit d\'installer ce dernier via NPM et\\nde manière globale obligatoirement (sinon, cela n\'a pas grand intérêt) :\\n\\nnpm install grunt-cli\\n\\nMISE EN PLACE DE GRUNT POUR UN PROJET\\nTout projet, et en particulier, tout projet basé sur NodeJS devrait utiliser\\nGrunt pour automatiser les tâches répétitives auxquelles nous sommes\\nrégulièrement confrontés que ce soit au niveau du back-end que du front-end.\\n\\nDans le cas d\'un projet NodeJS, il suffit de créer un fichier Gruntfile.js à la\\nracine du projet qui contiendra toutes les tâches dont vous pourriez avoir\\nbesoin. Nous y reviendrons par la suite. Vous devrez aussi ajouter Grunt aux\\ndépendances de développement de votre projet NodeJS.\\n\\nRECHERCHE DE PLUGINS\\nUne fois votre projet enrichi d\'un fichier de manifeste GruntJS, il va falloir\\ntrouver les plugins existants qui vous permettront d\'automatiser vos tâches\\nrépétitives. Par exemple, pour trouver des plugins de gestion des fontes, j\'ai\\ntapé la commande suivante :\\n\\nnpm search \\"gruntplugin font\\"\\n\\nUne fois que vous avez trouvé des tâches qui vous seront utiles, il vous suffit\\nde les installer comme suit :\\n\\nnpm install grunt-svgicons2svgfont grunt-svg2ttf grunt-ttf2eot grunt-ttf2woff\\n\\nCette commande permet, par exemple, d\'installer toutes les tâches nécessaires\\npour créer des fontes custom.\\n\\nGÉNÉRATION DE FONTES\\nSuite à ce petit intermède, revenons au sujet principal de cette article. Lors\\nde mes recherches, j\'ai trouvé trois systèmes de génération de fontes. L\'un\\nd\'entre eux reposait sur des services web tiers pour générer les fontes, je l\'ai\\ndonc écarté de facto. Un autre, bien que fonctionnel, se basait sur FontForge et\\nne proposait pas de garder les mêmes codes de caractères à chaque génération de\\nfonte (une limitation due à Font Forge me semble-t-il.\\n\\nLe dernier, grunt-fontfactory était uniquement basé sur des modules NodeJS, mais\\nétait bogué (les icônes étaient affiché à l\'envers). Par contre, bien que la\\nconservation des codes de caractères unicode n\'était pas implémentée, à la\\nlecture du code, il semblait possible de le faire. J\'ai donc retroussé mes\\nmanches et proposé des modifications\\n[https://github.com/cameronhunter/grunt-fontfactory/pull/2]. Malheureusement, le\\ndéveloppeur n\'est pas très réactif, j\'ai donc décidé de créer ma propre\\nlibrairie de génération de fontes, plus souple.\\n\\nSVGICONS2SVGFONT\\nsvgicons2svgfonts permet de parcourir des icônes SVG et de les inclure dans une\\nfonte SVG. Pour créer cette librairie, j\'ai dû créer une librairie de plus bas\\nniveau permettant de manipuler le contenu des chemins SVG (attribut d des\\nbalises path de SVG), je l\'ai nommée SVGPathData\\n[https://github.com/nfroidure/SVGPathData].\\n\\nPuis, comme les outils de conversion de fontes sont assez rudimentaires, j\'ai dû\\nécrire du code qui convertisse chaque forme SVG (balises circle, rect, polygon \\netc.) en chemins SVG. Il reste encore un peu de travail pour prendre en compte\\ntous les cas possibles, mais la plupart des icônes SVG sont dors et déjà\\nsupportées. Je vous encourage d\'ailleurs à me signaler tout problème rencontré\\n[https://github.com/nfroidure/svgicons2svgfont/issues].\\n\\nLa fonctionnalité la plus importante à mes yeux a bien-sûr été implémentée. Il\\nsuffit de préfixer les fichiers SVG des icônes avec le code du caractère\\nsouhaité pour que ce dernier conserve toujours le même code pour toutes les\\ngénérations de fontes ultérieures.\\n\\nRETOUR À NOS TÂCHES GRUNT\\nJ\'ai donc créé le plug-in grunt-svgicons2svgfont\\n[https://github.com/nfroidure/grunt-svgicons2svgfont]et les plug-ins de\\ntransformation basés sur les librairies NodeJS de Fontello pour obtenir les\\nfontes dans tous les formats nécessaires au bon fonctionnement de nos icônes sur\\ntous les navigateurs (grunt-svg2ttf [https://github.com/nfroidure/grunt-svg2ttf]\\n, grunt-ttf2eot [https://github.com/nfroidure/grunt-ttf2eot], grunt-ttf2woff\\n[https://github.com/nfroidure/grunt-ttf2woff]).\\n\\nIl ne nous reste plus qu\'à générer nos fontes grâce au fichier manifeste GruntJS\\nsuivant que j\'ai commenté pour le rendre plus explicite :\\n\\n\\n\\nBref, nous avons une tâche Grunt qui régénère nos fontes de manière prédictible\\nà chaque changement, ajout ou suppression d\'icône dans le dossier de notre\\nchoix. Libre à vous d\'adapter cette tâche comme bon vous semble à votre\\nworkflow, en espérant que ces plugins vous seront autant utiles qu\'à moi ;).\\n\\nAjout du 7 décembre 2013 : Finalement je suis allé encore plus loin en créant un \\ngénérateur de fontes Front-End [http://nfroidure.github.io/svgiconfont/]qui\\nservira à illustrer le partage de code entre le serveur et le navigateur en\\nJavaScript avec NodeJS et Browserify au prochain ChtiJS qui aura lieu le 19\\ndécembre.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc75:JSON.parse('{"path":"contents/pages/fr/blog/gulp_vs_grunt.html","title":"Gulp remplacera-t-il Grunt ?","description":"Gulp est un concurrent de Grunt qui se targue d\'exploiter les capacités des streams NodeJS. Petit passage en revue de cet outil.","shortTitle":"Gulp vs Grunt","shortDesc":"En savoir plus sur Gulp","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGULP REMPLACERA-T-IL GRUNT ?\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Gulp a bien remplacé Grunt, mais ce fût de courte durée ;).\\n\\nGulp est un concurrent de Grunt qui se targue d\'exploiter les capacités des\\nstreams NodeJS. Petit passage en revue de cet outil.\\n\\nSi vous ne l\'avez pas déjà lu, mon billet sur la génération de fontes vous\\npermettra de découvrir GruntJS [gruntjs_font_icons.html]. Pour résumer, GruntJS\\npermet d\'exécuter des tâches diverses et variées grâce à un nombre\\nimpressionnant de plug-ins publiés sur NPM. Bref, un outil intéressant mais\\nsouffrant de quelques lacunes.\\n\\nLES DÉFAUTS DE GRUNTJS\\nL\'un des reproches les plus importants que j\'ai à formuler vis à vis de GruntJS\\nest très certainement l\'absence d\'exploitation des streams. En effet, chaque\\ntâche Grunt lis un fichier et écrit dans le suivant de telle manière que les\\nperformances en sont affectées, surtout pour les développeurs qui ont des\\ndisques durs classiques.\\n\\nOn se retrouve avec des tâches \\"silos\\" qui ne peuvent s\'exécuter que l\'une après\\nl\'autre alors que bien souvent, il serait techniquement possible d\'effectuer ces\\ntâches de manière plus fluide grâce aux streams.\\n\\nUne conséquence de ce problème est qu\'il y a énormément de répétitions dans la\\nconfiguration des tâches car on doit les configurer indépendamment plutôt que de\\nmontrer leurs relations.\\n\\nL\'APPORT DE GULP\\n Gulp [http://gulpjs.com/]propose une toute autre vision en considérant une\\ntâche comme une sorte de middleware, à l\'image de ce que l\'on trouve pour\\nConnect/Express. La description d\'une tâche Gulp devient donc une succession\\nd\'opérations spécifiques sur des fichiers. Gulp tire donc parti des streams\\nNodeJS à plusieurs niveaux.\\n\\nTout d\'abord, au niveau des tâches, Gulp utilise les streams de NodeJS et plus\\nparticulièrement leur mode \\"objet\\" (objectMode\\n[http://nodejs.org/api/stream.html#stream_object_mode]). La physionomie d\'une\\ntâche Gulp est la suivante :\\n\\n 1. création d\'un flux d\'objets représentants les fichiers obtenus à partir d\'un\\n    pattern donné (via la méthode gulp.src qui utilise glob-stream\\n    [https://github.com/gulpjs/gulp/blob/96d6596bf313489afa2a967487f74c5f8d2e7f06/lib/createInputStream/index.js#L2]\\n    ) ; \\n 2. branchement de ce flux sur une ou plusieurs tâches (via la méthode pipe) ; \\n 3. enregistrement du résultat dans un ou plusieurs fichiers (respectivement via\\n    la méthode gulp.dest ou via une tâche). \\n\\nChaque objet est donc passé de manière asynchrone dans l\'enchaînement de tâches\\nconfiguré pour l\'occasion. Chaque objet File [https://npmjs.org/package/vinyl]\\npassé contient les informations suivantes :\\n\\n * le chemin du fichier ;\\n * le répertoire courant ;\\n * le contenu du fichier ;\\n\\nLe contenu du fichier peut être nul, être un Buffer\\n[http://nodejs.org/api/buffer.html]de son contenu ou un ReadableStream\\n[http://nodejs.org/api/stream.html#stream_class_stream_readable]. Par défaut,\\nGulp fournit un Buffer, c\'est peut-être d\'ailleurs son plus grand défaut.\\n\\nEn effet, les streams sont dans la plupart des cas une suite de Buffers.\\nUtiliser les streams permet donc également d\'utiliser un unique buffer au sein\\nd\'un stream. Bref, utiliser les streams uniquement aurait pu simplifier la\\ncréation de plug-ins.\\n\\nSi on résume, Gulp propose d\'agir sur des flux de fichiers qui peuvent eux-même\\nproposer leur contenu sous forme de Buffer ou un flux de leur propres données.\\n\\nÀ QUOI ÇA SERT ?\\nLes streams permettent d\'optimiser l\'utilisation des ressources systèmes et\\noffrent une plus grande souplesse. Imaginons la combinaison de tâches suivante à\\nappliquer à des fichiers :\\n\\n * remplacer \\"foo\\" par \\"bar\\" ;\\n * ajouter une phrase au début du fichier ;\\n * tronquer le fichier à partir de 10000 lignes.\\n\\nLe design de GruntJS fera qu\'il y aura autant de fichiers écrits sur le disque\\nqu\'il y a d\'étapes. De plus, chacune de ces étapes se fera sur la totalité des\\nfichiers séquentiellement.\\n\\nAvec Gulp, chaque fichier sera passé aux tâches de manière totalement\\nasynchrone. Théoriquement, il est possible que le premier fichier envoyé aux\\ntâches soit écrit sur disque alors que tous les fichiers concernés par le\\npattern fournit à gulp.src n\'ont pas encore été totalement listés.\\n\\nMais en plus de cela pour les fichiers eux-mêmes, en utilisant le mode stream,\\nune tâche effectuée en dernier (ici, tronquer le fichier à 10000 lignes) peut\\ninfluer sur les tâches précédentes.\\n\\nEn effet, puisque l\'on ne souhaite prendre en compte que les 10000 premières\\nlignes, pourquoi remplacer \\"foo\\" par \\"bar\\" dans les lignes suivantes ? En\\nfermant le flux après les 10000 lignes, l\'évènement sera transmis aux flux\\nparents. Théoriquement, il est possible que la lecture des données s\'interrompe\\négalement permettant ainsi d\'économiser des ressources.\\n\\nPuisque les streams sont asynchrones, on peut utiliser les différentes\\nressources système simultanément. Écrire sur le disque ne demande pas beaucoup\\nde CPU ou de mémoire, a contrario, opérer sur les données ne sollicite pas les\\ndisques (sauf cas extrême). Avec GruntJS, ces étapes ont lieu séquentiellement\\nce qui crée des goulets d\'étranglement. Avec Gulp ces dernières sont\\nsimultanées, menant à une utilisation plus intelligente du système.\\n\\nET DANS LA PRATIQUE ?\\nDans la pratique, ce n\'est pas si simple. Tout d\'abord car les créateurs de Gulp\\nindiquent clairement que les créateurs de plug-in peuvent ne supporter que les\\nbuffers ce qui réduit quelque peu l\'intérêt de Gulp. Les streams au niveau des\\nfichiers sont cachés derrière une option que peu activeront.\\n\\nUn autre problème qui est posé par cette façon de faire est comment opérer sur\\nles fichiers en cours de traitement (renommer/supprimer) sans être sûr qu\'il n\'y\\naura pas d\'effets de bord imprédictibles. Le fonctionnement de Grunt est sur ce\\npoint plus \\"rassurant\\".\\n\\nÉtant donné le manque de maturité de Gulp et le succès de GruntJS, je pense\\nrester sur GruntJS au moins dans un premier temps. Ce qui ne m\'empêchera pas de\\nrester attentif. Je suis entrain de porter grunt-svgicons2svgfont\\n[https://github.com/nfroidure/grunt-svgicons2svgfont]vers Gulp, je vous en donne\\ndes nouvelles bientôt ;).\\n\\nEdit du 16/12/2013 : Finalement, le fait de supporter les buffers est moins\\nhandicapant que prévu puisque le module vinyl permet de faire abstraction du\\nfait que le fichier soit un Buffer ou un Stream. A un petit détail près. En\\neffet, piper un stream est susceptible d\'émettre un évènement end pour indiquer\\nla fin du stream, mais piper un buffer n\'émet pas cet évènement. Je viens de\\nsoumettre une pull request à ce sujet\\n[https://github.com/wearefractal/vinyl/pull/2], j\'espère qu\'elle sera rapidement\\nacceptée.\\n\\nMalheureusement, cette abstraction ne semble exister qu\'en entrée mais pas en\\nsortie. Je continue d\'investiguer en même temps que j\'adapte mon plug-in Grunt.\\nJe rééditerai sûrement ce billet avec d\'autres informations pratiques.\\n\\nEnfin, je ne l\'ai pas précisé, mais les plug-in Gulp sont plus facile à tester\\npuisqu\'il ne nécessitent pas d\'écrire sur un fichier ce qui est le cas avec\\nGruntJS.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc76:JSON.parse('{"path":"contents/pages/articles-gulp_vs_grunt.html","title":"Gulp remplacera-t-il Grunt ?","description":"Gulp est un concurrent de Grunt qui se targue d\'exploiter les capacités des streams NodeJS. Petit passage en revue de cet outil.","shortTitle":"Gulp vs Grunt","shortDesc":"En savoir plus sur Gulp","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGULP REMPLACERA-T-IL GRUNT ?\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Gulp a bien remplacé Grunt, mais ce fût de courte durée ;).\\n\\nGulp est un concurrent de Grunt qui se targue d\'exploiter les capacités des\\nstreams NodeJS. Petit passage en revue de cet outil.\\n\\nSi vous ne l\'avez pas déjà lu, mon billet sur la génération de fontes vous\\npermettra de découvrir GruntJS [gruntjs_font_icons.html]. Pour résumer, GruntJS\\npermet d\'exécuter des tâches diverses et variées grâce à un nombre\\nimpressionnant de plug-ins publiés sur NPM. Bref, un outil intéressant mais\\nsouffrant de quelques lacunes.\\n\\nLES DÉFAUTS DE GRUNTJS\\nL\'un des reproches les plus importants que j\'ai à formuler vis à vis de GruntJS\\nest très certainement l\'absence d\'exploitation des streams. En effet, chaque\\ntâche Grunt lis un fichier et écrit dans le suivant de telle manière que les\\nperformances en sont affectées, surtout pour les développeurs qui ont des\\ndisques durs classiques.\\n\\nOn se retrouve avec des tâches \\"silos\\" qui ne peuvent s\'exécuter que l\'une après\\nl\'autre alors que bien souvent, il serait techniquement possible d\'effectuer ces\\ntâches de manière plus fluide grâce aux streams.\\n\\nUne conséquence de ce problème est qu\'il y a énormément de répétitions dans la\\nconfiguration des tâches car on doit les configurer indépendamment plutôt que de\\nmontrer leurs relations.\\n\\nL\'APPORT DE GULP\\n Gulp [http://gulpjs.com/]propose une toute autre vision en considérant une\\ntâche comme une sorte de middleware, à l\'image de ce que l\'on trouve pour\\nConnect/Express. La description d\'une tâche Gulp devient donc une succession\\nd\'opérations spécifiques sur des fichiers. Gulp tire donc parti des streams\\nNodeJS à plusieurs niveaux.\\n\\nTout d\'abord, au niveau des tâches, Gulp utilise les streams de NodeJS et plus\\nparticulièrement leur mode \\"objet\\" (objectMode\\n[http://nodejs.org/api/stream.html#stream_object_mode]). La physionomie d\'une\\ntâche Gulp est la suivante :\\n\\n 1. création d\'un flux d\'objets représentants les fichiers obtenus à partir d\'un\\n    pattern donné (via la méthode gulp.src qui utilise glob-stream\\n    [https://github.com/gulpjs/gulp/blob/96d6596bf313489afa2a967487f74c5f8d2e7f06/lib/createInputStream/index.js#L2]\\n    ) ; \\n 2. branchement de ce flux sur une ou plusieurs tâches (via la méthode pipe) ; \\n 3. enregistrement du résultat dans un ou plusieurs fichiers (respectivement via\\n    la méthode gulp.dest ou via une tâche). \\n\\nChaque objet est donc passé de manière asynchrone dans l\'enchaînement de tâches\\nconfiguré pour l\'occasion. Chaque objet File [https://npmjs.org/package/vinyl]\\npassé contient les informations suivantes :\\n\\n * le chemin du fichier ;\\n * le répertoire courant ;\\n * le contenu du fichier ;\\n\\nLe contenu du fichier peut être nul, être un Buffer\\n[http://nodejs.org/api/buffer.html]de son contenu ou un ReadableStream\\n[http://nodejs.org/api/stream.html#stream_class_stream_readable]. Par défaut,\\nGulp fournit un Buffer, c\'est peut-être d\'ailleurs son plus grand défaut.\\n\\nEn effet, les streams sont dans la plupart des cas une suite de Buffers.\\nUtiliser les streams permet donc également d\'utiliser un unique buffer au sein\\nd\'un stream. Bref, utiliser les streams uniquement aurait pu simplifier la\\ncréation de plug-ins.\\n\\nSi on résume, Gulp propose d\'agir sur des flux de fichiers qui peuvent eux-même\\nproposer leur contenu sous forme de Buffer ou un flux de leur propres données.\\n\\nÀ QUOI ÇA SERT ?\\nLes streams permettent d\'optimiser l\'utilisation des ressources systèmes et\\noffrent une plus grande souplesse. Imaginons la combinaison de tâches suivante à\\nappliquer à des fichiers :\\n\\n * remplacer \\"foo\\" par \\"bar\\" ;\\n * ajouter une phrase au début du fichier ;\\n * tronquer le fichier à partir de 10000 lignes.\\n\\nLe design de GruntJS fera qu\'il y aura autant de fichiers écrits sur le disque\\nqu\'il y a d\'étapes. De plus, chacune de ces étapes se fera sur la totalité des\\nfichiers séquentiellement.\\n\\nAvec Gulp, chaque fichier sera passé aux tâches de manière totalement\\nasynchrone. Théoriquement, il est possible que le premier fichier envoyé aux\\ntâches soit écrit sur disque alors que tous les fichiers concernés par le\\npattern fournit à gulp.src n\'ont pas encore été totalement listés.\\n\\nMais en plus de cela pour les fichiers eux-mêmes, en utilisant le mode stream,\\nune tâche effectuée en dernier (ici, tronquer le fichier à 10000 lignes) peut\\ninfluer sur les tâches précédentes.\\n\\nEn effet, puisque l\'on ne souhaite prendre en compte que les 10000 premières\\nlignes, pourquoi remplacer \\"foo\\" par \\"bar\\" dans les lignes suivantes ? En\\nfermant le flux après les 10000 lignes, l\'évènement sera transmis aux flux\\nparents. Théoriquement, il est possible que la lecture des données s\'interrompe\\négalement permettant ainsi d\'économiser des ressources.\\n\\nPuisque les streams sont asynchrones, on peut utiliser les différentes\\nressources système simultanément. Écrire sur le disque ne demande pas beaucoup\\nde CPU ou de mémoire, a contrario, opérer sur les données ne sollicite pas les\\ndisques (sauf cas extrême). Avec GruntJS, ces étapes ont lieu séquentiellement\\nce qui crée des goulets d\'étranglement. Avec Gulp ces dernières sont\\nsimultanées, menant à une utilisation plus intelligente du système.\\n\\nET DANS LA PRATIQUE ?\\nDans la pratique, ce n\'est pas si simple. Tout d\'abord car les créateurs de Gulp\\nindiquent clairement que les créateurs de plug-in peuvent ne supporter que les\\nbuffers ce qui réduit quelque peu l\'intérêt de Gulp. Les streams au niveau des\\nfichiers sont cachés derrière une option que peu activeront.\\n\\nUn autre problème qui est posé par cette façon de faire est comment opérer sur\\nles fichiers en cours de traitement (renommer/supprimer) sans être sûr qu\'il n\'y\\naura pas d\'effets de bord imprédictibles. Le fonctionnement de Grunt est sur ce\\npoint plus \\"rassurant\\".\\n\\nÉtant donné le manque de maturité de Gulp et le succès de GruntJS, je pense\\nrester sur GruntJS au moins dans un premier temps. Ce qui ne m\'empêchera pas de\\nrester attentif. Je suis entrain de porter grunt-svgicons2svgfont\\n[https://github.com/nfroidure/grunt-svgicons2svgfont]vers Gulp, je vous en donne\\ndes nouvelles bientôt ;).\\n\\nEdit du 16/12/2013 : Finalement, le fait de supporter les buffers est moins\\nhandicapant que prévu puisque le module vinyl permet de faire abstraction du\\nfait que le fichier soit un Buffer ou un Stream. A un petit détail près. En\\neffet, piper un stream est susceptible d\'émettre un évènement end pour indiquer\\nla fin du stream, mais piper un buffer n\'émet pas cet évènement. Je viens de\\nsoumettre une pull request à ce sujet\\n[https://github.com/wearefractal/vinyl/pull/2], j\'espère qu\'elle sera rapidement\\nacceptée.\\n\\nMalheureusement, cette abstraction ne semble exister qu\'en entrée mais pas en\\nsortie. Je continue d\'investiguer en même temps que j\'adapte mon plug-in Grunt.\\nJe rééditerai sûrement ce billet avec d\'autres informations pratiques.\\n\\nEnfin, je ne l\'ai pas précisé, mais les plug-in Gulp sont plus facile à tester\\npuisqu\'il ne nécessitent pas d\'écrire sur un fichier ce qui est le cas avec\\nGruntJS.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc77:JSON.parse('{"path":"contents/pages/fr/blog/hackaton_microsoft.html","title":"Hackaton Windows Phone 8","description":"Depuis que Windows 8 gère le HTML5, je me suis un peu plus rapproché de la communauté Microsoft grâce notamment à un développeurs de mon coin. Petit retour sur ce hackaton.","shortTitle":"Hackaton WP8","shortDesc":"En savoir plus sur ce hackaton","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nHACKATON WINDOWS PHONE 8\\nDepuis que Windows 8 gère le HTML5, je me suis un peu plus rapproché de la\\ncommunauté Microsoft grâce notamment à un développeurs de mon coin. Petit retour\\nsur ce hackaton.\\n\\nComme d\'habitude, dans ce genre de rencontres, nous avons été très bien\\naccueillis par les équipes de Microsoft et du Moulin de la Forge qui ont été au\\npetit soin avec nous durant ces trois jours de code intensif.\\n\\nL\'idée de ce hackaton était de créer des applications fonctionnant sur Window\\nPhone. J\'ai rejoint Tossnet pour la création d\'un petit jeu dont nous avions eu\\nl\'idée quelques temps avant et que nous avons appelé Sumuraÿ.\\n\\nL\'AMBIANCE\\nJ\'ai vraiment apprécié l\'ambiance de ce hackaton et l\'état d\'esprit des\\ndéveloppeurs du monde de Windows. Très ouverts, ne se prenant pas la tête même\\nceux qui ont de grandes compétences dans leur domaine et plusieurs apps qui\\ngénèrent de bons revenus.\\n\\nC\'est un monde que je découvre car je suis plutôt un adepte de l\'open-source,\\nmais je pense que nous devrions nous inspirer de cette générosité qui fait\\nparfois défaut aux développeurs du libre qui prennent vite la grosse tête.\\n\\nLes seuls regrets que j\'exprimerai sont que nous n\'avons pas eu d\'espace pour\\nprésenter nos applications créées pendant le hackaton pour recueillir les avis\\nde chacun car il n\'y avait pas de concours comme on peut le voir dans les autres\\nhackatons.\\n\\nNOTRE APPLICATION : SUMURAŸ\\n Capture d\'écran du jeu [http://insertafter.com/images/screenshot-sumuray.png]\\n\\nLe principe de notre application est très simple. Nous présentons une grille et\\nun chiffre. Il faut trouver le maximum de combinaisons dans la grille pour\\nlesquelles, l\'addition de ces chiffres donne la somme demandée.\\n\\nUn exemple vaut mieux que de longs discours, je vous propose donc de vous rendre\\nsur la page web du jeu [http://sumuray.insertafter.com/]directement.\\n\\nCôté technos, c\'est 100% HTML5 pour la partie dont je me suis occupé.\\nL\'application fonctionne sur la plupart des téléphones et des navigateurs (dont\\nInternet Explorer 10 sur mobile et desktop).\\n\\nToss s\'est occupé de l\'application mobile pour Windows Phone 7, pour la version\\nWindows 8, on ne sait pas encore si on va utiliser la version HTML5 ou si on va\\nrester sur du natif.\\n\\nEnfin, j\'ai codé la partie serveur grâce à Node JS. C\'est la deuxième fois que\\nje l\'utilise lors d\'un hackaton [orange_hackaton.html], il faut dire que Node se\\nprête parfaitement à l\'exercice vu la rapidité de développement et la souplesse\\nqu\'il offre. Contrairement au dernier hackaton, cette application aura une vie\\npar la suite puisque je l\'ai proposée sur le Chrome Web Store (désormais retiré\\npar Google [https://twitter.com/nfroidure/status/571987728352612352]) et sur le\\nMozilla Marketplace.\\n\\nBref, si je suis de nouveau dispo lors du prochain hackaton, c\'est plutôt deux\\nfois qu\'une que je m\'y rendrai.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc78:JSON.parse('{"path":"contents/pages/articles-hackaton_microsoft.html","title":"Hackaton Windows Phone 8","description":"Depuis que Windows 8 gère le HTML5, je me suis un peu plus rapproché de la communauté Microsoft grâce notamment à un développeurs de mon coin. Petit retour sur ce hackaton.","shortTitle":"Hackaton WP8","shortDesc":"En savoir plus sur ce hackaton","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nHACKATON WINDOWS PHONE 8\\nDepuis que Windows 8 gère le HTML5, je me suis un peu plus rapproché de la\\ncommunauté Microsoft grâce notamment à un développeurs de mon coin. Petit retour\\nsur ce hackaton.\\n\\nComme d\'habitude, dans ce genre de rencontres, nous avons été très bien\\naccueillis par les équipes de Microsoft et du Moulin de la Forge qui ont été au\\npetit soin avec nous durant ces trois jours de code intensif.\\n\\nL\'idée de ce hackaton était de créer des applications fonctionnant sur Window\\nPhone. J\'ai rejoint Tossnet pour la création d\'un petit jeu dont nous avions eu\\nl\'idée quelques temps avant et que nous avons appelé Sumuraÿ.\\n\\nL\'AMBIANCE\\nJ\'ai vraiment apprécié l\'ambiance de ce hackaton et l\'état d\'esprit des\\ndéveloppeurs du monde de Windows. Très ouverts, ne se prenant pas la tête même\\nceux qui ont de grandes compétences dans leur domaine et plusieurs apps qui\\ngénèrent de bons revenus.\\n\\nC\'est un monde que je découvre car je suis plutôt un adepte de l\'open-source,\\nmais je pense que nous devrions nous inspirer de cette générosité qui fait\\nparfois défaut aux développeurs du libre qui prennent vite la grosse tête.\\n\\nLes seuls regrets que j\'exprimerai sont que nous n\'avons pas eu d\'espace pour\\nprésenter nos applications créées pendant le hackaton pour recueillir les avis\\nde chacun car il n\'y avait pas de concours comme on peut le voir dans les autres\\nhackatons.\\n\\nNOTRE APPLICATION : SUMURAŸ\\n Capture d\'écran du jeu [http://insertafter.com/images/screenshot-sumuray.png]\\n\\nLe principe de notre application est très simple. Nous présentons une grille et\\nun chiffre. Il faut trouver le maximum de combinaisons dans la grille pour\\nlesquelles, l\'addition de ces chiffres donne la somme demandée.\\n\\nUn exemple vaut mieux que de longs discours, je vous propose donc de vous rendre\\nsur la page web du jeu [http://sumuray.insertafter.com/]directement.\\n\\nCôté technos, c\'est 100% HTML5 pour la partie dont je me suis occupé.\\nL\'application fonctionne sur la plupart des téléphones et des navigateurs (dont\\nInternet Explorer 10 sur mobile et desktop).\\n\\nToss s\'est occupé de l\'application mobile pour Windows Phone 7, pour la version\\nWindows 8, on ne sait pas encore si on va utiliser la version HTML5 ou si on va\\nrester sur du natif.\\n\\nEnfin, j\'ai codé la partie serveur grâce à Node JS. C\'est la deuxième fois que\\nje l\'utilise lors d\'un hackaton [orange_hackaton.html], il faut dire que Node se\\nprête parfaitement à l\'exercice vu la rapidité de développement et la souplesse\\nqu\'il offre. Contrairement au dernier hackaton, cette application aura une vie\\npar la suite puisque je l\'ai proposée sur le Chrome Web Store (désormais retiré\\npar Google [https://twitter.com/nfroidure/status/571987728352612352]) et sur le\\nMozilla Marketplace.\\n\\nBref, si je suis de nouveau dispo lors du prochain hackaton, c\'est plutôt deux\\nfois qu\'une que je m\'y rendrai.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc79:JSON.parse('{"path":"contents/pages/fr/blog/hacktobefest_4_pr_facilement.html","title":"Obtenir 4 PR facilement et utilement pour l\'Hacktoberfest","description":"Vous voulez participer à l\'Hacktoberfest et gagner un t-shirt, \\n voire mieux, planter un arbre ? Suivez le guide !","shortTitle":"Hacktoberfest facile","shortDesc":"Découvrez comment faire l\'Hacktoberfest facilement","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUN HACKTOBERFEST FACILE, MAIS UTILE !\\nVoilà, j\'ai terminé mes 4 PR et cette année, je ne vais pas planter d\'arbre\\ncomme l\'année dernière. J\'ai beaucoup regretté de ne pas avoir mon t-shirt et\\nfinalement, c\'est un geste dérisoire au regard de tout ce que je fais déjà pour\\nl\'écologie. Il faut aussi se faire plaisir dans la vie ;).\\n\\nMais bon, comme je suis persuadé que vous avez envie de planter des arbres pour\\nl\'Hacktoberfest et que pas mal de personnes me demandent des conseils pour\\ntrouver des PRs simples à mettre en oeuvre, je me fends de ce petit tutoriel !\\n\\nLe principe est simple, les modules NPM sont des packages qui, en principe, ne\\ndoivent contenir que le code distribué, éventuellement des mappings si ce code\\nest transpilé et le fichier package.json qui déclare un peu tout ça.\\n\\nLe fait est que c\'est bien souvent pas le cas, puisque le contenu du paquet est,\\npar défaut, tout ce qui est dans le dossier, à l\'exception de ce que votre\\nfichier .gitignore ignore. Autant dire, que ça en fait du stockage et du réseau\\npour des données, bien souvent, inutiles.\\n\\nUn moyen simple et utile, donc, de participer à l\'Hacktoberfest est de réduire\\nla taille des modules NPM que vous utilisez. Pour ce faire, commencez par\\nidentifier les marges d\'amélioration en allant dans le premier projet NodeJS\\nvenu et en exécutant la commande suivante&nbps;:\\ndu -ch -d0 node_modules/*\\nPour vous concentrer sur les modules qui prennent des Mo : du -ch -d0\\nnode_modules/* | grep M\\n\\nDu coup, on a une bonne vielle liste de modules bien lourdingues ;). Sur l\'API\\nde DiagRAMS Technologies, le plus lourd est typescript avec 61Mo.\\nPour se rendre sur son dépôt&nbps;:\\nnpm repo typescript\\n\\nDe là, commence notre investigation. Pourquoi ce module est-il si lourd ?\\nD\'expérience, un module comme celui de TypeScript peut-être compliqué à\\ncomprendre et, pour le premier, je vous conseille d\'être un peu moins\\nambitieux/ses. La plupart des modules un peu trop lourds, le sont du simple fait\\nqu\'ils n\'exploitent pas le champ files\\n[https://docs.npmjs.com/cli/v7/configuring-npm/package-json#files] du fichier \\npackage.json.\\n\\nUne fois que vous avez pu identifier avec certitude que le problème est bien un\\nmanque de déclaration, il vous suffit de forker puis cloner le repository, de\\nl\'installer, d\'ajouter les déclarations et de faire une PR :\\n\\n\\n  # Cloner et installer\\n  git clone git@github.com:{my_usersame}/{my_fork}.git;\\n  cd module;\\n  npm i;\\n\\n  # Packager le module et mesure sa taille\\n  npm pack;\\n  du -h my_fork-x.x.x.tgz\\n\\n  # Ajouter la déclaration`file` au package.json\\n\\n\\n  # Packager à nouveau le module et mesure sa taille\\n  npm pack;\\n  du -h my_fork-x.x.x.tgz\\n\\n  # Installer le module dans votre projet et vérifier\\n  # qu\'il fonctionne\\n  cd my_project;\\n  npm install my_fork-x.x.x.tgz;\\n  npm test;\\n\\n\\nEt voilà ! Vous n\'avez plus qu\'à soumettre votre pull-request en précisant le\\npoids du module avant et après votre modification ! Simple, écologique et utile,\\npromesse tenue !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc80:JSON.parse('{"path":"contents/pages/fr/blog/histoire_des_mathematiques.html","title":"«Histoire des Mathématiques» par Mickaël Launay","description":"Critique du livre «Histoire des Mathématiques» par Mickaël Launay","shortTitle":"Design des URI","shortDesc":"En savoir plus sur ce livre sur les maths","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE «HISTOIRE DES MATHÉMATIQUES» PAR MICKAËL LAUNAY\\nJ\'ai toujours aimé les Mathématiques, un peu comme j\'aime l\'informatique.\\nMalheureusement, je suis complètement inadapté au système scolaire... C\'est\\nainsi que je suis entré dans le monde de l\'informatique par la petite porte,\\ngrâce à une invention majeure du siècle dernier: Internet.\\n\\nPourquoi je vous parle de tout cela alors que je suis censé faire la critique\\nd\'un bouquin ? C\'est très simple, ce qui se passe aujourd\'hui avec des passionés\\nde Mathématiques fait echo à ma propre expérience avec l\'informatique.\\n\\nMickaël Launay de la chaîne YouTube Micmaths\\n[https://www.youtube.com/user/Micmaths] fait parti des vulgarisateurs que je\\nsuis et tippe régulièrement. Il sont l\'équivalent pour les sciences des premiers\\ndéveloppeurs qui se sont mis à diffuser gratuitement des contenus visant à\\npartager la connaissance sur Internet.\\n\\nRien que pour cela, son livre vaut la peine d\'être acheté, comme un\\nencouragement envers ceux qui enpruntent cette voie. Plus le temps avance et\\nplus je me dis qu\'il sera possible de devenir mathématicien/physicien de façon\\nautodidacte.\\n\\nNon pas que ce ne soit pas possible dès aujourd\'hui, mais il faut une sacréee\\ndose de volonté pour cela. Ce n\'est pas aussi simple que cela l\'a été pour moi\\ndans le domaine de l\'informatique.\\n\\nIl reste tout de même beaucoup à faire pour arriver au niveau de l\'informatique.\\nNotamment sur la question des licences. Je voulais mettre comme filtre à mes\\ntips les personnes qui publient uniquement sous licence libre (au minimum\\nCreative Commons), mais force est de constater que si tel était le cas, je ne\\ntiperai que Doxa\\n[https://www.youtube.com/playlist?list=PLm_diWt_xURjOSJXFXKgyCuG_eteaYnBT].\\n\\nMais pour en revenir au livre, étonnamment, ce dernier est très digeste et donne\\nune bonne vue d\'ensemble de l\'Histoire des Mathématiques (ou de la Mathématique\\n;) ). Comment les concepts les plus élémentaires et les plus alambiqués sont\\napparûts, dans quel contexte et pourquoi ?\\n\\nLe livre nous fourni toutes les réponses et on découvre que ce qui nous paraît\\nabstrait trouve souvent ses racines dans des problèmes très concrets qu\'ont\\nrencontré nos ancêtres au fil des siècles.\\n\\nBref, vous vous en doutez, je vous le recommande chaudement ! D\'un point de vue\\nplus politique, il donne également du grain à moudre aux humanistes et\\nuniversalistes. Il met en lumière comment chaque civilisation a posé sa pierre\\ndans l\'édifice de la connaissance humaine et montre comment chacun d\'entre nous\\nrepose sur les épaules de géants des siècles passés.\\n\\nEn ces temps de fracture, je l\'interprète comme un plébiscite pour le partage.\\nNotamment pour le revenu universel qui continue de rassembler autour de l\'idée\\nqu\'une grande partie des richesses produites par l\'humanité ne seraient que\\nchimère sans le patrimoine légué par des centaines de milliers d\'altruistes\\n[https://www.google.fr/search?as_q=site%3Awikipedia.fr+&as_epq=&as_oq=cr%C3%A9ateur+inventeur+fondateur&as_eq=R%C3%A9sultats&as_nlo=&as_nhi=&lr=&cr=&as_qdr=all&as_sitesearch=&as_occt=any&safe=images&as_filetype=&as_rights=#as_qdr=all&q=site:fr.wikipedia.org++math%C3%A9maticien+OR+philosophe+OR+inventeur+OR+physicien+OR+informaticien+-Liste+-R%C3%A9sultats+-Cat%C3%A9gorie]\\npassionés par le monde et animés par la soif de le comprendre.\\n\\nVous pouvez retrouver Mickaël Launnay et toutes les personnes que je tippe sur \\nMa page Tipeee [https://www.tipeee.com/user/g114540297266340224881]. Bonne\\ndécouverte !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc81:JSON.parse('{"path":"contents/pages/fr/blog/html5_casse_brique.html","title":"Jeux HTML5 : Développement d\'un casse brique","description":"Créer un jeu en HTML5 est simple. Cependant, il faut respecter quelques bonnes pratiques pour éviter que cela tourne au cauchemar.","shortTitle":"Casse brique HTML5","shortDesc":"Voir comment créer un casse brique HTML5","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nJEUX HTML5 : DÉVELOPPEMENT D\'UN CASSE BRIQUE\\n⚠ Attention: Cet article est ancien et ne correspond pas à l\'état de l\'art de la\\ncréation de casse briques pour le navigateur.\\n\\nCréer un jeu en HTML5 est simple. Cependant, il faut respecter quelques bonnes\\npratiques pour éviter que cela tourne au cauchemar.\\n\\nSuite à mon précédent article sur l\'amélioration d\'un casse brique, j\'ai discuté\\navec Jonathan Kowalski, l\'auteur initial des prémices du jeu. Il a très\\ngentiment accepté de passer le jeu sous Licence GNU/GPL de façon à ce que chacun\\npuisse le modifier à sa guise. De cette façon, le jeu que vous allez créer ici\\nsera utilisable comme point de départ d\'un véritable jeu avec différents niveaux\\nou un look à votre guise.\\n\\nDIAGRAMME DES CLASSES\\n Diagramme de classes du Casse Brique [/images/classesdiagram-breakit.png]\\n\\nNotre application sera composée de 4 objets :\\n\\n * L\'objet Game qui se chargera de gérer la boucle de jeu, la création du canvas\\n   et la génération des murs à détruire, \\n * L\'objet Ball qui se chargera de gérer la position de la balle, son dessin sur\\n   le Canvas, son rebonsissement et son interaction avec les autres éléments du\\n   jeu, \\n * L\'objet Bar qui permettra le dessin de la barre sur le Canvas, la gestion de\\n   ses déplacement et la collision avec la balle. \\n * L\'objet Brick qui se chargera du dessin des briques et de la collision avec\\n   la balle. \\n\\nEnfin, il y a un dépôt existant, mais je vais le réinitialiser et tout reprendre\\nétape par étape afin que vous puissiez suivre ce tutoriel en suivant les\\nmodifications faîtes grâce à Git. Pour obtenir le dépôt tel qu\'il est au début\\ndu tuto :\\n\\nnfroidure@production:~/ mkdir CasseBrique && cd CasseBrique\\nnfroidure@production:~/ git clone git@github.com:nfroidure/CasseBriques.git .\\nnfroidure@production:~/ git checkout 84162a4c2fa6ece151e80031c1e76af25e508835 [https://github.com/nfroidure/CasseBriques/commit/84162a4c2fa6ece151e80031c1e76af25e508835]\\n\\nA noter aussi, le casse brique était initialement développé avec l\'aide de\\nJQuery, je vais plutôt utiliser Mootools qui est plus adapté à la POO et que je\\nmaîtrise mieux. De plus, je souhaite intégrer ce petit jeu dans une de mes\\napplications comme \\"goodies\\" pour un de mes clients.\\n\\nVoilà, vous êtes prêt. Je vais détailler la programmation de chaque ligne de\\ncode, mais avant de commencer, petit retour sur Canvas, l\'élement qui permet le\\ndessin de formes et autres graphismes.\\n\\nCANVAS : L\'ÉLÉMENT CENTRAL\\nCréer un jeu vidéo en HTML5 commence souvent par la création d\'un élément\\nCanvas. En effet, cet élément permet d\'afficher des graphismes grâce à\\nl\'utilisation de fonctions de l\'APIJavascript qui lui sont associées. Les\\nfonctions diffèrent en fonction du contexte, puisque notre casse brique est en\\n2D, ce sera donc le paradigme de la 2D que nous utiliserons. Vous trouverez un\\ntutorial complet sur le fonctionnement de Canvas\\n[https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial]sur le\\nMozilla Developper Network. Il est très important de comprendre le\\nfonctionnement de Canvas pour bien comprendre ce tutoriel.\\n\\nL\'OBJET GAME : CRÉATION\\nLe premier objet qu\'il faut créer est l\'objet Game, c\'est lui qui sera instancié\\npour commencer une partie de casse brique. Afin de rendre le jeu le plus souple\\npossible, nous allons nous imposer une contrainte : il doit être possible de\\ncréer un jeu casse brique en fournissant uniquement à Game l\'élément HTML chargé\\nde recueillir le jeu. D\'ailleurs, nous allons nous arranger pour que dans\\nl\'absolu, il soit possible de créer plusieurs instances du casse brique dans la\\nmême page web.\\n\\nDe cette contrainte, on peut tout de suite déduire quel sera le constructeur de\\nl\'objet Game :\\n\\nnfroidure@production:~/ git checkout 07e4ed976eba295c8bd0e6d9032c1ca6474717c6 [https://github.com/nfroidure/CasseBriques/commit/07e4ed976eba295c8bd0e6d9032c1ca6474717c6]\\n\\nDans le fichier index.html, ajoutons un code de détection des éléments ayant la\\nclasse CasseBrique et passons le premier trouvé à un object Game nouvellement\\ncréé :\\n\\nnfroidure@production:~/ git checkout fbd961660abf136103d84a93aacbeb4d7d734795 [https://github.com/nfroidure/CasseBriques/commit/fbd961660abf136103d84a93aacbeb4d7d734795]\\n\\n La détection se fait bien\\n[http://htmlpreview.github.io/?https://github.com/nfroidure/CasseBriques/07e4ed976eba295c8bd0e6d9032c1ca6474717c6/index.html]\\n, nous allons pouvoir créer un élément canvas et l\'insérer dans l\'élément\\ndétecté. Pour ce faire, on récupère la taille de l\'élément reçu et on l\'assigne\\nau canvas. Ensuite, on détecte si l\'API de Canvas est bien présente et on ajoute\\nl\'élément, sinon, on affiche un message d\'erreur.\\n\\nnfroidure@production:~/ git checkout fbd961660abf136103d84a93aacbeb4d7d734795b [https://github.com/nfroidure/CasseBriques/commit/fbd961660abf136103d84a93aacbeb4d7d734795]\\n\\nOn a donc maintenant un canvas en état de marche. Vous remarquerez la présence\\nd\'une propriété nommée aspectRatio. Cette dernière va nous servir pour\\ndéterminer la taille des différents objets du Canvas pour qu\'elle soit adaptée à\\nla place disponible dans l\'élément transmis.\\n\\nCRÉATION DE LA BARRE ET DE LA BALLE\\nCommençons par dessiner la balle et la barre. Pour chacun d\'eux, nous allons\\ncréer une classe avec comme propriétés la position et les dimensions de l\'objet\\net deux méthodes, une pour dessiner l\'objet à sa position actuelle (draw), une\\nautre pour l\'effacer (clear). Nous allons passer à chaque objet du canvas une\\nréférence à l\'objet game afin que ces objets puissent s\'y référer.\\n\\nPour la barre, nous souhaitons dessiner un rectangle. Heureusement, l\'élément\\nCanvas dispose de la fonction fillRect. Au début du jeu, nous positionnerons la\\nbarre au centre.\\n\\nnfroidure@production:~/ git checkout dbea5701e152b7ac36cae867735568d5ae0c6261 [https://github.com/nfroidure/CasseBriques/commit/dbea5701e152b7ac36cae867735568d5ae0c6261]\\n\\nEn ce qui concerne la balle, la classe est similaire à ceci près que nous\\nn\'avons pas une largeur et une longeur, mais un rayon. La fonction de dessin est\\négalement différente puisqu\'ici nous utilisons les fonctions de dessin pour\\nobtenir un cercle. La fonction de positionnement est également différente\\npuisque la position de la balle est relative à celle de la barre.\\n\\nnfroidure@production:~/ git checkout 8ffcdb2815fc23fcc0fdfcb98a1a589be02af8bf [https://github.com/nfroidure/CasseBriques/commit/8ffcdb2815fc23fcc0fdfcb98a1a589be02af8bf]\\n\\nDÉPLACEMENT DE LA BALLE ET CRÉATION DE LA BOUCLE DE JEU\\nNous avons déjà deux éléments affichés\\n[http://htmlpreview.github.io/?https://github.com/CasseBriques/8ffcdb2815fc23fcc0fdfcb98a1a589be02af8bf/index.html]\\n, maintenant, nous allons animer un peu tout ça. La première chose à faire est\\nde créer une boucle de jeu. Certains utilisent la fonction setInterval à cette\\nfin, je lui préfère la fonction setTimeout. En effet, setTimeout répété\\nplusieurs fois permet de ne pas demander le redessin des objets sur le canvas\\ntant que le dessin précédent n\'a pas été fait.\\n\\nDe ce fait, si l\'on utilise le jeu sur de petits appareils peu performants, on\\naura moins de difficultés à jouer, le jeu sera juste un peu ralenti. Ca tombe\\nbien, mon objectif est que ce jeu marche aussi sur les mobiles. MooTools utilise\\nla fonction delay pour effectuer une action après n millisecondes d\'attente.\\nGarder une référence à ce délai dans la propriété timer nous permettra de mettre\\nfin à la boucle principale en temps voulu.\\n\\nnfroidure@production:~/ git checkout efd8c071e8fc6f552640befb2ee12cca8a3d7492 [https://github.com/nfroidure/CasseBriques/commit/efd8c071e8fc6f552640befb2ee12cca8a3d7492]\\n\\nOn a donc notre balle qui est dessinnée toutes les 5 millisecondes. Pour la\\nfaire bouger, nous allons lui donner une vitesse (speed), une direction (angle)\\net ajouter une méthode (move) permettant de lui demander de bouger. Notre boucle\\nprincipale n\'aura alors qu\'à appeller la fonction move pour permettre à la balle\\nde s\'afficher à chaque fois à une position différente.\\n\\nVous remarquerez que nous avons adapté la vitesse à la taille du canvas grâce à\\nla propriété aspect ratio. La vitesse de la balle sera ainsi constante quelle\\nque soit la taille de l\'élément dans lequel se déroule le jeu.\\n\\nnfroidure@production:~/ git checkout 2f6e0b5ace29711707c58c601fbc6cfcfb362a17 [https://github.com/nfroidure/CasseBriques/commit/2f6e0b5ace29711707c58c601fbc6cfcfb362a17]\\n\\nMaintenant, nous devons nous assurer que la balle ne sortira pas du canvas. Pour\\ncela, nous avons déjà préparé le terrain. En effet, dans la fonction move, deux\\nvariables sont créées pour stocker temporairement les nouvelles coordonées. Nous\\nallons donc procéder à divers tests et dévier la balle si les nouvelles\\ncoordonnées sont en dehors des limites du jeu, de cette façon, au prochain\\ncalcul, la balle n\'ira plus hors des limites du jeu\\n[http://htmlpreview.github.io/?https://github.com/CasseBriques/b738ec5d0167afc29caaf07ca9ec3e71296fe5f3/index.html]\\n.\\n\\nnfroidure@production:~/ git checkout b738ec5d0167afc29caaf07ca9ec3e71296fe5f3 [https://github.com/nfroidure/CasseBriques/commit/b738ec5d0167afc29caaf07ca9ec3e71296fe5f3]\\n\\nMOUVEMENT DE LA BARRE ET COLLISION\\nIl faut maintenant permettre à l\'utilisateur de faire se déplacer la barre. Pour\\ncela, nous allons suivre le mouvement de la souris. Puisque la barre n\'est\\namenée à être dessinée que quand la souris est bougée, nous allons directement\\ngérer l\'évènement et le dessin de la barre au sein de l\'objet lui même.\\n\\nnfroidure@production:~/ git checkout 52e2f453b89e928b13416744a109edb1ce93b25e [https://github.com/nfroidure/CasseBriques/commit/52e2f453b89e928b13416744a109edb1ce93b25e]\\n\\nEnfin, nous allons gérer la collision de la balle avec la barre. Nous allons\\nfaire ceci au sein de l\'objet ball puisque la fonction move s\'y prête\\nparfaitement. En plus de la collision, nous allons dévier l\'angle du rebond en\\nfonction de la position sur la barre.\\n\\nnfroidure@production:~/ git checkout 5f9309603275df07c3214a97c870ecfa40510f7c [https://github.com/nfroidure/CasseBriques/commit/5f9309603275df07c3214a97c870ecfa40510f7c]\\n\\nEnfin, nous allons permettre à la barre d\'emmener la balle dans son sillon\\n[http://htmlpreview.github.io/?https://github.com/CasseBriques/fcf6249a93119e4de4b4b38d774fbbd9ed54c5e7/index.html]\\nquand sa vitesse est nulle, c\'est à dire, au début du jeu.\\n\\nGÉNÉRATION DES BRIQUES ET COLLISION\\nNous allons créer un objet brique permettant de dessiner et gérer les collisions\\navec une brique. Le dessin reprend simplement ce que nous avons vu pour la\\nbarre. La fonction de collision (hit) permet, en passant en paramètre des\\ncoordonnées et un rayon de retourner une valeur permettant de savoir si il y a\\neu collision et de quels côtés de la brique. Cette valeur de retour utilise une\\ntechnique de bit bashing [https://fr.wikipedia.org/wiki/Manipulation_de_bit]très\\nconnue dans le monde Unix. Ici, grâce à un seul entier, on symbolise un nombre\\nimportants de combinaisons de valeurs différentes.\\n\\nnfroidure@production:~/ git checkout 5336331b048af72cdd1ee3e84afa0bbbdda0a207 [https://github.com/nfroidure/CasseBriques/commit/5336331b048af72cdd1ee3e84afa0bbbdda0a207]\\n\\nMaintenant que l\'objet brique est créé, nous allons créer une fonction pour les\\ngénérer au sein de l\'objet Game (populate) afin de former le mur\\n[http://htmlpreview.github.io/?https://github.com/nfroidure/CasseBriques/7f3ed8d067d53fe39816c74aabc66621bee5276d/index.html]\\n.\\n\\nnfroidure@production:~/ git checkout 7f3ed8d067d53fe39816c74aabc66621bee5276d [https://github.com/nfroidure/CasseBriques/commit/7f3ed8d067d53fe39816c74aabc66621bee5276d]\\n\\nIntéressons nous aux collisions balle briques. Notre fonction Brick.hit retourne\\nun entier indiquant les côtés de la brique ayant subis la collision. Nous allons\\ndonc executer cette fonction pour toutes les briques successivement, supprimer\\nles briques et aglomérer les résultats de toutes les collisions grâce à\\nl\'opérateur binaire | (ou inclusif). Cela se passe toujours dans l\'objet ball et\\nsa fonction move qui s\'y prête bien. Enfin, grâce à l\'opérateur binaire &, nous\\nsommes en mesure de déterminer quel est le résultat de cette aglomération et\\nchanger l\'angle de la balle en conséquence. Nous allons aussi ajouter à la\\nfonction remove de l\'object brick une ligne pour retirer une brique détruite du\\ntableau bricks de l\'objet Game.\\n\\nnfroidure@production:~/ git checkout b3ed8c550a2cf8948c838b09aa62c772e34e9381 [https://github.com/nfroidure/CasseBriques/commit/b3ed8c550a2cf8948c838b09aa62c772e34e9381]\\n\\nBOUCLAGE DU JEU\\nVoilà, nous y sommes quasiment, il reste à permettre de continuer de jouer\\nlorsque la balle est tombée puis à regénérer le mur lorsque ce dernier est\\ncomplètement détruit.\\n\\nnfroidure@production:~/ git checkout 9f6794c154cabc0d9f03ca0e4349027f21c79b81 [https://github.com/nfroidure/CasseBriques/commit/9f6794c154cabc0d9f03ca0e4349027f21c79b81]\\n\\nEt voilà, nous avons un jeu sommaire [http://breakit.insertafter.com/index.html]\\nmais très facilement personnalisable ou augmentable le tout sous licence\\nGNU/GPL. Les collisions mériteraient d\'être améliorées pour être plus\\nnaturelles, mais pour cela, il faudrait que je me penche plus sérieusement\\ndessus, peut-être que ce sera le sujet d\'un autre billet. Y\'a plus qu\'à\\ncontinuer le projet pour les plus braves :d.\\n\\nPS : L\'aventure continue avec l\'ajout du support de requestAnimationFrame\\n[request_animation_frame.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc82:JSON.parse('{"path":"contents/pages/articles-html5_casse_brique.html","title":"Jeux HTML5 : Développement d\'un casse brique","description":"Créer un jeu en HTML5 est simple. Cependant, il faut respecter quelques bonnes pratiques pour éviter que cela tourne au cauchemar.","shortTitle":"Casse brique HTML5","shortDesc":"Voir comment créer un casse brique HTML5","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nJEUX HTML5 : DÉVELOPPEMENT D\'UN CASSE BRIQUE\\n⚠ Attention: Cet article est ancien et ne correspond pas à l\'état de l\'art de la\\ncréation de casse briques pour le navigateur.\\n\\nCréer un jeu en HTML5 est simple. Cependant, il faut respecter quelques bonnes\\npratiques pour éviter que cela tourne au cauchemar.\\n\\nSuite à mon précédent article sur l\'amélioration d\'un casse brique, j\'ai discuté\\navec Jonathan Kowalski, l\'auteur initial des prémices du jeu. Il a très\\ngentiment accepté de passer le jeu sous Licence GNU/GPL de façon à ce que chacun\\npuisse le modifier à sa guise. De cette façon, le jeu que vous allez créer ici\\nsera utilisable comme point de départ d\'un véritable jeu avec différents niveaux\\nou un look à votre guise.\\n\\nDIAGRAMME DES CLASSES\\n Diagramme de classes du Casse Brique [/images/classesdiagram-breakit.png]\\n\\nNotre application sera composée de 4 objets :\\n\\n * L\'objet Game qui se chargera de gérer la boucle de jeu, la création du canvas\\n   et la génération des murs à détruire, \\n * L\'objet Ball qui se chargera de gérer la position de la balle, son dessin sur\\n   le Canvas, son rebonsissement et son interaction avec les autres éléments du\\n   jeu, \\n * L\'objet Bar qui permettra le dessin de la barre sur le Canvas, la gestion de\\n   ses déplacement et la collision avec la balle. \\n * L\'objet Brick qui se chargera du dessin des briques et de la collision avec\\n   la balle. \\n\\nEnfin, il y a un dépôt existant, mais je vais le réinitialiser et tout reprendre\\nétape par étape afin que vous puissiez suivre ce tutoriel en suivant les\\nmodifications faîtes grâce à Git. Pour obtenir le dépôt tel qu\'il est au début\\ndu tuto :\\n\\nnfroidure@production:~/ mkdir CasseBrique && cd CasseBrique\\nnfroidure@production:~/ git clone git@github.com:nfroidure/CasseBriques.git .\\nnfroidure@production:~/ git checkout 84162a4c2fa6ece151e80031c1e76af25e508835 [https://github.com/nfroidure/CasseBriques/commit/84162a4c2fa6ece151e80031c1e76af25e508835]\\n\\nA noter aussi, le casse brique était initialement développé avec l\'aide de\\nJQuery, je vais plutôt utiliser Mootools qui est plus adapté à la POO et que je\\nmaîtrise mieux. De plus, je souhaite intégrer ce petit jeu dans une de mes\\napplications comme \\"goodies\\" pour un de mes clients.\\n\\nVoilà, vous êtes prêt. Je vais détailler la programmation de chaque ligne de\\ncode, mais avant de commencer, petit retour sur Canvas, l\'élement qui permet le\\ndessin de formes et autres graphismes.\\n\\nCANVAS : L\'ÉLÉMENT CENTRAL\\nCréer un jeu vidéo en HTML5 commence souvent par la création d\'un élément\\nCanvas. En effet, cet élément permet d\'afficher des graphismes grâce à\\nl\'utilisation de fonctions de l\'APIJavascript qui lui sont associées. Les\\nfonctions diffèrent en fonction du contexte, puisque notre casse brique est en\\n2D, ce sera donc le paradigme de la 2D que nous utiliserons. Vous trouverez un\\ntutorial complet sur le fonctionnement de Canvas\\n[https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial]sur le\\nMozilla Developper Network. Il est très important de comprendre le\\nfonctionnement de Canvas pour bien comprendre ce tutoriel.\\n\\nL\'OBJET GAME : CRÉATION\\nLe premier objet qu\'il faut créer est l\'objet Game, c\'est lui qui sera instancié\\npour commencer une partie de casse brique. Afin de rendre le jeu le plus souple\\npossible, nous allons nous imposer une contrainte : il doit être possible de\\ncréer un jeu casse brique en fournissant uniquement à Game l\'élément HTML chargé\\nde recueillir le jeu. D\'ailleurs, nous allons nous arranger pour que dans\\nl\'absolu, il soit possible de créer plusieurs instances du casse brique dans la\\nmême page web.\\n\\nDe cette contrainte, on peut tout de suite déduire quel sera le constructeur de\\nl\'objet Game :\\n\\nnfroidure@production:~/ git checkout 07e4ed976eba295c8bd0e6d9032c1ca6474717c6 [https://github.com/nfroidure/CasseBriques/commit/07e4ed976eba295c8bd0e6d9032c1ca6474717c6]\\n\\nDans le fichier index.html, ajoutons un code de détection des éléments ayant la\\nclasse CasseBrique et passons le premier trouvé à un object Game nouvellement\\ncréé :\\n\\nnfroidure@production:~/ git checkout fbd961660abf136103d84a93aacbeb4d7d734795 [https://github.com/nfroidure/CasseBriques/commit/fbd961660abf136103d84a93aacbeb4d7d734795]\\n\\n La détection se fait bien\\n[http://htmlpreview.github.io/?https://github.com/nfroidure/CasseBriques/07e4ed976eba295c8bd0e6d9032c1ca6474717c6/index.html]\\n, nous allons pouvoir créer un élément canvas et l\'insérer dans l\'élément\\ndétecté. Pour ce faire, on récupère la taille de l\'élément reçu et on l\'assigne\\nau canvas. Ensuite, on détecte si l\'API de Canvas est bien présente et on ajoute\\nl\'élément, sinon, on affiche un message d\'erreur.\\n\\nnfroidure@production:~/ git checkout fbd961660abf136103d84a93aacbeb4d7d734795b [https://github.com/nfroidure/CasseBriques/commit/fbd961660abf136103d84a93aacbeb4d7d734795]\\n\\nOn a donc maintenant un canvas en état de marche. Vous remarquerez la présence\\nd\'une propriété nommée aspectRatio. Cette dernière va nous servir pour\\ndéterminer la taille des différents objets du Canvas pour qu\'elle soit adaptée à\\nla place disponible dans l\'élément transmis.\\n\\nCRÉATION DE LA BARRE ET DE LA BALLE\\nCommençons par dessiner la balle et la barre. Pour chacun d\'eux, nous allons\\ncréer une classe avec comme propriétés la position et les dimensions de l\'objet\\net deux méthodes, une pour dessiner l\'objet à sa position actuelle (draw), une\\nautre pour l\'effacer (clear). Nous allons passer à chaque objet du canvas une\\nréférence à l\'objet game afin que ces objets puissent s\'y référer.\\n\\nPour la barre, nous souhaitons dessiner un rectangle. Heureusement, l\'élément\\nCanvas dispose de la fonction fillRect. Au début du jeu, nous positionnerons la\\nbarre au centre.\\n\\nnfroidure@production:~/ git checkout dbea5701e152b7ac36cae867735568d5ae0c6261 [https://github.com/nfroidure/CasseBriques/commit/dbea5701e152b7ac36cae867735568d5ae0c6261]\\n\\nEn ce qui concerne la balle, la classe est similaire à ceci près que nous\\nn\'avons pas une largeur et une longeur, mais un rayon. La fonction de dessin est\\négalement différente puisqu\'ici nous utilisons les fonctions de dessin pour\\nobtenir un cercle. La fonction de positionnement est également différente\\npuisque la position de la balle est relative à celle de la barre.\\n\\nnfroidure@production:~/ git checkout 8ffcdb2815fc23fcc0fdfcb98a1a589be02af8bf [https://github.com/nfroidure/CasseBriques/commit/8ffcdb2815fc23fcc0fdfcb98a1a589be02af8bf]\\n\\nDÉPLACEMENT DE LA BALLE ET CRÉATION DE LA BOUCLE DE JEU\\nNous avons déjà deux éléments affichés\\n[http://htmlpreview.github.io/?https://github.com/CasseBriques/8ffcdb2815fc23fcc0fdfcb98a1a589be02af8bf/index.html]\\n, maintenant, nous allons animer un peu tout ça. La première chose à faire est\\nde créer une boucle de jeu. Certains utilisent la fonction setInterval à cette\\nfin, je lui préfère la fonction setTimeout. En effet, setTimeout répété\\nplusieurs fois permet de ne pas demander le redessin des objets sur le canvas\\ntant que le dessin précédent n\'a pas été fait.\\n\\nDe ce fait, si l\'on utilise le jeu sur de petits appareils peu performants, on\\naura moins de difficultés à jouer, le jeu sera juste un peu ralenti. Ca tombe\\nbien, mon objectif est que ce jeu marche aussi sur les mobiles. MooTools utilise\\nla fonction delay pour effectuer une action après n millisecondes d\'attente.\\nGarder une référence à ce délai dans la propriété timer nous permettra de mettre\\nfin à la boucle principale en temps voulu.\\n\\nnfroidure@production:~/ git checkout efd8c071e8fc6f552640befb2ee12cca8a3d7492 [https://github.com/nfroidure/CasseBriques/commit/efd8c071e8fc6f552640befb2ee12cca8a3d7492]\\n\\nOn a donc notre balle qui est dessinnée toutes les 5 millisecondes. Pour la\\nfaire bouger, nous allons lui donner une vitesse (speed), une direction (angle)\\net ajouter une méthode (move) permettant de lui demander de bouger. Notre boucle\\nprincipale n\'aura alors qu\'à appeller la fonction move pour permettre à la balle\\nde s\'afficher à chaque fois à une position différente.\\n\\nVous remarquerez que nous avons adapté la vitesse à la taille du canvas grâce à\\nla propriété aspect ratio. La vitesse de la balle sera ainsi constante quelle\\nque soit la taille de l\'élément dans lequel se déroule le jeu.\\n\\nnfroidure@production:~/ git checkout 2f6e0b5ace29711707c58c601fbc6cfcfb362a17 [https://github.com/nfroidure/CasseBriques/commit/2f6e0b5ace29711707c58c601fbc6cfcfb362a17]\\n\\nMaintenant, nous devons nous assurer que la balle ne sortira pas du canvas. Pour\\ncela, nous avons déjà préparé le terrain. En effet, dans la fonction move, deux\\nvariables sont créées pour stocker temporairement les nouvelles coordonées. Nous\\nallons donc procéder à divers tests et dévier la balle si les nouvelles\\ncoordonnées sont en dehors des limites du jeu, de cette façon, au prochain\\ncalcul, la balle n\'ira plus hors des limites du jeu\\n[http://htmlpreview.github.io/?https://github.com/CasseBriques/b738ec5d0167afc29caaf07ca9ec3e71296fe5f3/index.html]\\n.\\n\\nnfroidure@production:~/ git checkout b738ec5d0167afc29caaf07ca9ec3e71296fe5f3 [https://github.com/nfroidure/CasseBriques/commit/b738ec5d0167afc29caaf07ca9ec3e71296fe5f3]\\n\\nMOUVEMENT DE LA BARRE ET COLLISION\\nIl faut maintenant permettre à l\'utilisateur de faire se déplacer la barre. Pour\\ncela, nous allons suivre le mouvement de la souris. Puisque la barre n\'est\\namenée à être dessinée que quand la souris est bougée, nous allons directement\\ngérer l\'évènement et le dessin de la barre au sein de l\'objet lui même.\\n\\nnfroidure@production:~/ git checkout 52e2f453b89e928b13416744a109edb1ce93b25e [https://github.com/nfroidure/CasseBriques/commit/52e2f453b89e928b13416744a109edb1ce93b25e]\\n\\nEnfin, nous allons gérer la collision de la balle avec la barre. Nous allons\\nfaire ceci au sein de l\'objet ball puisque la fonction move s\'y prête\\nparfaitement. En plus de la collision, nous allons dévier l\'angle du rebond en\\nfonction de la position sur la barre.\\n\\nnfroidure@production:~/ git checkout 5f9309603275df07c3214a97c870ecfa40510f7c [https://github.com/nfroidure/CasseBriques/commit/5f9309603275df07c3214a97c870ecfa40510f7c]\\n\\nEnfin, nous allons permettre à la barre d\'emmener la balle dans son sillon\\n[http://htmlpreview.github.io/?https://github.com/CasseBriques/fcf6249a93119e4de4b4b38d774fbbd9ed54c5e7/index.html]\\nquand sa vitesse est nulle, c\'est à dire, au début du jeu.\\n\\nGÉNÉRATION DES BRIQUES ET COLLISION\\nNous allons créer un objet brique permettant de dessiner et gérer les collisions\\navec une brique. Le dessin reprend simplement ce que nous avons vu pour la\\nbarre. La fonction de collision (hit) permet, en passant en paramètre des\\ncoordonnées et un rayon de retourner une valeur permettant de savoir si il y a\\neu collision et de quels côtés de la brique. Cette valeur de retour utilise une\\ntechnique de bit bashing [https://fr.wikipedia.org/wiki/Manipulation_de_bit]très\\nconnue dans le monde Unix. Ici, grâce à un seul entier, on symbolise un nombre\\nimportants de combinaisons de valeurs différentes.\\n\\nnfroidure@production:~/ git checkout 5336331b048af72cdd1ee3e84afa0bbbdda0a207 [https://github.com/nfroidure/CasseBriques/commit/5336331b048af72cdd1ee3e84afa0bbbdda0a207]\\n\\nMaintenant que l\'objet brique est créé, nous allons créer une fonction pour les\\ngénérer au sein de l\'objet Game (populate) afin de former le mur\\n[http://htmlpreview.github.io/?https://github.com/nfroidure/CasseBriques/7f3ed8d067d53fe39816c74aabc66621bee5276d/index.html]\\n.\\n\\nnfroidure@production:~/ git checkout 7f3ed8d067d53fe39816c74aabc66621bee5276d [https://github.com/nfroidure/CasseBriques/commit/7f3ed8d067d53fe39816c74aabc66621bee5276d]\\n\\nIntéressons nous aux collisions balle briques. Notre fonction Brick.hit retourne\\nun entier indiquant les côtés de la brique ayant subis la collision. Nous allons\\ndonc executer cette fonction pour toutes les briques successivement, supprimer\\nles briques et aglomérer les résultats de toutes les collisions grâce à\\nl\'opérateur binaire | (ou inclusif). Cela se passe toujours dans l\'objet ball et\\nsa fonction move qui s\'y prête bien. Enfin, grâce à l\'opérateur binaire &, nous\\nsommes en mesure de déterminer quel est le résultat de cette aglomération et\\nchanger l\'angle de la balle en conséquence. Nous allons aussi ajouter à la\\nfonction remove de l\'object brick une ligne pour retirer une brique détruite du\\ntableau bricks de l\'objet Game.\\n\\nnfroidure@production:~/ git checkout b3ed8c550a2cf8948c838b09aa62c772e34e9381 [https://github.com/nfroidure/CasseBriques/commit/b3ed8c550a2cf8948c838b09aa62c772e34e9381]\\n\\nBOUCLAGE DU JEU\\nVoilà, nous y sommes quasiment, il reste à permettre de continuer de jouer\\nlorsque la balle est tombée puis à regénérer le mur lorsque ce dernier est\\ncomplètement détruit.\\n\\nnfroidure@production:~/ git checkout 9f6794c154cabc0d9f03ca0e4349027f21c79b81 [https://github.com/nfroidure/CasseBriques/commit/9f6794c154cabc0d9f03ca0e4349027f21c79b81]\\n\\nEt voilà, nous avons un jeu sommaire [http://breakit.insertafter.com/index.html]\\nmais très facilement personnalisable ou augmentable le tout sous licence\\nGNU/GPL. Les collisions mériteraient d\'être améliorées pour être plus\\nnaturelles, mais pour cela, il faudrait que je me penche plus sérieusement\\ndessus, peut-être que ce sera le sujet d\'un autre billet. Y\'a plus qu\'à\\ncontinuer le projet pour les plus braves :d.\\n\\nPS : L\'aventure continue avec l\'ajout du support de requestAnimationFrame\\n[request_animation_frame.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc83:JSON.parse('{"path":"contents/pages/fr/blog/infrastructure_microservices.html","title":"Architecture d\'une API NodeJS","description":"Présentation d\'une architecture d\'API REST\\n réalisée avec des microservices.","shortTitle":"Architecture API NodeJS","shortDesc":"Voir une présentation sur l\'architecture d\'une\\n API NodeJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nARCHITECTURE D\'UNE API NODEJS\\nPrésentation réalisée pour la quinzième édition de ChtiJS.\\n[http://chtijs.francejs.org/archives/2016-02-25/index.html]\\n\\n < Blog [/fr/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc84:JSON.parse('{"path":"contents/pages/fr/blog/injection_de_dependance_nodejs.html","title":"Injection de dépendances avec NodeJS ","description":"Présentation donnée lors du ChtiJS 21 à propos de l\'injection de dépendances en JavaScript.","shortTitle":"Injection de dépendances","shortDesc":"En savoir plus sur ma présentation","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nINJECTION DE DÉPENDANCES AVEC NODEJS \\nINJECTION DE DÉPENDANCES SANS GORILLE\\nRetranscription de ma présentation au dernier ChtiJS sur l\'injection de\\ndépendances avec NodeJS mais plus généralement en JavaScript !\\n\\nAujourd\'hui, je vais vous parlais d\'injection de dépendances en JavaScript. J\'ai\\nfait les slides en anglais car je vais les mettre sur mon blog après mais\\nn\'hésitez pas à me demander de traduire si vous en ressentez le besoin.\\n\\nJ\'ai précisé unobtrusive car l\'objectif est que cette dernière n\'interfère pas\\navec votre code. L\'idée c\'est d\'avoir un minimum de code qui qui gère ça puisque\\nfinalement vous allez voir que ce n\'est pas nécessaire.\\n\\nA PROPOS DE MOI\\nFaisons d\'abord les présentations, je travaille pour Sencrop, vous l\'avez vu\\ntout à l\'heure. Je fais du logiciel pour les startups depuis que JavaScript est\\nun sujet brûlant. Et une fois j\'ai fait un code qui a failli compiler avec Rust.\\nVous pouvez me retrouver sur mon blog ou via Twitter.\\n\\nSENCROP RECRUTE\\nVous avez peut-être entendu parler de la levée de fond récente de Sencrop. Du\\ncoup, on va pouvoir augmenter nos ambitions et pour ce faire on recrute des\\ndéveloppeurs back-end, front-end (mais si vous êtes full-stack c\'est bien aussi,\\ndes data scientists et des ingénieurs pour le développement embarqué car on a\\nune problématique hardware également.\\n\\nDÉFINITION\\nQui connaît l\'injection de dépendances ? Une bonne partie de la salle lève la\\nmain. Qui l\'utilise au quotidien ? Quelques mains se lèvent. Une personne:\\n\\"C\'est un peu la même chose que Spring Boot en Java ?\\" Alors, oui, c\'est design\\npattern donc tu l\'implémentes comme tu veux, tu peux l\'implémenter en POO ou\\npas.\\n\\nL\'idée, en gros, de l\'injection de dépendance, c\'est que votre code a besoin de\\nfaire appel à des états externes, donc typiquement ça va être les IOs (lire un\\nfichier, enregistrer dans une base de données, faire un appel à un service REST,\\npeu importe...).On va donc chercher à exprimer ces dépendances de manière\\ndéclarative pour que le code métier ne soit pas impacté par toute la tuyauterie.\\n\\nFinalement, on cherche que l\'implémentation soit complètement découplée des\\ndépendances et de leur initialisation.\\n\\nEN JAVASCRIPT\\nDonc, en JS, qu\'est ce que ça peut donner ? En fait c\'est très simple, si vous\\nêtes un fan de la POO, vous avez une classe et cette classe finalement vous\\nallez lui injecter les services dont elle a besoin de manière à ce qu\'en son\\nsein, vous puissiez utiliser ces services sans vous soucier de leurs\\ninitialisation.\\n\\nAvec les fonctions, c\'est un peu plus simple, vous allez utiliser le passage\\nd\'arguments à vos fonctions et vous allez utiliser, tout bêtement, les services\\nque vous avez passé en argument de vos fonctions.\\n\\nC\'est assez simple, en fait, c\'est un mot compliqué pour nommer quelque chose de\\ntrès simple.\\n\\nCYCLE DE VIE D\'UNE APPLICATION\\nPourquoi c\'est utile ? (Toute la salle penche la tête pour lire les annotations\\ndu schéma projeté). Oui, je vous vois tourner la tête, mais j\'avais pas de place\\npour mettre les écriteaux horizontalement.\\n\\nJe vous mets au défi de trouver une application qui n\'a pas une phase de\\ndémarrage et une phase d\'arrêt, à part le front-end, encore que, parfois, vous\\npouvez vouloir qu\'il y ait des comportements au sortir de la page qui soient\\ndéclenchés.\\n\\nDu coup c\'est un truc qui est super récurrent et c\'est ce que l\'injection\\ndépendance adresse. C\'est donc très commun de l\'utiliser.\\n\\nLES PHASES DE L\'INJECTION DE DÉPENDANCES\\nAlors, à quoi ça ressemble finalement. Vous avez toutes vos dépendances (la\\nflèche, ici, elle veut dire \\"dépend de\\", donc ce rond là dépend de cet autre\\nlà). Chaque nœud est donc un service et les feuilles c\'est le code métier, celui\\nqui exploite vos services.\\n\\nLes dépenses de votre application, c\'est un graphe orienté et l\'idée, en fait,\\nc\'est finalement qu\'on peut les initialiser d\'une manière optimale. C\'est pas\\ncompliqué, vous commencez par instancier les services qui n\'ont pas de\\ndépendance, puis les services qui dépendent des services que vous avez\\ninitialisés à la première itération lors de la seconde itération et à la\\ntroisième itération les services qui vous n\'avez pu créer à la seconde, etc\\njusqu\'à ce que toute votre application soit initialisée.\\n\\nPour l\'extinction, c\'est pareil sauf que là vos services, ils sont tous up et\\nvous allez les stopper de manière inversée afin que tous les services soient\\nproprement arrêtés. C\'est le \\"graceful shutdown\\" pour ceux qui ne connaissent\\npas. C\'est un problématique plutôt back-end mais pourquoi pas en front.\\n\\nOPINION\\nL\'opinion que j\'ai essayer de développer ce soir est que c\'est le seul design\\npattern que vous ne regretterez jamais d\'avoir implémenter. Pourquoi ? Parce que\\ncomme je l\'ai annoncé tout à l\'heure, c\'est récurrent, c\'est à dire que ça\\nadresse un problème qui existe dans toutes les applications et donc c\'est\\ndommage de ne pas l\'utiliser surtout quand on le connaît.\\n\\nLa deuxième opinion que je vais essayer de développer est que si vous utilisez\\nde la programmation orientée objet ne blâmez pas l\'injection de dépendances\\nparce que c\'est pas de sa faute si vous avez l\'impression que c\'est n\'importe\\nquoi, mais celle de la POO.\\n\\nPOURQUOI ?\\nAu delà du fait que c\'est un pattern récurrent et que ça adresse un problème qui\\nest commun (n\'hésitez pas à proposer lors des questions des applications qui\\nn\'auraient pas besoin de l\'injection de dépendances).\\n\\nTESTABLE\\nParce que ça rend votre code testable, tout simplement. C\'est beaucoup plus\\nfacile de le tester du code qui utilise l\'injection de dépendances.\\n\\nJe ne sais pas qui utilise mockery, pour mocker des modules, mais enfin c\'est un\\npeu l\'horreur.\\n\\nCONFIGURABLE\\nC\'est aussi configurable car comme vous mettez les dépendances en paramètre,\\nfinalement, vous mettez ce que vous voulez en paramètre, il suffit que vous\\nrespectiez l\'interface de vos services pour pouvoir les réutiliser avec d\'autres\\nservices qui seraient conceptuellement la même chose.\\n\\nMANAGEABLE\\nJ\'ai mis ça parce que on en parlait tout à l\'heure mais en fait le développement\\nprincipalement c\'est de la charge mentale, de la charge mentale a accumuler. Il\\nfaut être capable d\'avoir en tête tous les effets de bords possibles que le code\\nvous êtes en train d\'écrire peut générer et le fait de raisonner justement de\\nmanière isolée, ça aide à comprendre plus de code puisqu\'on a moins de charge\\nmentale.\\n\\nRÉ-UTILISABLE\\nCar, de ce fait, vous pouvez facilement réutiliser des morceaux de code. C\'est\\nplus que la modularisation du code, c\'est aussi, réutiliser l\'initialisation et\\nl\'arrêt de vos services dans toutes vos applications.\\n\\nOPTIMAL\\nOptimal parce que, en fait, le code que vous auriez écrit pour initialiser vos\\nservices et pour les dés-initialiser que vous auriez fait à la mano, ici vous\\navez la garantie que c\'est optimal car vous utilisez une librairie qui adresse\\nvraiment ce problème et qui essaie de le résoudre de manière optimale donc, a\\npriori, vous avez le meilleur code qui soit pour pouvoir utiliser vos dépenses.\\n\\nINSTRUMENTABLE\\nInstrumentable, parce que, du coup ça fait que votre code devient plus un\\nensemble sur lequel vous pouvez raisonner plutôt que juste du code impératif qui\\nferait les choses séquentiellement. Mais on va voir cela plus en détail tout à\\nl\'heure.\\n\\nINCONVÉNIENTS\\nAlors, est ce qu\'il ya des inconvénients ? Oui il y en a.\\n\\nDÉBOGAGE\\nl\'inconvénient c\'est le débogage parce qu\'effectivement l\'initialisation des\\nservices, si jamais ça marche pas, va falloir mettre les mains dans le cambouis.\\nC\'est plus simple de déboguer du code qu\'on voit que du code qui fonctionne de\\nmanière magique, entre guillemets.\\n\\nTYPAGE STATIQUE\\nLe typage statique, forcément, comme tous les services sont initialisés de\\nmanière dynamique, on perd un peu de l\' avantage de la vérification du code typé\\npar le compilateur.\\n\\nDÉMONSTRATION\\nJ\'ai créé une petite application, plutôt, un outil en ligne de commande qui ne\\nfait pas grand chose. Il y a trois ou quatre commandes. Une commande qui montre\\nle temps Unix, une qui envoies un fichier dans un serveur FTP (on voit ici un\\nservice docker que j\'ai lancé), il y a une commande qui insère des données dans\\nune base de données et, normalement, il y a une commande qui les affiches.\\n\\nVoilà c\'est vraiment tout simple. Je l\'ai fait en TypeScript car je voulais\\nmontrer quelque chose qui ne fonctionne que TypeScript mais ça peut fonctionner\\nen JS normal.\\n\\nDonc, qu\'est ce qui se passe ? Par exemple, ici, j\'ai ma commande qui insère des\\ndes lignes dans la base de données. Alors j\'initialise, je fais ça bêtement,\\nj\'initialise la base de données, le serveur FTP (le serveur FTP, au début je\\nvoulais aller chercher le fichier sur le serveur FTP mais j\'ai pas eu le temps,\\ndonc je l\'initialise pour rien, je crois). J\'initialise aussi le système de\\njournalisation et j\'initialise le petit service qui va chercher les arguments.\\n\\nEnfin, j\'ai le code qui, finalement, est tout simple, j\'ai même directement\\nsupprimé la base de données à chaque fois que j\'insère des lignes parce que\\nc\'est vraiment que pour l\'exemple. Ici, je prends chaque fichier que j\'ai passé\\nen argument et je lis leur contenu. Il y a un petit parseur CSV des familles et\\npuis, ici, je mets chaque ligne une par une dans la base. J\'ai pas pris le temps\\nde séparer en sous-fonctions proprement mais j\'espère que vous ne m\'en tiendrez\\npas rigueur.\\n\\nLES PROBLÈMES\\nDu coup, les problèmes qui sont posés de part par le fait de procéder comme ça :\\non peut pas utiliser le serveur FTP et la base de données plusieurs fois parce\\nque, tout simplement, la base de données, quand elle s\'initialise (j\'ai vraiment\\npas utilisé l\'injection de dépendances), en fait, ce qui se passe c\'est qu\'elle\\nva aller chercher sa configuration et que la configuration, finalement, elle est\\nfixée en dur.\\n\\nC\'est à dire qu\'elle va automatiquement aller chercher la configuration qui a\\nété demandée ici dans ma configuration et, du coup, si j\'ai besoin d\'accéder à\\ndeux bases de données différentes, je peux pas. Si je veux pouvoir instancier\\ndeux fois le service base de donnée avec deux serveurs différents, je suis\\nbloqué.\\n\\nPareil pour les tests, mais on en a déjà parlé. Ce serait super chiant de tester\\nce code, il faudra utiliser mockery et tout ré-implémenter from scratch mais\\navec des stubs. On peut pas remplacer le FTP par S3 facilement et, en plus,\\nc\'est un choix binaire. C\'est à dire que si demain je veux remplacer FTP par S3\\nseulement dans un environnement, je ne peux pas, je suis obligé d\'utiliser S3\\ndans tous les environnements.\\n\\nSi jamais j\'ai un service qui demande un refacto ou si je change l\'ordre\\nd\'initialisation des services, il va falloir que change le code un petit peu\\npartout dans l\'application. En fait, c\'est assez compliqué d\'agir sur une telle\\nbase de code.\\n\\nKNIFECYCLE\\nDu coup, je vais vous présenter un petit module j\'ai réalisé et dont je me sers\\nsouvent. Je sais, ça fait genre, la personne qui vient présenter son module mais\\nça m\'aurait embêté d\'illustrer l\'injection de dépendance avec un autre module\\n;). Le module que j\'utilise c\'est Knifecycle.\\n\\nAlors qu\'est-ce que ca veut dire \\"l\'injection dépendance avec la banane mais\\nsans le gorille et sans la jungle\\" ? Je sais pas si vous connaissez la citation\\nmais en gros, le petit lol sur la POO est que quand vous voulez une banane vous\\nêtes obligé de prendre le gorille et la jungle avec la la banane. Vous n\'avez\\npas trop le choix.\\n\\nDonc là l\'idée c\'est justement de ne pas ouvrir la boîte de pandore avec la POO\\nà l inverse de ce qui se fait en fait beaucoup dans la plupart des frameworks\\nqui utilisent l\'injection de dépendances.\\n\\nREFACTORING\\nDonc du coup je vais faire un petit refacto. Il va être très simple. Je vais\\nreprendre chacun des services un par un et je vais les déclarer comme étant des\\ninitializer avec Knifecycle.\\n\\nEn fait, c\'est relativement simple pour déclarer un initializer, j\'ai juste à\\nfaire appel aux fonctions utilitaires prévues à cet effet. Par exemple, le\\nservice args est est un simple service qui expose les arguments fournis en ligne\\nde commande donc j\'utilise la function service pour la déclarer. Je lui donne un\\nnom et c\'est tout car il n\'a pas de dépendances. On fera peut-être du débogage,\\nj\'espère que non, mais c\'est le risque.\\n\\nLa configuration, c\'est pareil, c\'est un service qui va juste charger la\\nconfiguration dans un fichier en fonction de l\'environnement donc j\'utilise\\naussi la fonction service. D\'ailleurs, ici, je vais utiliser une petite astuce,\\nla fonction autoName qui va induire le nom du service du nom de la fonction.\\nQuelqu\'un dans la salle: C\'est un peu magique ! Oui, il y a une partie de magie\\neffectivement.\\n\\nIci pour la base de données, pareil, c\'est un service. Ou plutôt, un provider,\\ncar non seulement, il fourni le service, mais il gère aussi le shutdown du\\nservice. C\'est le seul moment où ça devient intrusif dans le code mais en même\\ntemps ça apporte une fonctionnalité (un problème de type avec TypeScript est\\narrivé durant le refactoring live, le fix a été publié ensuite sur GitHub). Je\\nvais renoncer, vous aurez pas la démo avec provider sinon, ça va me prendre trop\\nde temps\\n\\nPour le ftp, c\'est pareil, c\'est un service. Knifecycle propose tout un tas de\\nfonctions utilitaires, mais ici, je vais réutiliser la fonction service.\\nD\'ailleurs, je suis en train de faire l\'impasse sur l\'injection de dépendance,\\nmais je vais y revenir après.\\n\\nIci, de même, pour le logger, c\'est un service, tout comme le timer. Vous avez\\npu voir que j\'ai mis des interfaces, ce n\'est pas innocent, c\'est parce que je\\nvais en avoir besoin après et puis je voulais pas que ça prenne trop de temps.\\nDu coup, maintenant tous mes services sont bien configurés. Passons aux\\ndépendances.\\n\\nLe serveur FTP dépend de la configuration donc là ce que je vais faire c\'est que\\nje vais injecter la configuration dedans et je vais lui rajouter un type.\\nPourquoi je précise le type ? Parce que, justement, c\'est là l\'inconvénient dont\\nje parlais tout à l\'heure. Le compilateur, ici, n\'a aucune idée de ce que je\\nvais mettre là-dedans. On est obligés de déclarer une interface, c\'est un\\ninconvénient sans vraiment l\'être car finalement le fait que je lui dise, la\\nconfig que je vais te passer va être de ce type là, permet d\'avoir une couche\\nd\'abstraction. C\'est cette couche là, aussi, qui fait que je vais pouvoir avoir\\ndes interfaces identique pour des services différents et c\'est aussi cette\\ncouche là qui va nous permettre de raisonner d\'une manière un petit peu plus\\nintelligente que de juste dire, je veux récupérer une librairie.\\n\\nPar exemple, si comme nous vous utilisez S3, nous, en fait, on ne l\'utilise pas\\ndirectement, on a un service de stockage avec des méthodes get et put et on peut\\nle substituer et par n\'importe quoi. Demain, on décide de plus passer par S3\\nmais le service concurrent développé par OVH, on peut. Simplement car on a\\nraisonné en terme de briques fonctionnelles et non en terme de technologies.\\n\\nMême opération pour le service de DB. Normalement ça devrait vous rappeler un\\ntruc, pour ceux qui ont fait du AngularJS. C\'est vraiment du copier/collé pour\\nle coup, j\'ai vraiment copié son usage.\\n\\nMaintenant je vais regarder dans mes commandes, du coup, ça va être le même\\ndélire. Mais Je vais utiliser la fonction autoService qui infère le nom du\\nservice et de ses dépendances automatiquement.\\n\\nUne personne dans la salle: Comment tu détecte ces valeurs ?\\n\\nSur la signature, en fait, tout simplement, ça fait un toString sur la fonction\\navec une petite expression régulière qui récupère les bons arguments c\'est ce\\nque faisait AngularJS à l\'époque, j\'ai vraiment pas innové.\\n\\nVoir toutes les modifications sur le dépot GitHub\\n[https://github.com/nfroidure/di-test].\\n\\nALLER PLUS LOIN\\nLE CHARGEMENT AUTOMATIQUE\\nComme on l\'a vue dans la démo, il est possible de charger automatiquement les\\ndépendances pour un peu plus de magie, je ne vais pas revenir dessus.\\n\\nGÉNÉRATION DE GRAPHES\\nOn peut générer des graphes, ici par exemple, c\'est mon petit module jsarch que\\nj\'utilise pour documenter l\'architecture directement dans mes fichiers JS. Pour\\nle créer, j\'ai utilisé Knifecycle est grâce à cela, j\'ai pu générer un graphe\\nqui résume sa structure.\\n\\nLE BUILD STATIQUE\\nKnifecycle propose aussi de créer un build statique. Cela évite d\'embarquer la\\nlibrairie dans vos projets, il suffit de générer un fichier qui crée pour vous,\\nstatiquement, le fichier JS qui va bien pour initialiser vos services.\\n\\nChez nous, on utilise cela pour builder nos lambdas fonctions chez AWS. Cela\\npermet d\'avoir un build léger car on embarque que ce dont on a besoin.\\nClairement il faut mettre les mains dans le cambouis mais c\'était pour montrer\\nque c\'est possible.\\n\\nCRÉER DES SERVEURS HTTP\\nNous on utilise Knifecycle principalement pour le back-end. Je vous laisse jeter\\nun œil à Whook, le module que nous utilisons conjointement à Knifecycle.\\n\\nSERVICES COMMUN\\nVoici une petite liste de services qu\'on a open-sourcé et qui peuvent être\\nutilisés clé en main avec Knifecycle.\\n\\nCRÉÉ AVEC KNIFECYCLE\\nVoici une petite liste de projets qui utilisent Knifecycle.\\n\\nQUESTIONS\\nVoilà, si vous avez des questions :).\\n\\n < Blog [/fr/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc85:JSON.parse('{"path":"contents/pages/fr/blog/isomorphisme_par_l_exemple.html","title":"L\'isomorphisme par l\'exemple","description":"Présentation sur la gestion des droits dans\\nune application JavaScript de façon universelle.","shortTitle":"Gestion des droits isomorphique","shortDesc":"Voir une présentation sur la gestion des droits\\n en JavaScript","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nL\'ISOMORPHISME PAR L\'EXEMPLE\\nPrésentation réalisée pour la dixiéme édition de ChtiJS.\\n[http://chtijs.francejs.org/archives/2015-02-05/index.html]\\n\\n < Blog [/fr/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc86:JSON.parse('{"path":"contents/pages/fr/blog/jeux_html5_sympas.html","title":"Quelques jeux HTML5 sympas","description":"Dans mes recherches pour tenter de trouver la meilleure formule pour créer des jeux HTML5 addictifs et de bonne qualité, j\'ai trouvé plusieurs jeux aux finitions plus qu\'acceptables. Découvrez-les !","shortTitle":"Jeux HTML5 de qualité","shortDesc":"Voir la liste des jeux que j\'ai trouvé","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nQUELQUES JEUX HTML5 SYMPAS\\nDans mes recherches pour tenter de trouver la meilleure formule pour créer des\\njeux HTML5 addictifs et de bonne qualité, j\'ai trouvé plusieurs jeux aux\\nfinitions plus qu\'acceptables. Découvrez-les !\\n\\nFRONT INVADERS\\n Front Invaders [http://end3r.com/games/frontinvaders/]est un petit jeu tout\\nsimple du style de Space Invader, mais aux finitions remarquable. Il manque\\njuste un peu de son pour une expérience plus sympa.\\n\\nAGENT 8 BALL\\nUn jeu de billard (désormais disparu) un peu différent dans lequel vous incarnez\\nun agent secret chargé de détecter et désamorcer un bille piégée. Bon graphismes\\net sons.\\n\\nPIRATES LOVE DAISIES\\nUn jeu HTML5 simple mais fun [http://www.pirateslovedaisies.com/]et aux\\ngraphismes sympas. Le but est de protéger votre jardin de fleurs des méchants\\ncrustacés et autres bestioles venues vous les voler. Une bonne réalisation.\\n\\nMAGÌ\\nUn jeu aux graphismes et sons sympa. Malheureusement, ni en français, ni en\\nanglais. Bon courage à ceux qu veulent s\'y risquer\\n[http://www.scirra.com/arcade/games/addicting-action-games/495/mag]tout de même\\n:).\\n\\nA GRAIN OF TRUTH\\nUn jeu d\'aventure du style de SpaceQuest, Full Throttle etc.. Mais avec des\\ngraphismes impressionnants et un univers à part entière. L\'essayer\\n[http://www.zamolski.com/agot/]c\'est l\'adopter.\\n\\nPLUS PRÈS DE CHEZ NOUS\\nUn petit jeu créé par Nicolas Hoizey nommé Esviji [http://esviji.com] et lauréat\\ndes FirefoxOsDays.\\n\\nToujours en développement, Web Tank Arena [http://tank.elitwork.com], j\'espère\\npouvoir sortir ce jeu dans quelques mois.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc87:JSON.parse('{"path":"contents/pages/articles-jeux_html5_sympas.html","title":"Quelques jeux HTML5 sympas","description":"Dans mes recherches pour tenter de trouver la meilleure formule pour créer des jeux HTML5 addictifs et de bonne qualité, j\'ai trouvé plusieurs jeux aux finitions plus qu\'acceptables. Découvrez-les !","shortTitle":"Jeux HTML5 de qualité","shortDesc":"Voir la liste des jeux que j\'ai trouvé","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nQUELQUES JEUX HTML5 SYMPAS\\nDans mes recherches pour tenter de trouver la meilleure formule pour créer des\\njeux HTML5 addictifs et de bonne qualité, j\'ai trouvé plusieurs jeux aux\\nfinitions plus qu\'acceptables. Découvrez-les !\\n\\nFRONT INVADERS\\n Front Invaders [http://end3r.com/games/frontinvaders/]est un petit jeu tout\\nsimple du style de Space Invader, mais aux finitions remarquable. Il manque\\njuste un peu de son pour une expérience plus sympa.\\n\\nAGENT 8 BALL\\nUn jeu de billard (désormais disparu) un peu différent dans lequel vous incarnez\\nun agent secret chargé de détecter et désamorcer un bille piégée. Bon graphismes\\net sons.\\n\\nPIRATES LOVE DAISIES\\nUn jeu HTML5 simple mais fun [http://www.pirateslovedaisies.com/]et aux\\ngraphismes sympas. Le but est de protéger votre jardin de fleurs des méchants\\ncrustacés et autres bestioles venues vous les voler. Une bonne réalisation.\\n\\nMAGÌ\\nUn jeu aux graphismes et sons sympa. Malheureusement, ni en français, ni en\\nanglais. Bon courage à ceux qu veulent s\'y risquer\\n[http://www.scirra.com/arcade/games/addicting-action-games/495/mag]tout de même\\n:).\\n\\nA GRAIN OF TRUTH\\nUn jeu d\'aventure du style de SpaceQuest, Full Throttle etc.. Mais avec des\\ngraphismes impressionnants et un univers à part entière. L\'essayer\\n[http://www.zamolski.com/agot/]c\'est l\'adopter.\\n\\nPLUS PRÈS DE CHEZ NOUS\\nUn petit jeu créé par Nicolas Hoizey nommé Esviji [http://esviji.com] et lauréat\\ndes FirefoxOsDays.\\n\\nToujours en développement, Web Tank Arena [http://tank.elitwork.com], j\'espère\\npouvoir sortir ce jeu dans quelques mois.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc88:JSON.parse('{"path":"contents/pages/fr/blog/kafka_docker_compose.html","title":"Kafka avec docker-compose","description":"Faire tourner Apache Kafka en local avec docker-compose.","shortTitle":"Kafka et Docker","shortDesc":"Découvrez comment utiliser Kafka avec Docker compose","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nAPACHE KAFKA EN LOCAL AVEC DOCKER-COMPOSE\\n TL; DR:\\n\\ncurl -O https://gist.githubusercontent.com/nfroidure/720e83d6796a7c276f69ec8ad27fd7e9/raw/0bb69bbb8e8d97dd31f5b9dc3655fd6407910480/docker-compose.yml\\ndocker-compose up\\n    \\n\\n\\n\\nLa data devient le centre de toute innovation, au fil de mes expériences\\nprofessionnelles, il en est de plus en plus question. C\'est donc naturellement\\nque je me suis mis à utiliser le message queuing puis le stream processing.\\n\\nD\'abord avec Kinesis par simplicité, mais ce système ne gère pas les topics et\\nest propriétaire ce qui est gênant pour rester cloud agnostique alors j\'ai\\ndécidé de passer sous Kafka dans ma nouvelle aventure technologique chez\\nDiagRAMS ;).\\n\\nLe hic, c\'est qu\'il n\'existe pas d\'image Docker officielle, donc aucune\\ndocumentation sur la façon de l\'utiliser, d\'où ce petit article qui vous aidera\\npeut-être à éviter de passer trop de temps sur votre setup en local.\\n\\nCONFIGURER DOCKER-COMPOSE\\nSi, comme moi, vous ne jurez que par docker-compose pour le dev en local, alors\\nvoici ma petite recette perso !\\n\\nTout d\'abord, j\'ai choisi d\'utiliser les images Docker de Bitnami à défaut\\nd\'images officielles (n\'hésitez pas à proposer les votre en commentaire).\\n\\nJ\'ai également déclaré explicitement le réseau que je souhaite utiliser et ceci\\npour deux raisons :\\n\\n * je souhaite maîtriser les plages IP utilisées par Docker afin d\'éviter les\\n   collisions avec mes VPC (ce qui m\'a causé pas mal de fil à retordre lors du\\n   setup de ma connexion VPN...), \\n * Apache Kafka utilise un système de diffusion des brokers et pour pouvoir s\'y\\n   connecter en local, c\'est mieux de connaître l\'adresse IP de ces derniers\\n   pour pouvoir les insérer dans la variable d\'environnement \\n   KAFKA_ADVERTISED_LISTENERS prévue à cet effet. \\n\\nLe résultat est le suivant :\\n\\n \\n\\n\\nversion: \\"3.5\\"\\nnetworks:\\n  myapp:\\n    name: \\"myapp\\"\\n    driver: bridge\\n    ipam:\\n      driver: default\\n      config:\\n        - subnet: 10.5.0.0/16\\n          ip_range: 10.5.0.0/24\\n          gateway: 10.5.0.1\\n          aux_addresses:\\n            kafka: 10.5.0.2\\n            zookeeper: 10.5.0.3\\nservices:\\n# See:\\n# https://hub.docker.com/r/bitnami/zookeeper\\nzookeeper:\\n  image: \\"bitnami/zookeeper:latest\\"\\n  container_name: \\"myapp-zookeeper\\"\\n  networks:\\n    - \\"myapp\\"\\n  ports:\\n    - \\"2181:2181\\"\\n  environment:\\n    - ALLOW_ANONYMOUS_LOGIN=yes\\n\\n# See:\\n# https://hub.docker.com/r/bitnami/kafka\\nkafka:\\n  image: bitnami/kafka:2.5.0\\n  container_name: \\"myapp-kafka\\"\\n  networks:\\n    - \\"myapp\\"\\n  ports:\\n    - \\"9092:9092\\"\\n  environment:\\n    - KAFKA_BROKER_ID=1\\n    - KAFKA_LISTENERS=PLAINTEXT://:9092\\n    - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.5.0.1:9092\\n    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\\n    - ALLOW_PLAINTEXT_LISTENER=yes\\n  depends_on:\\n    - zookeeper\\n\\n\\nVous pouvez ajouter plus de brokers, il suffira alors d\'adapter les variables\\nd\'environnement, mais en local, c\'est rarement utile.\\n\\nSE CONNECTER AVEC KAFDROP\\nOn peut ajouter l\'UI de Kafdrop directement au docker-compose, mais c\'est\\nquelquechose que j\'évite pour ne pas avoir un environnement de développement\\ntrop gourmand en RAM.\\n\\nDe plus, ça peut être bien de pouvoir, sélectivement, démarrer Kafdrop pour le\\nKafka local, mais aussi pour voir ce qu\'il se passe sur le Kafka de production.\\n\\nPour toutes ces raisons, et aussi car c\'est plus écologique, je démarre\\ndirectement Kafdrop quand j\'en ai besoin via la ligne de commande :\\n\\n\\n  docker run --rm -p 9000:9000 \\\\\\n  -e KAFKA_BROKERCONNECT=\\"10.5.0.1:9092\\" \\\\\\n  -e JVM_OPTS=\\"-Xms32M -Xmx256M\\" --network myapp \\\\\\n  -e SERVER_SERVLET_CONTEXTPATH=\\"/\\" \\\\\\n  obsidiandynamics/kafdrop:latest\\n\\n\\n\\n\\nNotez bien le --network myapp qui permet à Kafdrop d\'être sur le même réseau que\\nle reste.\\n\\nJe vous mets également la commande pour la production car cette dernière est\\nsûrement en SSL et vous devrez donc y ajouter un peu de config comme suit :\\n\\n\\n  docker run --rm -p 9000:9000 \\\\\\n  -e KAFKA_BROKERCONNECT=$(node -e \\"process.stdout.write($(terraform output kafka_bootstrap_brokers))\\") \\\\\\n  -e JVM_OPTS=\\"-Xms128M -Xmx2G\\" -e KAFKA_PROPERTIES=$(echo security.protocol=SSL | base64) \\\\\\n  -e SERVER_SERVLET_CONTEXTPATH=\\"/\\" \\\\\\n  obsidiandynamics/kafdrop:latest\\n\\n\\n\\n\\nComme vous pouvez le voir, je récupère directement les brokers Kafka depuis mes\\nstates Terraform. Libre à vous d\'en faire autant ou de les mettre à la main.\\n\\nUTILISER LES SCRIPTS KAFKA\\nEn lisant la documentation de Kafka, vous devrez probablement utiliser les\\nscripts mis à disposition par Kafka, voici, par exemple, comment créer un topic\\navec docker-compose.\\n\\n\\ndocker-compose exec kafka /opt/bitnami/kafka/bin/kafka-topics.sh \\\\\\n  --create \\\\\\n  --bootstrap-server localhost:9092 \\\\\\n  --replication-factor 1 \\\\\\n  --partitions 1 \\\\\\n  --topic users\\n\\n\\n\\n\\nLa liste des commandes s\'obtient facilement ainsi\\n\\n\\ndocker-compose exec kafka ls /opt/bitnami/kafka/bin\\n\\n\\n\\n\\nKafka est une technologie sympa, je pense qu\'elle est en revanche mal comprise,\\nce n\'est qu\'un système de gestion d\'évènements, pas l\'alpha et l\'omega de la\\ngestion massive de données.\\n\\nEnfin, en terme de documentation, tous les chemins mènent à Confluent et je\\ntrouve cela regrettable qu\'il n\'y ait pas plus de documentation indépendante,\\nd\'où cet article, car l\'intérêt d\'utiliser du libre est limité si on depend d\'un\\nseul acteur cloud. Bref, j\'attends vos retours d\'expérience également ;).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc89:JSON.parse('{"path":"contents/pages/fr/blog/lecteur_fichiers_asc_php.html","title":"Lecteur/parseur de fichiers de POIs .ASC en PHP","description":"Peut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format .ASC. Voici un petit parseur créé par mes soins.","shortTitle":"Parseur de fichiers .ASC","shortDesc":"Voir la source de ce parseur","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLECTEUR/PARSEUR DE FICHIERS DE POIS .ASC EN PHP\\nPeut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format\\n.ASC. Voici un petit parseur créé par mes soins.\\n\\nLes fichiers de POI (Points of Interest) de type .ASC sont particulièrement mal\\nstructurés rendant assez compliquée l\'extraction d\'informations pour par exemple\\ngénérer des fichiers CSV.\\n\\nJ\'ai donc créé un petit script [https://github.com/nfroidure/PHPASCPOIParser]\\npermettant de récupérer dans des variables le contenu de chaque champs de ce\\ntype de fichiers.\\n\\nAttention, ce script est sous licence DWTFYW, so Do whatever the f*** you want\\nwith it !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc90:JSON.parse('{"path":"contents/pages/articles-lecteur_fichiers_asc_php.html","title":"Lecteur/parseur de fichiers de POIs .ASC en PHP","description":"Peut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format .ASC. Voici un petit parseur créé par mes soins.","shortTitle":"Parseur de fichiers .ASC","shortDesc":"Voir la source de ce parseur","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLECTEUR/PARSEUR DE FICHIERS DE POIS .ASC EN PHP\\nPeut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format\\n.ASC. Voici un petit parseur créé par mes soins.\\n\\nLes fichiers de POI (Points of Interest) de type .ASC sont particulièrement mal\\nstructurés rendant assez compliquée l\'extraction d\'informations pour par exemple\\ngénérer des fichiers CSV.\\n\\nJ\'ai donc créé un petit script [https://github.com/nfroidure/PHPASCPOIParser]\\npermettant de récupérer dans des variables le contenu de chaque champs de ce\\ntype de fichiers.\\n\\nAttention, ce script est sous licence DWTFYW, so Do whatever the f*** you want\\nwith it !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc91:JSON.parse('{"path":"contents/pages/fr/blog/les_7_habitudes.html","title":"Critique du livre : Les 7 habitudes\\n de Stephen R. Covey","description":"Les 7 habitudes des\\n gens qui réussissent tout ce qu\'ils\\n entreprennent de Stephen R. Covey vous\\n propose de diriger votre vie selon vos\\n principes. Pas si évident que cela à la\\n lecture de ce livre.","shortTitle":"Les 7 habitudes","shortDesc":"En savoir plus sur ce livre","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : LES 7 HABITUDES DE STEPHEN R. COVEY\\nCe livre, plus connu sous son titre anglais The 7 Habits of Effective People \\n(bien plus parlant au passage), m\'a été conseillé par le grand David Leuliette\\n[https://davidl.fr], maître YOLO incontesté.\\n\\nC\'est le genre de bouquin qu\'on aimerait lire d\'une traite mais qui nous\\nretourne tellement mentalement qu\'on doit marquer des pauses pour le finir tout\\nen en saisissant le sens et l\'essence.\\n\\n Stephen Covey [https://fr.wikipedia.org/wiki/Stephen_Covey]propose une\\nméthodologie répondant à plusieurs buts qu\'on a probablement tous dans la vie\\nmais desquels on s\'échappe par une vision altérée de la réalité due à notre\\nhistoire mais aussi aux conventions et limites que nous impose la société.\\n\\nJe ne reviendrais pas sur contenu du livre qui est bien détaillé sur la page\\nWikipédia [https://fr.wikipedia.org/wiki/Les_Sept_Habitudes_des_gens_efficaces]\\nde ce dernier, mais je vais en faire la publicité :D.\\n\\nCe lire doit être lu par toute personne qui souhaite diriger sa vie. Non pas que\\nceux qui ne l\'ont pas lu ne la dirigent pas, mais c\'est plus simple de le faire\\nquand on a lu ce livre.\\n\\nLa folie court termiste qui nous entoure est communicative, si on ne se dote pas\\ndes bons outils pour revenir à l\'essentiel, alors on peut vite finir par lever\\nla tête et se rendre compte qu\'on a passé dix ans de sa vie à courrir dans la\\nmauvaise direction.\\n\\nPrendre le temps de trouver des objectifs qui sont conformes à nos principes est\\nde nature à nous en faire gagner. Malheureusement, l\'urgence a tendance à nous\\nécarter de nos véritables aspirations. Pondérer les différents besoins qui\\némergent en nous en un cocktail équilibré est une tâche bien difficile.\\n\\nSi je prends l\'exemple du métier de développeur, probablement celui de la\\nplupart des lecteurs de ce blog, il est très facile de tomber dans l\'urgence\\nd\'apprendre la dernière technologie à la mode et de négliger la finalité du\\nprojet que l\'on sert.\\n\\nIl est aussi très courant de développer un projet sans vision de long terme et\\nde se retrouver dans un flot continu de bugs et de demandes de supports\\nanihilant la productivité de toute l\'équipe.\\n\\nBref, aussi bien pour le domaine personnel que professionnel, je vous recommande\\nchaudement sa lecture !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc92:JSON.parse('{"path":"contents/pages/fr/blog/linux_embarque.html","title":"Critique du livre : Linux embarqué. Comprendre, développer, réussir de Gilles Blanc","description":"J\'ai récemment hacké mon Nas et mon routeur Linksys. Pour aller plus loin, j\'ai acheté un livre sur Linux dans le domaine de l\'embarqué.","shortTitle":"Livre Linux embarqué","shortDesc":"En savoir plus sur ce livre","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : LINUX EMBARQUÉ. COMPRENDRE, DÉVELOPPER, RÉUSSIR DE GILLES\\nBLANC\\nJ\'ai récemment hacké mon Nas et mon routeur Linksys. Pour aller plus loin, j\'ai\\nacheté un livre sur Linux dans le domaine de l\'embarqué.\\n\\nDans ma conquête pour me rapprocher de plus en plus du matériel, ce livre est\\nune étape importante. En effet, il permet d\'avoir un autre regard sur Linux.\\n\\nCe qui saute aux yeux à la lecture de ce livre, c\'est que monter un système\\nGNU/Linux est un exercice difficile, cela demande de comprendre chaque composant\\nde ce dernier, chaque service, chaque étape du démarrage d\'un système\\nsous-linux.\\n\\nC\'est encore plus difficile sur du matériel qui ne possède que peu de capacités\\nmatérielles. Quand on lit ce bouquin, on se dit que nous, les développeurs sur\\narchitecture x86 ou AMD64, on est des chanceux ! D\'autant plus quand la plupart\\ndu code qu\'on fait est écrit dans un langage interprété, orienté objet avec\\nramasse miette et tout le toutim.\\n\\nOn a pas à se battre pour faire de la compilation croisée, gagner des ko.\\nDébogger avec des sondes JTag et le risque permanent de briquer son matériel...\\n\\nBien que je n\'envisage pas de créer un système embarqué un jour, ce livre m\'a\\npermis de mieux connaître ce monde fascinant. Maintenant, je sais ce qu\'est\\nbusybox ou dropbear, des logiciels qu\'on ne rencontre que dans ce domaine.\\n\\nLe livre aide également à avoir une meilleure compréhension du noyau et de la\\nfaçon dont il embarque ses modules/drivers. Enfin, bien que l\'objectif ne soit\\npas annoncé, il m\'a aidé à mieux comprendre le développement en C et\\nl\'utilisation des deboggeurs car la compilation croisée est un cas particulier\\nqui nécessite de vraiment bien comprendre ces concepts.\\n\\nBref, encore un livre que je recommande aux curieux de tout poil.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc93:JSON.parse('{"path":"contents/pages/articles-linux_embarque.html","title":"Critique du livre : Linux embarqué. Comprendre, développer, réussir de Gilles Blanc","description":"J\'ai récemment hacké mon Nas et mon routeur Linksys. Pour aller plus loin, j\'ai acheté un livre sur Linux dans le domaine de l\'embarqué.","shortTitle":"Livre Linux embarqué","shortDesc":"En savoir plus sur ce livre","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : LINUX EMBARQUÉ. COMPRENDRE, DÉVELOPPER, RÉUSSIR DE GILLES\\nBLANC\\nJ\'ai récemment hacké mon Nas et mon routeur Linksys. Pour aller plus loin, j\'ai\\nacheté un livre sur Linux dans le domaine de l\'embarqué.\\n\\nDans ma conquête pour me rapprocher de plus en plus du matériel, ce livre est\\nune étape importante. En effet, il permet d\'avoir un autre regard sur Linux.\\n\\nCe qui saute aux yeux à la lecture de ce livre, c\'est que monter un système\\nGNU/Linux est un exercice difficile, cela demande de comprendre chaque composant\\nde ce dernier, chaque service, chaque étape du démarrage d\'un système\\nsous-linux.\\n\\nC\'est encore plus difficile sur du matériel qui ne possède que peu de capacités\\nmatérielles. Quand on lit ce bouquin, on se dit que nous, les développeurs sur\\narchitecture x86 ou AMD64, on est des chanceux ! D\'autant plus quand la plupart\\ndu code qu\'on fait est écrit dans un langage interprété, orienté objet avec\\nramasse miette et tout le toutim.\\n\\nOn a pas à se battre pour faire de la compilation croisée, gagner des ko.\\nDébogger avec des sondes JTag et le risque permanent de briquer son matériel...\\n\\nBien que je n\'envisage pas de créer un système embarqué un jour, ce livre m\'a\\npermis de mieux connaître ce monde fascinant. Maintenant, je sais ce qu\'est\\nbusybox ou dropbear, des logiciels qu\'on ne rencontre que dans ce domaine.\\n\\nLe livre aide également à avoir une meilleure compréhension du noyau et de la\\nfaçon dont il embarque ses modules/drivers. Enfin, bien que l\'objectif ne soit\\npas annoncé, il m\'a aidé à mieux comprendre le développement en C et\\nl\'utilisation des deboggeurs car la compilation croisée est un cas particulier\\nqui nécessite de vraiment bien comprendre ces concepts.\\n\\nBref, encore un livre que je recommande aux curieux de tout poil.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc94:JSON.parse('{"path":"contents/pages/fr/blog/livre_javascript.html","title":"Un livre pour apprendre JavaScript","description":"En Avril 2013 j\'ai été contacté par MA-Édition pour écrire un livre sur JavaScript. Aujourd\'hui, il est en librairie. Retour sur cette belle aventure.","shortTitle":"Livre JavaScript","shortDesc":"Découvrir mon livre pour apprendre JavaScript de A à Z.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUN LIVRE POUR APPRENDRE JAVASCRIPT\\n⚠ Attention: Vous avez été nombreux à acheter, lire et aimer ce livre et je vous\\nen remercie. Cependant, aujourd\'hui, ce dernier n\'est plus aussi pertinent et\\nn\'a pas été actualisé. Je vous recommande donc si vous cherchez un livre sur\\nJavaScript de vous orienter vers une édition plus récente, voire même de\\nprofiter plutôt des nombreuses ressources en ligne qui peuvent être plus\\nfacilement mises au goût du jour.\\n\\nEn Avril 2013 j\'ai été contacté par MA-Édition pour écrire un livre sur\\nJavaScript. Aujourd\'hui, il est en librairie. Retour sur cette belle aventure.\\n\\nÀ vrai dire, avant d\'accepter, j\'ai voulu m\'assurer d\'avoir suffisamment la\\nfibre pour rédiger un livre complet. C\'est bien plus long que d\'écrire un simple\\nbillet de blog. L\'écriture des 100 000 premiers caractères a été déterminante\\npour la suite. Je me suis rendu compte que non seulement, j\'étais suffisamment\\nmotivé pour continuer, mais qu\'en plus, c\'était un véritable plaisir pour moi.\\nJ\'ai donc continué sur ma lancée.\\n\\nCONTENU DU LIVRE\\nL\'idée était de se positionner sur le créneau de la série des guides complets :\\ns\'adresser aussi bien aux débutants qu\'aux initiés désireux d\'approfondir leurs\\nconnaissances. Cette série se veut aussi pratique en entrant dans le vif du\\nsujet et en appliquant les connaissances proposées directement dans un cas réel.\\n\\nLe livre revient donc sur les fondamentaux de JavaScript. J\'ai essayé d\'être le\\nplus pédagogue possible, mais en même temps, de rester fidèle et complet dans\\nmes explications. J\'ai essayé d\'éviter de lier JavaScript trop fortement avec le\\nweb. Bien que le web soit à l\'origine de sa large diffusion, JavaScript est plus\\nqu\'un langage qu\'on utilise dans les pages web.\\n\\nPour illustrer ce fait, j\'ai choisi de créer un jeu de Memory multijoueur\\n[http://memory.insertafter.com/index.html]avec le front-end en JavaScript/HTML5\\net le backend en NodeJS. De cette façon, les lecteurs peuvent utiliser\\nJavaScript dans deux contextes différents pour bien comprendre ses spécificités.\\n\\nL\'idée est que des personnes désireuses d\'utiliser JavaScript dans leur logiciel\\nbureautique pour créer des macros, avec leur serveur de base de donnée NoSQL,\\npour créer des extensions de navigateur ou des applications de bureau puissent\\ntirer parti de ce livre sans être pollués par le développement web.\\n\\nMais en même temps, étant moi-même un grand consommateur de livres\\n[articles,critiques_de_livres.html], je voulais livrer avec ce dernier un\\nvéritable projet. Trop de livres se contentent de rester évasifs ou bloqués sur\\nla théorie et je ne voulais pas faire cette erreur.\\n\\nL\'avantage de ce petit jeu est qu\'il m\'a permis de démontrer un grand nombre de\\ntechniques front-end (API HTML5, AJAX, DOM, évènements etc...), le développement\\ncôté serveur avec NodeJS (serveur HTTP, serveur WebSocket), plusieurs\\ndesign-patterns (Modules AMD & UMD, Mediator etc...), d\'introduire les tests\\nunitaires (CasperJS, Mocha) et une floppée d\'outils indispensables (RequireJS,\\nJSLint, Git).\\n\\nFinalement, le livre est un point d\'entrée vers JavaScript et une ouverture vers\\nson écosystème. À sa lecture, le lecteur devrait avoir une solide connaissance\\ndu JavaScript et une bonne appréhension de ce qu\'il peut maintenant faire de\\ncette nouvelle connaissance. C\'est l\'objectif vers lequel j\'ai essayé de tendre.\\n\\nUN LIVRE CONSOLE-FRIENDLY\\nLe grand avantage de JavaScript c\'est que tout le monde a une console\\nJavaScript, même Madame Michu. En effet, grâce au navigateur que tout à chacun\\nutilise, il n\'est pas nécessaire de télécharger quoi que ce soit pour tester des\\nmorceaux de code.\\n\\nAinsi, tous les exemples du livre peuvent être entrés dans la console. Le pari\\nest que le lecteur se prenne au jeu et manipule ces morceaux de code pour mieux\\nles comprendre.\\n\\nLES CHROME DEVELOPPER TOOLS À L\'HONNEUR\\nQu\'il s\'agisse de développer dans le navigateur ou côté serveur, les outils pour\\ndéveloppeurs de Chrome me sont tellement utiles au quotidien que j\'ai décidé de\\nleur donner la part belle. Le livre permet donc de se les approprier et d\'en\\nfaire un usage avancé.\\n\\nSOURCES\\nLes sources du livre sont téléchargeable en suivant ce lien\\n[https://drive.google.com/folderview?id=0B0ANk9sub2rWfm5MTVlVaUtNUzBnOTR3MjFLVjBEeHhVdmJTcFFwLU9YQzc1Z0hFMkUydlE&usp=sharing]\\n. Pour ceux que l\'anglais n\'effraie pas, la source est également sur GitHub\\n[https://github.com/nfroidure/Memory].\\n\\nOÙ SE LE PROCURER ?\\nA priori, n\'importe où avec le code EAN (978 282240 8653). Mais vous pouvez le\\ncommander en ligne sur le site de la FNAC\\n[https://livre.fnac.com/a6119414/Nicolas-Froidure-Guide-complet-JavaScript]sur \\nAmazon [http://www.amazon.fr/JavaScript-Nicolas-Froidure/dp/2822408653/].\\n\\nRÉAGIR / CONTRIBUER\\nCette première édition ne demande qu\'à s\'améliorer ! Toutes les critiques sont\\nbonnes à prendre pour faire de la prochaine édition un meilleur ouvrage,\\nn\'hésitez donc pas à m\'adresser vos critiques, demandes d\'amélioration/de\\nprécision par mail [contact.html].\\n\\nBref, je vous souhaite une bonne lecture !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc95:JSON.parse('{"path":"contents/pages/articles-livre_javascript.html","title":"Un livre pour apprendre JavaScript","description":"En Avril 2013 j\'ai été contacté par MA-Édition pour écrire un livre sur JavaScript. Aujourd\'hui, il est en librairie. Retour sur cette belle aventure.","shortTitle":"Livre JavaScript","shortDesc":"Découvrir mon livre pour apprendre JavaScript de A à Z.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUN LIVRE POUR APPRENDRE JAVASCRIPT\\n⚠ Attention: Vous avez été nombreux à acheter, lire et aimer ce livre et je vous\\nen remercie. Cependant, aujourd\'hui, ce dernier n\'est plus aussi pertinent et\\nn\'a pas été actualisé. Je vous recommande donc si vous cherchez un livre sur\\nJavaScript de vous orienter vers une édition plus récente, voire même de\\nprofiter plutôt des nombreuses ressources en ligne qui peuvent être plus\\nfacilement mises au goût du jour.\\n\\nEn Avril 2013 j\'ai été contacté par MA-Édition pour écrire un livre sur\\nJavaScript. Aujourd\'hui, il est en librairie. Retour sur cette belle aventure.\\n\\nÀ vrai dire, avant d\'accepter, j\'ai voulu m\'assurer d\'avoir suffisamment la\\nfibre pour rédiger un livre complet. C\'est bien plus long que d\'écrire un simple\\nbillet de blog. L\'écriture des 100 000 premiers caractères a été déterminante\\npour la suite. Je me suis rendu compte que non seulement, j\'étais suffisamment\\nmotivé pour continuer, mais qu\'en plus, c\'était un véritable plaisir pour moi.\\nJ\'ai donc continué sur ma lancée.\\n\\nCONTENU DU LIVRE\\nL\'idée était de se positionner sur le créneau de la série des guides complets :\\ns\'adresser aussi bien aux débutants qu\'aux initiés désireux d\'approfondir leurs\\nconnaissances. Cette série se veut aussi pratique en entrant dans le vif du\\nsujet et en appliquant les connaissances proposées directement dans un cas réel.\\n\\nLe livre revient donc sur les fondamentaux de JavaScript. J\'ai essayé d\'être le\\nplus pédagogue possible, mais en même temps, de rester fidèle et complet dans\\nmes explications. J\'ai essayé d\'éviter de lier JavaScript trop fortement avec le\\nweb. Bien que le web soit à l\'origine de sa large diffusion, JavaScript est plus\\nqu\'un langage qu\'on utilise dans les pages web.\\n\\nPour illustrer ce fait, j\'ai choisi de créer un jeu de Memory multijoueur\\n[http://memory.insertafter.com/index.html]avec le front-end en JavaScript/HTML5\\net le backend en NodeJS. De cette façon, les lecteurs peuvent utiliser\\nJavaScript dans deux contextes différents pour bien comprendre ses spécificités.\\n\\nL\'idée est que des personnes désireuses d\'utiliser JavaScript dans leur logiciel\\nbureautique pour créer des macros, avec leur serveur de base de donnée NoSQL,\\npour créer des extensions de navigateur ou des applications de bureau puissent\\ntirer parti de ce livre sans être pollués par le développement web.\\n\\nMais en même temps, étant moi-même un grand consommateur de livres\\n[articles,critiques_de_livres.html], je voulais livrer avec ce dernier un\\nvéritable projet. Trop de livres se contentent de rester évasifs ou bloqués sur\\nla théorie et je ne voulais pas faire cette erreur.\\n\\nL\'avantage de ce petit jeu est qu\'il m\'a permis de démontrer un grand nombre de\\ntechniques front-end (API HTML5, AJAX, DOM, évènements etc...), le développement\\ncôté serveur avec NodeJS (serveur HTTP, serveur WebSocket), plusieurs\\ndesign-patterns (Modules AMD & UMD, Mediator etc...), d\'introduire les tests\\nunitaires (CasperJS, Mocha) et une floppée d\'outils indispensables (RequireJS,\\nJSLint, Git).\\n\\nFinalement, le livre est un point d\'entrée vers JavaScript et une ouverture vers\\nson écosystème. À sa lecture, le lecteur devrait avoir une solide connaissance\\ndu JavaScript et une bonne appréhension de ce qu\'il peut maintenant faire de\\ncette nouvelle connaissance. C\'est l\'objectif vers lequel j\'ai essayé de tendre.\\n\\nUN LIVRE CONSOLE-FRIENDLY\\nLe grand avantage de JavaScript c\'est que tout le monde a une console\\nJavaScript, même Madame Michu. En effet, grâce au navigateur que tout à chacun\\nutilise, il n\'est pas nécessaire de télécharger quoi que ce soit pour tester des\\nmorceaux de code.\\n\\nAinsi, tous les exemples du livre peuvent être entrés dans la console. Le pari\\nest que le lecteur se prenne au jeu et manipule ces morceaux de code pour mieux\\nles comprendre.\\n\\nLES CHROME DEVELOPPER TOOLS À L\'HONNEUR\\nQu\'il s\'agisse de développer dans le navigateur ou côté serveur, les outils pour\\ndéveloppeurs de Chrome me sont tellement utiles au quotidien que j\'ai décidé de\\nleur donner la part belle. Le livre permet donc de se les approprier et d\'en\\nfaire un usage avancé.\\n\\nSOURCES\\nLes sources du livre sont téléchargeable en suivant ce lien\\n[https://drive.google.com/folderview?id=0B0ANk9sub2rWfm5MTVlVaUtNUzBnOTR3MjFLVjBEeHhVdmJTcFFwLU9YQzc1Z0hFMkUydlE&usp=sharing]\\n. Pour ceux que l\'anglais n\'effraie pas, la source est également sur GitHub\\n[https://github.com/nfroidure/Memory].\\n\\nOÙ SE LE PROCURER ?\\nA priori, n\'importe où avec le code EAN (978 282240 8653). Mais vous pouvez le\\ncommander en ligne sur le site de la FNAC\\n[https://livre.fnac.com/a6119414/Nicolas-Froidure-Guide-complet-JavaScript]sur \\nAmazon [http://www.amazon.fr/JavaScript-Nicolas-Froidure/dp/2822408653/].\\n\\nRÉAGIR / CONTRIBUER\\nCette première édition ne demande qu\'à s\'améliorer ! Toutes les critiques sont\\nbonnes à prendre pour faire de la prochaine édition un meilleur ouvrage,\\nn\'hésitez donc pas à m\'adresser vos critiques, demandes d\'amélioration/de\\nprécision par mail [contact.html].\\n\\nBref, je vous souhaite une bonne lecture !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc96:JSON.parse('{"path":"contents/pages/fr/blog/ma_config_vscode.html","title":"Ma configuration VSCode","description":"Petit tour d\'horizon de ma configuration VSCode pour ceux que ça peut intéresser ;).","shortTitle":"Configuration de VSCode","shortDesc":"En savoir plus sur ma configuration VSCode","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMA CONFIGURATION VSCODE\\nQue de chemin parcouru depuis le temps où j\'utilisais Notepad++\\n[https://notepad-plus-plus.org/fr/] au point de faire des pirouettes\\ninimaginables [notepad_plus_plus_debian_gnu_linux.html]pour continuer de\\nl\'utiliser après être passé sous GNU/Linux.\\n\\nEntre temps, j\'ai réussi à sortir de Vim, j\'ai adopté successivement SublimeText\\n[https://www.sublimetext.com/], Atom [https://atom.io/] (l\'éditeur de GitHub)\\npour enfin adopter VSCode suite aux pressions de la hype.\\n\\nBref, après presque un an d\'utilisation, je pense pouvoir dire que je suis\\nsatisfait de cet éditeur qui est peu ou proue semblable à Atom en un peu plus\\nrapide (basé sur mon expérience d\'Atom de l\'époque ce qui peut ne plus être vrai\\naujourd\'hui).\\n\\nJe ne suis pas vraiment un aficionado de la personnalisation des éditeurs de\\ncode, donc ne vous attendez pas à des trucs de fou. Je pense que ma\\nconfiguration est plutôt ce que devrait être la configuration de VSCode par\\ndéfaut pour que les gens comme moi puissent continuer à NE PAS personnaliser\\nleurs éditeurs.\\n\\nMES PRÉFÉRENCES\\nUn truc cool avec VSCode, c\'est qu\'on peut utiliser JSON pour régler ses\\npréférences. Voici donc le mien :\\n\\n\\n{\\n  \\"window.zoomLevel\\": 0,\\n  \\"editor.mouseWheelZoom\\": true,\\n  \\"workbench.colorTheme\\": \\"Default High Contrast\\",\\n  \\"extensions.ignoreRecommendations\\": false,\\n  \\"javascript.updateImportsOnFileMove.enabled\\": \\"always\\",\\n  \\"explorer.confirmDragAndDrop\\": false,\\n  \\"files.associations\\": {\\n    \\"*.html\\": \\"html\\"\\n  }\\n}\\n\\n\\nLes deux premiers paramètres sont dûs à la façon un peu zarbi de gérer le zoom\\nde VSCode. Grosso-modo, ça permet d\'avoir le comportement d\'Atom.\\n\\nLa troisième ligne est là indépendemment de ma volonté, mais bon, les\\nrecommendations sont souvent utiles donc je vais le laisser ;). Pareil pour la\\nligne des imports, je me souviens plus l\'avoir ajoutée, mais elle permet de\\nchanger les importations de modules au renommage d\'un fichier et c\'est cool.\\n\\nLa configuration du drag\'n drop me permet de vivre dangereusement, si je drag et\\ndrop un fichier par erreur alors je peux tout casser car VSCode ne me demande\\npas de confirmer ;). Bon, avec Git, rien d\'irréversible, donc carpe diem.\\n\\nSinon, VSCode est une grande personne et détecte bien les types de fichiers,\\nsauf pour les fichiers HTML de mon blog (oui, j\'écris mes billets en HTML, à la\\nmain). En effet, il les reconnaît comme des fichiers Django HTML, allez savoir\\npourquoi&! Bref, j\'ai dû placer la dernière ligne pour y remédier.\\n\\nMES EXTENSIONS\\nBon, il faut quand même installer quelques extensions pour bosser avec VSCode.\\n\\nLANGAGES\\nPour travailler avec les divers languages que je rencontre, j\'ai installé:\\n\\n *  JavaScript : Babel ES6/ES7\\n   [https://marketplace.visualstudio.com/items?itemName=dzannotti.vscode-babel-coloring]\\n   pour la coloration syntaxique, ESLint\\n   [https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint]\\n   et Prettier - Code formatter\\n   [https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode]\\n   pour la qualité, Jest\\n   [https://marketplace.visualstudio.com/items?itemName=orta.vscode-jest]pour\\n   les tests et snapshot-tools\\n   [https://marketplace.visualstudio.com/items?itemName=asvetliakov.snapshot-tools]\\n   pour des petits raccourcis sympas vers les snapshots. JSON Tools\\n   [https://marketplace.visualstudio.com/items?itemName=eriklynd.json-tools]est\\n   fort utile pour formatter du JSON sélectionné dans l\'éditeur. Debugger for\\n   Chrome\\n   [https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome]\\n   est installé mais je l\'ai quasiment pas utilisé. \\n *  Rust :\\n   Rust (rls)\\n   [https://marketplace.visualstudio.com/items?itemName=rust-lang.rust]propose\\n   le support complet de Rust. \\n *  C/C++ :\\n   C/C++\\n   [https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools]\\n   propose l\'autocomplétion le debug et la navigation dans les sources, je l\'ai\\n   utilisé avec Arduino\\n   [https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino]\\n   pour mes projets Arduino. \\n *  Go :\\n   Go [https://marketplace.visualstudio.com/items?itemName=ms-vscode.go]a suffi\\n   pour le peu de Go que j\'ai fait à ce jour. \\n *  DevOps :\\n   Docker\\n   [https://marketplace.visualstudio.com/items?itemName=peterjausovec.vscode-docker]\\n   permet de voir quels containers tournent en un clin d\'oeil. Not bad. \\n   Terraform\\n   [https://marketplace.visualstudio.com/items?itemName=mauve.terraform]permet\\n   d\'avoir l\'autocomplétion de vos fichiers Terraform et la coloration\\n   syntaxique. Kubernetes\\n   [https://marketplace.visualstudio.com/items?itemName=ms-kubernetes-tools.vscode-kubernetes-tools]\\n   et Kubernetes Support\\n   [https://marketplace.visualstudio.com/items?itemName=ipedrazas.kubernetes-snippets]\\n   sont installés mais peu de recul dessus. \\n *  Les *ML :\\n   YAML [https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml]\\n   pour faire du YAML quand y\'a pas le choix. Better TOML\\n   [https://marketplace.visualstudio.com/items?itemName=bungcip.better-toml]pour\\n   faire du TOML, à l\'insu de mon plein gré. \\n\\nAUTRES EXTENSIONS\\nJ\'ai dû installer Duplicate action\\n[https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-duplicate]\\npour pouvoir dupliquer des fichiers/dossiers dans l\'arborescence de fichiers au\\nclic droit...\\n\\n Git History\\n[https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory]\\npermet de gérer un peu vos dépôts dans VSCode directement. Je suis plutôt CLI,\\nmais je dois avouer que parfois la vue dans VSCode peut être pratique.\\n\\n VS Live Share\\n[https://marketplace.visualstudio.com/items?itemName=ms-vsliveshare.vsliveshare]\\nest cool sur le papier, dans la pratique on a fait un screen share une fois chez\\nSencrop pour voir... La review et le pair programming ça reste donc IRL dans le\\ncanapé de la salle de pause.\\n\\nRACCOURCIS CLAVIER\\nSans fard, mes raccourcis clavier.\\n\\n\\n[\\n    {\\n        \\"key\\": \\"ctrl+shift+d\\",\\n        \\"command\\": \\"editor.action.copyLinesDownAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+shift+alt+down\\",\\n        \\"command\\": \\"-editor.action.copyLinesDownAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+shift+t\\",\\n        \\"command\\": \\"workbench.action.tasks.test\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+l\\",\\n        \\"command\\": \\"expandLineSelection\\",\\n        \\"when\\": \\"textInputFocus\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+i\\",\\n        \\"command\\": \\"-expandLineSelection\\",\\n        \\"when\\": \\"textInputFocus\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+down\\",\\n        \\"command\\": \\"editor.action.moveLinesDownAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"alt+down\\",\\n        \\"command\\": \\"-editor.action.moveLinesDownAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+up\\",\\n        \\"command\\": \\"editor.action.moveLinesUpAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"alt+up\\",\\n        \\"command\\": \\"-editor.action.moveLinesUpAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+alt+f\\",\\n        \\"command\\": \\"editor.action.formatDocument\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+shift+i\\",\\n        \\"command\\": \\"-editor.action.formatDocument\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+alt+f\\",\\n        \\"command\\": \\"editor.action.formatSelection\\",\\n        \\"when\\": \\"editorHasSelection && editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+k ctrl+f\\",\\n        \\"command\\": \\"-editor.action.formatSelection\\",\\n        \\"when\\": \\"editorHasSelection && editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+k\\",\\n        \\"command\\": \\"workbench.action.terminal.clear\\"\\n    }\\n]\\n\\n\\nLe ctrl + shift + d pour dupliquer une ligne colle à la configuration par défaut\\nd\'Atom à laquelle je me suis habitué. Idem pour ctrl + l pour sélectionner la\\nligne, le ctrl + t pour runner les test, les ctrl + down/up pour déplacer les\\nlignes et enfin le ctrl + alt + f pour formater le fichier courant. Le dernier\\nraccourcis est le ctrl + k qui permet de vider le buffer dans le terminal pour\\nêtre consistant avec le terminal natif lui même paramêtré ainsi à cause du fait\\nque je me suis habitué pendant mon année sur un Mac au cmd + k.\\n\\nVoilà, pour ma configuration, n\'hésitez pas à proposer la votre en commentaire !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc97:JSON.parse('{"path":"contents/pages/fr/blog/markdown_ast_vers_react.html","title":"Rendre votre contenu Markdown avec React via l\'AST","description":"Où comment ne plus jamais utiliser dangerouslySetInnerHTML.","shortTitle":"AST Markdown et React","shortDesc":"Découvrez ma façon de rendre le contenu Markdown en React","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nRENDRE VOTRE CONTENU MARKDOWN AVEC REACT VIA L\'AST\\nSi vous avez déjà utilisé Contentful, un head-less CMS, vous avez probablement,\\ncomme moi écrit du code pour transformer vos blocs Contentful vers vos\\ncomposants React\\n[https://github.com/nfroidure/douaisis-2021/blob/7c154197556fea1a86744c38a730a9cc21f567aa/utils/contentful.tsx#L131-L160]\\n.\\n\\nJ\'ai trouvé ça très propre, mais pour mon blog politique\\n[https://nicolasfroidure.fr], je ne voulais pas utiliser Contenful mais\\nsimplement commiter mon contenu sur le dépôt idoïne en Markdown.\\n\\nDU MARKDOWN VERS L\'ARBRE AST\\nJ\'ai donc commencé à chercher un module qui me permettrait d\'obtenir de mon\\nMarkdown le même genre d\'arbre qui sort de l\'éditeur de contenu de Contenful.\\n\\nJ\'ai trouvé que la combinaison unified et remark\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L323-L325] \\ndonnait quelquechose de très similaire à ce que propose Contenful.\\n\\nGESTION DU HTML\\nLa partie complexe a été de gérer les balises HTML présentes dans le markdown.\\nEn effet, ce n\'était pas parsé en prenant en compte les balises\\nentrantes/fermantes. J\'ai dû créer un petit algorithme récusif pour gérer cette\\nproblématique\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L361-L439].\\nJe dois toujours gérer les attributs HTML.\\n\\nFAIRE LA CORRESPONDANCE AVEC LES COMPOSANTS\\nAu final, la fonction qui rend le contenu\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L327-L342] \\nest quasiment identique à celle de Contenful. Plus question d\'utiliser \\ndangerouslySetInnerHTML ;).\\n\\nPETITS PLUS\\nEn sus, j\'ai pris le soin de transformer tous les titres de type <h2+>pour créer\\ndes ancres automatiquement et pouvoir lier une section en particulier (comme ici\\navec le titre \\"Une fuite en avant sans vision politique\\")\\n[https://nicolasfroidure.fr/blog/pour-une-region-actrice-d-un-numerique-humain#une-fuite-en-avant-sans-vision-politique]\\n.\\n\\nJ\'ai simplement dû créer une fonction pour récupérer le texte d\'un titre quel\\nque soit son contenu et la profondeur de ses sous-éléments imbriqués\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L344-L359] \\net ajouter mon composant d\'ancrage\\n[https://github.com/nfroidure/politics/blob/main/components/anchored.tsx] au \\nmapper de composant\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L156-L161].\\n\\nJ\'espère que le code vous a plût, n\'hésitez pas à le réutiliser. J\'en ferais une\\nlibrairie quand cela deviendra un peu plus stable et facilement réutilisable.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc98:JSON.parse('{"path":"contents/pages/fr/blog/meilleur_pere_grace_a_cron.html","title":"Comment devenir un meilleur père grâce à Cron","description":"Décrocher de l\'écran en plein milieu d\'une session de code est difficile. Mais arriver en retard à la garderie, c\'est pas cool. Heureusement cron et Patrick Sébastien sont là !","shortTitle":"Meilleur père avec Cron","shortDesc":"En savoir plus sur cette petite bidouille","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCOMMENT DEVENIR UN MEILLEUR PÈRE GRÂCE À CRON\\nDécrocher de l\'écran en plein milieu d\'une session de code est difficile. Mais\\narriver en retard à la garderie, c\'est pas cool. Heureusement cron et Patrick\\nSébastien sont là !\\n\\nMa femme le sait bien, c\'est difficile de communiquer avec moi quand je code. Le\\nproblème, c\'est que je dois conduire mes deux petites filles à la garderie et\\nsurtout aller les chercher.\\n\\nAprès plusieurs remontrances suites à quelques retards, j\'ai décidé de devenir\\nun meilleur père en tirant avantage de ma machine de développement. Tout\\nd\'abord, j\'ai cherché un moyen de faire sonner mon PC sous Debian GNU/Linux en\\nligne de commande.\\n\\nLa commande echo couplée à quelques options permet d\'émettre un bip, mais cela\\nne marche pas toujours. Les bips peuvent être désactivés et il y a tout un tas\\nde conditions obscures pour que ça fonctionne ou pas.\\n\\nroot@server:~# echo -en \\"a\\" > /dev/tty5\\n\\nBref, j\'ai opté pour la solution \\"beep\\" qui est un petit binaire permettant de\\ncréer de véritables compositions de bips. La première chose à faire est donc de\\nl\'installer.\\n\\nroot@server:~# aptitude install beep\\n\\nEnfin, j\'ai trouvé sur ce forum\\n[http://forum.ubuntu-fr.org/viewtopic.php?id=47239], une ligne de commande toute\\nprête qui joue l\'air du petit bonhomme en mousse (on fait avec ce qu\'on a :D).\\n\\n\\nroot@server:~# beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n\\nIl ne reste plus qu\'à éditer le fichier /etc/crontab pour lui ajouter quelques\\nrègles permettant de déclencher notre petit air de rassemblement pour un gros\\ncalin famille comme dirait mon aînée. La garderie est ouverte le matin de 9h à\\n12h du lundi au vendredi et l\'après midi de 13h45 à 17h00 les lundi, mardi et\\nvendredi. Je vous laisse deviner le sens des règles ci-dessous.\\n\\nroot@server:~# echo \\"\\n# Garderie ZAZA & EMMA\\n45 8 * * 1-5 root beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n45 11 * * 1-5 root beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n35 13 * * 1,2,5 root beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n45 16 * * 1,2,5 root beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n#\\" >> /etc/crontab\\n\\nOn redémarre le démon crond :\\n\\nroot@server:~# /etc/init.d/cron restart\\n\\nEt voilà, plus de soucis à se faire pour la garderie, à condition de ne pas être\\nen rendez-vous clientèle !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc99:JSON.parse('{"path":"contents/pages/articles-meilleur_pere_grace_a_cron.html","title":"Comment devenir un meilleur père grâce à Cron","description":"Décrocher de l\'écran en plein milieu d\'une session de code est difficile. Mais arriver en retard à la garderie, c\'est pas cool. Heureusement cron et Patrick Sébastien sont là !","shortTitle":"Meilleur père avec Cron","shortDesc":"En savoir plus sur cette petite bidouille","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCOMMENT DEVENIR UN MEILLEUR PÈRE GRÂCE À CRON\\nDécrocher de l\'écran en plein milieu d\'une session de code est difficile. Mais\\narriver en retard à la garderie, c\'est pas cool. Heureusement cron et Patrick\\nSébastien sont là !\\n\\nMa femme le sait bien, c\'est difficile de communiquer avec moi quand je code. Le\\nproblème, c\'est que je dois conduire mes deux petites filles à la garderie et\\nsurtout aller les chercher.\\n\\nAprès plusieurs remontrances suites à quelques retards, j\'ai décidé de devenir\\nun meilleur père en tirant avantage de ma machine de développement. Tout\\nd\'abord, j\'ai cherché un moyen de faire sonner mon PC sous Debian GNU/Linux en\\nligne de commande.\\n\\nLa commande echo couplée à quelques options permet d\'émettre un bip, mais cela\\nne marche pas toujours. Les bips peuvent être désactivés et il y a tout un tas\\nde conditions obscures pour que ça fonctionne ou pas.\\n\\nroot@server:~# echo -en \\"a\\" > /dev/tty5\\n\\nBref, j\'ai opté pour la solution \\"beep\\" qui est un petit binaire permettant de\\ncréer de véritables compositions de bips. La première chose à faire est donc de\\nl\'installer.\\n\\nroot@server:~# aptitude install beep\\n\\nEnfin, j\'ai trouvé sur ce forum\\n[http://forum.ubuntu-fr.org/viewtopic.php?id=47239], une ligne de commande toute\\nprête qui joue l\'air du petit bonhomme en mousse (on fait avec ce qu\'on a :D).\\n\\n\\nroot@server:~# beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n\\nIl ne reste plus qu\'à éditer le fichier /etc/crontab pour lui ajouter quelques\\nrègles permettant de déclencher notre petit air de rassemblement pour un gros\\ncalin famille comme dirait mon aînée. La garderie est ouverte le matin de 9h à\\n12h du lundi au vendredi et l\'après midi de 13h45 à 17h00 les lundi, mardi et\\nvendredi. Je vous laisse deviner le sens des règles ci-dessous.\\n\\nroot@server:~# echo \\"\\n# Garderie ZAZA & EMMA\\n45 8 * * 1-5 root beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n45 11 * * 1-5 root beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n35 13 * * 1,2,5 root beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n45 16 * * 1,2,5 root beep -f 1150 -n -f 1450 -n -f 1300 -l 300 -n -f 1150 -l 300 -n -f 1100 -l 300 -n -f 1150 -l 300 -n -f 850 -l 300\\n#\\" >> /etc/crontab\\n\\nOn redémarre le démon crond :\\n\\nroot@server:~# /etc/init.d/cron restart\\n\\nEt voilà, plus de soucis à se faire pour la garderie, à condition de ne pas être\\nen rendez-vous clientèle !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc100:JSON.parse('{"path":"contents/pages/fr/blog/metapak.html","title":"Méta-paquets NPM avec metapak","description":"Présentation sur metapak, un module d\'aide à la\\ncréation de méta-paquets NPM.","shortTitle":"metapak","shortDesc":"Voir une présentation sur metapak","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nMÉTA-PAQUETS NPM AVEC METAPAK\\nPrésentation réalisée pour la seizième édition de ChtiJS.\\n[http://chtijs.francejs.org]\\n\\n < Blog [/fr/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc101:JSON.parse('{"path":"contents/pages/fr/blog/migrer_base_de_donnees_utf8.html","title":"Migrer toute une base de données vers UTF8","description":"Vous avez peut-être commencé votre application avec les caractères latins et pour des besoins d\'internationalisation, vous souhaitez passer vos bases en UTF8 ? La solution tient en un seul script.","shortTitle":"Passer une base en UTF8","shortDesc":"En savoir plus sur ce script","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMIGRER TOUTE UNE BASE DE DONNÉES VERS UTF8\\nVous avez peut-être commencé votre application avec les caractères latins et\\npour des besoins d\'internationalisation, vous souhaitez passer vos bases en UTF8\\n? La solution tient en un seul script.\\n\\nDans la série, je mets à disposition mes petits bouts de code sur GitHub, voici\\nmaintenant le tour de mes scripts d\'administration système. L\'un d\'entre eux me\\npermet de passer toute une base de donnée en UTF8 grâce à un simple script.\\nL\'opération était fastidieuse avec PHPMyAdmin et la ligne de commande, c\'est\\nquand même plus fluide.\\n\\nPour récupérer le script :\\n\\n\\nroot@server:~# wget https://raw.github.com/nfroidure/MysqlUtils/master/setdatabasecollate.sh\\n\\nCe petit script s\'utilise tout simplement :\\n\\nroot@server:~# setdatabasecollate.sh elitwork root yes\\nEnter password of user : root \\n \\n# Setting UTF8 for database elitwork\\n## Converting table kikoolol\\n### Converting field href (varchar(50))\\n### Converting field title (varchar(200))\\n### Converting field description (varchar(200))\\n### Converting field shorttitle (varchar(100))\\n### Converting field shortdesc (varchar(150))\\n## Converting table kikoolol2\\n### Converting field contain (longtext)\\n### Converting field context (varchar(30))\\n\\nComme vous pouvez le remarquer, le script prend en argument le nom de la base à\\nconvertir, le nom de l\'utilisateur (optionnel) et une option \\"verbose\\" qui\\npermet d\'afficher ce que le script fait.\\n\\nComme vous pouvez le voir, il détecte les champs de type texte et leur assigne\\nleur nouveau format. N\'hésitez pas à proposer des améliorations en forkant le\\nprojet [https://github.com/nfroidure/MysqlUtils].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc102:JSON.parse('{"path":"contents/pages/articles-migrer_base_de_donnees_utf8.html","title":"Migrer toute une base de données vers UTF8","description":"Vous avez peut-être commencé votre application avec les caractères latins et pour des besoins d\'internationalisation, vous souhaitez passer vos bases en UTF8 ? La solution tient en un seul script.","shortTitle":"Passer une base en UTF8","shortDesc":"En savoir plus sur ce script","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMIGRER TOUTE UNE BASE DE DONNÉES VERS UTF8\\nVous avez peut-être commencé votre application avec les caractères latins et\\npour des besoins d\'internationalisation, vous souhaitez passer vos bases en UTF8\\n? La solution tient en un seul script.\\n\\nDans la série, je mets à disposition mes petits bouts de code sur GitHub, voici\\nmaintenant le tour de mes scripts d\'administration système. L\'un d\'entre eux me\\npermet de passer toute une base de donnée en UTF8 grâce à un simple script.\\nL\'opération était fastidieuse avec PHPMyAdmin et la ligne de commande, c\'est\\nquand même plus fluide.\\n\\nPour récupérer le script :\\n\\n\\nroot@server:~# wget https://raw.github.com/nfroidure/MysqlUtils/master/setdatabasecollate.sh\\n\\nCe petit script s\'utilise tout simplement :\\n\\nroot@server:~# setdatabasecollate.sh elitwork root yes\\nEnter password of user : root \\n \\n# Setting UTF8 for database elitwork\\n## Converting table kikoolol\\n### Converting field href (varchar(50))\\n### Converting field title (varchar(200))\\n### Converting field description (varchar(200))\\n### Converting field shorttitle (varchar(100))\\n### Converting field shortdesc (varchar(150))\\n## Converting table kikoolol2\\n### Converting field contain (longtext)\\n### Converting field context (varchar(30))\\n\\nComme vous pouvez le remarquer, le script prend en argument le nom de la base à\\nconvertir, le nom de l\'utilisateur (optionnel) et une option \\"verbose\\" qui\\npermet d\'afficher ce que le script fait.\\n\\nComme vous pouvez le voir, il détecte les champs de type texte et leur assigne\\nleur nouveau format. N\'hésitez pas à proposer des améliorations en forkant le\\nprojet [https://github.com/nfroidure/MysqlUtils].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc103:JSON.parse('{"path":"contents/pages/fr/blog/module_javascript.html","title":"Les modules Javascript : Un joyeux B","description":"Dès lors que l\'on tente de créer des applications complexes en Javascript, la segmentation du code en divers fichiers devient nécessaire. Cela génère une nouvelle difficulté, la modularisation du Javascript.","shortTitle":"Modules Javascript","shortDesc":"En savoir plus sur la création de modules en Javascript","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES MODULES JAVASCRIPT : UN JOYEUX B\\n⚠ Attention: Cet article est ancien et son contenu n\'est plus d\'actualité. Les\\nmodules JavaScript sont maintenant unifiés et en passe d\'être supportés\\nnativement sur toutes les plateformes grâce à l\'effort de standardisation\\nréalisé par la communauté.\\n\\nDès lors que l\'on tente de créer des applications complexes en Javascript, la\\nsegmentation du code en divers fichiers devient nécessaire. Cela génère une\\nnouvelle difficulté, la modularisation du Javascript.\\n\\nIl existe deux approches principales pour la création de modules Javascript, \\nCommonJS [https://fr.wikipedia.org/wiki/CommonJS], basé sur une approche\\nsynchrone du chargement de module et AMD basé sur le chargement asynchrone des\\nmodules. Voici le résultats de mes recherches sur le sujet.\\n\\nPRINCIPE DE BASE\\nQue ce soit côté serveur ou côté client, le contenu d\'un fichier Javascript\\ns’exécute dans le contexte global. L\'objectif des modules est de cloisonner le\\ncode dans un contexte restreint (appelé scope), et d\'exporter de ce contexte\\nuniquement les informations nécessaires à sa bonne utilisation (closure\\npattern). Un exemple simple de ce principe :\\n\\n(function(exports){\\n var a=1, b=2; // Création de deux variables dans le scope restreint\\n exports.a=a; // Variable a exportée dans le scope global\\n})(window);\\n\\nCe script est très basique malgré son apparence peu conventionnelle pour un\\ndéveloppeur débutant en Javascript. Il crée une fonction anonyme entre\\nparenthèse et l’exécute immédiatement après. L\'objet window représentant le\\ncontexte global, il est passé en argument à cette fonction.\\n\\nAinsi, à l\'intérieur de la fonction, le code s\'exécute dans un contexte\\nrestreint et seules les variables ajoutées à l\'objet exports seront disponibles\\ndans le contexte global. A noter que par variable, étant donné la nature de\\nJavascript, il peut s\'agir de types natifs ou d\'objets (donc aussi de\\nfonctions).\\n\\nNous aurions pu passer en paramètre un autre contexte et ainsi permettre\\nl\'utilisation du module par un autre module.\\n\\nAPPROCHE SYNCHRONE (COMMONJS, NODEJS)\\nConscients de la nécessité de modulariser le Javascript, l\'initiative CommonJs a\\nproposé une méthode qui est utilisée au sein de NodeJS. Les modules CommonJS\\nproposent deux éléments centraux. La fonction require() qui retourne le contenu\\nexporté au chargement d\'un module et l\'objet exports qui permet, un peu à la\\nmanière de l\'exemple précédent, d\'exporter certaines valeurs du module.\\n\\nLa dernière ligne du fichier VarStreamReader\\n[https://github.com/nfroidure/VarStream/blob/ed0b883f15a0ba1e59beebcaf77169adefa4ec53/VarStreamReader.js#L344]\\nde mon projet VarStream montre bien comment exporter un objet (ici l\'objet\\nVarStreamReader) :\\n\\nif(!(typeof(module)==\'undefined\'))\\n module.exports = VarStreamReader;\\n\\nLa condition sert à pouvoir utiliser le fichier dans un contexte étranger à\\nCommonJS. Pour charger un module, rien de plus simple, il suffit d\'utiliser la\\nfonction globale require() comme on peut le voir dans ce fichier qui inclus le\\nmodule cité précédemment :\\n\\nvar VarStreamReader=require(\'./VarStreamReader\');\\n\\nCette approche est parfaite pour le Javascript côté serveur puisque le\\nchargement se fait directement à partir du disque dur. Malheureusement, celle-ci\\nest imparfaite pour le chargement de modules côté client, dans un navigateur.\\n\\nAPPROCHE ASYNCHRONE (AMD)\\nL\'approche synchrone dans le navigateur induit un chargement séquentiel des\\nfichiers Javascript composé d\'itérations successives de la séquence\\ntéléchargement + interprétation. Ainsi, si un module nécessite le chargement de\\ntrois autres modules (concept appelé dépendance), le temps nécessaire pour\\nrésoudre ces dépendances sera donc une addition des temps de téléchargement et\\nd\'interprétation de chacun des trois fichiers Javascript.\\n\\nUn autre inconvénient de l\'approche synchrone est qu\'elle implique le chargement\\ndu fichier via la fonction eval nécessairement. Or comme le rapelle la célèbre\\nexpression eval is evil, cela pose de sérieux problèmes. En effet, la fonction \\neval rend le débogage beaucoup plus compliqué puisque le numéro de la ligne et\\nle nom de fichier ayant provoqué l\'erreur ne sont pas connus, de plus, la\\nfonction eval n\'est pas homogène sur tous les navigateurs posant des problèmes\\névidents de compatibilité Cross-Browser.\\n\\nIl a donc fallu trouver une approche permettant de télécharger chaque fichier\\nJavascript de la même manière que le fait le navigateur pour les fichiers\\nJavascript inclus directement dans le HTML. Pour cela, l\'initiative AMD\\nimplémentée dans la très célèbre librairie RequireJs [https://requirejs.org/]\\nutilise un concept bien connu depuis l\'avènement d\'Ajax.\\n\\nEn effet, RequireJs ajoute une balise <script>\\n[https://github.com/requirejs/requirejs/blob/master/require.js]grâce aux\\nfonctions de manipulation du DOM. Grâce à une fonction de callback, le nom, les\\ndépendances et le contenu du module sont déclarés. Les chargements de scripts\\navec fonctions de callback étaient très utilisées pour charger du JSon depuis un\\nnom de domaine tiers.\\n\\nCette approche permet un chargement asynchrone de toutes les ressources qui sont\\ndès lors parallélisées. Le temps de chargement des modules est donc réduit au\\ntemps de chargement et d\'interprétation du dernier fichier Javascript à être\\ntotalement téléchargé.\\n\\nL\'écriture d\'un module AMD se présente comme suit :\\n\\ndefine(\'moduleName\', [\'dep1\', \'dep2\'], function (dep1, dep2) {\\n // dep1 et dep2 contiennent les exports réalisés par les modules dont dépend ce même module\\n // le contenu du module vient ici return function () {}; // Ici, le module exporte via un retour de fonction, les valeurs souhaitées. }); \\n\\nOn pourrait croire que tout est bien qui fini bien, mais il nous reste un gros\\nproblème à résoudre. Comment utiliser les modules AMD avec NodeJS et vice-versa\\n? Il existe plusieurs solutions [http://www.2ality.com/2011/11/module-gap.html]\\npour rendre inter-compatibles les différents modules, mais cela reste une sorte\\nde tambouille incompréhensible. D\'ailleurs, je serais ravi d\'avoir vos bonnes\\npratiques en la matière.\\n\\nEdit : On me souffle dans l\'oreille\\n[https://twitter.com/_Florian_R/status/236437043004207104]que require.js est\\nutilisable avec NodeJs, un petit lot de consolation donc ;).\\n\\nECMASCRIPT 6 : LA LUMIÈRE AU BOUT DU TUNNEL\\nGrâce à la dernière mouture d\'ECMAScript (aussi appelé ECMAScript.next) le\\nstandard qui sous tend Javascript, un gestionnaire natif de modules Javascript\\nsera disponible. Malheureusement, on ne peut faire aucune prévision en ce qui\\nconcerne le jour où il sera envisageable d\'utiliser ce dernier étant donné qu\'il\\nfaudra que tous les principaux navigateurs du marché l\'aient implémenté. En ce\\nqui concerne NodeJs, étant donné qu\'il est basé sur le moteur javascript V8 de\\nGoogle Chrome, son implémentation sera sûrement conditionnée à celle de Google\\nChrome.\\n\\nL\'approche de la nouvelle version de Javascript est simple, le mot clé export\\npermet de déclarer une fonction comme devant être exportée ou d\'énumérer les\\nvariables devant être exportée.\\n\\nvar a=1, b=2, c=3;\\n export a, b, c;\\nexport function() {};\\n\\nVoilà, vivement que nous puissions enfin utiliser cette version de Javascript et\\nrésoudre tous nos problèmes de compatibilité de modules. Vos précisions ou\\ncommentaires sont les bienvenus.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc104:JSON.parse('{"path":"contents/pages/articles-module_javascript.html","title":"Les modules Javascript : Un joyeux B","description":"Dès lors que l\'on tente de créer des applications complexes en Javascript, la segmentation du code en divers fichiers devient nécessaire. Cela génère une nouvelle difficulté, la modularisation du Javascript.","shortTitle":"Modules Javascript","shortDesc":"En savoir plus sur la création de modules en Javascript","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES MODULES JAVASCRIPT : UN JOYEUX B\\n⚠ Attention: Cet article est ancien et son contenu n\'est plus d\'actualité. Les\\nmodules JavaScript sont maintenant unifiés et en passe d\'être supportés\\nnativement sur toutes les plateformes grâce à l\'effort de standardisation\\nréalisé par la communauté.\\n\\nDès lors que l\'on tente de créer des applications complexes en Javascript, la\\nsegmentation du code en divers fichiers devient nécessaire. Cela génère une\\nnouvelle difficulté, la modularisation du Javascript.\\n\\nIl existe deux approches principales pour la création de modules Javascript, \\nCommonJS [https://fr.wikipedia.org/wiki/CommonJS], basé sur une approche\\nsynchrone du chargement de module et AMD basé sur le chargement asynchrone des\\nmodules. Voici le résultats de mes recherches sur le sujet.\\n\\nPRINCIPE DE BASE\\nQue ce soit côté serveur ou côté client, le contenu d\'un fichier Javascript\\ns’exécute dans le contexte global. L\'objectif des modules est de cloisonner le\\ncode dans un contexte restreint (appelé scope), et d\'exporter de ce contexte\\nuniquement les informations nécessaires à sa bonne utilisation (closure\\npattern). Un exemple simple de ce principe :\\n\\n(function(exports){\\n var a=1, b=2; // Création de deux variables dans le scope restreint\\n exports.a=a; // Variable a exportée dans le scope global\\n})(window);\\n\\nCe script est très basique malgré son apparence peu conventionnelle pour un\\ndéveloppeur débutant en Javascript. Il crée une fonction anonyme entre\\nparenthèse et l’exécute immédiatement après. L\'objet window représentant le\\ncontexte global, il est passé en argument à cette fonction.\\n\\nAinsi, à l\'intérieur de la fonction, le code s\'exécute dans un contexte\\nrestreint et seules les variables ajoutées à l\'objet exports seront disponibles\\ndans le contexte global. A noter que par variable, étant donné la nature de\\nJavascript, il peut s\'agir de types natifs ou d\'objets (donc aussi de\\nfonctions).\\n\\nNous aurions pu passer en paramètre un autre contexte et ainsi permettre\\nl\'utilisation du module par un autre module.\\n\\nAPPROCHE SYNCHRONE (COMMONJS, NODEJS)\\nConscients de la nécessité de modulariser le Javascript, l\'initiative CommonJs a\\nproposé une méthode qui est utilisée au sein de NodeJS. Les modules CommonJS\\nproposent deux éléments centraux. La fonction require() qui retourne le contenu\\nexporté au chargement d\'un module et l\'objet exports qui permet, un peu à la\\nmanière de l\'exemple précédent, d\'exporter certaines valeurs du module.\\n\\nLa dernière ligne du fichier VarStreamReader\\n[https://github.com/nfroidure/VarStream/blob/ed0b883f15a0ba1e59beebcaf77169adefa4ec53/VarStreamReader.js#L344]\\nde mon projet VarStream montre bien comment exporter un objet (ici l\'objet\\nVarStreamReader) :\\n\\nif(!(typeof(module)==\'undefined\'))\\n module.exports = VarStreamReader;\\n\\nLa condition sert à pouvoir utiliser le fichier dans un contexte étranger à\\nCommonJS. Pour charger un module, rien de plus simple, il suffit d\'utiliser la\\nfonction globale require() comme on peut le voir dans ce fichier qui inclus le\\nmodule cité précédemment :\\n\\nvar VarStreamReader=require(\'./VarStreamReader\');\\n\\nCette approche est parfaite pour le Javascript côté serveur puisque le\\nchargement se fait directement à partir du disque dur. Malheureusement, celle-ci\\nest imparfaite pour le chargement de modules côté client, dans un navigateur.\\n\\nAPPROCHE ASYNCHRONE (AMD)\\nL\'approche synchrone dans le navigateur induit un chargement séquentiel des\\nfichiers Javascript composé d\'itérations successives de la séquence\\ntéléchargement + interprétation. Ainsi, si un module nécessite le chargement de\\ntrois autres modules (concept appelé dépendance), le temps nécessaire pour\\nrésoudre ces dépendances sera donc une addition des temps de téléchargement et\\nd\'interprétation de chacun des trois fichiers Javascript.\\n\\nUn autre inconvénient de l\'approche synchrone est qu\'elle implique le chargement\\ndu fichier via la fonction eval nécessairement. Or comme le rapelle la célèbre\\nexpression eval is evil, cela pose de sérieux problèmes. En effet, la fonction \\neval rend le débogage beaucoup plus compliqué puisque le numéro de la ligne et\\nle nom de fichier ayant provoqué l\'erreur ne sont pas connus, de plus, la\\nfonction eval n\'est pas homogène sur tous les navigateurs posant des problèmes\\névidents de compatibilité Cross-Browser.\\n\\nIl a donc fallu trouver une approche permettant de télécharger chaque fichier\\nJavascript de la même manière que le fait le navigateur pour les fichiers\\nJavascript inclus directement dans le HTML. Pour cela, l\'initiative AMD\\nimplémentée dans la très célèbre librairie RequireJs [https://requirejs.org/]\\nutilise un concept bien connu depuis l\'avènement d\'Ajax.\\n\\nEn effet, RequireJs ajoute une balise <script>\\n[https://github.com/requirejs/requirejs/blob/master/require.js]grâce aux\\nfonctions de manipulation du DOM. Grâce à une fonction de callback, le nom, les\\ndépendances et le contenu du module sont déclarés. Les chargements de scripts\\navec fonctions de callback étaient très utilisées pour charger du JSon depuis un\\nnom de domaine tiers.\\n\\nCette approche permet un chargement asynchrone de toutes les ressources qui sont\\ndès lors parallélisées. Le temps de chargement des modules est donc réduit au\\ntemps de chargement et d\'interprétation du dernier fichier Javascript à être\\ntotalement téléchargé.\\n\\nL\'écriture d\'un module AMD se présente comme suit :\\n\\ndefine(\'moduleName\', [\'dep1\', \'dep2\'], function (dep1, dep2) {\\n // dep1 et dep2 contiennent les exports réalisés par les modules dont dépend ce même module\\n // le contenu du module vient ici return function () {}; // Ici, le module exporte via un retour de fonction, les valeurs souhaitées. }); \\n\\nOn pourrait croire que tout est bien qui fini bien, mais il nous reste un gros\\nproblème à résoudre. Comment utiliser les modules AMD avec NodeJS et vice-versa\\n? Il existe plusieurs solutions [http://www.2ality.com/2011/11/module-gap.html]\\npour rendre inter-compatibles les différents modules, mais cela reste une sorte\\nde tambouille incompréhensible. D\'ailleurs, je serais ravi d\'avoir vos bonnes\\npratiques en la matière.\\n\\nEdit : On me souffle dans l\'oreille\\n[https://twitter.com/_Florian_R/status/236437043004207104]que require.js est\\nutilisable avec NodeJs, un petit lot de consolation donc ;).\\n\\nECMASCRIPT 6 : LA LUMIÈRE AU BOUT DU TUNNEL\\nGrâce à la dernière mouture d\'ECMAScript (aussi appelé ECMAScript.next) le\\nstandard qui sous tend Javascript, un gestionnaire natif de modules Javascript\\nsera disponible. Malheureusement, on ne peut faire aucune prévision en ce qui\\nconcerne le jour où il sera envisageable d\'utiliser ce dernier étant donné qu\'il\\nfaudra que tous les principaux navigateurs du marché l\'aient implémenté. En ce\\nqui concerne NodeJs, étant donné qu\'il est basé sur le moteur javascript V8 de\\nGoogle Chrome, son implémentation sera sûrement conditionnée à celle de Google\\nChrome.\\n\\nL\'approche de la nouvelle version de Javascript est simple, le mot clé export\\npermet de déclarer une fonction comme devant être exportée ou d\'énumérer les\\nvariables devant être exportée.\\n\\nvar a=1, b=2, c=3;\\n export a, b, c;\\nexport function() {};\\n\\nVoilà, vivement que nous puissions enfin utiliser cette version de Javascript et\\nrésoudre tous nos problèmes de compatibilité de modules. Vos précisions ou\\ncommentaires sont les bienvenus.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc105:JSON.parse('{"path":"contents/pages/fr/blog/nommenclature_table_sql_base.html","title":"Conventions de nommage des bases de données","description":"Depuis que j\'ai découvert les bases de données avec MySQL, je n\'ai pas cessé de m\'en servir, tant et si bien que j\'ai fini par définir une convention de nommage.","shortTitle":"Convention de nommage SQL","shortDesc":"En savoir plus sur la convention de nommage que j\'utilise","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCONVENTIONS DE NOMMAGE DES BASES DE DONNÉES\\nDepuis que j\'ai découvert les bases de données avec MySQL, je n\'ai pas cessé de\\nm\'en servir, tant et si bien que j\'ai fini par définir une convention de\\nnommage.\\n\\nJe suis actuellement en pleine lecture du livre Bases de données : Concepts,\\nutilisation et développement de Jean-Luc Hainaut. J\'en ferai la critique sur ce\\nmême blog, pour l\'instant mon impression est plutôt bonne.\\n\\nEn revanche, il y a une chose qui m\'exaspère au plus haut point dans ce livre :\\nle manque d\'uniformité et de clarté dans les appellations des bases et des\\nchamps. Tout est en majuscule (argh !), en français (ouch !) et les clés\\nprimaires auto incrémentées sont nommées comme suit : NCOM, NCLI, NPRO. Ce n\'est\\npas vraiment l\'idéal.\\n\\nAu fil de mon utilisation des bases de données, j\'ai normalisé ma façon de les\\nnommer de manière à ce que l\'on puisse facilement comprendre les requêtes que je\\nrédige. Je vous livre donc ma méthode afin que les plus fainéants d\'entre vous\\nn\'aient pas à y réflechir, mais simplement à l\'appliquer.\\n\\nRÈGLES DE BASE\\nEnglish everywhere. Quel est le sens de nommer ses bases, tables ou champs en\\nfrançais alors que :\\n\\n * la langue des programmeurs est l\'anglais;\\n * rien ne dit qu\'un projet ne s\'internationalisera pas durant son cycle de vie\\n   ou que l\'entreprise ne devienne pas une multinationale entre temps; \\n * l\'anglais est simple, n\'a pas d\'accents donc pas de source d\'erreurs du genre\\n   : comment savoir si la table colles fait référence aux collés du collège du\\n   coin ou aux tubes de colle en réserve ? \\n * Le langage SQL est en anglais, nommer ses tables en français est un curieux\\n   mélange des genres, nécessitant de switcher de français à anglais en\\n   permanence. \\n\\nUtilisation du snake case (ndr: et non camelCase comme initialement recommandé\\nici, MySQL est sensible à la casse, mais ce n\'est pas le cas de PostgreSQL, le\\nsnake case est donc plus largement utilisable partout).\\nLe snake case (ex: an_example_snake_case) rend plus lisible les noms des tables\\nen marquant les différents mots qui composent le nom d\'une table apportant une\\nvisibilité qui n\'est pas de trop pour les requêtes les plus complexes. De plus\\ncette syntaxe est assez naturelle à tout programmeur initié à la programmation\\nen C ou en Rust.\\n\\nCes deux règles suffisent à savoir comment nommer une base de donnée, pour les\\ntables, c\'est un peu plus complexe.\\n\\nNOMENCLATURE DES TABLES\\nJe nomme toutes les tables au pluriel selon un postulat simple : les tables sont\\nune liste de lignes. C\'est aussi une façon de bien distinguer une table d\'une\\ntable liée. Par exemple, grâce à l\'utilisation du pluriel, on ne peut pas\\nconfondre la table products avec la table product_categories ou le champ \\nbill_rows.product.\\n\\nSeules les tables de jointures peuvent contenir (elles le doivent) deux tirets à\\nla suite. Plus précisément l\'underscore (tiret sous le 8 sur votre clavier). Une\\ntable qui associerai des utilisateurs à leurs produits préférés se nommerai \\nproducts__users.\\n\\nC\'est une convention personnelle mais qui peut avoir de l\'importance : le nom de\\nla table products__users doit être composée des deux tables qu\'elle référence\\npar ordre alphabétique croissant. Cela permet de pouvoir prédire leur nom sans\\navoir besoin de consulter le schéma de la table.\\n\\nNOMENCLATURE DES CHAMPS\\nLes champs sont le plus souvent au singulier lorsqu\'il ne peuvent contenir\\nqu\'une valeur. Une exception cependant, les champs de type SET qui contiennent\\nun sous ensemble du set de valeurs qu\'il peuvent contenir (avec PostgreSQL, ce\\nsont les champs de type Array).\\n\\nCela permet aussi de se poser une question sur le contenu de votre table. Si\\nl\'un des champs est au pluriel et n\'est pas de type SET, il y a de fortes\\nprésomptions sur le fait que le schéma de votre table n\'est pas optimal\\nconceptuellement.\\n\\nBien entendu, un champs avec une clé étrangère référençant la table products \\nsera nommé product si possible.\\n\\nEnfin, l\'identifiant unique quand il se résume à une seule valeur\\nauto-incrémentée (90% des cas) sera nommé simplement id.\\n\\nET AU NIVEAU DES REQUÊTES ?\\nEn revanche, pour mes requêtes, j\'utilise les majuscules, distinguant ainsi les\\nparties propres au language des noms des tables et champs. Voici une requête\\ncréée récemment pour l\'export CSV d\'un client:\\n\\nSELECT\\n  equipments.id AS Id,\\n  organizations.label AS Client,\\n  installations.label AS Aire,\\n  CONCAT_WS(\' \', equipment_models.model,\\n  equipments.precision) AS Jeu\\nFROM equipments\\nLEFT JOIN equipment_models\\n  ON equipments.model = equipment_models.id\\nLEFT JOIN installations\\n  ON equipments.installation = installations.id\\nLEFT JOIN organizations\\n  ON installations.organization = organizations.id\\nWHERE equipment_models.model LIKE \'%sans réf%\'\\n\\nVoilà pour mes petites règles de bonne conduite SQL ! Et vous, comment\\nnommez-vous vos tables ? Que pensez-vous de ces principes ?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc106:JSON.parse('{"path":"contents/pages/articles-nommenclature_table_sql_base.html","title":"Conventions de nommage des bases de données","description":"Depuis que j\'ai découvert les bases de données avec MySQL, je n\'ai pas cessé de m\'en servir, tant et si bien que j\'ai fini par définir une convention de nommage.","shortTitle":"Convention de nommage SQL","shortDesc":"En savoir plus sur la convention de nommage que j\'utilise","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCONVENTIONS DE NOMMAGE DES BASES DE DONNÉES\\nDepuis que j\'ai découvert les bases de données avec MySQL, je n\'ai pas cessé de\\nm\'en servir, tant et si bien que j\'ai fini par définir une convention de\\nnommage.\\n\\nJe suis actuellement en pleine lecture du livre Bases de données : Concepts,\\nutilisation et développement de Jean-Luc Hainaut. J\'en ferai la critique sur ce\\nmême blog, pour l\'instant mon impression est plutôt bonne.\\n\\nEn revanche, il y a une chose qui m\'exaspère au plus haut point dans ce livre :\\nle manque d\'uniformité et de clarté dans les appellations des bases et des\\nchamps. Tout est en majuscule (argh !), en français (ouch !) et les clés\\nprimaires auto incrémentées sont nommées comme suit : NCOM, NCLI, NPRO. Ce n\'est\\npas vraiment l\'idéal.\\n\\nAu fil de mon utilisation des bases de données, j\'ai normalisé ma façon de les\\nnommer de manière à ce que l\'on puisse facilement comprendre les requêtes que je\\nrédige. Je vous livre donc ma méthode afin que les plus fainéants d\'entre vous\\nn\'aient pas à y réflechir, mais simplement à l\'appliquer.\\n\\nRÈGLES DE BASE\\nEnglish everywhere. Quel est le sens de nommer ses bases, tables ou champs en\\nfrançais alors que :\\n\\n * la langue des programmeurs est l\'anglais;\\n * rien ne dit qu\'un projet ne s\'internationalisera pas durant son cycle de vie\\n   ou que l\'entreprise ne devienne pas une multinationale entre temps; \\n * l\'anglais est simple, n\'a pas d\'accents donc pas de source d\'erreurs du genre\\n   : comment savoir si la table colles fait référence aux collés du collège du\\n   coin ou aux tubes de colle en réserve ? \\n * Le langage SQL est en anglais, nommer ses tables en français est un curieux\\n   mélange des genres, nécessitant de switcher de français à anglais en\\n   permanence. \\n\\nUtilisation du snake case (ndr: et non camelCase comme initialement recommandé\\nici, MySQL est sensible à la casse, mais ce n\'est pas le cas de PostgreSQL, le\\nsnake case est donc plus largement utilisable partout).\\nLe snake case (ex: an_example_snake_case) rend plus lisible les noms des tables\\nen marquant les différents mots qui composent le nom d\'une table apportant une\\nvisibilité qui n\'est pas de trop pour les requêtes les plus complexes. De plus\\ncette syntaxe est assez naturelle à tout programmeur initié à la programmation\\nen C ou en Rust.\\n\\nCes deux règles suffisent à savoir comment nommer une base de donnée, pour les\\ntables, c\'est un peu plus complexe.\\n\\nNOMENCLATURE DES TABLES\\nJe nomme toutes les tables au pluriel selon un postulat simple : les tables sont\\nune liste de lignes. C\'est aussi une façon de bien distinguer une table d\'une\\ntable liée. Par exemple, grâce à l\'utilisation du pluriel, on ne peut pas\\nconfondre la table products avec la table product_categories ou le champ \\nbill_rows.product.\\n\\nSeules les tables de jointures peuvent contenir (elles le doivent) deux tirets à\\nla suite. Plus précisément l\'underscore (tiret sous le 8 sur votre clavier). Une\\ntable qui associerai des utilisateurs à leurs produits préférés se nommerai \\nproducts__users.\\n\\nC\'est une convention personnelle mais qui peut avoir de l\'importance : le nom de\\nla table products__users doit être composée des deux tables qu\'elle référence\\npar ordre alphabétique croissant. Cela permet de pouvoir prédire leur nom sans\\navoir besoin de consulter le schéma de la table.\\n\\nNOMENCLATURE DES CHAMPS\\nLes champs sont le plus souvent au singulier lorsqu\'il ne peuvent contenir\\nqu\'une valeur. Une exception cependant, les champs de type SET qui contiennent\\nun sous ensemble du set de valeurs qu\'il peuvent contenir (avec PostgreSQL, ce\\nsont les champs de type Array).\\n\\nCela permet aussi de se poser une question sur le contenu de votre table. Si\\nl\'un des champs est au pluriel et n\'est pas de type SET, il y a de fortes\\nprésomptions sur le fait que le schéma de votre table n\'est pas optimal\\nconceptuellement.\\n\\nBien entendu, un champs avec une clé étrangère référençant la table products \\nsera nommé product si possible.\\n\\nEnfin, l\'identifiant unique quand il se résume à une seule valeur\\nauto-incrémentée (90% des cas) sera nommé simplement id.\\n\\nET AU NIVEAU DES REQUÊTES ?\\nEn revanche, pour mes requêtes, j\'utilise les majuscules, distinguant ainsi les\\nparties propres au language des noms des tables et champs. Voici une requête\\ncréée récemment pour l\'export CSV d\'un client:\\n\\nSELECT\\n  equipments.id AS Id,\\n  organizations.label AS Client,\\n  installations.label AS Aire,\\n  CONCAT_WS(\' \', equipment_models.model,\\n  equipments.precision) AS Jeu\\nFROM equipments\\nLEFT JOIN equipment_models\\n  ON equipments.model = equipment_models.id\\nLEFT JOIN installations\\n  ON equipments.installation = installations.id\\nLEFT JOIN organizations\\n  ON installations.organization = organizations.id\\nWHERE equipment_models.model LIKE \'%sans réf%\'\\n\\nVoilà pour mes petites règles de bonne conduite SQL ! Et vous, comment\\nnommez-vous vos tables ? Que pensez-vous de ces principes ?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc107:JSON.parse('{"path":"contents/pages/fr/blog/normalisation_retours_json.html","title":"Normalisation des retours JSON","description":"Peu de gens pensent à normaliser les JSON en début de\\n projet. C\'est dommage car c\'est le meilleur moment pour.","shortTitle":"Normalisation JSON","shortDesc":"Voir comment créer des JSON qui roxxent","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nNORMALISATION DES RETOURS JSON\\n TL; DR:\\n\\n{\\n  items: [1, 2, ...otherUsersIds],\\n  users: {\\n    \'1\' : {\\n      content: {\\n        id: 1,\\n        name: \'Popol\',\\n        organization_id: 1\\n      },\\n      avatarURL: \'//img.ur/trololol.png\'\\n    },\\n    ...otherUsers\\n  },\\n  organisations: {\\n    \'1\': {\\n      content: {\\n        id: 1,\\n        name: \'Popol inc.\',\\n        owner_id: 1\\n      }\\n    }\\n  }\\n}\\n  \\n\\n\\n\\nCela fait un moment que je souhaite écrire ce billet, notamment à l\'usage de\\nréférence pour les personnes à qui je parle de ma façon de designer les retours\\nde mes APIs.\\n\\nSi vous n\'avez pas ragequit ce blog à la suite de son TL;DR, laissez moi vous\\nexpliquer pourquoi j\'ai fini par utiliser cette structure pour mes retours JSON.\\n\\nNORMALISATION\\nÀ ne pas confondre avec standardisation ou structuration. Ici, j\'entends le\\nterme normalisation comme on l\'entendrait dans une base de donnée relationnelle\\nmais pour un seul retour JSON.\\n\\nSouvent, dans de nombreuses API, la décision est prise d\'embarquer des\\nressources relatives à une ressource retournée par un point d\'API. Par exemple,\\nun GET /users/:userId pourrait retourner aussi l\'organisation ou les\\norganisations de ce dernier.\\n\\nCertains diront que c\'est le moment où il faut envisager d\'utiliser GraphQL. Je\\nne serais pas aussi catégorique. Je ne vois pas de souci majeur à ajuster\\nlégèrement un retour pour apporter des informations supplémentaires. Après tout\\nles principes RESTful autorisent plusieurs représentations d\'une même ressource\\ndonc pourquoi s\'en priver ?\\n\\nEn revanche, l\'erreur à ne pas commettre est d\'embarquer les ressources liées\\ndirectement comme propriété de ce dernier. En effet, ceci a pour effet que si\\ndeux utilisateurs ont la même organisation, celle-ci se retrouve en double dans\\nle retour JSON.\\n\\nVous comprenez donc certainement mieux le TL;DR de ce billet. La structure que\\nj\'utilise dans mes JSON permet d\'éviter ce problème.\\n\\nVous remarquerez également que la liste des items d\'une collection n\'est pas\\ndirectement dans la collection, mais seuls leurs identifiants apparaissent. La\\nraison est que cela permet d\'avoir des collections qui se répètent. Par exemple,\\nun point d\'API GET /usersQueue pourrait lister plusieurs fois le même\\nutilisateur car ce dernier aurait réservé plusieurs slots dans une file\\nd\'attente. Autre avantage, le user propriétaire de l\'organisation de mon exemple\\npeut être retrouvé facilement dans le JSON.\\n\\nVous pourriez me rétorquer “Et pourquoi pas JSON Reference ?”. Pour rappel, JSON\\nreference [https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03]est une\\nspécification qui vise à pouvoir utiliser des références à d\'autres valeurs du\\nJSON lui-même afin de pouvoir créer des références circulaires.\\n\\nTrois raisons m\'en empêchent :\\n\\n * la première est que je souhaite pouvoir désérialiser mes JSON avec le parseur\\n   natif sur tous les navigateurs. Cela, bien entendu, pour des raisons de\\n   performances. Un navigateur passe son temps à désérialiser du JSON, il est\\n   donc hors de question de faire cela en JS avec un polyfill de JSON reference; \\n * la seconde est que je veux également pouvoir croiser mes objets de façon\\n   transversale. En maintenant des stores d\'objets je peux dupliquer les\\n   références sur toute mon application et ainsi optimiser la consommation\\n   mémoire de l\'application entière. Avec ce format, un simple Object.assign \\n   dans mon wrapper d\'API [./generation_api_cliente.html] suffit; \\n * la dernière est que je ne veux pas polluer mes objets, ce qui me permet de\\n   transitionner en douceur sur le point suivant. \\n\\nSÉGRÉGATION\\nEn général, la représentation d\'une ressource contient deux sortes\\nd\'informations. Les données normalisées (encore ;)) sont souvent stockées dans\\nla base de données. Il s\'agit de l\'essence de la ressource. C\'est souvent sur\\nces données que votre CRUD va agir dans une application. C\'est également\\ncelle-là que vos appels PUT enverront.\\n\\nC\'est pour cela que je les ségrègue dans une propriété content. La convention\\nest que son contenu est ce qui peut-être modifié directement par les\\nutilisateurs. Ainsi, pas de filtre à appliquer, dans le front pour extraire les\\ndonnées modifiables.\\n\\nLe second type de données sont ce que j\'appelle les données calculées. Ces\\ndernières sont utiles uniquement pour l\'affichage de la ressource et ne peuvent\\nêtre modifiées directement. C\'est le cas du lien d\'avatar dans mon exemple, mais\\nc\'est aussi le cas des dates d\'enregistrement dans les bases de données.\\n\\nCOMPOSITION DES JSON SCHEMAS\\nJ\'aime beaucoup JSON Schema mais il faut bien l\'avouer : rien n\'est plus\\nsaoulant que de les définir. Cette façon de faire permet de réutiliser les\\ndéfinitions simplement afin de construire sa définition Swagger de façon la\\nmoins répétitive possible. Voici comment je définirai le JSON Schema de la\\nreprésentation utilisée en fil rouge de ce billet :\\n\\n\\n  const userSchema = require(\'user\');\\n  const organizationSchema = require(\'organization\');\\n  const { idSchema, idPattern } = require(\'utils\');\\n\\n  module.exports = {\\n    title: \'Users collection\',\\n    type: \'object\',\\n    additionalProperties: false,\\n    properties: {\\n      items: {\\n        title: \'User\\\\\'s identifiers for the queried collection.\',\\n        type: \'array\',\\n        items: idSchema,\\n      },\\n      users: {\\n        title: \'Users hash\',\\n        description: \'A hash containing users in the items collection.\',\\n        type: \'object\',\\n        patternProperties: {\\n          idPattern: userSchema,\\n        }\\n      },\\n      organizations: {\\n        title: \'Organizations hash\',\\n        description: \'A hash containing organizations linked to users in the collection.\',\\n        type: \'object\',\\n        patternProperties: {\\n          idPattern: organizationSchema,\\n        },\\n      },\\n    },\\n  };\\n\\n\\nEt voilà ;). Vous savez tout ! N\'hésitez pas à me fournir vos astuces\\npersonnelles pour structurer et normaliser vos retours JSON !\\n\\n Ajout de dernière minute :\\nKévin Dunglas, un nordiste très actif dans les communautés PHP/REST a cité sur\\nTwitter les standards suivants comme substitutifs à la structure présentée dans\\ncet article :\\n\\n *  JSON-LD : [http://json-ld.org/] une alternative à l\'utilisation de JSON\\n   Reference cité ci-dessus. Je n\'ai pas choisi ce format car pour moi il\\n   mélange définition des données avec les données elle-mêmes. Au delà de\\n   l\'overhead en taille causé par l\'utilisation des URIs en lieu et place des\\n   identifiants ainsi que celui causé par l\'ajout d\'informations de typage, je\\n   le trouve moins lisible. De plus, il rend moins efficace la désérialisation\\n   du JSON car on compare des chaînes de caractères bien plus longues et l\'on\\n   doit constituer les hashs après la désérialisation. \\n *  Hydra : [http://www.hydra-cg.com/spec/latest/core/] permet d\'ajouter plus\\n   d\'informations de \\"type\\" par dessus JSON-LD comme les opérations que l\'on\\n   peut réaliser sur la ressource. Le fait d\'étendre JSON-LD l\'écarte de fait\\n   dans mon cas, il va plus loin, mais dans la mauvaise direction selon moi. \\n *  HAL : [http://stateless.co/hal_specification.html] je ne connaissais pas.\\n   Allez sur le site scrollez sur le premier JSON et voyez si vous avez envie de\\n   lire ce dernier. Je ne crée pas les APIs pour les robots, mais pour les\\n   humains. Pour les robots, une fois encore, il y a le fichier Swagger. \\n\\nJe n\'ai pas parlé de l\'hypermédia, mais cela va de soi. Les JSON doivent être\\nhypermédia et la concision les a exclu de cet article. Cependant, aujourd\'hui,\\nn\'importe quel explorateur de JSON sait afficher les URL où qu\'elles se trouvent\\net le fichier Swagger saura spécifier aux robots les URLs qu\'ils peuvent\\nexplorer.\\n\\nSwagger/OpenAPI sont des standards ouverts et permettent un grand nombre de\\nchoses : génération de l\'API cliente pour tout un tas de cibles, tooling et\\ngénération de documentation. C\'est le standard ouvert que j\'ai décidé d\'utiliser\\ncar il apporte une bonne séparation entre définition et données tout en laissant\\ntoute latitude au développeurs pour apporter leur propre valeur ajoutée.\\n\\nJ\'ai beaucoup de respect pour ceux qui créent les standards et je pense que tous\\nles standards valent la peine d\'être considérés. Je me réserve en revanche le\\nchoix des armes. N\'oublions pas qu\'XML est un standard, tout comme JSONX\\n[https://www.ibm.com/support/knowledgecenter/SS9H2Y_7.1.0/com.ibm.dp.doc/json_jsonx.html]\\n;). Il ne faut pas suivre bêtement un standard, mais choisir celui qui nous\\nconvient, celui qui nous permet d\'être productif. Swagger est clairement mon\\nchoix de prédilection. Il est à l\'image de JavaScript. Il va droit au but et\\nreste suffisamment simple à l\'usage. D\'ailleurs, je suis réservé sur les\\névolutions apportées par OpenAPI, j\'ai peur que cela ne soit plus le cas. Mais\\nbon, d\'ici là, peut-être qu\'un nouveau standard pointera le bout de son nez ;).\\n\\n Dessin hunoristique XKCD sur les compétition entre standards [https://imgs.xkcd.com/comics/standards.png]\\nSource: XKCD [https://xkcd.com/927/]\\n\\nEnfin, utiliser un standard n\'est même pas une obligation. Innover c\'est souvent\\ntout l\'inverse. Les exemples ne manquent pas, mais voici le dernier en date qui\\nm\'a complètement scié et m\'a pousser une fois encore à remettre en question mes\\nidées reçues :\\n\\n>  So much devs refers to practices as ugly or conceptually weird when real\\nmeasurement of systems is efficiency on the short and long run. \\n\\n— Nicolas Froidure (@nfroidure) 18 février 2017\\n[https://twitter.com/nfroidure/status/832923111355973632]\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc108:JSON.parse('{"path":"contents/pages/fr/blog/notepad_plus_plus_debian_gnu_linux.html","title":"Installer/utiliser Notepad++ sous Debian GNU/Linux","description":"L\'univers windows est pour moi du passé, mais Notepad++ reste un must-have sans lequel coder serait bien moins sympa. Découvrez comment profiter de ce logiciel sous Linux.","shortTitle":"Notepad++ sous Debian","shortDesc":"Voir la marche à suivre pour profiter de Notepad++ sous Linux","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nINSTALLER/UTILISER NOTEPAD++ SOUS DEBIAN GNU/LINUX\\n⚠ Attention: Cet article est ancien et je n\'utilise plus Notepad++ depuis\\nlongtemps. L\'éditeur en lui même vaut probablement encore le coup sous Windows,\\nmais je ne vous recommande pas de l\'utiliser sous GNU/Linux vu les alternatives\\nqui existent dont VSCode [ma_config_vscode.html] que j\'utilise maintenant et qui\\nfonctionne d\'ailleurs également sous Windows et Mac.\\n\\nL\'univers windows est pour moi du passé, mais Notepad++ reste un must-have sans\\nlequel coder serait bien moins sympa. Découvrez comment profiter de ce logiciel\\nsous Linux.\\n\\nNotepad++ est selon moi le meilleur éditeur de code de tous les temps. Bien-sûr\\nce n\'est pas un IDE complet qui fait le café, mais l\'avantage est qu\'il démarre\\nau quart de tour, on code sans attendre. De plus, Notepad++ offre de nombreuses\\nfonctionnalités facilement accessibles comme voir le code de deux fichiers\\nsimultanément, ou d\'un seul cloné dans l\'autre vue. De nombreux plugins sont\\ndisponibles et les fonctionnalités les plus utilisées sont immédiatement\\naccessibles. Les raccourcis clavier son intuitifs et la navigation clavier est\\nun pur bonheur. Enfin, il permet de capturer une action pour la rejouer sur\\nplusieurs fichiers/lignes.\\n\\n Notepad++ sous Debian GNU/Linux [/images/capture-notepad.png]\\n\\nBref, c\'est pour cela que lors de mon passage à Debian GNU/Linux, j\'ai\\nimmédiatement commencé l\'installation de Notepad++. Voici la marche à suivre :\\n\\nINSTALLATION : WINE EST VOTRE AMI\\nWine est un logiciel qui permet d\'exécuter des programmes windows sous Linux.\\nPour l\'installer, il suffit de taper la commande suivante dans une console\\nadministrateur :\\n\\nroot@production:/# aptitude install wine\\n\\nVous pouvez aussi utiliser le gestionnaire de paquet : Système > Administration\\n> Gestionnaire de paquets Synaptics.\\n\\nUne fois cela fait, il vous suffit de vous rendre sur le site officiel de\\nNotepad++ [http://notepad-plus-plus.org](vous pouvez faire une donation) pour\\ntélécharger le programme. A la fin du téléchargement, vous devriez normalement\\npouvoir installer le logiciel avec Wine par un simple double clic. La procédure\\nd\'installation dure quelques minutes en fonction de votre matériel et Notepad++\\nest prêt à l\'emploi.\\n\\nUTILISATION : WINE EST VOTRE MEILLEUR AMI, SSHFS AUSSI !\\nLorsque j\'ai commencé à utiliser Notepad++, je m\'attendais à avoir des problèmes\\nde stabilité, des fonctionnalités manquantes etc... C\'est avec grand plaisir que\\nj\'ai découvert que Wine est un excellent logiciel, tout quasiment est disponible\\n: copier/coller, drag n\' drop...\\n\\nLe seul problème que j\'ai rencontré est que j\'ai un serveur sur lequel je me\\nconnectais en SSH grâce à l\'interface graphique de Debian. Malheureusement, il\\nm\'a été impossible d\'accéder à ces fichiers avec Notepad++. J\'ai contourné le\\nproblème en installant l\'excellent SSHFS.\\n\\nSSHFS est un outil basé sur la librairie Fuse qui permet de wrapper un protocole\\npour le faire passer pour un système de fichiers aux yeux de Linux. Pour\\ninstaller SSHFS :\\n\\nroot@production:/# aptitude install sshfs \\n\\nPuis, pour monter un système de fichiers, cela se passe dans un shell\\nutilisateur :\\n\\n\\nnfroidure@production:/# mkdir /home/nfroidure/Bureau/Server && sshfs root@server:/home/ /home/nfroidure/Bureau/Server \\n\\nBien sûr, le mkdir n\'est à faire qu\'une seule fois à moins que vous supprimiez\\nle fichier en même temps que vous démontez le système de fichiers. Une fois le\\nsystème de fichiers monté, il est accessible comme un lecteur de disque sous\\nWine. Pour démonter le système de fichiers, un simple :\\n\\n\\nnfroidure@production:/# fusermount -u /home/nfroidure/Bureau/Server\\n\\nSi vous avez besoin quasi systématiquement de monter ce système de fichier, vous\\npouvez utiliser l\'outil Système > Préférences > Applications au démarrage pour\\nentrer la ligne de commande qui sera exécuté à chaque démarrage de votre session\\nutilisateur. Bien-sûr, dans ce genre de cas, mieux vaut utiliser\\nl\'authentification par clé publique/privée mais ce n\'est pas le sujet de cet\\narticle.\\n\\nEnfin, le clic-droit sur un onglet n\'affiche pas l\'habituel menu contextuel\\npermettant par exemple de déplacer/cloner un fichier vers l\'autre vue. J\'ai\\ndécouvert quasiment par erreur que glisser déposer l\'onglet dans l\'espace\\nd\'édition permet d\'afficher ce menu contextuel.\\n\\nFinalement je n\'ai eu qu\'un seul problème non-résolu, la fonction pratique de\\nNotepad++ consistant à prévenir lorsqu\'un fichier ouvert dans Notepad++ a été\\nédité en dehors cause un bug qui ne se résout que par la fermeture manuelle du\\nprogramme (kill). Autant dire qu\'il ne vaut mieux pas lire vos fichiers de log\\navec Notepad++ :D.\\n\\nCONCLUSION\\nCe qui est valable ici pour Debian l\'est tout autant pour les distributions\\nbasées sur Debian (Ubuntu par exemple), voire même d\'autres distributions en\\nchangeant les commandes concernant le gestionnaire de paquets par celles de\\nvotre distribution préférée.\\n\\nVous n\'avez plus aucune excuse pour passer à Debian maintenant que votre éditeur\\nde code préféré est disponible ! Vous utilisez Notepad++ sous Linux ? Laissez\\nmoi savoir comment vous l\'utilisez ou vos petites astuces pour une meilleure\\nutilisation, ça se passe dans les commentaires !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc109:JSON.parse('{"path":"contents/pages/articles-notepad_plus_plus_debian_gnu_linux.html","title":"Installer/utiliser Notepad++ sous Debian GNU/Linux","description":"L\'univers windows est pour moi du passé, mais Notepad++ reste un must-have sans lequel coder serait bien moins sympa. Découvrez comment profiter de ce logiciel sous Linux.","shortTitle":"Notepad++ sous Debian","shortDesc":"Voir la marche à suivre pour profiter de Notepad++ sous Linux","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nINSTALLER/UTILISER NOTEPAD++ SOUS DEBIAN GNU/LINUX\\n⚠ Attention: Cet article est ancien et je n\'utilise plus Notepad++ depuis\\nlongtemps. L\'éditeur en lui même vaut probablement encore le coup sous Windows,\\nmais je ne vous recommande pas de l\'utiliser sous GNU/Linux vu les alternatives\\nqui existent dont VSCode [ma_config_vscode.html] que j\'utilise maintenant et qui\\nfonctionne d\'ailleurs également sous Windows et Mac.\\n\\nL\'univers windows est pour moi du passé, mais Notepad++ reste un must-have sans\\nlequel coder serait bien moins sympa. Découvrez comment profiter de ce logiciel\\nsous Linux.\\n\\nNotepad++ est selon moi le meilleur éditeur de code de tous les temps. Bien-sûr\\nce n\'est pas un IDE complet qui fait le café, mais l\'avantage est qu\'il démarre\\nau quart de tour, on code sans attendre. De plus, Notepad++ offre de nombreuses\\nfonctionnalités facilement accessibles comme voir le code de deux fichiers\\nsimultanément, ou d\'un seul cloné dans l\'autre vue. De nombreux plugins sont\\ndisponibles et les fonctionnalités les plus utilisées sont immédiatement\\naccessibles. Les raccourcis clavier son intuitifs et la navigation clavier est\\nun pur bonheur. Enfin, il permet de capturer une action pour la rejouer sur\\nplusieurs fichiers/lignes.\\n\\n Notepad++ sous Debian GNU/Linux [/images/capture-notepad.png]\\n\\nBref, c\'est pour cela que lors de mon passage à Debian GNU/Linux, j\'ai\\nimmédiatement commencé l\'installation de Notepad++. Voici la marche à suivre :\\n\\nINSTALLATION : WINE EST VOTRE AMI\\nWine est un logiciel qui permet d\'exécuter des programmes windows sous Linux.\\nPour l\'installer, il suffit de taper la commande suivante dans une console\\nadministrateur :\\n\\nroot@production:/# aptitude install wine\\n\\nVous pouvez aussi utiliser le gestionnaire de paquet : Système > Administration\\n> Gestionnaire de paquets Synaptics.\\n\\nUne fois cela fait, il vous suffit de vous rendre sur le site officiel de\\nNotepad++ [http://notepad-plus-plus.org](vous pouvez faire une donation) pour\\ntélécharger le programme. A la fin du téléchargement, vous devriez normalement\\npouvoir installer le logiciel avec Wine par un simple double clic. La procédure\\nd\'installation dure quelques minutes en fonction de votre matériel et Notepad++\\nest prêt à l\'emploi.\\n\\nUTILISATION : WINE EST VOTRE MEILLEUR AMI, SSHFS AUSSI !\\nLorsque j\'ai commencé à utiliser Notepad++, je m\'attendais à avoir des problèmes\\nde stabilité, des fonctionnalités manquantes etc... C\'est avec grand plaisir que\\nj\'ai découvert que Wine est un excellent logiciel, tout quasiment est disponible\\n: copier/coller, drag n\' drop...\\n\\nLe seul problème que j\'ai rencontré est que j\'ai un serveur sur lequel je me\\nconnectais en SSH grâce à l\'interface graphique de Debian. Malheureusement, il\\nm\'a été impossible d\'accéder à ces fichiers avec Notepad++. J\'ai contourné le\\nproblème en installant l\'excellent SSHFS.\\n\\nSSHFS est un outil basé sur la librairie Fuse qui permet de wrapper un protocole\\npour le faire passer pour un système de fichiers aux yeux de Linux. Pour\\ninstaller SSHFS :\\n\\nroot@production:/# aptitude install sshfs \\n\\nPuis, pour monter un système de fichiers, cela se passe dans un shell\\nutilisateur :\\n\\n\\nnfroidure@production:/# mkdir /home/nfroidure/Bureau/Server && sshfs root@server:/home/ /home/nfroidure/Bureau/Server \\n\\nBien sûr, le mkdir n\'est à faire qu\'une seule fois à moins que vous supprimiez\\nle fichier en même temps que vous démontez le système de fichiers. Une fois le\\nsystème de fichiers monté, il est accessible comme un lecteur de disque sous\\nWine. Pour démonter le système de fichiers, un simple :\\n\\n\\nnfroidure@production:/# fusermount -u /home/nfroidure/Bureau/Server\\n\\nSi vous avez besoin quasi systématiquement de monter ce système de fichier, vous\\npouvez utiliser l\'outil Système > Préférences > Applications au démarrage pour\\nentrer la ligne de commande qui sera exécuté à chaque démarrage de votre session\\nutilisateur. Bien-sûr, dans ce genre de cas, mieux vaut utiliser\\nl\'authentification par clé publique/privée mais ce n\'est pas le sujet de cet\\narticle.\\n\\nEnfin, le clic-droit sur un onglet n\'affiche pas l\'habituel menu contextuel\\npermettant par exemple de déplacer/cloner un fichier vers l\'autre vue. J\'ai\\ndécouvert quasiment par erreur que glisser déposer l\'onglet dans l\'espace\\nd\'édition permet d\'afficher ce menu contextuel.\\n\\nFinalement je n\'ai eu qu\'un seul problème non-résolu, la fonction pratique de\\nNotepad++ consistant à prévenir lorsqu\'un fichier ouvert dans Notepad++ a été\\nédité en dehors cause un bug qui ne se résout que par la fermeture manuelle du\\nprogramme (kill). Autant dire qu\'il ne vaut mieux pas lire vos fichiers de log\\navec Notepad++ :D.\\n\\nCONCLUSION\\nCe qui est valable ici pour Debian l\'est tout autant pour les distributions\\nbasées sur Debian (Ubuntu par exemple), voire même d\'autres distributions en\\nchangeant les commandes concernant le gestionnaire de paquets par celles de\\nvotre distribution préférée.\\n\\nVous n\'avez plus aucune excuse pour passer à Debian maintenant que votre éditeur\\nde code préféré est disponible ! Vous utilisez Notepad++ sous Linux ? Laissez\\nmoi savoir comment vous l\'utilisez ou vos petites astuces pour une meilleure\\nutilisation, ça se passe dans les commentaires !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc110:JSON.parse('{"path":"contents/pages/fr/blog/orange_hackaton.html","title":"Orange HTML5 Hackathon : Pourquoi j\'ai aimé !","description":"Dans le cadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a été organisé. Avec mon équipe, nous avons remporté le grand prix du jury.","shortTitle":"Orange HTML5 Hackathon","shortDesc":"Voir mon impression sur ce hackathon","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nORANGE HTML5 HACKATHON : POURQUOI J\'AI AIMÉ !\\nDans le cadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a\\nété organisé. Avec mon équipe, nous avons remporté le grand prix du jury.\\n\\nObtenir une application HTML5 innovante et fonctionnelle en 30h est un véritable\\ndéfi. Orange nous a pourtant permis de le relever dans les meilleures\\nconditions. Petit retour d\'expérience sur le Hackaton et l\'application créée ces\\ndeux derniers jours pour laquelle nous avons obtenu le premier prix.\\n\\nAMBIANCE ET FAIR PLAY\\nClairement, je suis vraiment ravi de l\'ambiance cosmopolite de ce hackaton qui\\nnous a permis de découvrir de nouveaux visages dans une ambiance très sympa\\n(Espace Cinko à Paris). Malgré une durée honorable, je n\'ai pas bu un seul café\\nfroid (sauf ceux qui ont été abandonnés lors d\'une séance intensive de code).\\nLes serveurs et le staff Orange étaient très prévenants, ça fait toujours\\nplaisir d\'être traité avec égard. Je ne savais pas trop à quoi m\'attendre en\\narrivant et j\'ai finalement été très agréablement surpris.\\n\\nOrange a joué le jeu à 100% avec un vrai hackathon, des projets développés from\\nscratch et des équipes formées sur place. Le jury était composé d\'acteurs\\nexternes (journalistes, représentants de Samsung et Intel...etc.) et malgré la\\ncompétition, un très bon esprit règnait. Chacun d\'entre nous étant curieux des\\nconcepts développés par chaque équipe, des échanges très intéressants trop vite\\ninterrompus par la montre qui tournait inéxorablement.\\n\\nLes seuls bémols que je poserais sont les problèmes de connexion parfois\\nrencontrés (rapidement traités) ainsi que le manque de serveur tout prêt ou\\nd\'acteur du cloud pour nous proposer des solutions qui nous auraient permis de\\ngagner du temps. Les membres de ma team utilisaient Windows, j\'ai donc dû\\nparamétrer un serveur Samba pour leur donner un accès au code source de\\nl\'application.\\n\\nMA TEAM ET NOTRE APP\\n Formulaire d\'enregistrement [/images/helpme3.png]J\'ai eu le plaisir de\\ntravailler avec Rocky Lal, développeur VB.net intéressé par Javascript/HTML5 et \\nJulien Picaud [https://twitter.com/#%21/julpics], product manager dans une boîte\\nde développement applicatif. Nous nous sommes tout de suite regroupés et nous\\navons décidé de développer une application mobile HTML5. Afin de coller aux\\ncritères du hackathon, nous avons tenté de trouver une idée au business model\\nréaliste et utilisant un maximum d\'API parmi les suivantes (Orange API, HTML5\\nAPI, Facebook API).\\n\\nHelpMe! matche les deux premières. Son concept est simple : fédérer une\\ncommunauté d\'entr\'aide dont chaque membre déclare son n° de GSM, ses compétences\\net les langues qu\'il parle. Les GSM sont géolocalisés régulièrement grâce à\\nl\'API Geolocation d\'Orange.\\n\\nL\'avantage de cette API est qu\'elle ne nécessite pas que les membres de la\\ncommunauté aient une application qui tourne en continu sur leur mobile\\nconsommant de la batterie. Elle triangule la position des mobiles grâce aux\\nantennes relais utilisées par les membres de la communauté.\\n\\n Le formulaire de demande [/images/helpme1.png]Lorsque le membre s\'enregistre,\\nil reçoit un SMS lui demandant d\'accepter que nous le géolocalisions.\\n\\nNous voilà avec une base de compétences géolocalisées qu\'il ne nous reste qu\'à\\nmettre à disposition des utilisateurs. C\'est le but du petit formulaire\\ndisponible en page d\'accueil.\\n\\nSimplissisme, il permet de préciser le type de compétences souhaitées et de\\njoindre un message. De manière transparente, la page d\'accueil récupère la\\ngéolocalisation de l\'utilisateur grâce à l\'API HTML5 Geolocation. Une fois le\\nformulaire soumis, le système passe en revue les membres de la communauté afin\\nde déterminer ceux qui ont les bonnes compétences et se trouvent à proximité.\\n\\nSi un membre est sélectionné, un SMS contenant le type de demande, le message et\\nla localisation de la personne lui est transmis.\\n\\nNous avons également utilisé un cache manifest (HTML5 AppCache) de manière à ce\\nque l\'application soit disponible rapidement même dans le cas où la connexion\\nest très mauvaise. La communauté étant ouverte, il n\'est pas nécessaire d\'avoir\\ndéclaré ses compétences pour obtenir de l\'aide.\\n\\n ECRAN DE CONFIRMATION [/IMAGES/HELPME2.PNG]SOUS LE CAPOT\\nCôté serveur, j\'ai utilisé NodeJs que je n\'avais jamais utilisé auparavant, une\\npetite difficulté supplémentaire qui fût finalement aisément surmontée par\\nrapport au timing imposé. D\'ailleurs la mise en place est assez intuitive et en\\ntant que développeur Javascript expérimenté et avec une bonne expérience en\\nbackend, c\'est assez simple de se mettre dans le bain.\\n\\nJ\'ai vite trouvé quelques exemples de code qui satisfaisaient mes besoins : un\\nserveur de fichiers web, la récupération des contenus des requêtes,\\nl\'utilisation d\'une API REST pour les accès à l\'API Orange...\\n\\nLe tout a été pushé sur GitHub. [https://github.com/nfroidure/HelpMe]\\n\\nAVENIR DU BOUZIN\\nJe n\'ai pas réfléchi à son avenir, je ne sais même pas si il en a car mon emploi\\ndu temps est chargé cependant, de nombreux cas d\'utilisation sont possibles.\\n\\nEn effet, les propriétaires de magasins etc... pourraient être intéressés par\\nune application qui leur donnerait l\'occasion de répondre à des demandes d\'aide\\nde leur quartier en temps réèl afin de montrer qu\'ils sont sympas, d\'attirer du\\nmonde, d\'établir un premier contact et d\'espérer doper leurs ventes avec plus de\\nchalands.\\n\\nLes entreprises également pourraient équiper leur personnel de téléphones de ce\\ntype afin que des visiteurs ou des salariés puissent rapidement informer qui de\\ndroit lorsqu\'un problème survient (trouver le défibrillateur en cas d\'arrêt\\ncardiaque par ex.).\\n\\nPour les zoos, les grandes zones touristiques (je pense à Center Parcs), cela\\npeut aussi être intéressant de proposer ce type de service aux résidents afin\\nd\'offrir une couverture haut de gamme aux clients.\\n\\nBref, les idées sont nombreuses, les entreprises intéressées pour développer ce\\nconcept peuvent me contacter, notre team peut se reconstituer, on est bien-sûr\\nrestés en contact !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc111:JSON.parse('{"path":"contents/pages/articles-orange_hackaton.html","title":"Orange HTML5 Hackathon : Pourquoi j\'ai aimé !","description":"Dans le cadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a été organisé. Avec mon équipe, nous avons remporté le grand prix du jury.","shortTitle":"Orange HTML5 Hackathon","shortDesc":"Voir mon impression sur ce hackathon","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nORANGE HTML5 HACKATHON : POURQUOI J\'AI AIMÉ !\\nDans le cadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a\\nété organisé. Avec mon équipe, nous avons remporté le grand prix du jury.\\n\\nObtenir une application HTML5 innovante et fonctionnelle en 30h est un véritable\\ndéfi. Orange nous a pourtant permis de le relever dans les meilleures\\nconditions. Petit retour d\'expérience sur le Hackaton et l\'application créée ces\\ndeux derniers jours pour laquelle nous avons obtenu le premier prix.\\n\\nAMBIANCE ET FAIR PLAY\\nClairement, je suis vraiment ravi de l\'ambiance cosmopolite de ce hackaton qui\\nnous a permis de découvrir de nouveaux visages dans une ambiance très sympa\\n(Espace Cinko à Paris). Malgré une durée honorable, je n\'ai pas bu un seul café\\nfroid (sauf ceux qui ont été abandonnés lors d\'une séance intensive de code).\\nLes serveurs et le staff Orange étaient très prévenants, ça fait toujours\\nplaisir d\'être traité avec égard. Je ne savais pas trop à quoi m\'attendre en\\narrivant et j\'ai finalement été très agréablement surpris.\\n\\nOrange a joué le jeu à 100% avec un vrai hackathon, des projets développés from\\nscratch et des équipes formées sur place. Le jury était composé d\'acteurs\\nexternes (journalistes, représentants de Samsung et Intel...etc.) et malgré la\\ncompétition, un très bon esprit règnait. Chacun d\'entre nous étant curieux des\\nconcepts développés par chaque équipe, des échanges très intéressants trop vite\\ninterrompus par la montre qui tournait inéxorablement.\\n\\nLes seuls bémols que je poserais sont les problèmes de connexion parfois\\nrencontrés (rapidement traités) ainsi que le manque de serveur tout prêt ou\\nd\'acteur du cloud pour nous proposer des solutions qui nous auraient permis de\\ngagner du temps. Les membres de ma team utilisaient Windows, j\'ai donc dû\\nparamétrer un serveur Samba pour leur donner un accès au code source de\\nl\'application.\\n\\nMA TEAM ET NOTRE APP\\n Formulaire d\'enregistrement [/images/helpme3.png]J\'ai eu le plaisir de\\ntravailler avec Rocky Lal, développeur VB.net intéressé par Javascript/HTML5 et \\nJulien Picaud [https://twitter.com/#%21/julpics], product manager dans une boîte\\nde développement applicatif. Nous nous sommes tout de suite regroupés et nous\\navons décidé de développer une application mobile HTML5. Afin de coller aux\\ncritères du hackathon, nous avons tenté de trouver une idée au business model\\nréaliste et utilisant un maximum d\'API parmi les suivantes (Orange API, HTML5\\nAPI, Facebook API).\\n\\nHelpMe! matche les deux premières. Son concept est simple : fédérer une\\ncommunauté d\'entr\'aide dont chaque membre déclare son n° de GSM, ses compétences\\net les langues qu\'il parle. Les GSM sont géolocalisés régulièrement grâce à\\nl\'API Geolocation d\'Orange.\\n\\nL\'avantage de cette API est qu\'elle ne nécessite pas que les membres de la\\ncommunauté aient une application qui tourne en continu sur leur mobile\\nconsommant de la batterie. Elle triangule la position des mobiles grâce aux\\nantennes relais utilisées par les membres de la communauté.\\n\\n Le formulaire de demande [/images/helpme1.png]Lorsque le membre s\'enregistre,\\nil reçoit un SMS lui demandant d\'accepter que nous le géolocalisions.\\n\\nNous voilà avec une base de compétences géolocalisées qu\'il ne nous reste qu\'à\\nmettre à disposition des utilisateurs. C\'est le but du petit formulaire\\ndisponible en page d\'accueil.\\n\\nSimplissisme, il permet de préciser le type de compétences souhaitées et de\\njoindre un message. De manière transparente, la page d\'accueil récupère la\\ngéolocalisation de l\'utilisateur grâce à l\'API HTML5 Geolocation. Une fois le\\nformulaire soumis, le système passe en revue les membres de la communauté afin\\nde déterminer ceux qui ont les bonnes compétences et se trouvent à proximité.\\n\\nSi un membre est sélectionné, un SMS contenant le type de demande, le message et\\nla localisation de la personne lui est transmis.\\n\\nNous avons également utilisé un cache manifest (HTML5 AppCache) de manière à ce\\nque l\'application soit disponible rapidement même dans le cas où la connexion\\nest très mauvaise. La communauté étant ouverte, il n\'est pas nécessaire d\'avoir\\ndéclaré ses compétences pour obtenir de l\'aide.\\n\\n ECRAN DE CONFIRMATION [/IMAGES/HELPME2.PNG]SOUS LE CAPOT\\nCôté serveur, j\'ai utilisé NodeJs que je n\'avais jamais utilisé auparavant, une\\npetite difficulté supplémentaire qui fût finalement aisément surmontée par\\nrapport au timing imposé. D\'ailleurs la mise en place est assez intuitive et en\\ntant que développeur Javascript expérimenté et avec une bonne expérience en\\nbackend, c\'est assez simple de se mettre dans le bain.\\n\\nJ\'ai vite trouvé quelques exemples de code qui satisfaisaient mes besoins : un\\nserveur de fichiers web, la récupération des contenus des requêtes,\\nl\'utilisation d\'une API REST pour les accès à l\'API Orange...\\n\\nLe tout a été pushé sur GitHub. [https://github.com/nfroidure/HelpMe]\\n\\nAVENIR DU BOUZIN\\nJe n\'ai pas réfléchi à son avenir, je ne sais même pas si il en a car mon emploi\\ndu temps est chargé cependant, de nombreux cas d\'utilisation sont possibles.\\n\\nEn effet, les propriétaires de magasins etc... pourraient être intéressés par\\nune application qui leur donnerait l\'occasion de répondre à des demandes d\'aide\\nde leur quartier en temps réèl afin de montrer qu\'ils sont sympas, d\'attirer du\\nmonde, d\'établir un premier contact et d\'espérer doper leurs ventes avec plus de\\nchalands.\\n\\nLes entreprises également pourraient équiper leur personnel de téléphones de ce\\ntype afin que des visiteurs ou des salariés puissent rapidement informer qui de\\ndroit lorsqu\'un problème survient (trouver le défibrillateur en cas d\'arrêt\\ncardiaque par ex.).\\n\\nPour les zoos, les grandes zones touristiques (je pense à Center Parcs), cela\\npeut aussi être intéressant de proposer ce type de service aux résidents afin\\nd\'offrir une couverture haut de gamme aux clients.\\n\\nBref, les idées sont nombreuses, les entreprises intéressées pour développer ce\\nconcept peuvent me contacter, notre team peut se reconstituer, on est bien-sûr\\nrestés en contact !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc112:JSON.parse('{"path":"contents/pages/fr/blog/performance_et_svg.html","title":"Performance des sites web avec SVG","description":"SVG est de plus en plus supporté par les navigateurs. Cela peut nous amener à reconsidérer nos choix en ce qui concerne la performance du front-end. Petit tour d\'horizon des plus de ce format.","shortTitle":"Performance et SVG","shortDesc":"En savoir plus sur les avantages de SVG pour la performance","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nPERFORMANCE DES SITES WEB AVEC SVG\\nSVG est de plus en plus supporté par les navigateurs. Cela peut nous amener à\\nreconsidérer nos choix en ce qui concerne la performance du front-end. Petit\\ntour d\'horizon des plus de ce format.\\n\\nJ\'utilise SVG depuis assez longtemps grâce à l\'éditeur libre Inkscape\\n[https://inkscape.org]. Ce dernier me permet de créer de petites icônes, les\\nlogos de mes projets et le design de mes sites web persos (comme ce blog). Je\\nsuis l\'adoption de SVG par les navigateurs de loin grâce à un petit test simple,\\nje fais un glisser-déposer de mes designs SVG dans le navigateur et je regarde\\nsi c\'est tout cassé ou pas.\\n\\nForce est de constater que ça ne l\'est plus et que SVG devient de plus en plus\\ncrédible pour la création d\'illustrations pour les sites web. Voici quelques\\nretours d\'expérience et quelques trucs pour exploiter SVG à fond.\\n\\nSVG : QU\'EST-CE QUE C\'EST ?\\nSVG, Scalable Vector Graphics est un format de dessin vectoriel. Tout est dans\\nle mot vectoriel. En définissant les images par leurs formes plutôt que par une\\nsuccession de pixels, SVG permet de rendre une image adaptable à toutes les\\ndéfinitions. En effet, là où une image JPG ou PNG n\'est adaptée qu\'à une seule\\ntaille d\'affichage, une image SVG peut être redimensionnée sans perte de\\nqualité.\\n\\nC\'est pour cette raison que j\'utilise ce format depuis longtemps, il permet de\\ncréer des images qui puissent être réutilisées dans d\'autres contextes, tailles\\nou formats. Par exemple, pour la création de maquettes de sites responsive,\\nc\'est une très bonne option.\\n\\nSVG AMÉLIORE LA QUALITÉ DES SITES\\nUn des premiers arguments en faveur de SVG est qu\'il permet d\'améliorer\\nsignificativement la qualité des illustrations. On parle beaucoup des écrans\\nRétina, l\'avantage de SVG est qu\'il n\'est pas nécessaire d\'agir pour exploiter\\nau maximum ces derniers.\\n\\nDe plus, la propriété vectorielle de SVG fait que les nouvelles possibilités de\\nCSS3 peuvent être exploitées au maximum. Un exemple simple, la propriété \\nbackground-size [https://developer.mozilla.org/fr/docs/CSS/background-size].\\nCelle-ci permet de spécifier la taille du fond. Permettant de redimensionner\\nl\'image de fond selon vos souhaits. Et qui dit redimensionnement, dit SVG !\\n\\nEn particulier pour la valeur cover de cette propriété qui permet de d\'adapter\\nla taille du fond à la taille de l\'élément. Par exemple, dans le cas de mon\\ndernier petit jeu, Sumuraÿ [http://sumuray.insertafter.com/], j\'ai utilisé cette\\npropriété pour avoir un fond qui soit complètement recouvert par cette petite\\nimage SVG [http://sumuray.insertafter.com/www/images/samurai.svg]. Si j\'avais\\nutilisé un image JPEG à la place, cette dernière aurait dû être suffisamment\\ngrande pour pouvoir couvrir le fond de la page sans que l\'on puisse percevoir\\nles pixels de cette dernière. De plus, utiliser le format PNG aurait été trop\\nlourd, l\'usage de JPG, format destructif se serait imposé. Cette image SVG au\\nformat JPEG a un poids de 160.3ko. Au format SVG, cette dernière ne fait que\\n45.9ko.\\n\\nET LES SPRITES ?\\nA terme il semble qu\'il sera possible de créer des feuilles de sprite en SVG\\ngrâce à un hash déterminant une vue sur le SVG. Par exemple, avec l\'image\\nprécédente\\n[http://sumuray.insertafter.com/images/samurai.svg#svgView(viewBox(600,800,200,250))]\\n. Bon, pour être tout à fait honnête, à l\'heure actuelle le support de cette\\nastuce est un peu bancal et j\'ai renoncé à le faire avec Sumuraÿ, mais cela\\npromet. N\'hésitez pas à laisser un commentaire si vous avez mis cette astuce en\\noeuvre avec succès.\\n\\n @_kud [https://twitter.com/_kud]me souffle sur Twitter que les sprites SVG via\\nles polices perso, c\'est bien aussi (même si c\'est pas encore top sur certains\\nnavigateurs).\\n\\nA SAVOIR\\nA première vue, la performance n\'était pas au rendez-vous. Mon fichier\\nsumuray.svg faisait 1.7Mo ! En effet, j\'avais dupliqué les feuilles et les\\narbres avec Ctrl + D plutôt que d\'utiliser la fonction de clonage (qui n\'est pas\\nmise en avant dans le menu contextuel d\'Inkscape) Alt + D, qui elle permet de\\nfaire une nouvelle référence à un groupe d\'objet.\\n\\nUn détail qui change tout pour une image qui réutilise plusieurs fois la même\\nforme dans des orientations ou dimensions différentes. D\'après mes comparatifs,\\nil semble que le clonage n\'apporte pas de gain dans l\'affichage des SVG, mais\\ncela pourrait être le cas par la suite.\\n\\nSVG EST DU TEXTE\\nUn autre avantage de SVG est que c\'est du texte et qu\'il est donc possible\\nd\'utiliser gzip pour compresser les ressources avant de les envoyer aux clients\\nce qui peut représenter un gain significatif de performances.\\n\\nSVG EST RENDU À LA VOLÉE\\nPetit édition du lendemain pour mentionner un oubli. Les images SVG ont la même\\nnature que le HTML et comme ce dernier, les images SVG sont rendues par le\\nnavigateur parallèlement à leur téléchargement. Cela signifie qu\'une image de\\ngrande taille peut se dessiner progressivement et commencer à être consultée\\navant la fin de son chargement.\\n\\nCela peut-être très utile pour les comics SVG par exemple, on peut commencer à\\nlire une planche avant son chargement complet. Il suffit juste de s\'assurer que\\nla source XML contient bien les vignettes de la planche dans leur ordre naturel.\\n\\nCAN I USE SVG ?\\nLa question fatidique est : puis-je utiliser SVG ? [http://caniuse.com/svg]Seul,\\nnon. En effet, IE 7 et 8 ne le supportent pas. Pour Sumuraÿ, je n\'ai pas cherché\\nla compatibilité IE 7, 8 et 9. Mais dans la vraie vie, pour des sites web, c\'est\\nrarement possible. En revanche, rien ne vous interdit de balancer du SVG pour\\nles navigateurs qui le supportent et d\'utiliser des JPG/PNG pour les vieux\\nnavigateurs.\\n\\nDe toute façon, utiliser SVG pour créer vos images est une bonne pratique. C\'est\\nun format libre qui sera sûrement de plus en plus populaire et utilisable tel\\nquel sur les sites web. Pourquoi s\'en priver ?\\n\\nSi vous êtes intéressé par le format SVG, je vous propose d\'aller faire un petit\\ntour sur le blog de Jéremie Patonnier [http://jeremie.patonnier.net/tag/SVG]qui\\nest l\'une des personnes les plus calées sur le domaine en France.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc113:JSON.parse('{"path":"contents/pages/articles-performance_et_svg.html","title":"Performance des sites web avec SVG","description":"SVG est de plus en plus supporté par les navigateurs. Cela peut nous amener à reconsidérer nos choix en ce qui concerne la performance du front-end. Petit tour d\'horizon des plus de ce format.","shortTitle":"Performance et SVG","shortDesc":"En savoir plus sur les avantages de SVG pour la performance","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nPERFORMANCE DES SITES WEB AVEC SVG\\nSVG est de plus en plus supporté par les navigateurs. Cela peut nous amener à\\nreconsidérer nos choix en ce qui concerne la performance du front-end. Petit\\ntour d\'horizon des plus de ce format.\\n\\nJ\'utilise SVG depuis assez longtemps grâce à l\'éditeur libre Inkscape\\n[https://inkscape.org]. Ce dernier me permet de créer de petites icônes, les\\nlogos de mes projets et le design de mes sites web persos (comme ce blog). Je\\nsuis l\'adoption de SVG par les navigateurs de loin grâce à un petit test simple,\\nje fais un glisser-déposer de mes designs SVG dans le navigateur et je regarde\\nsi c\'est tout cassé ou pas.\\n\\nForce est de constater que ça ne l\'est plus et que SVG devient de plus en plus\\ncrédible pour la création d\'illustrations pour les sites web. Voici quelques\\nretours d\'expérience et quelques trucs pour exploiter SVG à fond.\\n\\nSVG : QU\'EST-CE QUE C\'EST ?\\nSVG, Scalable Vector Graphics est un format de dessin vectoriel. Tout est dans\\nle mot vectoriel. En définissant les images par leurs formes plutôt que par une\\nsuccession de pixels, SVG permet de rendre une image adaptable à toutes les\\ndéfinitions. En effet, là où une image JPG ou PNG n\'est adaptée qu\'à une seule\\ntaille d\'affichage, une image SVG peut être redimensionnée sans perte de\\nqualité.\\n\\nC\'est pour cette raison que j\'utilise ce format depuis longtemps, il permet de\\ncréer des images qui puissent être réutilisées dans d\'autres contextes, tailles\\nou formats. Par exemple, pour la création de maquettes de sites responsive,\\nc\'est une très bonne option.\\n\\nSVG AMÉLIORE LA QUALITÉ DES SITES\\nUn des premiers arguments en faveur de SVG est qu\'il permet d\'améliorer\\nsignificativement la qualité des illustrations. On parle beaucoup des écrans\\nRétina, l\'avantage de SVG est qu\'il n\'est pas nécessaire d\'agir pour exploiter\\nau maximum ces derniers.\\n\\nDe plus, la propriété vectorielle de SVG fait que les nouvelles possibilités de\\nCSS3 peuvent être exploitées au maximum. Un exemple simple, la propriété \\nbackground-size [https://developer.mozilla.org/fr/docs/CSS/background-size].\\nCelle-ci permet de spécifier la taille du fond. Permettant de redimensionner\\nl\'image de fond selon vos souhaits. Et qui dit redimensionnement, dit SVG !\\n\\nEn particulier pour la valeur cover de cette propriété qui permet de d\'adapter\\nla taille du fond à la taille de l\'élément. Par exemple, dans le cas de mon\\ndernier petit jeu, Sumuraÿ [http://sumuray.insertafter.com/], j\'ai utilisé cette\\npropriété pour avoir un fond qui soit complètement recouvert par cette petite\\nimage SVG [http://sumuray.insertafter.com/www/images/samurai.svg]. Si j\'avais\\nutilisé un image JPEG à la place, cette dernière aurait dû être suffisamment\\ngrande pour pouvoir couvrir le fond de la page sans que l\'on puisse percevoir\\nles pixels de cette dernière. De plus, utiliser le format PNG aurait été trop\\nlourd, l\'usage de JPG, format destructif se serait imposé. Cette image SVG au\\nformat JPEG a un poids de 160.3ko. Au format SVG, cette dernière ne fait que\\n45.9ko.\\n\\nET LES SPRITES ?\\nA terme il semble qu\'il sera possible de créer des feuilles de sprite en SVG\\ngrâce à un hash déterminant une vue sur le SVG. Par exemple, avec l\'image\\nprécédente\\n[http://sumuray.insertafter.com/images/samurai.svg#svgView(viewBox(600,800,200,250))]\\n. Bon, pour être tout à fait honnête, à l\'heure actuelle le support de cette\\nastuce est un peu bancal et j\'ai renoncé à le faire avec Sumuraÿ, mais cela\\npromet. N\'hésitez pas à laisser un commentaire si vous avez mis cette astuce en\\noeuvre avec succès.\\n\\n @_kud [https://twitter.com/_kud]me souffle sur Twitter que les sprites SVG via\\nles polices perso, c\'est bien aussi (même si c\'est pas encore top sur certains\\nnavigateurs).\\n\\nA SAVOIR\\nA première vue, la performance n\'était pas au rendez-vous. Mon fichier\\nsumuray.svg faisait 1.7Mo ! En effet, j\'avais dupliqué les feuilles et les\\narbres avec Ctrl + D plutôt que d\'utiliser la fonction de clonage (qui n\'est pas\\nmise en avant dans le menu contextuel d\'Inkscape) Alt + D, qui elle permet de\\nfaire une nouvelle référence à un groupe d\'objet.\\n\\nUn détail qui change tout pour une image qui réutilise plusieurs fois la même\\nforme dans des orientations ou dimensions différentes. D\'après mes comparatifs,\\nil semble que le clonage n\'apporte pas de gain dans l\'affichage des SVG, mais\\ncela pourrait être le cas par la suite.\\n\\nSVG EST DU TEXTE\\nUn autre avantage de SVG est que c\'est du texte et qu\'il est donc possible\\nd\'utiliser gzip pour compresser les ressources avant de les envoyer aux clients\\nce qui peut représenter un gain significatif de performances.\\n\\nSVG EST RENDU À LA VOLÉE\\nPetit édition du lendemain pour mentionner un oubli. Les images SVG ont la même\\nnature que le HTML et comme ce dernier, les images SVG sont rendues par le\\nnavigateur parallèlement à leur téléchargement. Cela signifie qu\'une image de\\ngrande taille peut se dessiner progressivement et commencer à être consultée\\navant la fin de son chargement.\\n\\nCela peut-être très utile pour les comics SVG par exemple, on peut commencer à\\nlire une planche avant son chargement complet. Il suffit juste de s\'assurer que\\nla source XML contient bien les vignettes de la planche dans leur ordre naturel.\\n\\nCAN I USE SVG ?\\nLa question fatidique est : puis-je utiliser SVG ? [http://caniuse.com/svg]Seul,\\nnon. En effet, IE 7 et 8 ne le supportent pas. Pour Sumuraÿ, je n\'ai pas cherché\\nla compatibilité IE 7, 8 et 9. Mais dans la vraie vie, pour des sites web, c\'est\\nrarement possible. En revanche, rien ne vous interdit de balancer du SVG pour\\nles navigateurs qui le supportent et d\'utiliser des JPG/PNG pour les vieux\\nnavigateurs.\\n\\nDe toute façon, utiliser SVG pour créer vos images est une bonne pratique. C\'est\\nun format libre qui sera sûrement de plus en plus populaire et utilisable tel\\nquel sur les sites web. Pourquoi s\'en priver ?\\n\\nSi vous êtes intéressé par le format SVG, je vous propose d\'aller faire un petit\\ntour sur le blog de Jéremie Patonnier [http://jeremie.patonnier.net/tag/SVG]qui\\nest l\'une des personnes les plus calées sur le domaine en France.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc114:JSON.parse('{"path":"contents/pages/fr/blog/performances_php_lamp.html","title":"Critique du livre : Performances PHP, audit et optimisation LAMP","description":"Afin de compléter mes compétences en administration système, j\'ai acheté le livre Performance PHP aux éditions Eyrolles. Bonne pioche !","shortTitle":"Livre Performances PHP","shortDesc":"Voir la critique de ce livre sur PHP","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : PERFORMANCES PHP, AUDIT ET OPTIMISATION LAMP\\nAfin de compléter mes compétences en administration système, j\'ai acheté le\\nlivre Performance PHP aux éditions Eyrolles. Bonne pioche !\\n\\n Performances PHP, écrit par Julien Pauli, Cyril Pierre de Geyer et Guillaume\\nPlessis, se propose de vous aider à optimiser votre architecture LAMP.\\n\\nAcheté 35€ au furêt du Nord, ce livre me laisse une bonne impression générale.\\nSimple et conçis, je l\'ai lu sur deux ou trois jours. Je connaissais déjà\\nquelques astuces pour l\'optimisation, mais un rappel ne fait pas de mal (surtout\\npour celles qu\'on connaît, mais qu\'on se rend compte qu\'on a oublié de mettre en\\nplace).\\n\\nJ\'ai cependant aussi beaucoup appris, notamment pour les optimisations\\nconcernant des infrastructures à forte charge. Au fil de la lecture, on se rend\\ncompte que les auteurs ont vraiment une bonne compréhension des mécanismes bas\\nniveau qui sous-tendent un serveur LAMP. Chaque optimisation est appuyée par des\\nexplications accessibles sur les raisons qui rendent ces dernières utiles.\\n\\nAprès une brève présentation de LAMP, le livre revient sur la journalisation et\\nses subtilités. Il montre aussi comment superviser les serveurs de production.\\nIl propose des outils utiles pour effectuer des tests de charge : Apache\\nbenchmark, JMeter...\\n\\nEnsuite il expose tour à tour les différentes optimisations possibles pour les\\ndifférentes couches d\'une architecture LAMP. J\'y ai découvert qu\'APC (cache d\'OP\\ncodes) était un projet directement propulsé par les créateurs de PHP. J\'utilise\\nXCache, mais je compte bien tester ce dernier.\\n\\nIl revient clairement aussi sur les paramètres d\'optimisation d\'Apache et liste\\nles fameux MPM et leurs usages en fonction des situations. On y apprend que bien\\nparamètrer Apache permet d\'obtenir des performances proches de ses challengers\\nactuellement en vogue (NGinx, LightHTTPD).\\n\\nBref, un livre sympa et accessible pour qui souhaite optimiser ses sites web.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc115:JSON.parse('{"path":"contents/pages/articles-performances_php_lamp.html","title":"Critique du livre : Performances PHP, audit et optimisation LAMP","description":"Afin de compléter mes compétences en administration système, j\'ai acheté le livre Performance PHP aux éditions Eyrolles. Bonne pioche !","shortTitle":"Livre Performances PHP","shortDesc":"Voir la critique de ce livre sur PHP","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : PERFORMANCES PHP, AUDIT ET OPTIMISATION LAMP\\nAfin de compléter mes compétences en administration système, j\'ai acheté le\\nlivre Performance PHP aux éditions Eyrolles. Bonne pioche !\\n\\n Performances PHP, écrit par Julien Pauli, Cyril Pierre de Geyer et Guillaume\\nPlessis, se propose de vous aider à optimiser votre architecture LAMP.\\n\\nAcheté 35€ au furêt du Nord, ce livre me laisse une bonne impression générale.\\nSimple et conçis, je l\'ai lu sur deux ou trois jours. Je connaissais déjà\\nquelques astuces pour l\'optimisation, mais un rappel ne fait pas de mal (surtout\\npour celles qu\'on connaît, mais qu\'on se rend compte qu\'on a oublié de mettre en\\nplace).\\n\\nJ\'ai cependant aussi beaucoup appris, notamment pour les optimisations\\nconcernant des infrastructures à forte charge. Au fil de la lecture, on se rend\\ncompte que les auteurs ont vraiment une bonne compréhension des mécanismes bas\\nniveau qui sous-tendent un serveur LAMP. Chaque optimisation est appuyée par des\\nexplications accessibles sur les raisons qui rendent ces dernières utiles.\\n\\nAprès une brève présentation de LAMP, le livre revient sur la journalisation et\\nses subtilités. Il montre aussi comment superviser les serveurs de production.\\nIl propose des outils utiles pour effectuer des tests de charge : Apache\\nbenchmark, JMeter...\\n\\nEnsuite il expose tour à tour les différentes optimisations possibles pour les\\ndifférentes couches d\'une architecture LAMP. J\'y ai découvert qu\'APC (cache d\'OP\\ncodes) était un projet directement propulsé par les créateurs de PHP. J\'utilise\\nXCache, mais je compte bien tester ce dernier.\\n\\nIl revient clairement aussi sur les paramètres d\'optimisation d\'Apache et liste\\nles fameux MPM et leurs usages en fonction des situations. On y apprend que bien\\nparamètrer Apache permet d\'obtenir des performances proches de ses challengers\\nactuellement en vogue (NGinx, LightHTTPD).\\n\\nBref, un livre sympa et accessible pour qui souhaite optimiser ses sites web.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc116:JSON.parse('{"path":"contents/pages/fr/blog/polyfill_or_not.html","title":"Faut-il utiliser les polyfills ?","description":"Tout à chacun est tenté d\'utiliser HTML5 pour créer des applications sympa expérimentant le champs des possibles. Malheureusement, HTML5 n\'est pas supporté par tous les navigateurs. C\'est alors que se pose la question des polyfills.","shortTitle":"Polyfills HTML5","shortDesc":"En savoir plus sur l\'intérêt des polyfills","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nFAUT-IL UTILISER LES POLYFILLS ?\\nTout à chacun est tenté d\'utiliser HTML5 pour créer des applications sympa\\nexpérimentant le champs des possibles. Malheureusement, HTML5 n\'est pas supporté\\npar tous les navigateurs. C\'est alors que se pose la question des polyfills.\\n\\nCe billet est basé sur une réflexion de fond qui a été réactivée hier à ParisWeb\\nlors de l\'atelier de Corinne Schillinger [https://twitter.com/schillinger]et \\nJérémie Patonnier [https://twitter.com/JeremiePat]intitulé HTML5 / CSS3 et\\nl\'effet \\"Waouh !\\" : les dessous de la magie\\n[http://www.paris-web.fr/2012/ateliers/html5css3-et-leffet-waouh-les-dessous-de-la-magie.php]\\n. Commençons par présenter les polyfills.\\n\\nPOLYFILLS : HTML5 WHERE YOU WANT\\nL\'idée qui se cache dérrière les polyfills est de combler un manque dans un\\nnavigateur : un élément (audio, vidéo), une API (websockets) ou encore, des\\nfonctionnalités CSS3. Techniquement, cela passe par l\'insertion d\'un script\\nJavascript qui se charge de détecter la ou les fonctionnalités manquantes. Un\\nbon site [http://html5please.com/]donné par les intervenants lors de l\'atelier\\npermet de savoir ce qui peut être utilisé et où.\\n\\nAinsi grâce aux polyfills, en théorie, l\'expérience HTML5 peut être délivrée à\\ntous les utilisateurs Internet Explorer 7 et 8 compris. Mais vous vous en\\ndoutez, tout n\'est pas si rose.\\n\\nDANS POLYFILL, IL Y A FILL\\nC\'est le principal reproche que je fais aux polyfills. En effet, ce sont des\\nfichiers javascript et leur multiplication peut-être extrêmement coûteuse en\\nterme de bande passante, mais également en terme de temps d\'exécution. Or, la\\nmultiplication de ces derniers est en totale contradiction avec les principaux\\nconcepts de performance web. D\'autant plus que la plupart des polyfills ont des\\ndépendances avec des frameworks Javascript qui eux-mêmes représentent un coût\\nimportant.\\n\\nLe type de matériel utilisé par les utilisateurs d\'IE7 (PCviellissant) et la\\nmauvaise qualité du moteur Javascript font que ces derniers ont une expérience\\npeut-être identique visuellement, mais fortement dégradée et ralentie. Le\\nrésultat est qu\'on se retrouve avec une expérience utilisateur complètement\\nbancale et les utilisateurs d\'IE7 qu\'on souhaite récupérer bouderont purement et\\nsimplement l\'application sans savoir que c\'est à cause de leur navigateur que\\nl\'application est trop lente.\\n\\nBref, les polyfills peuvent nuire à leur propres objectifs surtout lorsqu\'on les\\nmultiplie.\\n\\nQUE FAIRE ?\\nPOUR LES APPLICATIONS WEB\\nJe fais parti de ceux qui pensent qu\'utiliser les polyfills pour la création\\nd\'applications web est un non-sens. En effet, on récupère plus de la moitié des\\nutilisateurs potentiels sur desktop et la majorité des utilisateurs sur mobile\\nsans les utiliser. De plus, c\'est dans le cadre d\'une application web que les\\npolyfills se multiplient car ces dernières utilisent souvent de nombreuses\\nfonctionnalités différentes.\\n\\nJe crée des applications web pour des entreprises et dire que HTML5 sur IE7\\nn\'est pas vraiment HTML5 est parfaitement compris surtout lorsqu\'on expose les\\nfaits. Attendre 5 minutes qu\'une application se charge, quand 100 employés\\nl\'utilisent 5 fois par jour, c\'est 100 x 5 / 60= 8 heures par jour d\'attente\\nsoit, en fonction du type d\'utilisateur, un SMIC ou plus (voire bien plus pour\\ndes cadres sup) jeté par les fenêtres par jour. Dans quelle boîte on paie une\\npersonne pour attendre ?\\n\\nA cela on ajoute le coût d\'une adaptation à IE7, variable mais non négligeable,\\non se retrouve au final avec deux choix : télécharger un nouveau navigateur\\ngratuitement ou alors garder un navigateur qui va induire des coûts\\ninsoupçonnablement élévés.\\n\\nPOUR LES SITES WEB\\nClairement, je fais des sites web en XHTML 1.1 Strict. Je n\'ai pas cédé aux\\nappels du pied d\'HTML5 pour une raison simple : aujourd\'hui, dans le cadre d\'un\\nsite vitrinne ou e-commerce classique, HTML5 (au sens balises et API) ne\\nm\'apporterai pas grand chose de plus. Si je décidai d\'utiliser les balises\\nsémantiques, ce serait une catastrophe pour les utilisateurs d\'IE7 à moins\\nd\'utiliser des polyfills qui dégraderaient les performances et donc l\'efficacité\\nde mes sites.\\n\\nCe n\'est pas le cas de CSS3 qui peut arrondir les angles (au sens propre comme\\nau sens figuré ;-D ), mais la dégradation gracieuse est mon amie. Si les\\nutilisateurs d\'IE7 n\'ont pas de coins arrondis, d\'ombres ou d\'animations, ce\\nn\'est pas un drame.\\n\\nD\'ailleurs je fais parti de ceux qui pensent que les animations, c\'est en CSS3\\nou rien. En effet, les animations JQuery ou Mootools sur IE7, c\'est juste\\ninneficace. Cela entrave l\'accès à l\'information, les animations sont\\ngénéralement saccadées, bref, ne vous prenez pas la tête à vouloir faire sur un\\nvieux navigateur tournant sur un vieux PC ce que vous faîtes bien sur un\\nnavigateur moderne tournant sur un PC moderne.\\n\\nFaire cela reviendrait à installer Window 7 sur un pentium des années 90.\\nD\'ailleurs, je voudrais tordre le coup à l\'idée reçue que la seule façon de\\ntester sur IE7 est de le faire dans une VM : faux ! Et c\'est peut-être de là que\\nviens le problème.\\n\\nUne VM sans programmes pourris installés (anti-virus, malwares), sans programme\\nen cours d\'éxecution (client mail, office, etc) et tournant sur une bête de\\ncompétition avec processeur multi-coeurs et disque SSD n\'est pas représentatif.\\nLa seule bonne façon de tester sur IE7, c\'est de tester sur une machine qui\\ncorrespond à l\'époque où les utilisateurs avaient IE7 quand ils achetaient leur\\nordinateur et une machine qui est vraiment utilisée par des vrais gens. C\'est\\nbien-sûr pas souvent possible facilement, mais il faut bien en avoir conscience.\\n\\nBref, je pense que les polyfills peuvent et doivent être utilisés dans certains\\ncas particuliers, mais ils ne sont pas la solution miracle, loin de là et il\\nfaut faire preuve de discernement dans leur utilisation.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc117:JSON.parse('{"path":"contents/pages/articles-polyfill_or_not.html","title":"Faut-il utiliser les polyfills ?","description":"Tout à chacun est tenté d\'utiliser HTML5 pour créer des applications sympa expérimentant le champs des possibles. Malheureusement, HTML5 n\'est pas supporté par tous les navigateurs. C\'est alors que se pose la question des polyfills.","shortTitle":"Polyfills HTML5","shortDesc":"En savoir plus sur l\'intérêt des polyfills","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nFAUT-IL UTILISER LES POLYFILLS ?\\nTout à chacun est tenté d\'utiliser HTML5 pour créer des applications sympa\\nexpérimentant le champs des possibles. Malheureusement, HTML5 n\'est pas supporté\\npar tous les navigateurs. C\'est alors que se pose la question des polyfills.\\n\\nCe billet est basé sur une réflexion de fond qui a été réactivée hier à ParisWeb\\nlors de l\'atelier de Corinne Schillinger [https://twitter.com/schillinger]et \\nJérémie Patonnier [https://twitter.com/JeremiePat]intitulé HTML5 / CSS3 et\\nl\'effet \\"Waouh !\\" : les dessous de la magie\\n[http://www.paris-web.fr/2012/ateliers/html5css3-et-leffet-waouh-les-dessous-de-la-magie.php]\\n. Commençons par présenter les polyfills.\\n\\nPOLYFILLS : HTML5 WHERE YOU WANT\\nL\'idée qui se cache dérrière les polyfills est de combler un manque dans un\\nnavigateur : un élément (audio, vidéo), une API (websockets) ou encore, des\\nfonctionnalités CSS3. Techniquement, cela passe par l\'insertion d\'un script\\nJavascript qui se charge de détecter la ou les fonctionnalités manquantes. Un\\nbon site [http://html5please.com/]donné par les intervenants lors de l\'atelier\\npermet de savoir ce qui peut être utilisé et où.\\n\\nAinsi grâce aux polyfills, en théorie, l\'expérience HTML5 peut être délivrée à\\ntous les utilisateurs Internet Explorer 7 et 8 compris. Mais vous vous en\\ndoutez, tout n\'est pas si rose.\\n\\nDANS POLYFILL, IL Y A FILL\\nC\'est le principal reproche que je fais aux polyfills. En effet, ce sont des\\nfichiers javascript et leur multiplication peut-être extrêmement coûteuse en\\nterme de bande passante, mais également en terme de temps d\'exécution. Or, la\\nmultiplication de ces derniers est en totale contradiction avec les principaux\\nconcepts de performance web. D\'autant plus que la plupart des polyfills ont des\\ndépendances avec des frameworks Javascript qui eux-mêmes représentent un coût\\nimportant.\\n\\nLe type de matériel utilisé par les utilisateurs d\'IE7 (PCviellissant) et la\\nmauvaise qualité du moteur Javascript font que ces derniers ont une expérience\\npeut-être identique visuellement, mais fortement dégradée et ralentie. Le\\nrésultat est qu\'on se retrouve avec une expérience utilisateur complètement\\nbancale et les utilisateurs d\'IE7 qu\'on souhaite récupérer bouderont purement et\\nsimplement l\'application sans savoir que c\'est à cause de leur navigateur que\\nl\'application est trop lente.\\n\\nBref, les polyfills peuvent nuire à leur propres objectifs surtout lorsqu\'on les\\nmultiplie.\\n\\nQUE FAIRE ?\\nPOUR LES APPLICATIONS WEB\\nJe fais parti de ceux qui pensent qu\'utiliser les polyfills pour la création\\nd\'applications web est un non-sens. En effet, on récupère plus de la moitié des\\nutilisateurs potentiels sur desktop et la majorité des utilisateurs sur mobile\\nsans les utiliser. De plus, c\'est dans le cadre d\'une application web que les\\npolyfills se multiplient car ces dernières utilisent souvent de nombreuses\\nfonctionnalités différentes.\\n\\nJe crée des applications web pour des entreprises et dire que HTML5 sur IE7\\nn\'est pas vraiment HTML5 est parfaitement compris surtout lorsqu\'on expose les\\nfaits. Attendre 5 minutes qu\'une application se charge, quand 100 employés\\nl\'utilisent 5 fois par jour, c\'est 100 x 5 / 60= 8 heures par jour d\'attente\\nsoit, en fonction du type d\'utilisateur, un SMIC ou plus (voire bien plus pour\\ndes cadres sup) jeté par les fenêtres par jour. Dans quelle boîte on paie une\\npersonne pour attendre ?\\n\\nA cela on ajoute le coût d\'une adaptation à IE7, variable mais non négligeable,\\non se retrouve au final avec deux choix : télécharger un nouveau navigateur\\ngratuitement ou alors garder un navigateur qui va induire des coûts\\ninsoupçonnablement élévés.\\n\\nPOUR LES SITES WEB\\nClairement, je fais des sites web en XHTML 1.1 Strict. Je n\'ai pas cédé aux\\nappels du pied d\'HTML5 pour une raison simple : aujourd\'hui, dans le cadre d\'un\\nsite vitrinne ou e-commerce classique, HTML5 (au sens balises et API) ne\\nm\'apporterai pas grand chose de plus. Si je décidai d\'utiliser les balises\\nsémantiques, ce serait une catastrophe pour les utilisateurs d\'IE7 à moins\\nd\'utiliser des polyfills qui dégraderaient les performances et donc l\'efficacité\\nde mes sites.\\n\\nCe n\'est pas le cas de CSS3 qui peut arrondir les angles (au sens propre comme\\nau sens figuré ;-D ), mais la dégradation gracieuse est mon amie. Si les\\nutilisateurs d\'IE7 n\'ont pas de coins arrondis, d\'ombres ou d\'animations, ce\\nn\'est pas un drame.\\n\\nD\'ailleurs je fais parti de ceux qui pensent que les animations, c\'est en CSS3\\nou rien. En effet, les animations JQuery ou Mootools sur IE7, c\'est juste\\ninneficace. Cela entrave l\'accès à l\'information, les animations sont\\ngénéralement saccadées, bref, ne vous prenez pas la tête à vouloir faire sur un\\nvieux navigateur tournant sur un vieux PC ce que vous faîtes bien sur un\\nnavigateur moderne tournant sur un PC moderne.\\n\\nFaire cela reviendrait à installer Window 7 sur un pentium des années 90.\\nD\'ailleurs, je voudrais tordre le coup à l\'idée reçue que la seule façon de\\ntester sur IE7 est de le faire dans une VM : faux ! Et c\'est peut-être de là que\\nviens le problème.\\n\\nUne VM sans programmes pourris installés (anti-virus, malwares), sans programme\\nen cours d\'éxecution (client mail, office, etc) et tournant sur une bête de\\ncompétition avec processeur multi-coeurs et disque SSD n\'est pas représentatif.\\nLa seule bonne façon de tester sur IE7, c\'est de tester sur une machine qui\\ncorrespond à l\'époque où les utilisateurs avaient IE7 quand ils achetaient leur\\nordinateur et une machine qui est vraiment utilisée par des vrais gens. C\'est\\nbien-sûr pas souvent possible facilement, mais il faut bien en avoir conscience.\\n\\nBref, je pense que les polyfills peuvent et doivent être utilisés dans certains\\ncas particuliers, mais ils ne sont pas la solution miracle, loin de là et il\\nfaut faire preuve de discernement dans leur utilisation.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc118:JSON.parse('{"path":"contents/pages/fr/blog/pourquoi_insert_after.html","title":"Pourquoi j\'ai nommé ce blog InsertAfter","description":"Je viens de m\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle InsertAfter, c\'est le moment de palier à ce manque.","shortTitle":"Pourquoi InsertAfter ?","shortDesc":"Connaître les raisons d\'un tel nom pour ce blog.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nPOURQUOI J\'AI NOMMÉ CE BLOG INSERTAFTER\\nJe viens de m\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle\\nInsertAfter, c\'est le moment de palier à ce manque.\\n\\nC\'est en réfléchissant à créer un blog que ce nom m\'est venu spontanément. En\\neffet, pour moi, un blog est un endroit de partage, un lieu ou l\'on peut donner\\nquelques idées, ressources ou avis sur les technologies qu\'on utilise.\\n\\nIl ne s\'agit pas de se regarder le nombril, j\'ai d\'ailleurs dû réfléchir\\nintensivement sur les parties de ce blog où je parle de moi. Faut-il dire je,\\nfaut-il rester plus ou moins anonyme, faut-il mettre une photo ? Faut-il tout\\ncourt ?\\n\\nAprès de longues hésitations, je me suis dit qu\'un blog devait permettre à ceux\\nqui le veulent de me rencontrer et que même si ce n\'est pas trop dans mes\\nhabitudes, je me devais de mettre en avant ma personnalité car c\'est bien comme\\ncela qu\'on se rencontre. Vous remarquerez d\'ailleurs que j\'ai livré ça brute de\\ntaille [../a_propos.html], à mon image ;).\\n\\nCependant, un blog est avant tout un lieu d\'échange et il m\'apparaissait évident\\nqu\'il fallait y laisser une place pour les commentaires. Ce seraient d\'ailleurs\\nces mêmes commentaires qui rendraient cette expérience enrichissante pour moi.\\n\\nInsertAfter par son sens purement littéral introduit ces deux dimensions. J\'ai\\nmême été surpris que le nom de domaine n\'ait pas déjà été réservé (d\'où mon\\nempressement à le réserver, plusieurs mois avant de créer ce blog).\\n\\nMais InsertAfter a un sens plus profond pour un développeur qui utilise\\nfréquemment le DOM avec Javascript. En effet, à mes débuts avec cette API, je me\\nsuis posé une question bête. Pourquoi n\'y a-t-il pas de fonction\\nNode.insertAfter comme il y a une fonction Node.insertBefore ?\\n\\nCette question est idiote car elle ferait doublon. En ce sens que le seul cas\\nqui pourrait justifier une telle fonction serait l\'ajout d\'un nœud au sommet de\\nla pile de la propriété Node.childNodes de type DOMCollection. Or ce cas est\\njustement couvert par la fonction Node.appendChild().\\n\\nOn peut donc facilement implémenter cette fonction :\\n\\nNode.prototype.insertAfter = function (newNode, afterNode) {\\nreturn (afterNode?this[(this.childNodes.lastChild==afterNode?\'appendChild\':\'insertBefore\']\\n (newNode,(this.childNodes.lastChild==afterNode?null:afterNode.nextSibling):null);\\n} \\n\\nLa question est, est-ce une bonne idée ? On pourrait dire oui vu qu\'une\\nrecherche de ce blog sur le web m\'a fait apprendre que JQuery proposait cela.\\nMais en fait, c\'est une mauvaise idée. Cela fait non-seulement doublon, mais en\\nplus, cela mène à une méconnaissance du DOM et de ses fonctions natives, hors\\nlibrairies Js.\\n\\nJe considère cela comme une maturité de développeur Js que de ne pas penser\\nqu\'il manque InsertAfter dans l\'API du DOM. C\'est donc aussi en hommage à cette\\nmaturité et au chemin parcouru depuis que j\'ai appelé ce blog ainsi.\\n\\nEnfin, Bruno Bichet [https://plus.google.com/104046041694416287579/about]et\\nNicolas Paillard m\'ont rappelé que cela pouvait aussi faire référence au\\nsélecteur CSS :after, d\'où l’identité visuelle du logo. La boucle est bouclée,\\nInsertAfter n\'a plus de secret pour vous.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc119:JSON.parse('{"path":"contents/pages/articles-pourquoi_insert_after.html","title":"Pourquoi j\'ai nommé ce blog InsertAfter","description":"Je viens de m\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle InsertAfter, c\'est le moment de palier à ce manque.","shortTitle":"Pourquoi InsertAfter ?","shortDesc":"Connaître les raisons d\'un tel nom pour ce blog.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nPOURQUOI J\'AI NOMMÉ CE BLOG INSERTAFTER\\nJe viens de m\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle\\nInsertAfter, c\'est le moment de palier à ce manque.\\n\\nC\'est en réfléchissant à créer un blog que ce nom m\'est venu spontanément. En\\neffet, pour moi, un blog est un endroit de partage, un lieu ou l\'on peut donner\\nquelques idées, ressources ou avis sur les technologies qu\'on utilise.\\n\\nIl ne s\'agit pas de se regarder le nombril, j\'ai d\'ailleurs dû réfléchir\\nintensivement sur les parties de ce blog où je parle de moi. Faut-il dire je,\\nfaut-il rester plus ou moins anonyme, faut-il mettre une photo ? Faut-il tout\\ncourt ?\\n\\nAprès de longues hésitations, je me suis dit qu\'un blog devait permettre à ceux\\nqui le veulent de me rencontrer et que même si ce n\'est pas trop dans mes\\nhabitudes, je me devais de mettre en avant ma personnalité car c\'est bien comme\\ncela qu\'on se rencontre. Vous remarquerez d\'ailleurs que j\'ai livré ça brute de\\ntaille [../a_propos.html], à mon image ;).\\n\\nCependant, un blog est avant tout un lieu d\'échange et il m\'apparaissait évident\\nqu\'il fallait y laisser une place pour les commentaires. Ce seraient d\'ailleurs\\nces mêmes commentaires qui rendraient cette expérience enrichissante pour moi.\\n\\nInsertAfter par son sens purement littéral introduit ces deux dimensions. J\'ai\\nmême été surpris que le nom de domaine n\'ait pas déjà été réservé (d\'où mon\\nempressement à le réserver, plusieurs mois avant de créer ce blog).\\n\\nMais InsertAfter a un sens plus profond pour un développeur qui utilise\\nfréquemment le DOM avec Javascript. En effet, à mes débuts avec cette API, je me\\nsuis posé une question bête. Pourquoi n\'y a-t-il pas de fonction\\nNode.insertAfter comme il y a une fonction Node.insertBefore ?\\n\\nCette question est idiote car elle ferait doublon. En ce sens que le seul cas\\nqui pourrait justifier une telle fonction serait l\'ajout d\'un nœud au sommet de\\nla pile de la propriété Node.childNodes de type DOMCollection. Or ce cas est\\njustement couvert par la fonction Node.appendChild().\\n\\nOn peut donc facilement implémenter cette fonction :\\n\\nNode.prototype.insertAfter = function (newNode, afterNode) {\\nreturn (afterNode?this[(this.childNodes.lastChild==afterNode?\'appendChild\':\'insertBefore\']\\n (newNode,(this.childNodes.lastChild==afterNode?null:afterNode.nextSibling):null);\\n} \\n\\nLa question est, est-ce une bonne idée ? On pourrait dire oui vu qu\'une\\nrecherche de ce blog sur le web m\'a fait apprendre que JQuery proposait cela.\\nMais en fait, c\'est une mauvaise idée. Cela fait non-seulement doublon, mais en\\nplus, cela mène à une méconnaissance du DOM et de ses fonctions natives, hors\\nlibrairies Js.\\n\\nJe considère cela comme une maturité de développeur Js que de ne pas penser\\nqu\'il manque InsertAfter dans l\'API du DOM. C\'est donc aussi en hommage à cette\\nmaturité et au chemin parcouru depuis que j\'ai appelé ce blog ainsi.\\n\\nEnfin, Bruno Bichet [https://plus.google.com/104046041694416287579/about]et\\nNicolas Paillard m\'ont rappelé que cela pouvait aussi faire référence au\\nsélecteur CSS :after, d\'où l’identité visuelle du logo. La boucle est bouclée,\\nInsertAfter n\'a plus de secret pour vous.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc120:JSON.parse('{"path":"contents/pages/fr/blog/presentation_nodejs_rest_microservices.html","title":"Micro-services first avec NodeJS","description":"Retour rapide sur ma présentation au ChtiJS 15 sur les microservices \\n et le design d\'APIs avec NodeJS.","shortTitle":"Micro-services first","shortDesc":"En savoir plus sur cette technique","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMICRO-SERVICES FIRST AVEC NODEJS\\nJeudi dernier j\'ai eu l\'honneur de faire une présentation à ChtiJS 15\\n[http://chtijs.francejs.org/archives/2016-02-25/index.html]. Comme à chaque fois\\nque je fais une présentation, je passe forcément à côté de deux ou trois\\ndétails.\\n\\nC\'est donc l\'occasion pour moi de proposer un petit billet sur pourquoi et\\ncomment il est indispensable de développer votre backend NodeJS avec une vision\\nmicro-service dès le départ.\\n\\nSi vous avez assisté à ma présentation, vous connaissez ma vision de ce qu\'est\\nune API REST, mais pour reprendre ma métaphore et pour ceux qui n\'ont pas pu\\nvenir, c\'est un peu comme un distributeur de cacahuètes.\\n\\nOn y met une pièce (l\'équivalent d\'une requête HTTP) puis quand la transaction\\nest effectuée (pièce bloquée dans le monnayeur, l\'équivalent d\'un statut 200\\nOK), alors on reçoit des cacahuètes (une réponse HTTP).\\n\\nQuand une transaction est validée, on garanti que le système a bien enregistré\\ntout changement d\'état et que par ailleurs, toute opération qui peut découler de\\nce changement sera effectuée.\\n\\nOn peut mettre côté à côte plusieurs distributeurs et pas nécessairement de\\ncacahuètes. C\'est un peu l\'équivalent des URIs (ou ressources REST).\\n\\nOn peut également déclencher certaines actions de manière différées pour valider\\nune transaction au plus tôt. C\'est typiquement le cas de l\'envoi de mails ou de\\nla synchronisation à des systèmes distants.\\n\\nL\'approche micro-service telle que je la conçoit est donc répartie comme suit :\\n\\n * un frontal REST : un ou plusieurs processus qui traitent les reqûetes\\n   entrantes; \\n * un queue : dans laquelle on stocke des évènements qui déclencheront des\\n   actions différées. Ces évènements sont dépilés par de nombreux processus\\n   spécialisés ce qui isole les responsabilités; \\n\\nVous avez probablement, comme moi, vu circuler quelques articles vous expliquant\\npourquoi vous feriez mieux d\'apprendre à créer une application avant de penser à\\nfaire une architecture scalable.\\n\\nAu délà de l\'aspect péremptoire du conseil, je m\'inscrits en faux sur ce point.\\nIl n\'est jamais trop tôt pour bien faire. Pour faire mieux, pour faire plus...\\n\\n \\nvia GIPHY\\n[https://giphy.com/gifs/daft-punk-interstella-5555-harder-better-faster-stronger-JM8gUOupDDqgw]\\n\\nEn effet, n\'importe quel frontal REST doit pouvoir être subdivisé en plusieurs\\nprocessus, micro-service ou pas, tout simplement car un processus NodeJS ne doit\\npas garder d\'état local. C\'est une bonne pratique qui n\'a rien à voir avec les\\nmicroservices, mais plutôt avec la nature même d\'une application NodeJS.\\n\\nEnsuite, pour les traitement différés, pas la peine dans un premier temps de\\ncréer des processus spécialisés. Vous pouvez tout à fait créer une application\\nmonolythique prévue dès sa conception pour être scindée en plusieurs processus\\nsi le besoin de monter en charge se fait sentir.\\n\\nPour se faire, rien de plus simple. Au lieu d\'utiliser, day one, un message\\nbroker style RabbitMQ, vous créez un simple pub/sub qui permet de découpler les\\nactions différées de votre API REST tout en ne gardant qu\'un seul processus dans\\nla phase de développement, voire même en production si vous ne prévoyez pas un\\ntrafic monumental au démarrage (cas de 95% des apps).\\n\\nPour illustrer le principe, dans un backend créé pour un hackathon, j\'ai créé un\\nservice\\n[https://github.com/nfroidure/TripStory/blob/cef64f401098809c81ecf8ddf2203eb48628aa46/backend/index.js#L56-L63]\\nse servant de process pour créer un simple pub-sub émulant un message broker.\\n\\nAinsi, quand un utilisateur se connecte avec Twitter, on émet un évènement\\n[https://github.com/nfroidure/TripStory/blob/cef64f401098809c81ecf8ddf2203eb48628aa46/backend/app/authentication/authentication.controller.js#L248-L253]\\nqui est ensuite consommé dans un simili-worker\\n[https://github.com/nfroidure/TripStory/blob/cef64f401098809c81ecf8ddf2203eb48628aa46/backend/workers/twitter/twitter.bin.js#L7-L18]\\ncomplètement découplé qui se charge de synchroniser les amis Twitter. Cette\\naction qui pourra se faire dans un worker dédié si cette application montait en\\ncharge.\\n\\nBref, on a le beurre, l\'argent du beurre, voire plus. Moralité: n\'attendez\\njamais pour bien penser votre code, mais restez pragmatiques ;).\\n\\n \\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc121:JSON.parse('{"path":"contents/pages/fr/blog/promises_javascript_ouvrons_capot.html","title":"Les promises avec JavaScript : ouvrons le capot !","description":"Dans le petit monde de JavaScript les promises font l\'actualité. Je vous propose de comprendre les promises par l\'implémentation.","shortTitle":"Les Promises en JS","shortDesc":"En savoir plus sur les Promises en JavaScript","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES PROMISES AVEC JAVASCRIPT : OUVRONS LE CAPOT !\\n⚠ Attention: Cet article est ancien et bien qu\'il reste une bonne façon de\\ncomprendre les promesses en JavaScript, le projet réalisé ne doit pas être\\nutilisé car de nos jours les promesses sont présentes nativement dans tous les\\nenvironnements exécutant du JavaScript.\\n\\nDans le petit monde de JavaScript les promises font l\'actualité. Je vous propose\\nde comprendre les promises par l\'implémentation.\\n\\nQU\'EST-CE QU\'UNE PROMISE ?\\nSelon le Wiki CommonJS [http://wiki.commonjs.org/wiki/Promises/A], une promise,\\nen JavaScript, est un objet représentant une valeur qui pourrait être retournée\\npar l\'exécution d\'une opération unique (souvent asynchrone). Elle peut donc\\navoir trois états ; en attente de résultat, complétée avec succès ou en échec.\\nUne fois complétée ou en échec, une promise ne peut plus changer d\'état.\\n\\nAfin de pouvoir être informé de la complétion, de l\'échec ou de la progression\\nde l\'exécution de l\'opération associée, les objets de type promise ont une\\npropriété then dont la valeur est une fonction prenant en argument trois\\nfonctions de callback :\\n\\n\\npromise.then=function(callbackSuccess, callbackError, callbackProgress){};\\n\\nLe premier callback sera appelé en cas de réalisation avec succès de\\nl\'opération, le second en cas d\'échec et le troisième pour indiquer une\\néventuelle progression de cette opération. Ces trois fonctions de retour sont\\noptionnelles.\\n\\nLa méthode then doit retourner un autre objet promise qui sera complété dès lors\\nque la fonction de retour de succès ou d\'échec de la promise initiale aura été\\ncomplètement exécutée. On peut considérer cette nouvelle promise comme un objet\\nreprésentant l\'opération réalisée par les fonctions de retour.\\n\\nLa fonction callbackSuccess peut retourner une valeur qui sera alors associée à\\nla promise retournée par la méthode then :\\n\\n> var p=new Promise(function myPromiseLogic(success,error,progress) {\\n success(1);\\n}).then(function(value){\\n return value+1;\\n}).then(function(value) {\\n console.log(value);\\n});\\n// 2\\n\\nIci, on crée une promise avec l\'opérateur new qui se résoud immédiatemment avec\\nla valeur 1. Dans le premier then, on incrémente la valeur puis on la retourne,\\ndans le troisième then, on l\'affiche.\\n\\nLa fonction de retour, ici callbackSuccess, peut aussi retourner une promise.\\nDans ce cas, cette dernière se substitue en quelque sorte à la promise générée\\npar la méthode then. En effet, puisque la fonction de callback retourne une\\npromise, elle est donc asynchrone, on peut donc considérer que l\'exécution\\ncomplète du callback ne sera vraie que lorsque la promise retournée sera\\ncomplétée. Le code ci-dessus peut donc également être écrit ainsi :\\n\\nvar p=new Promise(function myPromiseLogic(success,error,progress) {\\n success(1);\\n}).then(function(value){\\n return new Promise(function myPromiseLogic(success,error,progress) {\\n success(value+1);\\n });\\n}).then(function(value) {\\n console.log(value);\\n});\\n// output : 2\\n\\nIMPLÉMENTATION\\nSi comme moi vous aimez voir ce qu\'il se passe sous le capot pour mieux\\ncomprendre, je vous propose une petite implémentation\\n[https://gist.github.com/nfroidure/5697689]que je vais vous expliquer pas à pas.\\nTout d\'abord, on implémente le constructeur. Ce dernier a pour responsabilité le\\nfait de prendre en argument la fonction représentant la \\"logique\\" de notre\\npromise. Le but est de préparer des fonctions permettant à cette logique de\\nsignaler le succès, l\'échec ou la progression de la tâche qu\'elle exécute.\\n\\nfunction Promise(logic) {\\n// create callbacks\\n// executes the logic by passing callbacks\\n logic(success,fail,progress);\\n}\\n\\nComme vous pouvez le voir ligne 12\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L12], les fonctions\\nde callback générées dans le constructeur modifient le statut de la promise en\\nfonction de la réussite ou l\'échec, mais aussi, tentent d\'exécuter une fonction\\nde callback qui pour le moment, n\'existe pas. Il s\'agit de la fonction de\\ncallback qui sera injectée par la méthode then.\\n\\nLa méthode then a deux responsabilités, permettre l\'exécution des callbacks\\nqu\'elle prend en argument et générer une nouvelle promise subordonnée à la\\npremière qu\'elle fournira en retour.\\n\\nLa promise nouvellement créée a une logique particulière. En effet, la fonction\\nfournie au constructeur\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L33]est vide est ne\\nsert qu\'à récupérer une référence vers les fonctions de callback que le\\nconstructeur va lui fournir. Cette astuce va nous permettre de lier la\\ncomplétion de notre nouvelle promise à la promise originale.\\n\\nL\'exécution des callback founis à la méthode then est enrobée de manière à\\ncompléter la nouvelle promise en conséquence. Il existe deux possibilités. Soit\\nau moment de l\'exécution de then, la promise est déjà complétée et à ce moment,\\non exécute tout de suite les callbacks\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L56]adéquats, soit\\nelle n\'a pas encore eu lieu et dans ce cas, on attache ces callbacks à la\\npromise [https://gist.github.com/nfroidure/5697689#file-promise-js-L52]pour\\nqu\'ils soient exécutés quand la logique appellera une des fonctions de callback\\npassées par le contructeur.\\n\\nVous remarquerez l\'utilisation de setTimeout\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L57]pour exécuter les\\ncallbacks de manière asynchrone. Ce n\'est pas précisé par le brouillon de la\\nspécification, mais je pense que c\'est une bonne pratique, de cette manière\\ntoute résolution de promise est asynchrone.\\n\\nNous allons voir comment utiliser les promises pour en tirer le meilleur parti,\\nmais avant tout, je vous recommande de jeter un oeil à l\'implémentation des\\nméthodes statiques Promise.all\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L64]et Promise.any\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L94]que nous allons\\nbientôt utiliser.\\n\\nLE PARADIGME DES PROMISES\\nOk, on sait ce que sont les promises et comment fonctionne leur implémentation.\\nMais qu\'est-ce qu\'on peut bien faire avec ? Les promises sont vendues comme LA\\nsolution au JavaScript callback hell. Je trouve cette présentation un peu\\nréductrice.\\n\\nCeux qui utilisent MooTools savent bien qu\'on peut très facilement se sortir du\\ncallback hell en ayant une approche orientée objet à coup de binding de\\nfonctions et ceux qui connaissent les streams sous Node savent également qu\'on\\npeut aisément linéariser son code en les utilisant.\\n\\nD\'ailleurs, les streams relèvent du même concept que les promises, il sont une\\n\\"promesse\\" que des données vont arriver ou seront envoyées indépendamment de\\nl\'arrivée effective synchrone ou non de celles-cis. En réalité, seule l\' API\\ndiffère entre les streams et les promises dans NodeJS.\\n\\nBref, les promises sont surtout une nouveau paradigme de programmation. Elles\\npermettent d\'envisager une application comme une sorte d\'arbre logique de\\npromises. Nous allons prendre un exemple simple, le cas d\'une application avec\\nun menu principal qui charge des vues différentes en fonction du bouton cliqué\\nsur le menu. Nous allons devoir créer des promises d\'évènements. Pour nous\\nsimplifier la tâche, j\'ai créé un générateur de promises\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L151]basé sur les\\nécouteurs d\'évènements.\\n\\nCommençons par le menu. Un menu est un promesse d\'un clic sur un des boutons qui\\nle composent. Nous utilisons donc la méthode Promise.any qui permet de créer une\\npromise qui sera complétée si l\'une des promises reçues en argument est\\ncomplétée avec succès :\\n\\nfunction menu() {\\n // showing the menu\\n Promise.any(\\n getEventPromise(\'click\',document.getElementById(\'view2button\')),\\n getEventPromise(\'click\',document.getElementById(\'view3button\'))\\n )\\n .then(function(event) {\\n // view actions\\n // here goes view code\\n // return a promise of exit\\n return getEventPromise(\'click\',document.getElementById(viewId+\'backbutton\'))\\n .then(function() {\\n // hide the view\\n });\\n })\\n // executing the menu\\n .then(menu);\\n}\\n// First execution\\nmenu();\\n\\nC\'est simple comme bonjour. On a une promesse de clic, suivie de l\'affichage de\\nla vue et d\'une promesse de sortie de la vue. Enfin, quand la sortie est\\neffective, on recommence à prendre en compte les clics sur l\'un des items de\\nmenu.\\n\\nJ\'ai créé un exemple sur Codepen [http://codepen.io/seraphzz/pen/oHdJD]\\nrapidement qui illustre le concept. Le bouton générant une fenêtre modale avec \\nalert recrée une nouvelle promise pour pouvoir générer d\'autres alertes alors\\nque le bouton basé sur prompt de la vue suivante n\'en recrée pas et n\'est donc\\nutilisable qu\'une seule fois.\\n\\nL\'avantage de re-créer une promise quand elle est réalisée est qu\'on peut placer\\ndes évènements asynchrones entre deux ce qui fait que le bouton n\'est pas actif\\ntant que la promise associée n\'est pas entièrement réalisée.\\n\\nEn revanche, je me suis permis un écart avec la version originale des promises.\\nEn effet, la méthode Promise.any n\'attend la réalisation que d\'une des promises.\\nCela pose un problème évident de fuite de mémoire si l\'on ne désenregistre pas\\nles évènements associés aux promises qui ne seront pas réalisées.\\n\\nPour ce faire, j\'ai créé une méthode dispose pour les promises qui permet de\\nstocker en retour de la fonction de logique de la promise dans le constructeur\\nPromise [https://gist.github.com/nfroidure/5697689#file-promise-js-L28]une\\nfonction qui permette d\'annuler la promise. Par exemple, pour le générateur de\\npromise, la fonction dispose supprime l\'écouteur d\'évènement\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L161]. Pour une\\nrequête XHR, on pourrait aussi annuler cette dernière.\\n\\nDe cette façon, dans la méthode Promise.any, on désamorce toutes les promises\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L101]qui n\'on pas pu\\nêtre complétée avant la réalisation de la première promise avec succès.\\n\\nPour info : j\'ai finalement créé un dépôt GitHub\\n[https://github.com/nfroidure/Promise]de l\'implémentation de cet article et j\'ai\\ncommencé un petit jeu nommé Liar [https://github.com/nfroidure/Liar]qui utilise\\nces promises afin d\'illustrer cet article.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc122:JSON.parse('{"path":"contents/pages/articles-promises_javascript_ouvrons_capot.html","title":"Les promises avec JavaScript : ouvrons le capot !","description":"Dans le petit monde de JavaScript les promises font l\'actualité. Je vous propose de comprendre les promises par l\'implémentation.","shortTitle":"Les Promises en JS","shortDesc":"En savoir plus sur les Promises en JavaScript","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES PROMISES AVEC JAVASCRIPT : OUVRONS LE CAPOT !\\n⚠ Attention: Cet article est ancien et bien qu\'il reste une bonne façon de\\ncomprendre les promesses en JavaScript, le projet réalisé ne doit pas être\\nutilisé car de nos jours les promesses sont présentes nativement dans tous les\\nenvironnements exécutant du JavaScript.\\n\\nDans le petit monde de JavaScript les promises font l\'actualité. Je vous propose\\nde comprendre les promises par l\'implémentation.\\n\\nQU\'EST-CE QU\'UNE PROMISE ?\\nSelon le Wiki CommonJS [http://wiki.commonjs.org/wiki/Promises/A], une promise,\\nen JavaScript, est un objet représentant une valeur qui pourrait être retournée\\npar l\'exécution d\'une opération unique (souvent asynchrone). Elle peut donc\\navoir trois états ; en attente de résultat, complétée avec succès ou en échec.\\nUne fois complétée ou en échec, une promise ne peut plus changer d\'état.\\n\\nAfin de pouvoir être informé de la complétion, de l\'échec ou de la progression\\nde l\'exécution de l\'opération associée, les objets de type promise ont une\\npropriété then dont la valeur est une fonction prenant en argument trois\\nfonctions de callback :\\n\\n\\npromise.then=function(callbackSuccess, callbackError, callbackProgress){};\\n\\nLe premier callback sera appelé en cas de réalisation avec succès de\\nl\'opération, le second en cas d\'échec et le troisième pour indiquer une\\néventuelle progression de cette opération. Ces trois fonctions de retour sont\\noptionnelles.\\n\\nLa méthode then doit retourner un autre objet promise qui sera complété dès lors\\nque la fonction de retour de succès ou d\'échec de la promise initiale aura été\\ncomplètement exécutée. On peut considérer cette nouvelle promise comme un objet\\nreprésentant l\'opération réalisée par les fonctions de retour.\\n\\nLa fonction callbackSuccess peut retourner une valeur qui sera alors associée à\\nla promise retournée par la méthode then :\\n\\n> var p=new Promise(function myPromiseLogic(success,error,progress) {\\n success(1);\\n}).then(function(value){\\n return value+1;\\n}).then(function(value) {\\n console.log(value);\\n});\\n// 2\\n\\nIci, on crée une promise avec l\'opérateur new qui se résoud immédiatemment avec\\nla valeur 1. Dans le premier then, on incrémente la valeur puis on la retourne,\\ndans le troisième then, on l\'affiche.\\n\\nLa fonction de retour, ici callbackSuccess, peut aussi retourner une promise.\\nDans ce cas, cette dernière se substitue en quelque sorte à la promise générée\\npar la méthode then. En effet, puisque la fonction de callback retourne une\\npromise, elle est donc asynchrone, on peut donc considérer que l\'exécution\\ncomplète du callback ne sera vraie que lorsque la promise retournée sera\\ncomplétée. Le code ci-dessus peut donc également être écrit ainsi :\\n\\nvar p=new Promise(function myPromiseLogic(success,error,progress) {\\n success(1);\\n}).then(function(value){\\n return new Promise(function myPromiseLogic(success,error,progress) {\\n success(value+1);\\n });\\n}).then(function(value) {\\n console.log(value);\\n});\\n// output : 2\\n\\nIMPLÉMENTATION\\nSi comme moi vous aimez voir ce qu\'il se passe sous le capot pour mieux\\ncomprendre, je vous propose une petite implémentation\\n[https://gist.github.com/nfroidure/5697689]que je vais vous expliquer pas à pas.\\nTout d\'abord, on implémente le constructeur. Ce dernier a pour responsabilité le\\nfait de prendre en argument la fonction représentant la \\"logique\\" de notre\\npromise. Le but est de préparer des fonctions permettant à cette logique de\\nsignaler le succès, l\'échec ou la progression de la tâche qu\'elle exécute.\\n\\nfunction Promise(logic) {\\n// create callbacks\\n// executes the logic by passing callbacks\\n logic(success,fail,progress);\\n}\\n\\nComme vous pouvez le voir ligne 12\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L12], les fonctions\\nde callback générées dans le constructeur modifient le statut de la promise en\\nfonction de la réussite ou l\'échec, mais aussi, tentent d\'exécuter une fonction\\nde callback qui pour le moment, n\'existe pas. Il s\'agit de la fonction de\\ncallback qui sera injectée par la méthode then.\\n\\nLa méthode then a deux responsabilités, permettre l\'exécution des callbacks\\nqu\'elle prend en argument et générer une nouvelle promise subordonnée à la\\npremière qu\'elle fournira en retour.\\n\\nLa promise nouvellement créée a une logique particulière. En effet, la fonction\\nfournie au constructeur\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L33]est vide est ne\\nsert qu\'à récupérer une référence vers les fonctions de callback que le\\nconstructeur va lui fournir. Cette astuce va nous permettre de lier la\\ncomplétion de notre nouvelle promise à la promise originale.\\n\\nL\'exécution des callback founis à la méthode then est enrobée de manière à\\ncompléter la nouvelle promise en conséquence. Il existe deux possibilités. Soit\\nau moment de l\'exécution de then, la promise est déjà complétée et à ce moment,\\non exécute tout de suite les callbacks\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L56]adéquats, soit\\nelle n\'a pas encore eu lieu et dans ce cas, on attache ces callbacks à la\\npromise [https://gist.github.com/nfroidure/5697689#file-promise-js-L52]pour\\nqu\'ils soient exécutés quand la logique appellera une des fonctions de callback\\npassées par le contructeur.\\n\\nVous remarquerez l\'utilisation de setTimeout\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L57]pour exécuter les\\ncallbacks de manière asynchrone. Ce n\'est pas précisé par le brouillon de la\\nspécification, mais je pense que c\'est une bonne pratique, de cette manière\\ntoute résolution de promise est asynchrone.\\n\\nNous allons voir comment utiliser les promises pour en tirer le meilleur parti,\\nmais avant tout, je vous recommande de jeter un oeil à l\'implémentation des\\nméthodes statiques Promise.all\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L64]et Promise.any\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L94]que nous allons\\nbientôt utiliser.\\n\\nLE PARADIGME DES PROMISES\\nOk, on sait ce que sont les promises et comment fonctionne leur implémentation.\\nMais qu\'est-ce qu\'on peut bien faire avec ? Les promises sont vendues comme LA\\nsolution au JavaScript callback hell. Je trouve cette présentation un peu\\nréductrice.\\n\\nCeux qui utilisent MooTools savent bien qu\'on peut très facilement se sortir du\\ncallback hell en ayant une approche orientée objet à coup de binding de\\nfonctions et ceux qui connaissent les streams sous Node savent également qu\'on\\npeut aisément linéariser son code en les utilisant.\\n\\nD\'ailleurs, les streams relèvent du même concept que les promises, il sont une\\n\\"promesse\\" que des données vont arriver ou seront envoyées indépendamment de\\nl\'arrivée effective synchrone ou non de celles-cis. En réalité, seule l\' API\\ndiffère entre les streams et les promises dans NodeJS.\\n\\nBref, les promises sont surtout une nouveau paradigme de programmation. Elles\\npermettent d\'envisager une application comme une sorte d\'arbre logique de\\npromises. Nous allons prendre un exemple simple, le cas d\'une application avec\\nun menu principal qui charge des vues différentes en fonction du bouton cliqué\\nsur le menu. Nous allons devoir créer des promises d\'évènements. Pour nous\\nsimplifier la tâche, j\'ai créé un générateur de promises\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L151]basé sur les\\nécouteurs d\'évènements.\\n\\nCommençons par le menu. Un menu est un promesse d\'un clic sur un des boutons qui\\nle composent. Nous utilisons donc la méthode Promise.any qui permet de créer une\\npromise qui sera complétée si l\'une des promises reçues en argument est\\ncomplétée avec succès :\\n\\nfunction menu() {\\n // showing the menu\\n Promise.any(\\n getEventPromise(\'click\',document.getElementById(\'view2button\')),\\n getEventPromise(\'click\',document.getElementById(\'view3button\'))\\n )\\n .then(function(event) {\\n // view actions\\n // here goes view code\\n // return a promise of exit\\n return getEventPromise(\'click\',document.getElementById(viewId+\'backbutton\'))\\n .then(function() {\\n // hide the view\\n });\\n })\\n // executing the menu\\n .then(menu);\\n}\\n// First execution\\nmenu();\\n\\nC\'est simple comme bonjour. On a une promesse de clic, suivie de l\'affichage de\\nla vue et d\'une promesse de sortie de la vue. Enfin, quand la sortie est\\neffective, on recommence à prendre en compte les clics sur l\'un des items de\\nmenu.\\n\\nJ\'ai créé un exemple sur Codepen [http://codepen.io/seraphzz/pen/oHdJD]\\nrapidement qui illustre le concept. Le bouton générant une fenêtre modale avec \\nalert recrée une nouvelle promise pour pouvoir générer d\'autres alertes alors\\nque le bouton basé sur prompt de la vue suivante n\'en recrée pas et n\'est donc\\nutilisable qu\'une seule fois.\\n\\nL\'avantage de re-créer une promise quand elle est réalisée est qu\'on peut placer\\ndes évènements asynchrones entre deux ce qui fait que le bouton n\'est pas actif\\ntant que la promise associée n\'est pas entièrement réalisée.\\n\\nEn revanche, je me suis permis un écart avec la version originale des promises.\\nEn effet, la méthode Promise.any n\'attend la réalisation que d\'une des promises.\\nCela pose un problème évident de fuite de mémoire si l\'on ne désenregistre pas\\nles évènements associés aux promises qui ne seront pas réalisées.\\n\\nPour ce faire, j\'ai créé une méthode dispose pour les promises qui permet de\\nstocker en retour de la fonction de logique de la promise dans le constructeur\\nPromise [https://gist.github.com/nfroidure/5697689#file-promise-js-L28]une\\nfonction qui permette d\'annuler la promise. Par exemple, pour le générateur de\\npromise, la fonction dispose supprime l\'écouteur d\'évènement\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L161]. Pour une\\nrequête XHR, on pourrait aussi annuler cette dernière.\\n\\nDe cette façon, dans la méthode Promise.any, on désamorce toutes les promises\\n[https://gist.github.com/nfroidure/5697689#file-promise-js-L101]qui n\'on pas pu\\nêtre complétée avant la réalisation de la première promise avec succès.\\n\\nPour info : j\'ai finalement créé un dépôt GitHub\\n[https://github.com/nfroidure/Promise]de l\'implémentation de cet article et j\'ai\\ncommencé un petit jeu nommé Liar [https://github.com/nfroidure/Liar]qui utilise\\nces promises afin d\'illustrer cet article.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc123:JSON.parse('{"path":"contents/pages/fr/blog/recuperer_privilege_root_mysql.html","title":"Récupérer les privilèges de l\'utilisateur root de MySQL","description":"En administration système, tout arrive, même les cas les plus désespérés. Perdre le mot de passe ou les privilèges de root de MySQL en fait partie. Voici comment s\'en sortir.","shortTitle":"Privilèges root perdus ?","shortDesc":"Voir la méthode","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nRÉCUPÉRER LES PRIVILÈGES DE L\'UTILISATEUR ROOT DE MYSQL\\nEn administration système, tout arrive, même les cas les plus désespérés. Perdre\\nle mot de passe ou les privilèges de root de MySQL en fait partie. Voici comment\\ns\'en sortir.\\n\\nPerdre les privilèges et/ou le mot de passe de l\'utilisateur root de MySQL est\\nplutôt ennuyeux. Pour résoudre ce problème, il va falloir utiliser la ligne de\\ncommande. Sous Debian GNU/Linux, la méthode est la suivante.\\n\\nTout d\'abord, il faut arrêter le serveur MySQL :\\n\\nroot@server:~# /etc/init.d/mysql stop\\n\\nSi le serveur ne s\'arrête pas, il faut alors trouver le numéro de processus du\\ndémon MySQL (PID) :\\n\\nroot@server:~# ps aux | grep mysqld\\nmysql 27257 0.0 7.0 136720 17824 pts/1 Sl 15:30 0:00 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=mysql --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock --port=3306\\nroot 27341 0.0 0.3 3320 804 pts/1 S+ 15:37 0:00 grep mysqld\\n\\nPuis, l\'arrêter manuellement (ici, il s\'agit du PID 27257) :\\n\\nroot@server:~# kill 27257\\n\\nMaintenant, nous allons démarrer le démon MySQL en ligne de commande en lui\\najoutant des options bien pratiques. Tout d\'abord l\'option --skip-grant-tables\\nqui permet d\'enlever les vérifications de privilège et d\'accéder sans\\nauthentification au serveur MySQL. Ensuite, l\'option --skip-networking afin\\nd\'éviter d\'exposer le serveur au réseau ce qui pourrait laisser la porte ouverte\\nau hacker avisé qui passerai par là.\\n\\n\\nroot@server:~# mysqld --skip-grant-tables --skip-networking &\\n\\nL\'esperluette permet de récupérer la ligne de commande après le démarrage du\\ndémon car nous allons en avoir besoin.\\n\\nConnectons-nous à MySQL grâce à son client en ligne de commande :\\n\\nroot@server:~# mysql\\nWelcome to the MySQL monitor. Commands end with ; or g.\\n\\nServer version: 5.1.49-3 (Debian)\\n \\nCopyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.\\nThis software comes with ABSOLUTELY NO WARRANTY. This is free software,\\nand you are welcome to modify and redistribute it under the GPL v2 license\\nType \'help;\' or \'h\' for help. Type \'c\' to clear the current input statement. \\nmysql>\\n\\nNous avons maintenant la possibilité d\'entrer des requêtes SQL sans vérification\\nde droits quelconques. A savoir, l\'option --skip-grant-tables ne nous permet pas\\nd\'utiliser les requêtes de type GRANT. Nous allons donc devoir agir directement\\nsur les tables virtuelles de MySQL. Pour changer le mot de passe :\\n\\n\\nmysql> UPDATE mysql.user SET password=PASSWORD(\'nouveaumdp\') WHERE User=\\"root\\";\\n\\nPour récupérer tous les privilèges :\\n\\n\\nmysql> UPDATE mysql.user SET Grant_priv = \'Y\', Super_priv = \'Y\' WHERE User = \'root\';\\n\\nOn peut maintenant fermer le client mysql.\\n\\nmysql> exit\\nBye\\n\\nPour mettre fin au processus et redémarrer MySQL dans des conditions normales de\\nproduction, il faut à nouveau tuer le processus mysqld grâce aux commandes\\nutilisées plus haut et redémarrer le serveur :\\n\\nroot@server:~# /etc/init.d/mysql restart\\n\\nVoilà. N\'hésitez pas à donner vos trucs perso en commentaire.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc124:JSON.parse('{"path":"contents/pages/articles-recuperer_privilege_root_mysql.html","title":"Récupérer les privilèges de l\'utilisateur root de MySQL","description":"En administration système, tout arrive, même les cas les plus désespérés. Perdre le mot de passe ou les privilèges de root de MySQL en fait partie. Voici comment s\'en sortir.","shortTitle":"Privilèges root perdus ?","shortDesc":"Voir la méthode","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nRÉCUPÉRER LES PRIVILÈGES DE L\'UTILISATEUR ROOT DE MYSQL\\nEn administration système, tout arrive, même les cas les plus désespérés. Perdre\\nle mot de passe ou les privilèges de root de MySQL en fait partie. Voici comment\\ns\'en sortir.\\n\\nPerdre les privilèges et/ou le mot de passe de l\'utilisateur root de MySQL est\\nplutôt ennuyeux. Pour résoudre ce problème, il va falloir utiliser la ligne de\\ncommande. Sous Debian GNU/Linux, la méthode est la suivante.\\n\\nTout d\'abord, il faut arrêter le serveur MySQL :\\n\\nroot@server:~# /etc/init.d/mysql stop\\n\\nSi le serveur ne s\'arrête pas, il faut alors trouver le numéro de processus du\\ndémon MySQL (PID) :\\n\\nroot@server:~# ps aux | grep mysqld\\nmysql 27257 0.0 7.0 136720 17824 pts/1 Sl 15:30 0:00 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=mysql --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock --port=3306\\nroot 27341 0.0 0.3 3320 804 pts/1 S+ 15:37 0:00 grep mysqld\\n\\nPuis, l\'arrêter manuellement (ici, il s\'agit du PID 27257) :\\n\\nroot@server:~# kill 27257\\n\\nMaintenant, nous allons démarrer le démon MySQL en ligne de commande en lui\\najoutant des options bien pratiques. Tout d\'abord l\'option --skip-grant-tables\\nqui permet d\'enlever les vérifications de privilège et d\'accéder sans\\nauthentification au serveur MySQL. Ensuite, l\'option --skip-networking afin\\nd\'éviter d\'exposer le serveur au réseau ce qui pourrait laisser la porte ouverte\\nau hacker avisé qui passerai par là.\\n\\n\\nroot@server:~# mysqld --skip-grant-tables --skip-networking &\\n\\nL\'esperluette permet de récupérer la ligne de commande après le démarrage du\\ndémon car nous allons en avoir besoin.\\n\\nConnectons-nous à MySQL grâce à son client en ligne de commande :\\n\\nroot@server:~# mysql\\nWelcome to the MySQL monitor. Commands end with ; or g.\\n\\nServer version: 5.1.49-3 (Debian)\\n \\nCopyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.\\nThis software comes with ABSOLUTELY NO WARRANTY. This is free software,\\nand you are welcome to modify and redistribute it under the GPL v2 license\\nType \'help;\' or \'h\' for help. Type \'c\' to clear the current input statement. \\nmysql>\\n\\nNous avons maintenant la possibilité d\'entrer des requêtes SQL sans vérification\\nde droits quelconques. A savoir, l\'option --skip-grant-tables ne nous permet pas\\nd\'utiliser les requêtes de type GRANT. Nous allons donc devoir agir directement\\nsur les tables virtuelles de MySQL. Pour changer le mot de passe :\\n\\n\\nmysql> UPDATE mysql.user SET password=PASSWORD(\'nouveaumdp\') WHERE User=\\"root\\";\\n\\nPour récupérer tous les privilèges :\\n\\n\\nmysql> UPDATE mysql.user SET Grant_priv = \'Y\', Super_priv = \'Y\' WHERE User = \'root\';\\n\\nOn peut maintenant fermer le client mysql.\\n\\nmysql> exit\\nBye\\n\\nPour mettre fin au processus et redémarrer MySQL dans des conditions normales de\\nproduction, il faut à nouveau tuer le processus mysqld grâce aux commandes\\nutilisées plus haut et redémarrer le serveur :\\n\\nroot@server:~# /etc/init.d/mysql restart\\n\\nVoilà. N\'hésitez pas à donner vos trucs perso en commentaire.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc125:JSON.parse('{"path":"contents/pages/fr/blog/remplacer_json_par_varstream.html","title":"Pourquoi j\'ai remplacé JSON par VarStream","description":"JSON est très connu et semble bon pour la plupart des utilisations, cependant, par \\"hasard\\", j\'ai créé un format de données que je trouve supérieur et que j\'ai décidé d\'appeler VarStream.","shortTitle":"VarStream vs JSON","shortDesc":"En savoir plus sur ce format de donnée que j\'ai créé","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nPOURQUOI J\'AI REMPLACÉ JSON PAR VARSTREAM\\nJSON est très connu et semble bon pour la plupart des utilisations, cependant,\\npar \\"hasard\\", j\'ai créé un format de données que je trouve supérieur et que j\'ai\\ndécidé d\'appeler VarStream.\\n\\nAujourd\'hui, ne nombreux développeurs ont choisi de privilégier JSON à XML pour\\nde nombreuses raisons. Sa légèreté est mise en avant par rapport à la lourdeur\\nde XML. Mais JSON a lui aussi des défauts finalement peu connus, des défauts qui\\nont fait que j\'ai créé VarStream, un autre format d\'échange de donnée. Créé pour\\nmon usage personnel, je vous livre aujourd\'hui ses principes et espère que\\ncertains d\'entre vous en tireront avantage.\\n\\nL\'HISTOIRE\\nLorsque j\'ai décidé de créer mon propre CMS, JSON n\'existait pas ou n\'était pas\\ntrès connu. XML était bien présent, mais je le trouvais un peu compliqué et\\nsurtout très lourd. J\'avais pourtant besoin d\'un format de stockage de valeurs\\npour deux besoins principalement : la localisation et la configuration.\\n\\nInfluencé par les fichiers de configuration Unix et les fichiers .properties\\nutilisés pour la localisation chez Mozilla, j\'ai décidé d\'utiliser un format\\nsimple de type cle=valeur suvi d\'une nouvelle ligne. Par la suite, j\'ai dû\\najouter une façon de commenter ces fichiers. Toujours dans le pompage des\\nfichiers de conf Unix, j\'ai choisi le # en début de ligne.\\n\\nEnfin, il m\'a fallu trouver un moyen d\'insérer des nouvelles lignes et de\\nréprésenter une arborescence de valeurs ou des tableaux. Au fil de mes\\naméliorations, je suis parvenu à un format qui ne m\'apporte que des avantages et\\nc\'est pour cela que je souhaite aujourd\'hui le proposer à la communauté de\\ndéveloppeurs.\\n\\nPour ce faire, je vais vous le présenter dans sa forme actuelle, mettre en\\nlumière ses forces et partager avec vous les bouts de code qui permettent de\\nl\'exploiter en PHP et en Javascript.\\n\\nLE FORMAT\\nAfin d\'illustrer ce format, je vous livre un petit exemple de fichier de\\nconfiguration :\\n\\n# Database\\ndatabase.type=mysql\\ndatabase.hosts.+.domain=mysql1.example.com\\ndatabase.hosts.*.master=true\\ndatabase.hosts.+.domain=mysql2.example.com\\ndatabase.hosts.*.master=false\\ndatabase.hosts.0.master=true\\ndatabase.user=root\\ndatabase.base=myapp\\ndatabase.base=myapp2\\n\\".base=myapp\\n# REST servers\\nrest.servers.+.domain=api.example.com\\nrest.servers.*.auth=basic\\nrest.servers.*.user=&database.user\\n\\nEt aussi un exemple de fichier de langue dans ce format :\\n\\n\\n# Date\\nl_timezone=Europe/Paris\\nl_date_format=l d F Y\\nl_day_format=d F\\nl_time_format=l d F Y à H:i:s\\nl_hour_format=H:i:s\\nl_days.monday=Lundi\\nl_days.tuesday=Mardi\\nl_days.wednesday=Mercredi\\nl_days.thursday=Jeudi\\nl_days.friday=Vendredi\\nl_days.saturday=Samedi\\nl_days.sunday=Dimanche\\nl_months.january=Janvier\\nl_months.february=Février\\nl_months.march=Mars\\nl_months.april=Avril\\nl_months.may=Mai\\nl_months.june=Juin\\nl_months.july=Juillet\\nl_months.august=Août\\nl_months.september=Septembre\\nl_months.october=Octobre\\nl_months.november=Novembre\\nl_months.december=Decembre\\n# Numbers\\nl_number_dec_point=,\\nl_number_thousands_sep= # Phone numbers\\nl_phone_local_indicator=33\\nl_phone_local_format=0\\nl_phone_indicator_format=+XXXX (0)\\nl_phone_number_format=X XX XX XX XX\\n# GPS Locations\\nl_gps_latitude=N\\nl_gps_longitude=O\\n# Multiline \\nl_multiline=i curently have a \\nmultiline value. \\nIt\'s great !\\n\\nUn bref coup d\'oeil permet de comprendre que la partie de gauche du signe = \\nreprésente le nom de la variable, la partie droite sa valeur. Les noms des\\nvariables sont séparés par des points délimitant des nœuds permettant de\\nreprésenter la position de la valeur dans l\'arborescence du programme d\'une\\nfaçon linéaire. Un peu comme ce que l\'on peut observer dans Javascript.\\n\\nLes nœuds sont soit des noms de variable (ex:database) soit des caractères\\nspéciaux (\\",+,*,!). Le nœud le plus à droite est forcément un nom de variable.\\nLes autres nœuds sont soit des objets, soit des tableaux, soit une ligne d\'un\\ntableau. Ceci est déterminé par leur format. Si le nœud est composé de\\ncaractères alphanumériques uniquement ou des signes +,*,!, c\'est une ligne d\'un\\ntableau. Automatiquement, le nœud précédent est un tableau. Sinon, il s\'agit\\nd\'un objet (Object en Javascript, stdClass en PHP).\\n\\nLes tableaux sont initialisés par un noeud numérique, un signe +, un signe * ou\\nun signe !. Le signe + quand un tableau existe précise que la variable qui suit\\ndoit être ajoutée dans une nouvelle ligne du tableau. Le caractère * fait\\nréférence à la ligne courante du tableau. Le caractère ! signifie que quoiqu\'il\\ny ait eu auparavant dans le tableau, il faut le réinitialiser. Enfin, un noeud\\nalphanumérique fait référence au n° de ligne (un table[n] dans la plupart des\\nlangages).\\n\\nLes objets sont initialisés lors de la première référence à ces derniers et on y\\nfait référence par leur nom simplement. On peut ajouter une propriété à un objet\\nsans répéter sa position dans l\'arborescence en utilisant le signe \\" qui\\nreprésente alors le chemin de la ligne précédente comme on le ferait\\nnaturellement quand on écrit plusieurs lignes à la suite avec un début\\nidentique. C\'est le cas dans notre fichier de configuration ou j\'assigne la\\nvaleur myapp à database.base pour ensuite y mettre la valeur myapp2 et enfin y\\nremettre la valeur myapp. Cela n\'a aucun autre intérêt que d\'illustrer le\\nconcept mais vous comprendrez par la suite.\\n\\nLes valeurs sont soit du texte, soit des valeurs numériques, soit une valeur\\nbooléenne (true ou false).\\n\\nOn peut faire référence à une autre variable dans la partie droite de la ligne\\nplutôt que d\'y mettre la valeur une seconde fois grâce au signe esperluette (&)\\ncomme vous pouvez le voir pour la variable rest.servers.*.user. Si la valeur est\\nune variable, la valeur est copié, si c\'est un objet, il est référencé.\\n\\nEnfin, pour insérer une valeur contenant plusieurs lignes dans une variable, on\\ntermine chaque nouvelle ligne par un backslash ().\\n\\nVous êtes sûrement entrain de vous dire que c\'est bien compliqué, mais en fait,\\nces règles sont aisément déductibles à la vue d\'un fichier de configuration ou\\nde langue dans ce format. Maintenant, laissez-moi vous expliquer pourquoi j\'ai\\nfini par utiliser ce format en lieu et place de JSon pour de la communication\\nclient-server.\\n\\nAVANTAGES\\nCe format de fichier présente de nombreux avantages dans le contexte d\'une\\napplication web, voici les principaux :\\n\\nSTREAMABLE\\nUn atout majeur. Là où JSON nécessite la lecture complète du contenu pour\\nassurer le fait que le fichier est bien formé, les VarStreams permettent de\\nrécupérer les différentes valeurs au flux optimisant ainsi l\'espace mémoire\\nutilisé et vidant les tampons au fur et à mesure du traitement.\\n\\nCette nature streamable permet également de récupérer des données qui seraient\\nfragmentées dans différents fichiers chargés successivement. Par exemple, je\\nm\'en sert pour charger différents fichiers de configurations. Le fichier\\ngénérique utilisé poiur toutes les apps. Puis un fichier spécifique à\\nl\'application web qui surcharge certaines valeurs. Cela rend les VarStreams\\nmergeable ce qui ne peut être fait aisément avec JSon.\\n\\nCela peut-être très intéressant dans l\'utilisation des web sockets pour mettre à\\njour un tableau de valeur facilement, ce dernier est synchronisé au flux et la\\ncommunication est fluide et transparente. On pourrait même imaginer de modifier\\nl\'interface au flux grâce à du binding sur certaines valeurs.\\n\\nHUMAN READABLE / WRITEABLE\\nCeux qui ont déjà eu besoin d\'écrire ou de lire du JSON le savent bien, avoir un\\nformat d\'échange facile à lire est important pour le débogage. Dans ce domaine,\\nles VarStreams sont champions.\\n\\nDe plus, mon expérience prouve que les traducteurs sont à l\'aise avec ce type de\\nfichiers, il n\'ont pas de caractères spéciaux à échapper, pas de guillemets à\\najouter etc... Il n\'ont qu\'à ajouter un backslash à la fin d\'une ligne si la\\nligne suivante contient la suite de la valeur.\\n\\nAUTO-REFERENCABLE\\nDans un fichier JSON, vous ne pouvez pas faire référence à une valeur déjà\\nprésente car le contenu du fichier ne sera interprété qu\'à la fin du fichier.\\nC\'est une grosse limitation que les VarStreams outrepassent.\\n\\nUTILISATION\\nPour l\'instant, j\'ai mis le parseur Javascript sur GitHub, mon parseur PHP\\nnécessite d\'être revu pour ne plus être dépendant de mon Framework. Utiliser les\\nVarStreams est simple. Il suffit de passer en paramètre d\'une fonction, les\\ndonnées puis le contexte. Le contexte doit être un objet. Retrouvez tout le\\nmatériel nécessaire à son utilisation [https://github.com/nfroidure/VarStream]\\nsur GitHub. Petit exemple :\\n\\nvar myScope={};\\nvar myStream=new VarStreamReader(myScope,true);\\nmyStream.read(\'\');\\nmyStream.read(\'#comment\');\\nmyStream.read(\'# Database\'\\n +\'database.type=mysql\'+\\"\\n\\"\\n +\'database.hosts.+.domain=mysql1.example.com\'+\\"\\n\\"\\n +\'database.hosts.*.master=true\'+\\"\\n\\"\\n +\'database.hosts.+.domain=mysql2.example.com\'+\\"\\n\\"\\n +\'database.hosts.*.master=false\'+\\"\\n\\");\\nconsole.log(myScope.hosts[[0]].domain);\\n\\nOn peut bien-sûr imaginer utiliser la fonction read comme callback d\'une requête\\nAjax ou d\'un WebSocket. Avec NodeJs on peut l\'utiliser pour charger\\ndynamiquement un fichier de variables ligne par ligne. A vous d\'inventer vos\\npropres cas d\'utilisation ;).\\n\\nDès que j\'en aurai le temps et l\'utilité, j\'écrirai la fonction d\'export\\ncorrespondante (pour finir je l\'ai faîte dans la foulée) que je n\'utilise qu\'en\\nPHP actuellement.\\n\\nCONCLUSION\\nJ\'espère que cet article vous a intéressé, n\'hésitez pas à me faire des\\nremarques, à donner vos critiques/avis, cela faisait trop longtemps que\\nj’utilisais ce format dans mon coin sans en faire profiter personne !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc126:JSON.parse('{"path":"contents/pages/articles-remplacer_json_par_varstream.html","title":"Pourquoi j\'ai remplacé JSON par VarStream","description":"JSON est très connu et semble bon pour la plupart des utilisations, cependant, par \\"hasard\\", j\'ai créé un format de données que je trouve supérieur et que j\'ai décidé d\'appeler VarStream.","shortTitle":"VarStream vs JSON","shortDesc":"En savoir plus sur ce format de donnée que j\'ai créé","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nPOURQUOI J\'AI REMPLACÉ JSON PAR VARSTREAM\\nJSON est très connu et semble bon pour la plupart des utilisations, cependant,\\npar \\"hasard\\", j\'ai créé un format de données que je trouve supérieur et que j\'ai\\ndécidé d\'appeler VarStream.\\n\\nAujourd\'hui, ne nombreux développeurs ont choisi de privilégier JSON à XML pour\\nde nombreuses raisons. Sa légèreté est mise en avant par rapport à la lourdeur\\nde XML. Mais JSON a lui aussi des défauts finalement peu connus, des défauts qui\\nont fait que j\'ai créé VarStream, un autre format d\'échange de donnée. Créé pour\\nmon usage personnel, je vous livre aujourd\'hui ses principes et espère que\\ncertains d\'entre vous en tireront avantage.\\n\\nL\'HISTOIRE\\nLorsque j\'ai décidé de créer mon propre CMS, JSON n\'existait pas ou n\'était pas\\ntrès connu. XML était bien présent, mais je le trouvais un peu compliqué et\\nsurtout très lourd. J\'avais pourtant besoin d\'un format de stockage de valeurs\\npour deux besoins principalement : la localisation et la configuration.\\n\\nInfluencé par les fichiers de configuration Unix et les fichiers .properties\\nutilisés pour la localisation chez Mozilla, j\'ai décidé d\'utiliser un format\\nsimple de type cle=valeur suvi d\'une nouvelle ligne. Par la suite, j\'ai dû\\najouter une façon de commenter ces fichiers. Toujours dans le pompage des\\nfichiers de conf Unix, j\'ai choisi le # en début de ligne.\\n\\nEnfin, il m\'a fallu trouver un moyen d\'insérer des nouvelles lignes et de\\nréprésenter une arborescence de valeurs ou des tableaux. Au fil de mes\\naméliorations, je suis parvenu à un format qui ne m\'apporte que des avantages et\\nc\'est pour cela que je souhaite aujourd\'hui le proposer à la communauté de\\ndéveloppeurs.\\n\\nPour ce faire, je vais vous le présenter dans sa forme actuelle, mettre en\\nlumière ses forces et partager avec vous les bouts de code qui permettent de\\nl\'exploiter en PHP et en Javascript.\\n\\nLE FORMAT\\nAfin d\'illustrer ce format, je vous livre un petit exemple de fichier de\\nconfiguration :\\n\\n# Database\\ndatabase.type=mysql\\ndatabase.hosts.+.domain=mysql1.example.com\\ndatabase.hosts.*.master=true\\ndatabase.hosts.+.domain=mysql2.example.com\\ndatabase.hosts.*.master=false\\ndatabase.hosts.0.master=true\\ndatabase.user=root\\ndatabase.base=myapp\\ndatabase.base=myapp2\\n\\".base=myapp\\n# REST servers\\nrest.servers.+.domain=api.example.com\\nrest.servers.*.auth=basic\\nrest.servers.*.user=&database.user\\n\\nEt aussi un exemple de fichier de langue dans ce format :\\n\\n\\n# Date\\nl_timezone=Europe/Paris\\nl_date_format=l d F Y\\nl_day_format=d F\\nl_time_format=l d F Y à H:i:s\\nl_hour_format=H:i:s\\nl_days.monday=Lundi\\nl_days.tuesday=Mardi\\nl_days.wednesday=Mercredi\\nl_days.thursday=Jeudi\\nl_days.friday=Vendredi\\nl_days.saturday=Samedi\\nl_days.sunday=Dimanche\\nl_months.january=Janvier\\nl_months.february=Février\\nl_months.march=Mars\\nl_months.april=Avril\\nl_months.may=Mai\\nl_months.june=Juin\\nl_months.july=Juillet\\nl_months.august=Août\\nl_months.september=Septembre\\nl_months.october=Octobre\\nl_months.november=Novembre\\nl_months.december=Decembre\\n# Numbers\\nl_number_dec_point=,\\nl_number_thousands_sep= # Phone numbers\\nl_phone_local_indicator=33\\nl_phone_local_format=0\\nl_phone_indicator_format=+XXXX (0)\\nl_phone_number_format=X XX XX XX XX\\n# GPS Locations\\nl_gps_latitude=N\\nl_gps_longitude=O\\n# Multiline \\nl_multiline=i curently have a \\nmultiline value. \\nIt\'s great !\\n\\nUn bref coup d\'oeil permet de comprendre que la partie de gauche du signe = \\nreprésente le nom de la variable, la partie droite sa valeur. Les noms des\\nvariables sont séparés par des points délimitant des nœuds permettant de\\nreprésenter la position de la valeur dans l\'arborescence du programme d\'une\\nfaçon linéaire. Un peu comme ce que l\'on peut observer dans Javascript.\\n\\nLes nœuds sont soit des noms de variable (ex:database) soit des caractères\\nspéciaux (\\",+,*,!). Le nœud le plus à droite est forcément un nom de variable.\\nLes autres nœuds sont soit des objets, soit des tableaux, soit une ligne d\'un\\ntableau. Ceci est déterminé par leur format. Si le nœud est composé de\\ncaractères alphanumériques uniquement ou des signes +,*,!, c\'est une ligne d\'un\\ntableau. Automatiquement, le nœud précédent est un tableau. Sinon, il s\'agit\\nd\'un objet (Object en Javascript, stdClass en PHP).\\n\\nLes tableaux sont initialisés par un noeud numérique, un signe +, un signe * ou\\nun signe !. Le signe + quand un tableau existe précise que la variable qui suit\\ndoit être ajoutée dans une nouvelle ligne du tableau. Le caractère * fait\\nréférence à la ligne courante du tableau. Le caractère ! signifie que quoiqu\'il\\ny ait eu auparavant dans le tableau, il faut le réinitialiser. Enfin, un noeud\\nalphanumérique fait référence au n° de ligne (un table[n] dans la plupart des\\nlangages).\\n\\nLes objets sont initialisés lors de la première référence à ces derniers et on y\\nfait référence par leur nom simplement. On peut ajouter une propriété à un objet\\nsans répéter sa position dans l\'arborescence en utilisant le signe \\" qui\\nreprésente alors le chemin de la ligne précédente comme on le ferait\\nnaturellement quand on écrit plusieurs lignes à la suite avec un début\\nidentique. C\'est le cas dans notre fichier de configuration ou j\'assigne la\\nvaleur myapp à database.base pour ensuite y mettre la valeur myapp2 et enfin y\\nremettre la valeur myapp. Cela n\'a aucun autre intérêt que d\'illustrer le\\nconcept mais vous comprendrez par la suite.\\n\\nLes valeurs sont soit du texte, soit des valeurs numériques, soit une valeur\\nbooléenne (true ou false).\\n\\nOn peut faire référence à une autre variable dans la partie droite de la ligne\\nplutôt que d\'y mettre la valeur une seconde fois grâce au signe esperluette (&)\\ncomme vous pouvez le voir pour la variable rest.servers.*.user. Si la valeur est\\nune variable, la valeur est copié, si c\'est un objet, il est référencé.\\n\\nEnfin, pour insérer une valeur contenant plusieurs lignes dans une variable, on\\ntermine chaque nouvelle ligne par un backslash ().\\n\\nVous êtes sûrement entrain de vous dire que c\'est bien compliqué, mais en fait,\\nces règles sont aisément déductibles à la vue d\'un fichier de configuration ou\\nde langue dans ce format. Maintenant, laissez-moi vous expliquer pourquoi j\'ai\\nfini par utiliser ce format en lieu et place de JSon pour de la communication\\nclient-server.\\n\\nAVANTAGES\\nCe format de fichier présente de nombreux avantages dans le contexte d\'une\\napplication web, voici les principaux :\\n\\nSTREAMABLE\\nUn atout majeur. Là où JSON nécessite la lecture complète du contenu pour\\nassurer le fait que le fichier est bien formé, les VarStreams permettent de\\nrécupérer les différentes valeurs au flux optimisant ainsi l\'espace mémoire\\nutilisé et vidant les tampons au fur et à mesure du traitement.\\n\\nCette nature streamable permet également de récupérer des données qui seraient\\nfragmentées dans différents fichiers chargés successivement. Par exemple, je\\nm\'en sert pour charger différents fichiers de configurations. Le fichier\\ngénérique utilisé poiur toutes les apps. Puis un fichier spécifique à\\nl\'application web qui surcharge certaines valeurs. Cela rend les VarStreams\\nmergeable ce qui ne peut être fait aisément avec JSon.\\n\\nCela peut-être très intéressant dans l\'utilisation des web sockets pour mettre à\\njour un tableau de valeur facilement, ce dernier est synchronisé au flux et la\\ncommunication est fluide et transparente. On pourrait même imaginer de modifier\\nl\'interface au flux grâce à du binding sur certaines valeurs.\\n\\nHUMAN READABLE / WRITEABLE\\nCeux qui ont déjà eu besoin d\'écrire ou de lire du JSON le savent bien, avoir un\\nformat d\'échange facile à lire est important pour le débogage. Dans ce domaine,\\nles VarStreams sont champions.\\n\\nDe plus, mon expérience prouve que les traducteurs sont à l\'aise avec ce type de\\nfichiers, il n\'ont pas de caractères spéciaux à échapper, pas de guillemets à\\najouter etc... Il n\'ont qu\'à ajouter un backslash à la fin d\'une ligne si la\\nligne suivante contient la suite de la valeur.\\n\\nAUTO-REFERENCABLE\\nDans un fichier JSON, vous ne pouvez pas faire référence à une valeur déjà\\nprésente car le contenu du fichier ne sera interprété qu\'à la fin du fichier.\\nC\'est une grosse limitation que les VarStreams outrepassent.\\n\\nUTILISATION\\nPour l\'instant, j\'ai mis le parseur Javascript sur GitHub, mon parseur PHP\\nnécessite d\'être revu pour ne plus être dépendant de mon Framework. Utiliser les\\nVarStreams est simple. Il suffit de passer en paramètre d\'une fonction, les\\ndonnées puis le contexte. Le contexte doit être un objet. Retrouvez tout le\\nmatériel nécessaire à son utilisation [https://github.com/nfroidure/VarStream]\\nsur GitHub. Petit exemple :\\n\\nvar myScope={};\\nvar myStream=new VarStreamReader(myScope,true);\\nmyStream.read(\'\');\\nmyStream.read(\'#comment\');\\nmyStream.read(\'# Database\'\\n +\'database.type=mysql\'+\\"\\n\\"\\n +\'database.hosts.+.domain=mysql1.example.com\'+\\"\\n\\"\\n +\'database.hosts.*.master=true\'+\\"\\n\\"\\n +\'database.hosts.+.domain=mysql2.example.com\'+\\"\\n\\"\\n +\'database.hosts.*.master=false\'+\\"\\n\\");\\nconsole.log(myScope.hosts[[0]].domain);\\n\\nOn peut bien-sûr imaginer utiliser la fonction read comme callback d\'une requête\\nAjax ou d\'un WebSocket. Avec NodeJs on peut l\'utiliser pour charger\\ndynamiquement un fichier de variables ligne par ligne. A vous d\'inventer vos\\npropres cas d\'utilisation ;).\\n\\nDès que j\'en aurai le temps et l\'utilité, j\'écrirai la fonction d\'export\\ncorrespondante (pour finir je l\'ai faîte dans la foulée) que je n\'utilise qu\'en\\nPHP actuellement.\\n\\nCONCLUSION\\nJ\'espère que cet article vous a intéressé, n\'hésitez pas à me faire des\\nremarques, à donner vos critiques/avis, cela faisait trop longtemps que\\nj’utilisais ce format dans mon coin sans en faire profiter personne !\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc127:JSON.parse('{"path":"contents/pages/fr/blog/request_animation_frame.html","title":"Utilisation de requestAnimationFrame pour les jeux HTML5","description":"Une nouvelle spécification permet d\'optimiser l\'affichage des jeux HTML5 en synchronisant ces derniers avec le moteur graphique du navigateur. Petit exemple de mise en oeuvre avec notre casse brique.","shortTitle":"requestAnimationFrame","shortDesc":"En savoir plus sur cette nouvelle possibilité pour les jeux HTML5","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUTILISATION DE REQUESTANIMATIONFRAME POUR LES JEUX HTML5\\n⚠ Attention: Cet article est ancien et ne correspond pas à l\'état de l\'art de la\\ncréation de casse briques pour le navigateur.\\n\\nUne nouvelle spécification permet d\'optimiser l\'affichage des jeux HTML5 en\\nsynchronisant ces derniers avec le moteur graphique du navigateur. Petit exemple\\nde mise en oeuvre avec notre casse brique.\\n\\nLe code de notre casse brique [https://github.com/nfroidure/Breakit]consiste en\\nune fonction appelée régulièrement (toutes les 30ms) par la fonction setTimeout.\\nJ\'expliquais dans l\'article dédié au développement du casse brique\\n[html5_casse_brique.html]que cette manière de faire permettait de faire ralentir\\nle jeu en cas de difficulté du navigateur à afficher les différents dessins a\\ntemps.\\n\\nLe problème est donc que la vitesse ressentie est différente en fonction du\\nmatériel de notre utilisateur. Elle n\'ira pas au delà de 30ms, mais peut aller\\nbien moins vite sur du matériel ancien. C\'est ici que requestAnimationFrame\\nintervient. L\'idée est de synchroniser l\'affichage du jeu dans le canvas de\\nfaçon à ce que le navigateur puisse optimiser au mieux sa gestion.\\n\\nL\'utilisation de requestAnimationFrame est simple bien que non-standardisée\\nentre les divers navigateurs. Néanmoins, leur point commun est que l\'on peut\\nleur passer une fonction en argument qui sera appelé avant chaque repaint\\neffectué par le navigateur. Ce petit morceau de code m\'a permis de l\'utiliser\\nsur tous les navigateurs l\'implémentant :\\n\\nthis.requestAnimFrame = (function(){ return window.requestAnimationFrame\\n || window.webkitRequestAnimationFrame\\n || window.mozRequestAnimationFrame\\n || window.oRequestAnimationFrame\\n || window.msRequestAnimationFrame\\n || null})();\\n\\nJ\'ai donc créé une méthode Game.draw() qui permet d\'afficher les différents\\nobjets de la scene du jeu que j\'ai passé en argument de ma fonction wrappant les\\ndiverses implémentations (notez l\'utilisation de la methode call de l\'objet\\nfunction permettant de réinjecter le scope global à la fonction wrapper\\n(nécessaire sous Chrome) :\\n\\nif(this.requestAnimFrame)\\n this.requestAnimFrame.call(window,this.draw.bind(this));\\n\\nJ\'ai cependant conservé mon timer pour les mouvements de objets et leurs\\ncollisions. En effet, le temps ne doit pas varier en fonction du matériel\\nutilisé. Dans la réalité, il varie un peu tout de même car il y a bien un temps\\nde calcul entre chaque appel de la fonction principale du jeu, mais cela est\\nbien moins important depuis que le dessin a été complètement dissocié. Le timer\\nsert également de fallback dans le cas où la fonction requestAnimationFrame ne\\nserait pas disponible.\\n\\nMalheureusement, seul Mozilla a implémenté une méthode permettant de détacher la\\nfonction passée en argument (pour effectuer une pause du jeu sans consommer\\ninutilement de ressources système) grâce à la fonction cancelAnimationFrame à\\nlaquelle on passe un id reçu en retour de la fonction requestAnimationFrame (un\\npeu sur le modèle des fonctions setTimeout et clearTimeout. J\'ai donc du me\\nréférer au timer afin de savoir si le jeu est mis en pause ou non pour ne pas\\ndessiner inutilement la scène. La fonction est cependant toujours appelée, mais\\nje n\'y peux pas grand chose.\\n\\nJ\'avoue que je n\'ai pas vu de forte différences entre la version avec et la\\nversion sans requestAnimationFrame, cela est sûrement dû à mon PC assez musclé\\n;). Je n\'ai pas encore testé sur mobile, j\'imagine que la différence sera plus\\nnette. Je vais certainement réutiliser le même patron de conception pour Tank\\nArena dès que j\'aurai un peu plus de temps. La suite au prochain numéro ;).\\n\\nPS : Et ce prochain numéro est le support de l\'accéléromètre\\n[accelerometre_casse_briques.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc128:JSON.parse('{"path":"contents/pages/articles-request_animation_frame.html","title":"Utilisation de requestAnimationFrame pour les jeux HTML5","description":"Une nouvelle spécification permet d\'optimiser l\'affichage des jeux HTML5 en synchronisant ces derniers avec le moteur graphique du navigateur. Petit exemple de mise en oeuvre avec notre casse brique.","shortTitle":"requestAnimationFrame","shortDesc":"En savoir plus sur cette nouvelle possibilité pour les jeux HTML5","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nUTILISATION DE REQUESTANIMATIONFRAME POUR LES JEUX HTML5\\n⚠ Attention: Cet article est ancien et ne correspond pas à l\'état de l\'art de la\\ncréation de casse briques pour le navigateur.\\n\\nUne nouvelle spécification permet d\'optimiser l\'affichage des jeux HTML5 en\\nsynchronisant ces derniers avec le moteur graphique du navigateur. Petit exemple\\nde mise en oeuvre avec notre casse brique.\\n\\nLe code de notre casse brique [https://github.com/nfroidure/Breakit]consiste en\\nune fonction appelée régulièrement (toutes les 30ms) par la fonction setTimeout.\\nJ\'expliquais dans l\'article dédié au développement du casse brique\\n[html5_casse_brique.html]que cette manière de faire permettait de faire ralentir\\nle jeu en cas de difficulté du navigateur à afficher les différents dessins a\\ntemps.\\n\\nLe problème est donc que la vitesse ressentie est différente en fonction du\\nmatériel de notre utilisateur. Elle n\'ira pas au delà de 30ms, mais peut aller\\nbien moins vite sur du matériel ancien. C\'est ici que requestAnimationFrame\\nintervient. L\'idée est de synchroniser l\'affichage du jeu dans le canvas de\\nfaçon à ce que le navigateur puisse optimiser au mieux sa gestion.\\n\\nL\'utilisation de requestAnimationFrame est simple bien que non-standardisée\\nentre les divers navigateurs. Néanmoins, leur point commun est que l\'on peut\\nleur passer une fonction en argument qui sera appelé avant chaque repaint\\neffectué par le navigateur. Ce petit morceau de code m\'a permis de l\'utiliser\\nsur tous les navigateurs l\'implémentant :\\n\\nthis.requestAnimFrame = (function(){ return window.requestAnimationFrame\\n || window.webkitRequestAnimationFrame\\n || window.mozRequestAnimationFrame\\n || window.oRequestAnimationFrame\\n || window.msRequestAnimationFrame\\n || null})();\\n\\nJ\'ai donc créé une méthode Game.draw() qui permet d\'afficher les différents\\nobjets de la scene du jeu que j\'ai passé en argument de ma fonction wrappant les\\ndiverses implémentations (notez l\'utilisation de la methode call de l\'objet\\nfunction permettant de réinjecter le scope global à la fonction wrapper\\n(nécessaire sous Chrome) :\\n\\nif(this.requestAnimFrame)\\n this.requestAnimFrame.call(window,this.draw.bind(this));\\n\\nJ\'ai cependant conservé mon timer pour les mouvements de objets et leurs\\ncollisions. En effet, le temps ne doit pas varier en fonction du matériel\\nutilisé. Dans la réalité, il varie un peu tout de même car il y a bien un temps\\nde calcul entre chaque appel de la fonction principale du jeu, mais cela est\\nbien moins important depuis que le dessin a été complètement dissocié. Le timer\\nsert également de fallback dans le cas où la fonction requestAnimationFrame ne\\nserait pas disponible.\\n\\nMalheureusement, seul Mozilla a implémenté une méthode permettant de détacher la\\nfonction passée en argument (pour effectuer une pause du jeu sans consommer\\ninutilement de ressources système) grâce à la fonction cancelAnimationFrame à\\nlaquelle on passe un id reçu en retour de la fonction requestAnimationFrame (un\\npeu sur le modèle des fonctions setTimeout et clearTimeout. J\'ai donc du me\\nréférer au timer afin de savoir si le jeu est mis en pause ou non pour ne pas\\ndessiner inutilement la scène. La fonction est cependant toujours appelée, mais\\nje n\'y peux pas grand chose.\\n\\nJ\'avoue que je n\'ai pas vu de forte différences entre la version avec et la\\nversion sans requestAnimationFrame, cela est sûrement dû à mon PC assez musclé\\n;). Je n\'ai pas encore testé sur mobile, j\'imagine que la différence sera plus\\nnette. Je vais certainement réutiliser le même patron de conception pour Tank\\nArena dès que j\'aurai un peu plus de temps. La suite au prochain numéro ;).\\n\\nPS : Et ce prochain numéro est le support de l\'accéléromètre\\n[accelerometre_casse_briques.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc129:JSON.parse('{"path":"contents/pages/fr/blog/resume_septembre_2012.html","title":"Mes trouvailles de septembre 2012","description":"Ce mois-ci, j\'ai vu passer assez de petites choses pour faire un point rapide sur les dernières nouveautés et actualités du développement web.","shortTitle":"Trouvailles 09/2012","shortDesc":"Voir les trouvailles de ce mois de septembre 2012","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMES TROUVAILLES DE SEPTEMBRE 2012\\nCe mois-ci, j\'ai vu passer assez de petites choses pour faire un point rapide\\nsur les dernières nouveautés et actualités du développement web.\\n\\nTout d\'abord, parlons un peu des exploits de bidouilleurs de l\'extrême :\\n\\n * Les WebSockets, vous utilisez ? Vous aimez ? Eh bien, c\'était possible\\n   quasiment depuis la création du web ! La preuve par l\'exemple avec GifSockets\\n   [https://github.com/videlalvaro/gifsockets]. \\n\\nQuelques infos sur l\'état d\'HTML5 :\\n\\n * le flexible box model a changé. Difficile de trouver des ressources à jour\\n   sur ce thème, voici donc un lien qui l\'explique comme il faut\\n   [http://www.the-haystack.com/2012/01/04/learn-you-a-flexbox/]en anglais. Je\\n   ferai peut-être un article si j\'ai le temps car je l\'utilise quasiment depuis\\n   sa création et c\'est vraiment l\'avenir de l\'intégration web à mon sens.\\n   D\'ailleurs, il serait temps qu\'Opera se bouge le ... \\n * plus récent, une fontaine dont chaque jet est animé par un WebWorker (sorte\\n   de thread Javascript) puis dessiné dans le thread principal via l\'élément\\n   Canvas à chaque évènement. L\'animation en elle-même n\'a pas grand intérêt,\\n   mais le principe est très prometteur. En effet, il a un double avantage :\\n   exploiter tous les coeurs de la machine, dissocier le calcul des coordonnées\\n   de l\'affichage. Je pense à Tank Arena et je me dit que je pourrai utiliser un\\n   WebWorker pour calculer les déplacements et cela serait une première\\n   isolation me permettant de déplacer au besoin ces calculs sur un serveur avec\\n   les WebSocket ou chez un joueur hôte via WebRTC. Je ne sais pas si cette\\n   approche existe dans les moteurs de jeu actuellement disponibles. \\n * mon avis sur le troll de Zuckerberg\\n   [http://techcrunch.com/2012/09/11/mark-zuckerberg-our-biggest-mistake-with-mobile-was-betting-too-much-on-html5/]\\n   à propos de HTML5. Premièrement, ce qu\'il a dit semble plus mitigé que ce que\\n   les anti-HTML5 ont relevé, mais de plus, pour utiliser l\'application\\n   Facebook, je peux vous assurer que la merde, c\'est pas HTML5, mais les\\n   serveurs de Facebook et probablement leur façon d\'échanger entre client et\\n   serveur. Pour avoir moi-même développé un client HTML5, je peux vous assurer\\n   que c\'est plus le serveur qui nuit à l\'expérience utilisateur. Il faut alors\\n   optimiser le format d\'échange de données (BisonJS pour les fans de JSon ou\\n   pourquoi pas les VarStreams [https://npmjs.org/package/varstream]pour un\\n   chargement progressif de la timeline) et surtout bien coder côté serveur et\\n   bien optimiser l\'infra. Pour moi sur un seul serveur avec une charge de\\n   PMI-PME, c\'est plus simple, mais je pense que Facebook a surtout un gros\\n   problème d\'infrastructure qui a du mal à affronter la charge en restant\\n   réactive. C\'est un peu normal vu leur traffic, par contre, c\'est pas sympa de\\n   s\'en prendre à HTML5 et d\'en faire un bouc émissaire. \\n * j\'ai testé pour vous : Windows 8 est effectivement prêt pour HTML5. Microsoft\\n   semble en revanche moins prêt pour le défi business qui l\'attend avec\\n   l\'explosion du mobile. Bon, par contre, ça ne signifie pas qu\'il sont devenus\\n   meilleurs, ils restent sur ce point alignés avec les autres grand du logiciel\\n   que sont Apple et iOS. Il est temps que Mozilla entre dans la danse avec\\n   Firefox OS pour amener un peu de liberté dans le mobile. A ce sujet, je me\\n   demande si les distributions Linux aussi ne vont pas devoir s\'adapter. \\n * j\'ai fait une présentation sur HTML5 versus les applications natives à la CCI\\n   d\'Arras, \\n * vous vous posez des questions sur ce qu\'il y a sous le capot des moteurs Js ?\\n   Cet article sur le Javascript dans Firefox\\n   [http://linuxfr.org/users/enjolras/journaux/javascript-performances-et-firefox]\\n   est fait pour vous ! \\n *  API PointerLock\\n   [http://www.pcinpact.com/news/74100-chrome-22-google-ajoute-pointer-lock-et-souvre-voie-fps.htm]\\n   : Contrôlez la souris ! \\n\\nUn peu de programmation :\\n\\n *  @naholyr [https://twitter.com/naholyr]a fait un excellent article sur le \\n   profilage d\'applications NodeJS\\n   [http://naholyr.fr/2012/09/profiler-son-application-nodejs/]. Je vous\\n   recommande d\'ailleurs chaudement le blog et le personnage qui sont\\n   intéressants et très au fait de NodeJs en général. \\n * Mettre une application NodeJs en production\\n   [http://www.armetiz.info/node-js-mise-production-simple/]rapidement. \\n *  Comprendre le C en apprenant l\'assembleur\\n   [https://www.hackerschool.com/blog/7-understanding-c-by-learning-assembly],\\n   rien que ça ! \\n * Comment stocker et représenter des prix en Javascript ? Pour moi, l\'objet\\n   Number est approprié, Il suffit de les formater avant de les afficher. Voici\\n   une méthode [https://gist.github.com/3608274]faîte spécialement pour répondre\\n   à cette question de Fabien Canu [http://fabiencanu.fr] que certains d\'entre\\n   vous doivent connaître. Cette méthode est perfectible notamment pour\\n   représenter les grand nombres et pour être facilement localisable. \\n * Sympa : gérer ses VirtualHosts LightHTTPD\\n   [http://www.howtoforge.com/creating-advanced-mysql-based-virtual-hosts-on-lighttpd-debian-squeeze]\\n   dans une base de donnée MySQL. \\n * Merci MooTools ! Composez un MooTools\\n   [https://mootools.net/blog/2012/08/13/optimizing-mootools-builds-sans-internet-explorer]\\n   sans tout le code spécifique à IE. \\n\\nDu fun :\\n\\n * un Doodle Jump [http://cssdeck.com/labs/html5-milo-jump-game]en Javascript. \\n * un jeu 3D réalisé avec WebGL nommé HexGL [http://hexgl.bkcore.com/]. \\n * un émulateur Nintendo 64 [http://hulkholden.github.com/n64js/]en Javascript\\n   :D \\n\\nUn peu d\'humour pour finir : \\nUn homme qui mange un ver vivant [/images/omfg-man-vs-wild.gif] \\nQuand je dois faire du sysadmin sur Windows Server ! via @Karlesnine\\n[https://twitter.com/Karlesnine]\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc130:JSON.parse('{"path":"contents/pages/articles-resume_septembre_2012.html","title":"Mes trouvailles de septembre 2012","description":"Ce mois-ci, j\'ai vu passer assez de petites choses pour faire un point rapide sur les dernières nouveautés et actualités du développement web.","shortTitle":"Trouvailles 09/2012","shortDesc":"Voir les trouvailles de ce mois de septembre 2012","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMES TROUVAILLES DE SEPTEMBRE 2012\\nCe mois-ci, j\'ai vu passer assez de petites choses pour faire un point rapide\\nsur les dernières nouveautés et actualités du développement web.\\n\\nTout d\'abord, parlons un peu des exploits de bidouilleurs de l\'extrême :\\n\\n * Les WebSockets, vous utilisez ? Vous aimez ? Eh bien, c\'était possible\\n   quasiment depuis la création du web ! La preuve par l\'exemple avec GifSockets\\n   [https://github.com/videlalvaro/gifsockets]. \\n\\nQuelques infos sur l\'état d\'HTML5 :\\n\\n * le flexible box model a changé. Difficile de trouver des ressources à jour\\n   sur ce thème, voici donc un lien qui l\'explique comme il faut\\n   [http://www.the-haystack.com/2012/01/04/learn-you-a-flexbox/]en anglais. Je\\n   ferai peut-être un article si j\'ai le temps car je l\'utilise quasiment depuis\\n   sa création et c\'est vraiment l\'avenir de l\'intégration web à mon sens.\\n   D\'ailleurs, il serait temps qu\'Opera se bouge le ... \\n * plus récent, une fontaine dont chaque jet est animé par un WebWorker (sorte\\n   de thread Javascript) puis dessiné dans le thread principal via l\'élément\\n   Canvas à chaque évènement. L\'animation en elle-même n\'a pas grand intérêt,\\n   mais le principe est très prometteur. En effet, il a un double avantage :\\n   exploiter tous les coeurs de la machine, dissocier le calcul des coordonnées\\n   de l\'affichage. Je pense à Tank Arena et je me dit que je pourrai utiliser un\\n   WebWorker pour calculer les déplacements et cela serait une première\\n   isolation me permettant de déplacer au besoin ces calculs sur un serveur avec\\n   les WebSocket ou chez un joueur hôte via WebRTC. Je ne sais pas si cette\\n   approche existe dans les moteurs de jeu actuellement disponibles. \\n * mon avis sur le troll de Zuckerberg\\n   [http://techcrunch.com/2012/09/11/mark-zuckerberg-our-biggest-mistake-with-mobile-was-betting-too-much-on-html5/]\\n   à propos de HTML5. Premièrement, ce qu\'il a dit semble plus mitigé que ce que\\n   les anti-HTML5 ont relevé, mais de plus, pour utiliser l\'application\\n   Facebook, je peux vous assurer que la merde, c\'est pas HTML5, mais les\\n   serveurs de Facebook et probablement leur façon d\'échanger entre client et\\n   serveur. Pour avoir moi-même développé un client HTML5, je peux vous assurer\\n   que c\'est plus le serveur qui nuit à l\'expérience utilisateur. Il faut alors\\n   optimiser le format d\'échange de données (BisonJS pour les fans de JSon ou\\n   pourquoi pas les VarStreams [https://npmjs.org/package/varstream]pour un\\n   chargement progressif de la timeline) et surtout bien coder côté serveur et\\n   bien optimiser l\'infra. Pour moi sur un seul serveur avec une charge de\\n   PMI-PME, c\'est plus simple, mais je pense que Facebook a surtout un gros\\n   problème d\'infrastructure qui a du mal à affronter la charge en restant\\n   réactive. C\'est un peu normal vu leur traffic, par contre, c\'est pas sympa de\\n   s\'en prendre à HTML5 et d\'en faire un bouc émissaire. \\n * j\'ai testé pour vous : Windows 8 est effectivement prêt pour HTML5. Microsoft\\n   semble en revanche moins prêt pour le défi business qui l\'attend avec\\n   l\'explosion du mobile. Bon, par contre, ça ne signifie pas qu\'il sont devenus\\n   meilleurs, ils restent sur ce point alignés avec les autres grand du logiciel\\n   que sont Apple et iOS. Il est temps que Mozilla entre dans la danse avec\\n   Firefox OS pour amener un peu de liberté dans le mobile. A ce sujet, je me\\n   demande si les distributions Linux aussi ne vont pas devoir s\'adapter. \\n * j\'ai fait une présentation sur HTML5 versus les applications natives à la CCI\\n   d\'Arras, \\n * vous vous posez des questions sur ce qu\'il y a sous le capot des moteurs Js ?\\n   Cet article sur le Javascript dans Firefox\\n   [http://linuxfr.org/users/enjolras/journaux/javascript-performances-et-firefox]\\n   est fait pour vous ! \\n *  API PointerLock\\n   [http://www.pcinpact.com/news/74100-chrome-22-google-ajoute-pointer-lock-et-souvre-voie-fps.htm]\\n   : Contrôlez la souris ! \\n\\nUn peu de programmation :\\n\\n *  @naholyr [https://twitter.com/naholyr]a fait un excellent article sur le \\n   profilage d\'applications NodeJS\\n   [http://naholyr.fr/2012/09/profiler-son-application-nodejs/]. Je vous\\n   recommande d\'ailleurs chaudement le blog et le personnage qui sont\\n   intéressants et très au fait de NodeJs en général. \\n * Mettre une application NodeJs en production\\n   [http://www.armetiz.info/node-js-mise-production-simple/]rapidement. \\n *  Comprendre le C en apprenant l\'assembleur\\n   [https://www.hackerschool.com/blog/7-understanding-c-by-learning-assembly],\\n   rien que ça ! \\n * Comment stocker et représenter des prix en Javascript ? Pour moi, l\'objet\\n   Number est approprié, Il suffit de les formater avant de les afficher. Voici\\n   une méthode [https://gist.github.com/3608274]faîte spécialement pour répondre\\n   à cette question de Fabien Canu [http://fabiencanu.fr] que certains d\'entre\\n   vous doivent connaître. Cette méthode est perfectible notamment pour\\n   représenter les grand nombres et pour être facilement localisable. \\n * Sympa : gérer ses VirtualHosts LightHTTPD\\n   [http://www.howtoforge.com/creating-advanced-mysql-based-virtual-hosts-on-lighttpd-debian-squeeze]\\n   dans une base de donnée MySQL. \\n * Merci MooTools ! Composez un MooTools\\n   [https://mootools.net/blog/2012/08/13/optimizing-mootools-builds-sans-internet-explorer]\\n   sans tout le code spécifique à IE. \\n\\nDu fun :\\n\\n * un Doodle Jump [http://cssdeck.com/labs/html5-milo-jump-game]en Javascript. \\n * un jeu 3D réalisé avec WebGL nommé HexGL [http://hexgl.bkcore.com/]. \\n * un émulateur Nintendo 64 [http://hulkholden.github.com/n64js/]en Javascript\\n   :D \\n\\nUn peu d\'humour pour finir : \\nUn homme qui mange un ver vivant [/images/omfg-man-vs-wild.gif] \\nQuand je dois faire du sysadmin sur Windows Server ! via @Karlesnine\\n[https://twitter.com/Karlesnine]\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc131:JSON.parse('{"path":"contents/pages/fr/blog/retour_experience_gulp.html","title":"Gulp : Retour d\'expérience","description":"Comme promis, Gulp revient à l\'ordre du jour de ce Blog avec un retour d\'expérience sur l\'utilisation de Gulp et le développement de plugins.","shortTitle":"Gulp","shortDesc":"En savoir plus sur l\'utilisation de Gulp","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGULP : RETOUR D\'EXPÉRIENCE\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Gulp n\'est plus très utilisé de nos jours et je ne conseillerai pas\\nde démarrer un projet avec maintenant.\\n\\nComme promis, Gulp revient à l\'ordre du jour de ce Blog avec un retour\\nd\'expérience sur l\'utilisation de Gulp et le développement de plugins.\\n\\nSuite à la comparaison entre Gulp et Grunt [gulp_vs_grunt.html], vous avez\\npeut-être envie d\'aller plus loin dans l\'utilisation de Gulp. Dans ce billet, je\\nreviendrais sur les fondamentaux de Gulp, les bonnes pratiques et aussi la\\ncréation de plugins.\\n\\nINSTALLATION\\nPour commencer à utiliser Gulp, deux petites actions doivnet être réalisées.\\nPremièrement, l\'installation de Gulp de manière globale :\\n\\nnpm install -g gulp\\n\\nCeci nous permettra de démarrer Gulp, quelque soit le dossier dans lequel on se\\ntrouve. Ensuite, nous devons installer Gulp localement à chaque projet pour\\nlequel on souhaite l\'utiliser.\\n\\ncd monprojet && npm install gulp --save-dev\\n\\nNous sommes prêts à commencer à créer nos tâches Gulp dans le fichier\\ngulpfile.js qui est par convention, le fichier qui doit les contenir :\\n\\ntouch gulpfile.js && vim gulpfile.js\\n\\nPRINCIPE DE GULP\\nLES TÂCHES\\nLe principe de Gulp est très simple. Le fichier gulpfile.js contient la\\ndéclaration de tâches. Ces dernières sont déclarées de la manière suivante :\\n\\n<pre><p>// The clean task gulp.task(\'clean\', function(cb) {\\nrimraf(conf.build.root, cb); });</p></pre> \\n\\nCette tâche est nommée clean et équivaut à une commande rm -rf (d\'où le nom du\\nmodule). Une fois déclarée, notre tâche pourra être appelée à tout moment depuis\\nla console grâce à la commande suivante :\\n\\ngulp clean\\n\\nIl est aussi possible de l\'appeler directement dans une autre tâche avec la\\nméthode gulp.run :\\n\\n\\ngulp.run(\'clean\', function() { console.log(\'Terminé\') };\\n\\nCependant, je ne vous conseille pas l\'utilisation de cette méthode car elle est\\nencore un peu boguée et ne fonctionne pas comme on pourrait s\'y attendre\\n[https://github.com/robrich/orchestrator/issues/15].\\n\\nEn réalité, il est préférable d\'utiliser les dépendances qui peuvent être\\ndéclarées au niveau de la déclaration d\'une tâche comme ici pour le gulpfile de\\nChtiJS\\n[https://github.com/ChtiJS/chtijs.francejs.org/blob/baf3a4d690fa99a5b2e2be7143864f38adda9cef/gulpfile.js#L160]\\n.\\n\\nLES STREAMS\\nPassons maintenant à la véritable particularité de Gulp. La plupart des tâches\\ndont on a besoin pour un projet sont en réalité des tâches qui sont appliquées\\nsur un ensemble de fichiers contenus dans une répertoire donné.\\n\\nL\'idée de Gulp est de créer un stream d\'objets représentant chacun de ces\\nfichiers (avec gulp.src) que l\'on pourra modifier au travers de divers plugins.\\nCes plugins sont en fait des streams d\'objets de type Stream.Transform.\\n\\nLes plugins opèrent des modifications sur le contenu des fichiers et/ou sur leur\\npropriétés (chemin, nom de fichier et/ou extension).\\n\\nÀ l\'autre bout de la chaîne, on peut utiliser gulp.dest pour sauvegarder les\\nmodifications effectuées. Un \\"pipeline\\" typique avec Gulp donne ceci :\\n\\n<pre>gulp.src(\'less/**/*.less\') // création d\'un flux d\'objets de type\\nfichier<br /> .pipe(less()) // préprocesseur less<br /> .pipe(minify()) //\\nminification<br /> .pipe(gulp.dest(\'css/\')) // enregistrement des fichiers dans\\nun autre dossier</pre> \\n\\nIl est possible de subordonner un plugin à une condition particulière avec \\ngulp.env et gulp-if. Ici, selon la valeur de gulp.env.prod, on minifie ou non\\nles CSS et on utilise Livereload ou non.\\n\\n<pre> // CSS gulp.task(\'build_styles\', function(cb) { gulp.src(conf.src.less +\\n\'/main.less\', {buffer: buffer}) .pipe(gStreamify((gLess()))) .pipe(gIf(prod,\\ngMinifyCss())) .pipe(gIf(!prod, gLivereload(server)))\\n.pipe(gulp.dest(conf.build.css)) .once(\'end\', cb); });</pre> \\n\\nVia la ligne de commande, il nous suffira d\'ajouter le paramètre suivant pour\\nque gulp.env.prod soit vrai :\\n\\ngulp css --prod\\n\\nCONTENU : BUFFER OU STREAMS ?\\nIl existe deux modes différents pour le contenu des fichiers. Le mode buffer\\ncomme son nom l\'indique traite le contenu du fichier comme un unique buffer\\n(c\'est à dire, une zone contigüe de la mémoire virtuelle, ou encore, un objet\\ncontenu dans la zone Heap du processus).\\n\\nEn mode buffer, la plupart des transformations sur le contenu des fichiers sont\\nréalisées de manière synchrone et on ne peut pas traiter des fichiers trop\\nvolumineux sans une dégradation très importante des performances.\\n\\nJe ne suis personnellement pas fan du mode buffer, bien qu\'il soit activé par\\ndéfaut. À vrai dire, pour ma part, j\'aurais préféré que les objets passés aux\\nplugins soient en réalité directement des streams qui, par convention, auraient\\nune propriété réservée aux méta-données (chemin, nom de fichier, répertoire\\ncourant etc.).\\n\\nCe qui nous amène au mode stream, celui que j\'affectionne le plus. Le contenu\\ndes fichiers y est traité cette fois de manière plus fluide, par morceaux.\\nL\'avantage de ce mode est qu\'il est entièrement asynchrone. Les données sont\\ntraitées au fur et à mesure des retours des appels système de lecture et\\nd\'écriture sur le disque.\\n\\nGrâce à la nouvelle API des streams de Node (parfois appelée Streams2, dont je\\nparlerais en détail dans un futur billet), les traitements sont ordonnancés\\nselon la disponibilité des ressources (concept de backpressure). Ainsi,\\nthéoriquement, il n\'y a aucune limite dans la taille des fichiers traités ou\\ndans leur nombre.\\n\\nMalheureusement, il y a une certaine incompréhension/difficulté avec\\nl\'utilisation des streams. Ainsi, peu de développeurs de plugins implémentent le\\nsupport de ces derniers. De plus, l\'utilisation de event-stream est conseillée\\nmalgré l\'utilisation de l\'évènement data qui dans la nouvelle version de Node\\nn\'est pas conseillée.\\n\\nLe choix du mode buffer ou stream se fait au niveau de gulp.src ou tout autre\\nplugin devant générer de nouveaux fichiers sans qu\'il soit possible de détecter\\nle mode courant. Pour utiliser les streams avec gulp.src, il suffit de passer en\\ndeuxième paramètre un objet d\'options contenant une propriété buffer valant \\nfalse.\\n\\nQUELQUES PLUGINS UTILES\\nVoici une petite liste de plugins qui vous seront bien utile :\\n\\n * gulp-if : conditionner l\'utilisation d\'un plugin\\n * gulp-rename : Permet de renommer les fichier en tout point d\'un pipeline de\\n   fichier \\n * gulp-stream : Permet de transformer en stream le contenu des fichiers en\\n   entrée. Pratique quand un plugin accepte les streams en entrée, mais retourne\\n   un buffer (ce qui est le cas de gulp-browserify, j\'ai une PR en attente\\n   [https://github.com/deepak1556/gulp-browserify/pull/10]à ce sujet). \\n * gulp-streamify : Un plugin que j\'ai créé pour wrapper un plugin qui ne\\n   supporte pas les streams afin qu\'il ne casse pas le pipeline et que le mode\\n   stream soit donc quand même utilisable. \\n\\nCRÉER UN PLUG-IN GULP\\nÉtant donné le faible nombre de plugins Gulp, il est fort probable que vous\\nsouhaitiez en créer un. Voici donc quelques conseils que je vais illustrer avec\\nle code de gulp-cat et gulp-svg2ttf.\\n\\nTout d\'abord, un plugin est un module NPM qui exporte une fonction\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L7]\\nqui retourne\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L27]\\nun stream d\'objets\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L8]\\n. Idéalement, cette fonction doit être nommée\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L32]\\npour faciliter le débogage.\\n\\nSelon moi, il très important d\'hériter des interface Stream.* de NodeJS plutôt\\nque d\'utiliser des modules comme event-stream ou event-map. C\'est certe, un peu\\nplus verbeux, mais ces interfaces ont été pensées pour conserver les bénéfices\\nde l\'usage des streams. La plupart du temps, vous utiliserez une instance de\\nl\'interface Stream.Transform qui doit être augmentée d\'une méthode _transform\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L40]\\nqui comme son nom l\'indique gère la transformation du contenu du stream (ici,\\nles fichiers) et d\'une méthode _flush, optionnelle, dans le cas où vous\\nsouhaiteriez faire une action particulière à la fin du flux d\'objets.\\n\\nAu sein de la méthode de transformation des fichiers, dans la plupart des cas,\\nles fichier dont le contenu est nul seront ignorés\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L42]\\n. Puis, selon que le contenu du fichier est un buffer\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L60]\\nou un stream\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L68]\\n, on modifiera le buffer\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L62]\\nou, on pipera le stream dans un nouveau stream de transformation\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L70]\\n.\\n\\nSi l\'on souhaite uniquement lire les données, pour le buffer, il suffit\\nd\'accèder à la propriété contents\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L18]\\npour en lire le contenu. Pour un stream, il faudra le dédoubler\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L20]\\nvia une instance de Stream.PassThrough afin de garantir aux autre plugins un\\naccès à toute les données du stream.\\n\\nEnfin, une fois le buffer transformé ou le stream du contenu du fichier \\"pipé\\",\\non passe l\'objet représentant le fichier\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L24]\\nau plugin suivant et on appelle le callback\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L25]\\nreçu en argument de la méthode _transform.\\n\\nSi durant ce processus, vous ne traitez que les fichiers d\'un genre particulier,\\nil peut-être utile de tester l\'extension du fichier\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L48]\\net de passer directement au plugin suivant tout fichier ne correspondant pas aux\\ncritères souhaités.\\n\\nDe la même façon, une option permettant de cloner les fichiers\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L53]\\navant de les transformer peut être très utile pour faciliter l\'usage d\'un plugin\\n[https://github.com/nfroidure/gulp-iconfont/commit/58f0f61c1a829eb316759b5bf26a3423e8795404]\\n.\\n\\nBien-sûr, si une transformation d\'un fichier, implique le changement de type de\\nce dernier, il est de votre responsabilité de changer l\'extension de ce dernier\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L57]\\n.\\n\\nEnfin, toute erreur doit être signalée par l\'émission d\'un évènement\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L64]\\n.\\n\\nSUPPORTEZ LES STREAMS !\\nBien-sûr, créer une API streamable n\'est pas la solution de facilité. Mais je\\nvous encourage grandement à le faire. Qui peut le plus, peut le moins. J\'ai bien\\nécris trois fois cette maxime sur ce blog, mais en la matière mieux vaut trop\\nque pas assez.\\n\\nSi vous pensez que votre API ne peut pas utiliser les streams, je vous enjoint à\\nregarder le code de Browserify. Si ils ont réussi à tirer parti des streams pour\\nun module aussi complexe, il y a fort à parier que votre format XML peut le\\nfaire également.\\n\\nSi cependant, vous n\'avez pas la main sur la bibliothèque wrappée par votre\\nplugin, utilisez BufferStreams [https://npmjs.org/package/bufferstreams]en\\nattendant et créer une issue, ou mieux, faîtes une PR !\\n\\nVoilà, c\'est tout pour aujourd\'hui ! Vos retours ou questions sont les\\nbienvenues :).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc132:JSON.parse('{"path":"contents/pages/articles-retour_experience_gulp.html","title":"Gulp : Retour d\'expérience","description":"Comme promis, Gulp revient à l\'ordre du jour de ce Blog avec un retour d\'expérience sur l\'utilisation de Gulp et le développement de plugins.","shortTitle":"Gulp","shortDesc":"En savoir plus sur l\'utilisation de Gulp","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGULP : RETOUR D\'EXPÉRIENCE\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Gulp n\'est plus très utilisé de nos jours et je ne conseillerai pas\\nde démarrer un projet avec maintenant.\\n\\nComme promis, Gulp revient à l\'ordre du jour de ce Blog avec un retour\\nd\'expérience sur l\'utilisation de Gulp et le développement de plugins.\\n\\nSuite à la comparaison entre Gulp et Grunt [gulp_vs_grunt.html], vous avez\\npeut-être envie d\'aller plus loin dans l\'utilisation de Gulp. Dans ce billet, je\\nreviendrais sur les fondamentaux de Gulp, les bonnes pratiques et aussi la\\ncréation de plugins.\\n\\nINSTALLATION\\nPour commencer à utiliser Gulp, deux petites actions doivnet être réalisées.\\nPremièrement, l\'installation de Gulp de manière globale :\\n\\nnpm install -g gulp\\n\\nCeci nous permettra de démarrer Gulp, quelque soit le dossier dans lequel on se\\ntrouve. Ensuite, nous devons installer Gulp localement à chaque projet pour\\nlequel on souhaite l\'utiliser.\\n\\ncd monprojet && npm install gulp --save-dev\\n\\nNous sommes prêts à commencer à créer nos tâches Gulp dans le fichier\\ngulpfile.js qui est par convention, le fichier qui doit les contenir :\\n\\ntouch gulpfile.js && vim gulpfile.js\\n\\nPRINCIPE DE GULP\\nLES TÂCHES\\nLe principe de Gulp est très simple. Le fichier gulpfile.js contient la\\ndéclaration de tâches. Ces dernières sont déclarées de la manière suivante :\\n\\n<pre><p>// The clean task gulp.task(\'clean\', function(cb) {\\nrimraf(conf.build.root, cb); });</p></pre> \\n\\nCette tâche est nommée clean et équivaut à une commande rm -rf (d\'où le nom du\\nmodule). Une fois déclarée, notre tâche pourra être appelée à tout moment depuis\\nla console grâce à la commande suivante :\\n\\ngulp clean\\n\\nIl est aussi possible de l\'appeler directement dans une autre tâche avec la\\nméthode gulp.run :\\n\\n\\ngulp.run(\'clean\', function() { console.log(\'Terminé\') };\\n\\nCependant, je ne vous conseille pas l\'utilisation de cette méthode car elle est\\nencore un peu boguée et ne fonctionne pas comme on pourrait s\'y attendre\\n[https://github.com/robrich/orchestrator/issues/15].\\n\\nEn réalité, il est préférable d\'utiliser les dépendances qui peuvent être\\ndéclarées au niveau de la déclaration d\'une tâche comme ici pour le gulpfile de\\nChtiJS\\n[https://github.com/ChtiJS/chtijs.francejs.org/blob/baf3a4d690fa99a5b2e2be7143864f38adda9cef/gulpfile.js#L160]\\n.\\n\\nLES STREAMS\\nPassons maintenant à la véritable particularité de Gulp. La plupart des tâches\\ndont on a besoin pour un projet sont en réalité des tâches qui sont appliquées\\nsur un ensemble de fichiers contenus dans une répertoire donné.\\n\\nL\'idée de Gulp est de créer un stream d\'objets représentant chacun de ces\\nfichiers (avec gulp.src) que l\'on pourra modifier au travers de divers plugins.\\nCes plugins sont en fait des streams d\'objets de type Stream.Transform.\\n\\nLes plugins opèrent des modifications sur le contenu des fichiers et/ou sur leur\\npropriétés (chemin, nom de fichier et/ou extension).\\n\\nÀ l\'autre bout de la chaîne, on peut utiliser gulp.dest pour sauvegarder les\\nmodifications effectuées. Un \\"pipeline\\" typique avec Gulp donne ceci :\\n\\n<pre>gulp.src(\'less/**/*.less\') // création d\'un flux d\'objets de type\\nfichier<br /> .pipe(less()) // préprocesseur less<br /> .pipe(minify()) //\\nminification<br /> .pipe(gulp.dest(\'css/\')) // enregistrement des fichiers dans\\nun autre dossier</pre> \\n\\nIl est possible de subordonner un plugin à une condition particulière avec \\ngulp.env et gulp-if. Ici, selon la valeur de gulp.env.prod, on minifie ou non\\nles CSS et on utilise Livereload ou non.\\n\\n<pre> // CSS gulp.task(\'build_styles\', function(cb) { gulp.src(conf.src.less +\\n\'/main.less\', {buffer: buffer}) .pipe(gStreamify((gLess()))) .pipe(gIf(prod,\\ngMinifyCss())) .pipe(gIf(!prod, gLivereload(server)))\\n.pipe(gulp.dest(conf.build.css)) .once(\'end\', cb); });</pre> \\n\\nVia la ligne de commande, il nous suffira d\'ajouter le paramètre suivant pour\\nque gulp.env.prod soit vrai :\\n\\ngulp css --prod\\n\\nCONTENU : BUFFER OU STREAMS ?\\nIl existe deux modes différents pour le contenu des fichiers. Le mode buffer\\ncomme son nom l\'indique traite le contenu du fichier comme un unique buffer\\n(c\'est à dire, une zone contigüe de la mémoire virtuelle, ou encore, un objet\\ncontenu dans la zone Heap du processus).\\n\\nEn mode buffer, la plupart des transformations sur le contenu des fichiers sont\\nréalisées de manière synchrone et on ne peut pas traiter des fichiers trop\\nvolumineux sans une dégradation très importante des performances.\\n\\nJe ne suis personnellement pas fan du mode buffer, bien qu\'il soit activé par\\ndéfaut. À vrai dire, pour ma part, j\'aurais préféré que les objets passés aux\\nplugins soient en réalité directement des streams qui, par convention, auraient\\nune propriété réservée aux méta-données (chemin, nom de fichier, répertoire\\ncourant etc.).\\n\\nCe qui nous amène au mode stream, celui que j\'affectionne le plus. Le contenu\\ndes fichiers y est traité cette fois de manière plus fluide, par morceaux.\\nL\'avantage de ce mode est qu\'il est entièrement asynchrone. Les données sont\\ntraitées au fur et à mesure des retours des appels système de lecture et\\nd\'écriture sur le disque.\\n\\nGrâce à la nouvelle API des streams de Node (parfois appelée Streams2, dont je\\nparlerais en détail dans un futur billet), les traitements sont ordonnancés\\nselon la disponibilité des ressources (concept de backpressure). Ainsi,\\nthéoriquement, il n\'y a aucune limite dans la taille des fichiers traités ou\\ndans leur nombre.\\n\\nMalheureusement, il y a une certaine incompréhension/difficulté avec\\nl\'utilisation des streams. Ainsi, peu de développeurs de plugins implémentent le\\nsupport de ces derniers. De plus, l\'utilisation de event-stream est conseillée\\nmalgré l\'utilisation de l\'évènement data qui dans la nouvelle version de Node\\nn\'est pas conseillée.\\n\\nLe choix du mode buffer ou stream se fait au niveau de gulp.src ou tout autre\\nplugin devant générer de nouveaux fichiers sans qu\'il soit possible de détecter\\nle mode courant. Pour utiliser les streams avec gulp.src, il suffit de passer en\\ndeuxième paramètre un objet d\'options contenant une propriété buffer valant \\nfalse.\\n\\nQUELQUES PLUGINS UTILES\\nVoici une petite liste de plugins qui vous seront bien utile :\\n\\n * gulp-if : conditionner l\'utilisation d\'un plugin\\n * gulp-rename : Permet de renommer les fichier en tout point d\'un pipeline de\\n   fichier \\n * gulp-stream : Permet de transformer en stream le contenu des fichiers en\\n   entrée. Pratique quand un plugin accepte les streams en entrée, mais retourne\\n   un buffer (ce qui est le cas de gulp-browserify, j\'ai une PR en attente\\n   [https://github.com/deepak1556/gulp-browserify/pull/10]à ce sujet). \\n * gulp-streamify : Un plugin que j\'ai créé pour wrapper un plugin qui ne\\n   supporte pas les streams afin qu\'il ne casse pas le pipeline et que le mode\\n   stream soit donc quand même utilisable. \\n\\nCRÉER UN PLUG-IN GULP\\nÉtant donné le faible nombre de plugins Gulp, il est fort probable que vous\\nsouhaitiez en créer un. Voici donc quelques conseils que je vais illustrer avec\\nle code de gulp-cat et gulp-svg2ttf.\\n\\nTout d\'abord, un plugin est un module NPM qui exporte une fonction\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L7]\\nqui retourne\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L27]\\nun stream d\'objets\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L8]\\n. Idéalement, cette fonction doit être nommée\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L32]\\npour faciliter le débogage.\\n\\nSelon moi, il très important d\'hériter des interface Stream.* de NodeJS plutôt\\nque d\'utiliser des modules comme event-stream ou event-map. C\'est certe, un peu\\nplus verbeux, mais ces interfaces ont été pensées pour conserver les bénéfices\\nde l\'usage des streams. La plupart du temps, vous utiliserez une instance de\\nl\'interface Stream.Transform qui doit être augmentée d\'une méthode _transform\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L40]\\nqui comme son nom l\'indique gère la transformation du contenu du stream (ici,\\nles fichiers) et d\'une méthode _flush, optionnelle, dans le cas où vous\\nsouhaiteriez faire une action particulière à la fin du flux d\'objets.\\n\\nAu sein de la méthode de transformation des fichiers, dans la plupart des cas,\\nles fichier dont le contenu est nul seront ignorés\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L42]\\n. Puis, selon que le contenu du fichier est un buffer\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L60]\\nou un stream\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L68]\\n, on modifiera le buffer\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L62]\\nou, on pipera le stream dans un nouveau stream de transformation\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L70]\\n.\\n\\nSi l\'on souhaite uniquement lire les données, pour le buffer, il suffit\\nd\'accèder à la propriété contents\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L18]\\npour en lire le contenu. Pour un stream, il faudra le dédoubler\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L20]\\nvia une instance de Stream.PassThrough afin de garantir aux autre plugins un\\naccès à toute les données du stream.\\n\\nEnfin, une fois le buffer transformé ou le stream du contenu du fichier \\"pipé\\",\\non passe l\'objet représentant le fichier\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L24]\\nau plugin suivant et on appelle le callback\\n[https://github.com/ben-eb/gulp-cat/blob/6479a502f42f76e8378ce3bd5c2b2165990f2b8b/index.js#L25]\\nreçu en argument de la méthode _transform.\\n\\nSi durant ce processus, vous ne traitez que les fichiers d\'un genre particulier,\\nil peut-être utile de tester l\'extension du fichier\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L48]\\net de passer directement au plugin suivant tout fichier ne correspondant pas aux\\ncritères souhaités.\\n\\nDe la même façon, une option permettant de cloner les fichiers\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L53]\\navant de les transformer peut être très utile pour faciliter l\'usage d\'un plugin\\n[https://github.com/nfroidure/gulp-iconfont/commit/58f0f61c1a829eb316759b5bf26a3423e8795404]\\n.\\n\\nBien-sûr, si une transformation d\'un fichier, implique le changement de type de\\nce dernier, il est de votre responsabilité de changer l\'extension de ce dernier\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L57]\\n.\\n\\nEnfin, toute erreur doit être signalée par l\'émission d\'un évènement\\n[https://github.com/nfroidure/gulp-svg2ttf/blob/bc06b3dd0a91f6442a64256105dfed37e9c9a327/src/index.js#L64]\\n.\\n\\nSUPPORTEZ LES STREAMS !\\nBien-sûr, créer une API streamable n\'est pas la solution de facilité. Mais je\\nvous encourage grandement à le faire. Qui peut le plus, peut le moins. J\'ai bien\\nécris trois fois cette maxime sur ce blog, mais en la matière mieux vaut trop\\nque pas assez.\\n\\nSi vous pensez que votre API ne peut pas utiliser les streams, je vous enjoint à\\nregarder le code de Browserify. Si ils ont réussi à tirer parti des streams pour\\nun module aussi complexe, il y a fort à parier que votre format XML peut le\\nfaire également.\\n\\nSi cependant, vous n\'avez pas la main sur la bibliothèque wrappée par votre\\nplugin, utilisez BufferStreams [https://npmjs.org/package/bufferstreams]en\\nattendant et créer une issue, ou mieux, faîtes une PR !\\n\\nVoilà, c\'est tout pour aujourd\'hui ! Vos retours ou questions sont les\\nbienvenues :).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc133:JSON.parse('{"path":"contents/pages/fr/blog/retour_xp_mongodb.html","title":"MongoDB : Retour d\'expérience","description":"Je travaille avec MongoDB depuis maintenant presque un an, il est temps pour\\n moi de faire un petit retour sur cette base de données et sur le NoSQL de manière générale.","shortTitle":"Services web RESTFul","shortDesc":"En savoir plus sur ce livre sur REST","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMONGODB: RETOUR D\'EXPÉRIENCE\\n Comme avec toute technologie « nouvelle », j\'étais extrêmement réservé quand à\\nl\'essor du NoSQL et son intérêt dans le cadre de mon quotidien de développeur\\nfull-stack. J\'ai fini par m\'y mettre par obligation professionnelle. Je ne pense\\npas en avoir fait le tour pour le moment, mon avis est donc à prendre avec\\nprécaution, mais je le livre comme un point de départ d\'un débat qui sera je\\nl\'espère constructif.\\n\\nMONGODB VS MYSQL\\nLa grande partie de mon expérience avec les bases de données s\'est construite\\nautour de MySQL. Je pense ne pas être le seul dans ce cas. C\'est donc via le\\nprisme d\'un utilisateur avancé de MySQL que j\'orienterai ce billet.\\n\\nPour illustrer les différences entre bases de données relationnelles et MongoDB,\\nje vais partir d\'un schéma de base de données simple et montrer comment selon\\nmoi, il faudrait le modéliser dans chacune d\'entre elles.\\n\\nCAS CONCRET: UN MARKETPLACE\\nJ\'ai choisi le cas concret d\'une place de marché car c\'est selon moi celui qui\\nmettra le plus en exergue les différences de conception SQL et NoSQL.\\n\\nUne place de marché est finalement assez simple. Nous avons des concepts que\\nl\'on retrouve dans à peu près toutes les applications :\\n\\n * des utilisateurs (employés des clients ou vendeurs de la place de marché), \\n * des organisations (entreprises ou autres formes juridiques),\\n\\nOn retrouve également des concepts propres aux places de marché :\\n\\n * des produits (à divers prix selon les pays),\\n * des commandes,\\n * des factures,\\n * des livraisons,\\n * des commentaires sur les produits.\\n\\nJe simplifie, ici, volontairement la chose pour complexifier par itérations\\nsuccessives.\\n\\nMODÈLE POUR BASES DE DONNÉES RELATIONNELLES\\nTypiquement, ce type d\'architecture sera modélisée comme suit :\\n\\n\\nUser(id, name, organisations[]:Organisation, home:Place, phone:Contact, mail:Contact, country:<Country>)\\nOrganisation(id, name, owner:User.id, place:Place, country:<Country>)\\nPlace(id, address, lat, lng)\\nContact(id, type, value)\\nCountry(id, name)\\n\\nProduct(id, reference, name, organisation:Organisation)\\nPrice(id, amount, product:Product, country:Country)\\nComment(id, content, parent:Comment, author:User, product:Product)\\nDelivery(id, date, place:Place, recipient:User, bill:Bill)\\nDeliveryRow(id, quantity, product:Product)\\nBill(id, date, seller:Organisation, buyer:Organisation)\\nBillRow(id, quantity, product:Product, price)\\n\\n\\nComme vous pouvez le constater, nous avons créé bien plus de concepts que ceux\\nénumérés au départ. La raison est simple : la dé-duplication et la\\nlinéarisation. Quand on modélise une base de données relationnelle, on met un\\npoint d\'honneur à éviter les doublons. On essaie également de faire entrer une\\nstructure de donnée arborescente dans un ensemble de tables interconnectées\\nentre elles.\\n\\nOn essaie donc d\'isoler un maximum de concepts enfants et on crée autant de\\ncases que nécessaire pour les englober tout en décrivant leurs relations à\\nl\'aide de clés étrangères.\\n\\nAutre avantage des bases de données relationnelles, les clés étrangères et le\\ntypage fort des divers champs de la base. La déclaration explicite des relations\\net des types permet à la base de données d\'assurer un forte intégrité des\\ndonnées qu\'elle stocke. Les transactions permettent également d\'effectuer\\nplusieurs opérations jusqu\'à l\'obtention d\'une état intègre. Ceci permet de\\nconserver encore une fois l\'intégrité des données en cas d\'échec d\'une de ces\\nmodifications.\\n\\nCes avantages ont cependant un coût. En effet, il est nécessaire de maintenir un\\nétat global et de le propager entre toutes les instances du serveur de base de\\ndonnées. C\'est pourquoi les bases de données relationnelles fonctionnent sur un\\nschéma maître/esclave.\\n\\nAinsi, dès lors que l\'on est confronté à une utilisation intense de la base de\\ndonnées, on constate une dégradation des performances et la nécessité de faire\\nappel à un DBA et/ou à un Administrateur Système pour maintenir tant bien que\\nmal ces performances et la disponibilité du système.\\n\\nEn revanche, un atout fort de la modélisation relationnelle est qu\'une\\nmodélisation bien réalisée n\'est pas censée évoluer au cours du temps sauf\\nélargissement du domaine de l\'application. Avec les bases de données\\nrelationnelles, on décrit une structure représentant l\'essence même des données\\net on l\'exploite ensuite sans même se soucier (ou presque) de son intégrité.\\n\\nCeci rend l\'évolution du produit simple et fluide puisqu\'à chaque nouvelle\\ndemande de fonctionnalité, on n\'intervient que très peu sur le schéma de la base\\nde données. Ceci, au prix d\'une concession assumée : l\'over-head des calculs et\\nvérifications qui permettent à la base de données de préserver son intégrité et\\nde la difficulté de rendre une telle architecture scalable.\\n\\nMODÉLISATION NOSQL AVEC MONGODB\\nC\'est justement pour répondre à ces problèmes de scalabilité que MongoDB a été\\nconçu. En effet, pour permettre une scalabilité horizontale, de nombreux\\nprincipes propres aux bases de données relationnelles ont été volontairement\\nécartés, nous y reviendrons.\\n\\nLes transactions, les clés étrangères, les clés uniques auto-incrémentées sont\\ndonc absentes. En sus, le mode de stockage des données est également revu. Là où\\nles bases de données relationnelles utilisent un mode de stockage par lignes et\\ncolonnes de taille généralement fixe, les bases de données telles que MongoDB\\nproposent un stockage dans un document sans contraintes (sauf sa taille, nous le\\nverrons après) bien souvent au format JSON autorisant un contenu arborescent\\n(avec en théorie avec une infinité de niveaux).\\n\\nL\'utilisation d\'une base de donnée NoSQL mène généralement à une conception bien\\ndifférente :\\n\\n\\nOrganisation {\\n  name: String,\\n  place: {\\n    address: String,\\n    latitude: Number,\\n    longitude: Number\\n  },\\n  users: [{\\n    id: ObjectId,\\n    name: String,\\n    home: {\\n      address: String,\\n      latitude: Number,\\n      longitude: Number\\n    },\\n    phone: String,\\n    mail: String,\\n    country: String,\\n    owner: Boolean\\n  }]\\n}\\n\\nProduct {\\n  id: ObjectId,\\n  reference: String,\\n  name: String,\\n  organisation_id: ObjectId,\\n  prices: [{\\n    id: ObjectId,\\n    amount: Number,\\n    country: String\\n  }],\\n  comments: [{\\n    id: ObjectId,\\n    content: String,\\n    author: ObjectId,\\n    parents_ids: [ObjectId]\\n  }]\\n}\\n\\nTrade {\\n  id: ObjectId,\\n  buyer_id: ObjectId,\\n  buyer_name: String,\\n  seller_id: ObjectId,\\n  seller_name: String,\\n  items: {\\n    product_id: ObjectId,\\n    product_name: String,\\n    product_price: Number,\\n    product_reference: String,\\n    quantity: Number\\n  },\\n  deliveries: [{\\n    id: ObjectId,\\n    date: Date,\\n    place: {\\n      address: String,\\n      lat: Number,\\n      lng: Number\\n    }\\n  }]\\n}\\n\\n\\nComme vous pouvez le voir, notre schéma est complètement différent. En effet,\\nbien que la plupart de nos concepts aient été conservés, nous n\'avons plus que\\ntrois collections au lieu d\'une dizaine de tables.\\n\\nPlusieurs choses peuvent choquer les aficionados des bases de données\\nrelationnelles :\\n\\n * duplication de certaines informations,\\n * mélange des genres,\\n * éclatement de certains concepts.\\n\\nDUPLICATION\\nOn peut remarquer que les informations sur un produit sont dupliquées au sein de\\nla collection Trade, il en va de même pour le nom de l\'entreprise. Dans le cadre\\nd\'une base de donnée NoSQL, ce n\'est pas une erreur de conception, mais bien une\\nfeature. Certes, si le nom de l\'entreprise ou le libellé d\'un produit change, le\\nnom de l\'entreprise et du produit deviendra caduque dans la facture.\\n\\nDans ce cas précis, cependant, nous pouvons considérer cette duplication comme\\nune feature. En effet, le changement de dénomination d\'une société ou le\\nchangement de prix d\'un produit ne doit pas être répercuté sur les factures\\nantérieures si l\'on souhaite garder la cohérence du document.\\n\\nMÉLANGE DES GENRES\\nL\'organisation d\'un schéma de base de donnée NoSQL peut paraître désordonnée. En\\neffet, on a de multiples concepts englobés au sein d\'une unique structure, ce\\nqui peut paraître aberrant.\\n\\nIl faut bien saisir le fait que l\'organisation en document autorise, voire\\nfavorise, ce mélange. En effet, MongoDB ne possède pas de mécanisme de jointure\\ncomme on peut le retrouver dans MySQL. Si vous souhaitez obtenir des\\ninformations sur une entreprise et ses utilisateurs et que ces concepts sont\\ndisséminés à travers plusieurs collections, vous n\'aurez d\'autre choix que de\\nfaire plusieurs appels à la base de données. Au-delà du problème évident de\\nperformances, il existe des chances pour qu\'entre le moment où vous récupérez\\nl\'organisation et celui où vous récupérez ses utilisateurs, l\'organisation soit\\nsupprimée. Comme vous n\'avez aucun moyen de garantir l\'intégrité des données,\\nc\'est un effet de bord inédit avec lequel vous devrez apprendre à composer.\\n\\nÀ ce titre, la conception de votre base de données doit être guidée par\\nl\'utilisation de vos données afin de limiter au maximum ces risques\\nd\'inconsistance. Par exemple, quand vous récupérez un utilisateur (qu\'il\\ns\'agisse de son authentification ou de l\'affichage de sa fiche personnelle),\\nvous aurez probablement besoin d\'informations sur son organisation. Si vous\\nsavez que même pour une entreprise de 100 000 salariés, vous n\'aurez jamais plus\\nde 50 utilisateurs pour une même organisation, alors les intégrer dans le\\ndocument organisation est l\'idéal.\\n\\nL\'intégrité des données est assurée par l\'unicité du document et les\\nperformances également.\\n\\nVous aurez probablement noté le maximum de 50, énoncé ci-dessus. Il est déduit à\\nla louche d\'une autre contrainte imposée par MongoDB, la taille maximale d\'un\\ndocument. Avec le modèle proposé ci-dessus, il est impossible d\'ajouter des\\nutilisateurs indéfiniment sans mettre en place des astuces comme le bucketting\\n[http://docs.mongodb.org/ecosystem/use-cases/storing-comments/#hybrid-schema-design]\\n.\\n\\nÉCLATEMENT DES CONCEPTS\\nOn peut aussi remarquer que le concept de lieu est éclaté dans divers documents\\nde types différents. C\'est clairement un renoncement de notre part. Avec ce\\nschéma, ce n\'est pas simple de lister tous les lieux de l\'application (bien que\\ncela reste possible).\\n\\nClairement, ceci ne présente que peu d\'intérêt dans une application de ce type\\ncar les lieux sont des informations qui n\'ont d\'intérêt que dans le contexte\\nd\'autres concepts.\\n\\nEn conclusion, on retiendra que le NoSQL bouscule nos habitudes. Là où avec une\\nbase de données relationnelle on cherche à comprendre l\'essence des données,\\navec une base de données NoSQL, on recherche plutôt le meilleur moyen\\nd\'organiser nos données pour répondre au mieux aux besoins de notre application.\\n\\nIMPACTS SUR LE PROJET\\nÉtant donné que la conception d\'une base de donnée NoSQL est directement induite\\npar l\'utilisation qui en est faîte, chaque modification apportée à l\'application\\nimplique potentiellement une adaptation de la conception de celle-ci.\\n\\nCeci a un impact majeur sur l\'évolution du projet. Certaines modifications\\ntriviales avec l\'utilisation d\'une base relationnelle peuvent devenir un vrai\\ncauchemar avec une base MongoDB. Prenons par exemple les lieux. Si demain, le\\nsuccès de notre place de marché nous permet de proposer un service de livraison\\navec des lieux prédéterminés, il est probable que nous devions renoncer à garder\\nles lieux dans nos documents de type Trade pour créer une collection à part.\\n\\nLà où notre schéma relationnel n\'aurait nécessité aucune modification, nous\\nallons devoir modifier notre schéma, modifier le code en conséquence, écrire et\\nlancer des scripts de migration. Là où d\'un côté, nous avions un DBA qui gérait\\nles données, leur stockage et leur structure, nous avons un développeur qui doit\\nsans cesse repenser la façon dont les données sont stockées et utilisées.\\n\\nIl faut donc former des développeurs qui prennent la cohérence des données comme\\nacquise à leurs nouvelles responsabilités. Ou l\'inverse d\'ailleurs, éviter que\\nces même développeurs cherchent à retrouver leur zone de confort en développant\\nune surcouche qui leur garantirait cette intégrité.\\n\\nAu final, penser qu\'utiliser MongoDB permet à votre application de scaler est\\ncomme penser que perdu en plein désert, vous débarrasser de vos vivres vous\\npermettra d\'en sortir plus vite. Choisir MongoDB, surtout c\'est choisir d\'être\\nconfronté aux problèmes de scalabilité dés les premiers jours du développement\\nde votre application afin de faire dès aujourd\'hui les arbitrages qui vous\\npermettront d\'assumer une forte montée en charge plus facilement.\\n\\nCOMMENT CHOISIR ?\\nDe nombreux facteurs entrent en jeu pour choisir la base de données à utiliser\\nqui sied le mieux à votre projet. Cependant, je peux vous donner les critères\\nque j\'appliquerai personnellement.\\n\\nDans quel cas ne pas utiliser MongoDB :\\n\\n * c\'est hype, ça output du JSON : c\'est probablement la pire raison qui puisse\\n   vous faire choisir MongoDB. JSON n\'est qu\'un format et n\'a rien à voir avec\\n   le cœur du problème posé pour le choix d\'une base de données. C\'est\\n   malheureusement trop souvent le cas et je pense que ceci sera la source de\\n   nombreuses accumulations de dette technique. \\n * pas besoin de scaler : si scaler n\'est pas votre priorité, n\'utilisez pas\\n   MongoDB. En effet, MongoDB pose plus de problèmes qu\'il n\'en résout\\n   uniquement pour scaler. Si ce n\'est pas une nécessité, préférez une base de\\n   données relationnelle qui simplifiera vos développements. \\n * je suis un n00b en SQL, Mongo est plus simple : si après cet article vous\\n   n\'êtes pas convaincu, je ne peux pas faire grand-chose de plus. Mais pour\\n   forcer le trait, je pense que le meilleur moyen de bien utiliser MongoDB est\\n   justement d\'avoir une bonne expérience des bases de données relationnelles. \\n * features fortement changeantes : typiquement, si vous faîtes de la prestation\\n   de services, MongoDB est un mauvais choix. Surtout si vous travaillez au\\n   forfait. Votre client ne comprendra pas pourquoi la moindre de ses requêtes\\n   vous demande des efforts de conception. Si votre client est plutôt du genre\\n   girouette, je vous garantis des noeuds au cerveau. \\n * nombreux contextes d\'utilisation : si la base de données est appelée à être\\n   utilisée par de nombreux logiciels différents par des équipes différentes,\\n   MongoDB ne sera pas utilisable. En effet, puisque la conception est dirigée\\n   par l\'utilisation, de nombreuses utilisations différentes vont mécaniquement\\n   augmenter la complexité de celle-ci de manière exponentielle. \\n\\nDans quels cas, éventuellement, utiliser MongoDB :\\n\\n * besoin de scaler : si vous pensez que votre concept peut attirer un trafic\\n   très important, très rapidement (typiquement, si vous travaillez pour une\\n   startup prometteuse), alors, MongoDB est l\'un des choix qui s\'offrent à vous. \\n\\nUne approche hybride peut également être intéressante, utiliser MongoDB pour les\\nconcepts se rapprochant des documents et une base de données relationnelle pour\\nles données fortement relationnelles peut faire l\'affaire.\\n\\nDe plus, il est plus simple de migrer depuis une base de données relationnelle\\nque vers une base de donnée NoSQL. C\'est pourquoi j\'aurais plutôt tendance à\\nutiliser une base relationnelle puis à switcher si le besoin s\'en fait ressentir\\npour une partie des données de l\'application.\\n\\nEnfin, il faut prendre la scalabilité supposée de MongoDB avec des pincettes.\\nD\'une part, cette base de donnée reste jeune et les utilisations de grands\\ngroupes référencées sur leur site restent limitées des parties mineures des\\ninfrastructures qui l\'intègrent. Et d\'autre part, les fournisseurs de type PaaS\\nréduisent considérablement les problèmes dus à la scalabilité des bases de\\ndonnées relationnelles, notamment les coûts en administration système.\\n\\nJe me suis fendu d\'un nouveau billet, mais cette fois sur le design de base de\\ndonnées avec MongoDB [./design_base_donnee_mongodb.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc134:JSON.parse('{"path":"contents/pages/articles-retour_xp_mongodb.html","title":"MongoDB : Retour d\'expérience","description":"Je travaille avec MongoDB depuis maintenant presque un an, il est temps pour\\n moi de faire un petit retour sur cette base de données et sur le NoSQL de manière générale.","shortTitle":"Services web RESTFul","shortDesc":"En savoir plus sur ce livre sur REST","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMONGODB: RETOUR D\'EXPÉRIENCE\\n Comme avec toute technologie « nouvelle », j\'étais extrêmement réservé quand à\\nl\'essor du NoSQL et son intérêt dans le cadre de mon quotidien de développeur\\nfull-stack. J\'ai fini par m\'y mettre par obligation professionnelle. Je ne pense\\npas en avoir fait le tour pour le moment, mon avis est donc à prendre avec\\nprécaution, mais je le livre comme un point de départ d\'un débat qui sera je\\nl\'espère constructif.\\n\\nMONGODB VS MYSQL\\nLa grande partie de mon expérience avec les bases de données s\'est construite\\nautour de MySQL. Je pense ne pas être le seul dans ce cas. C\'est donc via le\\nprisme d\'un utilisateur avancé de MySQL que j\'orienterai ce billet.\\n\\nPour illustrer les différences entre bases de données relationnelles et MongoDB,\\nje vais partir d\'un schéma de base de données simple et montrer comment selon\\nmoi, il faudrait le modéliser dans chacune d\'entre elles.\\n\\nCAS CONCRET: UN MARKETPLACE\\nJ\'ai choisi le cas concret d\'une place de marché car c\'est selon moi celui qui\\nmettra le plus en exergue les différences de conception SQL et NoSQL.\\n\\nUne place de marché est finalement assez simple. Nous avons des concepts que\\nl\'on retrouve dans à peu près toutes les applications :\\n\\n * des utilisateurs (employés des clients ou vendeurs de la place de marché), \\n * des organisations (entreprises ou autres formes juridiques),\\n\\nOn retrouve également des concepts propres aux places de marché :\\n\\n * des produits (à divers prix selon les pays),\\n * des commandes,\\n * des factures,\\n * des livraisons,\\n * des commentaires sur les produits.\\n\\nJe simplifie, ici, volontairement la chose pour complexifier par itérations\\nsuccessives.\\n\\nMODÈLE POUR BASES DE DONNÉES RELATIONNELLES\\nTypiquement, ce type d\'architecture sera modélisée comme suit :\\n\\n\\nUser(id, name, organisations[]:Organisation, home:Place, phone:Contact, mail:Contact, country:<Country>)\\nOrganisation(id, name, owner:User.id, place:Place, country:<Country>)\\nPlace(id, address, lat, lng)\\nContact(id, type, value)\\nCountry(id, name)\\n\\nProduct(id, reference, name, organisation:Organisation)\\nPrice(id, amount, product:Product, country:Country)\\nComment(id, content, parent:Comment, author:User, product:Product)\\nDelivery(id, date, place:Place, recipient:User, bill:Bill)\\nDeliveryRow(id, quantity, product:Product)\\nBill(id, date, seller:Organisation, buyer:Organisation)\\nBillRow(id, quantity, product:Product, price)\\n\\n\\nComme vous pouvez le constater, nous avons créé bien plus de concepts que ceux\\nénumérés au départ. La raison est simple : la dé-duplication et la\\nlinéarisation. Quand on modélise une base de données relationnelle, on met un\\npoint d\'honneur à éviter les doublons. On essaie également de faire entrer une\\nstructure de donnée arborescente dans un ensemble de tables interconnectées\\nentre elles.\\n\\nOn essaie donc d\'isoler un maximum de concepts enfants et on crée autant de\\ncases que nécessaire pour les englober tout en décrivant leurs relations à\\nl\'aide de clés étrangères.\\n\\nAutre avantage des bases de données relationnelles, les clés étrangères et le\\ntypage fort des divers champs de la base. La déclaration explicite des relations\\net des types permet à la base de données d\'assurer un forte intégrité des\\ndonnées qu\'elle stocke. Les transactions permettent également d\'effectuer\\nplusieurs opérations jusqu\'à l\'obtention d\'une état intègre. Ceci permet de\\nconserver encore une fois l\'intégrité des données en cas d\'échec d\'une de ces\\nmodifications.\\n\\nCes avantages ont cependant un coût. En effet, il est nécessaire de maintenir un\\nétat global et de le propager entre toutes les instances du serveur de base de\\ndonnées. C\'est pourquoi les bases de données relationnelles fonctionnent sur un\\nschéma maître/esclave.\\n\\nAinsi, dès lors que l\'on est confronté à une utilisation intense de la base de\\ndonnées, on constate une dégradation des performances et la nécessité de faire\\nappel à un DBA et/ou à un Administrateur Système pour maintenir tant bien que\\nmal ces performances et la disponibilité du système.\\n\\nEn revanche, un atout fort de la modélisation relationnelle est qu\'une\\nmodélisation bien réalisée n\'est pas censée évoluer au cours du temps sauf\\nélargissement du domaine de l\'application. Avec les bases de données\\nrelationnelles, on décrit une structure représentant l\'essence même des données\\net on l\'exploite ensuite sans même se soucier (ou presque) de son intégrité.\\n\\nCeci rend l\'évolution du produit simple et fluide puisqu\'à chaque nouvelle\\ndemande de fonctionnalité, on n\'intervient que très peu sur le schéma de la base\\nde données. Ceci, au prix d\'une concession assumée : l\'over-head des calculs et\\nvérifications qui permettent à la base de données de préserver son intégrité et\\nde la difficulté de rendre une telle architecture scalable.\\n\\nMODÉLISATION NOSQL AVEC MONGODB\\nC\'est justement pour répondre à ces problèmes de scalabilité que MongoDB a été\\nconçu. En effet, pour permettre une scalabilité horizontale, de nombreux\\nprincipes propres aux bases de données relationnelles ont été volontairement\\nécartés, nous y reviendrons.\\n\\nLes transactions, les clés étrangères, les clés uniques auto-incrémentées sont\\ndonc absentes. En sus, le mode de stockage des données est également revu. Là où\\nles bases de données relationnelles utilisent un mode de stockage par lignes et\\ncolonnes de taille généralement fixe, les bases de données telles que MongoDB\\nproposent un stockage dans un document sans contraintes (sauf sa taille, nous le\\nverrons après) bien souvent au format JSON autorisant un contenu arborescent\\n(avec en théorie avec une infinité de niveaux).\\n\\nL\'utilisation d\'une base de donnée NoSQL mène généralement à une conception bien\\ndifférente :\\n\\n\\nOrganisation {\\n  name: String,\\n  place: {\\n    address: String,\\n    latitude: Number,\\n    longitude: Number\\n  },\\n  users: [{\\n    id: ObjectId,\\n    name: String,\\n    home: {\\n      address: String,\\n      latitude: Number,\\n      longitude: Number\\n    },\\n    phone: String,\\n    mail: String,\\n    country: String,\\n    owner: Boolean\\n  }]\\n}\\n\\nProduct {\\n  id: ObjectId,\\n  reference: String,\\n  name: String,\\n  organisation_id: ObjectId,\\n  prices: [{\\n    id: ObjectId,\\n    amount: Number,\\n    country: String\\n  }],\\n  comments: [{\\n    id: ObjectId,\\n    content: String,\\n    author: ObjectId,\\n    parents_ids: [ObjectId]\\n  }]\\n}\\n\\nTrade {\\n  id: ObjectId,\\n  buyer_id: ObjectId,\\n  buyer_name: String,\\n  seller_id: ObjectId,\\n  seller_name: String,\\n  items: {\\n    product_id: ObjectId,\\n    product_name: String,\\n    product_price: Number,\\n    product_reference: String,\\n    quantity: Number\\n  },\\n  deliveries: [{\\n    id: ObjectId,\\n    date: Date,\\n    place: {\\n      address: String,\\n      lat: Number,\\n      lng: Number\\n    }\\n  }]\\n}\\n\\n\\nComme vous pouvez le voir, notre schéma est complètement différent. En effet,\\nbien que la plupart de nos concepts aient été conservés, nous n\'avons plus que\\ntrois collections au lieu d\'une dizaine de tables.\\n\\nPlusieurs choses peuvent choquer les aficionados des bases de données\\nrelationnelles :\\n\\n * duplication de certaines informations,\\n * mélange des genres,\\n * éclatement de certains concepts.\\n\\nDUPLICATION\\nOn peut remarquer que les informations sur un produit sont dupliquées au sein de\\nla collection Trade, il en va de même pour le nom de l\'entreprise. Dans le cadre\\nd\'une base de donnée NoSQL, ce n\'est pas une erreur de conception, mais bien une\\nfeature. Certes, si le nom de l\'entreprise ou le libellé d\'un produit change, le\\nnom de l\'entreprise et du produit deviendra caduque dans la facture.\\n\\nDans ce cas précis, cependant, nous pouvons considérer cette duplication comme\\nune feature. En effet, le changement de dénomination d\'une société ou le\\nchangement de prix d\'un produit ne doit pas être répercuté sur les factures\\nantérieures si l\'on souhaite garder la cohérence du document.\\n\\nMÉLANGE DES GENRES\\nL\'organisation d\'un schéma de base de donnée NoSQL peut paraître désordonnée. En\\neffet, on a de multiples concepts englobés au sein d\'une unique structure, ce\\nqui peut paraître aberrant.\\n\\nIl faut bien saisir le fait que l\'organisation en document autorise, voire\\nfavorise, ce mélange. En effet, MongoDB ne possède pas de mécanisme de jointure\\ncomme on peut le retrouver dans MySQL. Si vous souhaitez obtenir des\\ninformations sur une entreprise et ses utilisateurs et que ces concepts sont\\ndisséminés à travers plusieurs collections, vous n\'aurez d\'autre choix que de\\nfaire plusieurs appels à la base de données. Au-delà du problème évident de\\nperformances, il existe des chances pour qu\'entre le moment où vous récupérez\\nl\'organisation et celui où vous récupérez ses utilisateurs, l\'organisation soit\\nsupprimée. Comme vous n\'avez aucun moyen de garantir l\'intégrité des données,\\nc\'est un effet de bord inédit avec lequel vous devrez apprendre à composer.\\n\\nÀ ce titre, la conception de votre base de données doit être guidée par\\nl\'utilisation de vos données afin de limiter au maximum ces risques\\nd\'inconsistance. Par exemple, quand vous récupérez un utilisateur (qu\'il\\ns\'agisse de son authentification ou de l\'affichage de sa fiche personnelle),\\nvous aurez probablement besoin d\'informations sur son organisation. Si vous\\nsavez que même pour une entreprise de 100 000 salariés, vous n\'aurez jamais plus\\nde 50 utilisateurs pour une même organisation, alors les intégrer dans le\\ndocument organisation est l\'idéal.\\n\\nL\'intégrité des données est assurée par l\'unicité du document et les\\nperformances également.\\n\\nVous aurez probablement noté le maximum de 50, énoncé ci-dessus. Il est déduit à\\nla louche d\'une autre contrainte imposée par MongoDB, la taille maximale d\'un\\ndocument. Avec le modèle proposé ci-dessus, il est impossible d\'ajouter des\\nutilisateurs indéfiniment sans mettre en place des astuces comme le bucketting\\n[http://docs.mongodb.org/ecosystem/use-cases/storing-comments/#hybrid-schema-design]\\n.\\n\\nÉCLATEMENT DES CONCEPTS\\nOn peut aussi remarquer que le concept de lieu est éclaté dans divers documents\\nde types différents. C\'est clairement un renoncement de notre part. Avec ce\\nschéma, ce n\'est pas simple de lister tous les lieux de l\'application (bien que\\ncela reste possible).\\n\\nClairement, ceci ne présente que peu d\'intérêt dans une application de ce type\\ncar les lieux sont des informations qui n\'ont d\'intérêt que dans le contexte\\nd\'autres concepts.\\n\\nEn conclusion, on retiendra que le NoSQL bouscule nos habitudes. Là où avec une\\nbase de données relationnelle on cherche à comprendre l\'essence des données,\\navec une base de données NoSQL, on recherche plutôt le meilleur moyen\\nd\'organiser nos données pour répondre au mieux aux besoins de notre application.\\n\\nIMPACTS SUR LE PROJET\\nÉtant donné que la conception d\'une base de donnée NoSQL est directement induite\\npar l\'utilisation qui en est faîte, chaque modification apportée à l\'application\\nimplique potentiellement une adaptation de la conception de celle-ci.\\n\\nCeci a un impact majeur sur l\'évolution du projet. Certaines modifications\\ntriviales avec l\'utilisation d\'une base relationnelle peuvent devenir un vrai\\ncauchemar avec une base MongoDB. Prenons par exemple les lieux. Si demain, le\\nsuccès de notre place de marché nous permet de proposer un service de livraison\\navec des lieux prédéterminés, il est probable que nous devions renoncer à garder\\nles lieux dans nos documents de type Trade pour créer une collection à part.\\n\\nLà où notre schéma relationnel n\'aurait nécessité aucune modification, nous\\nallons devoir modifier notre schéma, modifier le code en conséquence, écrire et\\nlancer des scripts de migration. Là où d\'un côté, nous avions un DBA qui gérait\\nles données, leur stockage et leur structure, nous avons un développeur qui doit\\nsans cesse repenser la façon dont les données sont stockées et utilisées.\\n\\nIl faut donc former des développeurs qui prennent la cohérence des données comme\\nacquise à leurs nouvelles responsabilités. Ou l\'inverse d\'ailleurs, éviter que\\nces même développeurs cherchent à retrouver leur zone de confort en développant\\nune surcouche qui leur garantirait cette intégrité.\\n\\nAu final, penser qu\'utiliser MongoDB permet à votre application de scaler est\\ncomme penser que perdu en plein désert, vous débarrasser de vos vivres vous\\npermettra d\'en sortir plus vite. Choisir MongoDB, surtout c\'est choisir d\'être\\nconfronté aux problèmes de scalabilité dés les premiers jours du développement\\nde votre application afin de faire dès aujourd\'hui les arbitrages qui vous\\npermettront d\'assumer une forte montée en charge plus facilement.\\n\\nCOMMENT CHOISIR ?\\nDe nombreux facteurs entrent en jeu pour choisir la base de données à utiliser\\nqui sied le mieux à votre projet. Cependant, je peux vous donner les critères\\nque j\'appliquerai personnellement.\\n\\nDans quel cas ne pas utiliser MongoDB :\\n\\n * c\'est hype, ça output du JSON : c\'est probablement la pire raison qui puisse\\n   vous faire choisir MongoDB. JSON n\'est qu\'un format et n\'a rien à voir avec\\n   le cœur du problème posé pour le choix d\'une base de données. C\'est\\n   malheureusement trop souvent le cas et je pense que ceci sera la source de\\n   nombreuses accumulations de dette technique. \\n * pas besoin de scaler : si scaler n\'est pas votre priorité, n\'utilisez pas\\n   MongoDB. En effet, MongoDB pose plus de problèmes qu\'il n\'en résout\\n   uniquement pour scaler. Si ce n\'est pas une nécessité, préférez une base de\\n   données relationnelle qui simplifiera vos développements. \\n * je suis un n00b en SQL, Mongo est plus simple : si après cet article vous\\n   n\'êtes pas convaincu, je ne peux pas faire grand-chose de plus. Mais pour\\n   forcer le trait, je pense que le meilleur moyen de bien utiliser MongoDB est\\n   justement d\'avoir une bonne expérience des bases de données relationnelles. \\n * features fortement changeantes : typiquement, si vous faîtes de la prestation\\n   de services, MongoDB est un mauvais choix. Surtout si vous travaillez au\\n   forfait. Votre client ne comprendra pas pourquoi la moindre de ses requêtes\\n   vous demande des efforts de conception. Si votre client est plutôt du genre\\n   girouette, je vous garantis des noeuds au cerveau. \\n * nombreux contextes d\'utilisation : si la base de données est appelée à être\\n   utilisée par de nombreux logiciels différents par des équipes différentes,\\n   MongoDB ne sera pas utilisable. En effet, puisque la conception est dirigée\\n   par l\'utilisation, de nombreuses utilisations différentes vont mécaniquement\\n   augmenter la complexité de celle-ci de manière exponentielle. \\n\\nDans quels cas, éventuellement, utiliser MongoDB :\\n\\n * besoin de scaler : si vous pensez que votre concept peut attirer un trafic\\n   très important, très rapidement (typiquement, si vous travaillez pour une\\n   startup prometteuse), alors, MongoDB est l\'un des choix qui s\'offrent à vous. \\n\\nUne approche hybride peut également être intéressante, utiliser MongoDB pour les\\nconcepts se rapprochant des documents et une base de données relationnelle pour\\nles données fortement relationnelles peut faire l\'affaire.\\n\\nDe plus, il est plus simple de migrer depuis une base de données relationnelle\\nque vers une base de donnée NoSQL. C\'est pourquoi j\'aurais plutôt tendance à\\nutiliser une base relationnelle puis à switcher si le besoin s\'en fait ressentir\\npour une partie des données de l\'application.\\n\\nEnfin, il faut prendre la scalabilité supposée de MongoDB avec des pincettes.\\nD\'une part, cette base de donnée reste jeune et les utilisations de grands\\ngroupes référencées sur leur site restent limitées des parties mineures des\\ninfrastructures qui l\'intègrent. Et d\'autre part, les fournisseurs de type PaaS\\nréduisent considérablement les problèmes dus à la scalabilité des bases de\\ndonnées relationnelles, notamment les coûts en administration système.\\n\\nJe me suis fendu d\'un nouveau billet, mais cette fois sur le design de base de\\ndonnées avec MongoDB [./design_base_donnee_mongodb.html].\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc135:JSON.parse('{"path":"contents/pages/fr/blog/services_web_restful.html","title":"Critique du livre : Services Web RESTful par Richarson & Ruby","description":"Si on me demandait quel livre a véritablement influencé mon quotidien de développeur web, ce serait sans hésitation celui-là.","shortTitle":"Services web RESTFul","shortDesc":"Ensavoir plus sur ce livre sur REST","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : SERVICES WEB RESTFUL PAR RICHARSON & RUBY\\nSi on me demandait quel livre a véritablement influencé mon quotidien de\\ndéveloppeur web, ce serait sans hésitation celui-là.\\n\\nJ\'ai découvert l\'existence de ce livre via le blog de David Larlet\\n[https://larlet.fr/david/](biologeek). C\'est vraiment un excellent livre, c\'est\\nen lisant ce dernier que j\'ai eu l\'envie de répondre à un projet client par une\\napplication REST. Après avoir songé à sous-traiter la partie serveur, j\'ai été\\ncontraint par le cahier des charges de le développer en PHP et je n\'ai pas\\ntrouvé la compétence en PHP sur le marché.\\n\\nCe fut finalement une bonne chose puisque c\'est grâce à ce critère que j\'ai\\ndéveloppé mon framework Rest PHP. Je n\'ai pas ajouté le ful de RESTful à la fin\\ncar je ne suis pas vraiment un adepte de la condition de connectivité des\\nservices web en ce sens que ce n\'est pas toujours très productif.\\n\\nEn revanche, j\'ai ajouté à ces principes quelques autres de mon cru\\n[bien_designer_url_site_applications_web.html]qui en fait une architecture\\nlégèrement différente et, de mon point de vue, plus puissante.\\n\\nLe seul reproche que je ferais à ce livre est qu\'il ressemble parfois à une\\npublicité ambulante pour les services web d\'Amazon. Mais bon, c\'est peu de\\nchoses au regard de l\'apport de ce livre à mon cursus professionnel.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc136:JSON.parse('{"path":"contents/pages/articles-services_web_restful.html","title":"Critique du livre : Services Web RESTful par Richarson & Ruby","description":"Si on me demandait quel livre a véritablement influencé mon quotidien de développeur web, ce serait sans hésitation celui-là.","shortTitle":"Services web RESTFul","shortDesc":"Ensavoir plus sur ce livre sur REST","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : SERVICES WEB RESTFUL PAR RICHARSON & RUBY\\nSi on me demandait quel livre a véritablement influencé mon quotidien de\\ndéveloppeur web, ce serait sans hésitation celui-là.\\n\\nJ\'ai découvert l\'existence de ce livre via le blog de David Larlet\\n[https://larlet.fr/david/](biologeek). C\'est vraiment un excellent livre, c\'est\\nen lisant ce dernier que j\'ai eu l\'envie de répondre à un projet client par une\\napplication REST. Après avoir songé à sous-traiter la partie serveur, j\'ai été\\ncontraint par le cahier des charges de le développer en PHP et je n\'ai pas\\ntrouvé la compétence en PHP sur le marché.\\n\\nCe fut finalement une bonne chose puisque c\'est grâce à ce critère que j\'ai\\ndéveloppé mon framework Rest PHP. Je n\'ai pas ajouté le ful de RESTful à la fin\\ncar je ne suis pas vraiment un adepte de la condition de connectivité des\\nservices web en ce sens que ce n\'est pas toujours très productif.\\n\\nEn revanche, j\'ai ajouté à ces principes quelques autres de mon cru\\n[bien_designer_url_site_applications_web.html]qui en fait une architecture\\nlégèrement différente et, de mon point de vue, plus puissante.\\n\\nLe seul reproche que je ferais à ce livre est qu\'il ressemble parfois à une\\npublicité ambulante pour les services web d\'Amazon. Mais bon, c\'est peu de\\nchoses au regard de l\'apport de ce livre à mon cursus professionnel.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc137:JSON.parse('{"path":"contents/pages/fr/blog/streamer_donnees.html","title":"Devenez un homme, streamez vos données !","description":"Peut-être ne le saviez-vous pas, mais XMLHttpRequest Level 2 permet d\'accéder vos données avant leur chargement complet grâce à l\'écouteur d\'évènement onProgress. Il est temps de grandir et de l\'utiliser.","shortTitle":"Streamer vos données","shortDesc":"En savoir plus sur le streaming de données.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDEVENEZ UN HOMME, STREAMEZ VOS DONNÉES !\\nPeut-être ne le saviez-vous pas, mais XMLHttpRequest Level 2 permet d\'accéder\\nvos données avant leur chargement complet grâce à l\'écouteur d\'évènement\\nonProgress. Il est temps de grandir et de l\'utiliser.\\n\\nDans le cadre de mes applications web pour entreprise, j\'utilise le streaming\\nqui propose de nombreux avantages en terme de performance ressentie et de\\nréactivité des interfaces. Et pourtant, ce concept est très peu utilisé, même\\npar les plus grands. Voyons pourquoi !\\n\\nJSON, CE TRAÎTRE !\\nJSon est le format le plus utilisé pour charger des données dynamiquement (ce\\nfameux Ajax qu\'on ne présente plus). Malgré sa popularité, JSon possède un\\nsérieux désavantage qui conduit les développeurs dans un impasse. En effet, il\\nest impossible de déterminer, tant qu\'il n\'est pas entièrement chargé, si le\\nJSon reçu est valide ou non.\\n\\nLa seule solution qui se présente aux développeurs est donc d\'attendre sagement\\nle chargement complet de la ressource afin de pouvoir la parser grâce à la bien\\nconnue méthode JSON.parse(data).\\n\\nBref, JSon n\'est pas streamable, du moins, pas facilement puisqu\'il faudrait\\nrecréer un parseur qui serait probablement peu performant étant donnée la\\ncompléxité de JSon.\\n\\nLES FORMATS STREAMABLES\\nJ\'ai déjà parlé ici de VarStream [remplacer_json_par_varstream.html], mais vous\\nseriez surpris de savoir combien d\'autres formats son supérieurs sur ce point à\\nJSon. Parlons par exemple de CSV. La plupart des données JSon sont finalement\\ndes données tabulaires qui pourraient tout aussi bien être représentées en CSV\\nsans perte de sens, mais avec une taille réduite, et surtout, un format\\nstreamable. Mais on peut aussi parler de ce fameux HTML ou du simple texte qui\\nsont également streamables facilement.\\n\\nPOURQUOI STREAMER ?\\nC\'est une question légitime qui m\'est régulièrement posée quand je parle de\\nstreamer des données via XHR. Comparons les deux approches.\\n\\nL\'approche classique est la suivante, j\'envoie une requête XHR, j\'affiche un\\nloader pour faire patienter le visiteur, puis, une fois toutes mes données\\nchargées, j\'ajoute le contenu à la page via le DOM. Si la requête prend une ou\\ndeux secondes à se télécharger, alors le visiteur attendra autant de temps sans\\nque rien ne se passe à part une animation sans intérêt.\\n\\nL\'approche streamée est bien plus dynamique. J\'envoie une requête XHR mais qui\\ncette fois renvoie un format streamable. Dès le premier chunk de donnée reçu, le\\ncontenu commence à se mettre à jour au fur et à mesure que ces dernièrs nous\\nparviennent. Notre loader est avantageusement remplacé par nos données\\nelles-mêmes. Là où le visiteur aurait attendu une seconde, ce dernier attend\\nplutôt 1/4 de seconde pour que quelque chose se passe.\\n\\nLA PREUVE PAR L\'EXEMPLE\\nJ\'ai créé un petit comparatif\\n[http://server.elitwork.com/experiments/pagestream/index.html]pour appuyer mes\\npropos. Chez moi en 512k, l\'exemple est très parlant. Voici les résultats dans\\ndifférentes situations :\\n\\n * sur mon réseau local : Varstream (affichages : 6, 20ms, chargement complet:\\n   20ms), Json (affichages : 18ms, chargement complet: 18ms). \\n * sur mon serveur distant : Varstream (affichages : 110,171,212,263,267,268ms,\\n   chargement complet: 268ms), Json (affichages : 267ms, chargement complet:\\n   267ms). \\n * sur le distant avec une vidéo YouTube en route : Varstream (affichages : 856,\\n   916,958,2130,2175ms, chargement complet: 2175ms), Json (affichages : 1915ms,\\n   chargement complet: 1515ms). \\n\\nLes résultats en réseau local montrent que dans des conditions idéales en terme\\nde bande passante, les reflows sont plus limités puisque l\'information arrive\\nplus vite. On peut également dire que le fait de streamer les données a un\\nfaible impact dans de bonnes conditions.\\n\\nSur le serveur distant, on se rend compte que le fait de streamer les données\\nréduit par deux le temps de disponibilité des données. L\'utilisateur peut\\ncommencer à lire avant le chargement complet.\\n\\nIl est intéressant de noter qu\'en cas de surcharge de la bande passante, les\\nrésultats sont encore meilleurs ce qui rend la démarche encore plus intéressante\\ndans le contexte de la mobilité, du téléchargement de mises à jour, de\\nconnexions partagées etc... A savoir que c\'est très variable dans le cas de la\\nvidéo YouTube et qu\'il faudrait probablement faire un moyenne sur de multiples\\ntests.\\n\\nEnfin, les données utilisées sont un peu banales, mais dans des cas concrets, on\\npeut espérer des gains encore plus important :\\n\\n * l\'affichage de graphiques en streaming à partir de données CSV présente un\\n   intérêt plus que certain. On verrait le graph se dessiner au fur et à mesure\\n   de l\'arrivée des données. J\'ai essayé de trouver un librairie de dessins de\\n   graphiques qui soit compatible avec cette approche, mais malheureusement,\\n   toutes les librairies n\'acceptent que des données complètes ce qui dénote\\n   bien le problème qu\'a posé la popularisation de JSon, \\n * si l\'on prend l\'exemple de Twitter et Facebook avec leur infinite scroll à la\\n   mode, on voit tout de suite l\'intérêt d\'afficher les données au flux, \\n * les systèmes de template Javascript pourraient remplir le DOM au fur et à\\n   mesure de l\'arrivée des templates avec l\'arrivée des données XHR. Rien\\n   n\'empêche de mettre du HTML pas complètement chargé dans un DocumentFragment,\\n   de l\'ajouter au DOM et de le remplacer par des données plus fraîches par la\\n   suite, \\n * enfin avec le texte brut, c\'est encore plus simple. Le visiteur verrai son\\n   div se remplir au fur et à mesure de son chargement. \\n\\nUNE NORME OUBLIÉE\\nJe n\'ai rien inventé, le streaming, c\'est la norme. Il suffit de regarder\\ncomment fonctionne le chargement d\'une page HTML pour se rendre compte que c\'est\\nle comportement de base des navigateurs.\\n\\nNous avons simplement oublié cela avec le passage à Ajax. Peut-être à cause de\\nJSon, peut-être par ignorance. Bref, il est temps de grandir, et la soupe qui le\\npermettra, c\'est le streaming !\\n\\nPetit ajout : Suite au commentaire de Pablo, j\'ai fait la même expérience mais\\navec des graphiques\\n[http://server.elitwork.com/experiments/chartstream/index.html]. Le résultat est\\nintéressant.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc138:JSON.parse('{"path":"contents/pages/articles-streamer_donnees.html","title":"Devenez un homme, streamez vos données !","description":"Peut-être ne le saviez-vous pas, mais XMLHttpRequest Level 2 permet d\'accéder vos données avant leur chargement complet grâce à l\'écouteur d\'évènement onProgress. Il est temps de grandir et de l\'utiliser.","shortTitle":"Streamer vos données","shortDesc":"En savoir plus sur le streaming de données.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nDEVENEZ UN HOMME, STREAMEZ VOS DONNÉES !\\nPeut-être ne le saviez-vous pas, mais XMLHttpRequest Level 2 permet d\'accéder\\nvos données avant leur chargement complet grâce à l\'écouteur d\'évènement\\nonProgress. Il est temps de grandir et de l\'utiliser.\\n\\nDans le cadre de mes applications web pour entreprise, j\'utilise le streaming\\nqui propose de nombreux avantages en terme de performance ressentie et de\\nréactivité des interfaces. Et pourtant, ce concept est très peu utilisé, même\\npar les plus grands. Voyons pourquoi !\\n\\nJSON, CE TRAÎTRE !\\nJSon est le format le plus utilisé pour charger des données dynamiquement (ce\\nfameux Ajax qu\'on ne présente plus). Malgré sa popularité, JSon possède un\\nsérieux désavantage qui conduit les développeurs dans un impasse. En effet, il\\nest impossible de déterminer, tant qu\'il n\'est pas entièrement chargé, si le\\nJSon reçu est valide ou non.\\n\\nLa seule solution qui se présente aux développeurs est donc d\'attendre sagement\\nle chargement complet de la ressource afin de pouvoir la parser grâce à la bien\\nconnue méthode JSON.parse(data).\\n\\nBref, JSon n\'est pas streamable, du moins, pas facilement puisqu\'il faudrait\\nrecréer un parseur qui serait probablement peu performant étant donnée la\\ncompléxité de JSon.\\n\\nLES FORMATS STREAMABLES\\nJ\'ai déjà parlé ici de VarStream [remplacer_json_par_varstream.html], mais vous\\nseriez surpris de savoir combien d\'autres formats son supérieurs sur ce point à\\nJSon. Parlons par exemple de CSV. La plupart des données JSon sont finalement\\ndes données tabulaires qui pourraient tout aussi bien être représentées en CSV\\nsans perte de sens, mais avec une taille réduite, et surtout, un format\\nstreamable. Mais on peut aussi parler de ce fameux HTML ou du simple texte qui\\nsont également streamables facilement.\\n\\nPOURQUOI STREAMER ?\\nC\'est une question légitime qui m\'est régulièrement posée quand je parle de\\nstreamer des données via XHR. Comparons les deux approches.\\n\\nL\'approche classique est la suivante, j\'envoie une requête XHR, j\'affiche un\\nloader pour faire patienter le visiteur, puis, une fois toutes mes données\\nchargées, j\'ajoute le contenu à la page via le DOM. Si la requête prend une ou\\ndeux secondes à se télécharger, alors le visiteur attendra autant de temps sans\\nque rien ne se passe à part une animation sans intérêt.\\n\\nL\'approche streamée est bien plus dynamique. J\'envoie une requête XHR mais qui\\ncette fois renvoie un format streamable. Dès le premier chunk de donnée reçu, le\\ncontenu commence à se mettre à jour au fur et à mesure que ces dernièrs nous\\nparviennent. Notre loader est avantageusement remplacé par nos données\\nelles-mêmes. Là où le visiteur aurait attendu une seconde, ce dernier attend\\nplutôt 1/4 de seconde pour que quelque chose se passe.\\n\\nLA PREUVE PAR L\'EXEMPLE\\nJ\'ai créé un petit comparatif\\n[http://server.elitwork.com/experiments/pagestream/index.html]pour appuyer mes\\npropos. Chez moi en 512k, l\'exemple est très parlant. Voici les résultats dans\\ndifférentes situations :\\n\\n * sur mon réseau local : Varstream (affichages : 6, 20ms, chargement complet:\\n   20ms), Json (affichages : 18ms, chargement complet: 18ms). \\n * sur mon serveur distant : Varstream (affichages : 110,171,212,263,267,268ms,\\n   chargement complet: 268ms), Json (affichages : 267ms, chargement complet:\\n   267ms). \\n * sur le distant avec une vidéo YouTube en route : Varstream (affichages : 856,\\n   916,958,2130,2175ms, chargement complet: 2175ms), Json (affichages : 1915ms,\\n   chargement complet: 1515ms). \\n\\nLes résultats en réseau local montrent que dans des conditions idéales en terme\\nde bande passante, les reflows sont plus limités puisque l\'information arrive\\nplus vite. On peut également dire que le fait de streamer les données a un\\nfaible impact dans de bonnes conditions.\\n\\nSur le serveur distant, on se rend compte que le fait de streamer les données\\nréduit par deux le temps de disponibilité des données. L\'utilisateur peut\\ncommencer à lire avant le chargement complet.\\n\\nIl est intéressant de noter qu\'en cas de surcharge de la bande passante, les\\nrésultats sont encore meilleurs ce qui rend la démarche encore plus intéressante\\ndans le contexte de la mobilité, du téléchargement de mises à jour, de\\nconnexions partagées etc... A savoir que c\'est très variable dans le cas de la\\nvidéo YouTube et qu\'il faudrait probablement faire un moyenne sur de multiples\\ntests.\\n\\nEnfin, les données utilisées sont un peu banales, mais dans des cas concrets, on\\npeut espérer des gains encore plus important :\\n\\n * l\'affichage de graphiques en streaming à partir de données CSV présente un\\n   intérêt plus que certain. On verrait le graph se dessiner au fur et à mesure\\n   de l\'arrivée des données. J\'ai essayé de trouver un librairie de dessins de\\n   graphiques qui soit compatible avec cette approche, mais malheureusement,\\n   toutes les librairies n\'acceptent que des données complètes ce qui dénote\\n   bien le problème qu\'a posé la popularisation de JSon, \\n * si l\'on prend l\'exemple de Twitter et Facebook avec leur infinite scroll à la\\n   mode, on voit tout de suite l\'intérêt d\'afficher les données au flux, \\n * les systèmes de template Javascript pourraient remplir le DOM au fur et à\\n   mesure de l\'arrivée des templates avec l\'arrivée des données XHR. Rien\\n   n\'empêche de mettre du HTML pas complètement chargé dans un DocumentFragment,\\n   de l\'ajouter au DOM et de le remplacer par des données plus fraîches par la\\n   suite, \\n * enfin avec le texte brut, c\'est encore plus simple. Le visiteur verrai son\\n   div se remplir au fur et à mesure de son chargement. \\n\\nUNE NORME OUBLIÉE\\nJe n\'ai rien inventé, le streaming, c\'est la norme. Il suffit de regarder\\ncomment fonctionne le chargement d\'une page HTML pour se rendre compte que c\'est\\nle comportement de base des navigateurs.\\n\\nNous avons simplement oublié cela avec le passage à Ajax. Peut-être à cause de\\nJSon, peut-être par ignorance. Bref, il est temps de grandir, et la soupe qui le\\npermettra, c\'est le streaming !\\n\\nPetit ajout : Suite au commentaire de Pablo, j\'ai fait la même expérience mais\\navec des graphiques\\n[http://server.elitwork.com/experiments/chartstream/index.html]. Le résultat est\\nintéressant.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc139:JSON.parse('{"path":"contents/pages/fr/blog/subtilites_de_regexp.html","title":"Les subtilités de RegExp en Javascript","description":"Les expressions régulières sont très peu populaires, elles sont pourtant surpuissantes. Néanmoins, il y a quelques subtilités à connaître, dont une que j\'ai récemment apprise.","shortTitle":"Subtil RegExp","shortDesc":"En savoir plus sur les subtilités de RegExp","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES SUBTILITÉS DE REGEXP EN JAVASCRIPT\\nLes expressions régulières sont très peu populaires, elles sont pourtant\\nsurpuissantes. Néanmoins, il y a quelques subtilités à connaître, dont une que\\nj\'ai récemment apprise.\\n\\nJ\'ai une très forte expérience dans l\'utilisation des expressions régulières\\nnotamment grâce à BBComposer et les différents parseurs\\n[https://github.com/nfroidure/BBComposer/tree/master/chrome/bbcomposer/content/languages]\\nque j\'ai créé pour convertir différents langages vers et depuis l\'éditeur. Mais\\nles différentes subtilités des expressions régulières m\'ont souvent amené à\\ncoder les parseurs à la main.\\n\\nUn exemple épique, le parsing de tableaux avec la typographie Spip\\n[https://github.com/nfroidure/BBComposer/blob/master/chrome/bbcomposer/content/languages/spip.js#L163]\\n. A ma connaissance, les développeurs de Spip ont fait ça à base d\'expressions\\nrégulières, mais je doute vraiment que la tâche ait été plus aisé que d\'écrire\\nle parseur from scratch. Bon, à leur avantage, ils ont pu utiliser PCRE qui est\\nsomme toute un peu plus avancé que ce qu\'offre Javascript.\\n\\nCe qui m\'amène au sujet de ce billet. Une des choses les plus courantes que l\'on\\nsouhaite faire avec les expressions régulières, est de trouver une expression et\\nde la remplacer par une autre. Imaginons que nous souhaitions supprimer tous les\\nguillemets d\'un snippet HTML se trouvant à l\'intérieur des balises.\\n\\nCRÉATION DE L\'EXPRESSION RÉGULIÈRE\\nvar regExp = new RegExp(\'<([^>]+)\\"([[^>]]*)>\');\\nvar str = \'<h2>Blahblah</h2><p style=\\"text-align: center;\\"> <img alt=\\"Blahblah\\" src=\\"http://www.example.com/images/blah.jpg\\" /></p>\';\\nvar pattern=\'<$1$2>\';\\nstr=str.replace(regExp,pattern);\\nconsole.log(str);\\n\\nL\'expression régulière <([[^>]]+)\\"([[^>]]*)> cible toute sous-chaîne commençant\\npar un < et se terminant par un > dont le contenu est composé d\'une chaîne\\ncontenant tout caractère sauf >, suivie d\'un guillemet et éventuellement d\'une\\nautre chaîne de caractère contenant tout sauf >.\\n\\nPOURQUOI ÇA MARCHE PAS ?\\nLe problème est que ça ne fonctionne pas. Sous cette forme, le code ne remplace\\nque la première occurrence, de plus, si une telle chaîne se trouve sur plusieurs\\nlignes, cela ne fonctionnera pas non-plus. Naturellement, on aurait tendance à\\najouter les flags m pour multiligne et g pour global qui respectivement\\npermettent de trouver les expressions se trouvant sur plusieurs lignes et de\\ntrouver toutes les occurrences de cette dernière.\\n\\nvar regExp = new RegExp(\'<([[^>]]+)\\"([[^>]]*)>\',\'mg\');\\nvar str = \'<h2>Blahblah</h2><p style=\\"text-align: center;\\"> <img alt=\\"Blahblah\\" src=\\"http://www.example.com/images/blah.jpg\\" /></p>\';\\nvar pattern=\'<$1$2>\';\\nstr=str.replace(regExp,pattern);\\nconsole.log(str);\\n\\nOui, mais non :). la recherche globale trouve toutes les occurrences dans la\\nchaîne d\'origine. Cela signifie que si les modifications apportées à la chaîne\\ncréent de nouvelles occurrences du masque recherché, celles-cis ne seront pas\\nremplacées. Le piège naïf dans lequel je suis alors tombé, fût de tester la\\nprésence du masque sur la nouvelle chaîne afin de vérifier qu\'il n\'y a plus\\nd’occurrences de ce dernier.\\n\\nvar regExp = new RegExp(\'<([[^>]]+)\\"([[^>]]*)>\',\'mg\');\\nvar str = \'<h2>Blahblah</h2><p style=\\"text-align: center;\\"> <img alt=\\"Blahblah\\" src=\\"http://www.example.com/images/blah.jpg\\" /></p>\';\\nvar pattern=\'<$1$2>\';\\nwhile(regExp.test(str))\\n str=str.replace(regExp,pattern);\\nconsole.log(str);\\n\\nMais ça ne fonctionne pas non-plus :). En effet, contrairement à ce que l\'on\\npourrait penser RegExp.test et String.replace n\'ont pas le même comportement.\\nQuand un masque est recherché, il complète une référence interne à la dernière\\noccurrence trouvée, le fameux RegExp.lastIndex\\n[https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/lastIndex]\\n. Ainsi, quand le remplacement a été effectué, cet index est mis à jour à\\nl\'endroit du dernier remplacement, tant et si bien que la prochaine recherche\\n(ici regExp.test(str)) commence à partir de cet index.\\n\\nDeux solutions se présente alors à nous. La première est de retirer le flag\\nglobal, ce qui améliore la lisibilité du code. La seconde, celle que j\'ai\\nretenu, est de réinitialiser ce fameux lastIndex après chaque remplacement au\\nsein de la boucle.\\n\\nvar regExp = new RegExp(\'<([[^>]]+)\\"([[^>]]*)>\',\'mg\');\\nvar str = \'<h2>Blahblah</h2><p style=\\"text-align: center;\\"> <img alt=\\"Blahblah\\" src=\\"http://www.example.com/images/blah.jpg\\" /></p>\';\\nvar pattern=\'<$1$2>\';\\nwhile(regExp.test(str))\\n {\\n str=str.replace(regExp,pattern);\\n regExp.lastIndex=0;\\n }\\nconsole.log(str);\\n\\nCette solution est moins compréhensible de prime abord, mais elle à le mérite de\\nmontrer que ce fameux lastIndex existe et d\'éviter que quelqu\'un passe derrière\\net rajoute un g qu\'il sera particulièrement difficile de déboguer. Elle est\\naussi plus performante puisque l\'expression régulière n\'est ré-exécutée que si,\\nprécisément, le cas de la création d\'une nouvelle occurrence après remplacement\\nse présente plutôt que pour chaque occurrence de la chaîne originale.\\n\\nMORALITÉ\\nVous pensiez que les expressions régulières étaient l\'enfer des développeurs ?\\nVous étiez loin de la réalité, c\'est pire :). J\'ai perdu une journée sur ce\\nproblème, et c\'est finalement un rapport de bug\\n[https://bugzilla.mozilla.org/show_bug.cgi?id=837154]qui m\'a permis de connaître\\nla solution ce matin au réveil (merci Sean Stangl). Mon conseil est de tout de\\nmême vous mettre aux expressions régulières car elles sont vraiment puissantes,\\nle tout est de bien les comprendre.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc140:JSON.parse('{"path":"contents/pages/articles-subtilites_de_regexp.html","title":"Les subtilités de RegExp en Javascript","description":"Les expressions régulières sont très peu populaires, elles sont pourtant surpuissantes. Néanmoins, il y a quelques subtilités à connaître, dont une que j\'ai récemment apprise.","shortTitle":"Subtil RegExp","shortDesc":"En savoir plus sur les subtilités de RegExp","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLES SUBTILITÉS DE REGEXP EN JAVASCRIPT\\nLes expressions régulières sont très peu populaires, elles sont pourtant\\nsurpuissantes. Néanmoins, il y a quelques subtilités à connaître, dont une que\\nj\'ai récemment apprise.\\n\\nJ\'ai une très forte expérience dans l\'utilisation des expressions régulières\\nnotamment grâce à BBComposer et les différents parseurs\\n[https://github.com/nfroidure/BBComposer/tree/master/chrome/bbcomposer/content/languages]\\nque j\'ai créé pour convertir différents langages vers et depuis l\'éditeur. Mais\\nles différentes subtilités des expressions régulières m\'ont souvent amené à\\ncoder les parseurs à la main.\\n\\nUn exemple épique, le parsing de tableaux avec la typographie Spip\\n[https://github.com/nfroidure/BBComposer/blob/master/chrome/bbcomposer/content/languages/spip.js#L163]\\n. A ma connaissance, les développeurs de Spip ont fait ça à base d\'expressions\\nrégulières, mais je doute vraiment que la tâche ait été plus aisé que d\'écrire\\nle parseur from scratch. Bon, à leur avantage, ils ont pu utiliser PCRE qui est\\nsomme toute un peu plus avancé que ce qu\'offre Javascript.\\n\\nCe qui m\'amène au sujet de ce billet. Une des choses les plus courantes que l\'on\\nsouhaite faire avec les expressions régulières, est de trouver une expression et\\nde la remplacer par une autre. Imaginons que nous souhaitions supprimer tous les\\nguillemets d\'un snippet HTML se trouvant à l\'intérieur des balises.\\n\\nCRÉATION DE L\'EXPRESSION RÉGULIÈRE\\nvar regExp = new RegExp(\'<([^>]+)\\"([[^>]]*)>\');\\nvar str = \'<h2>Blahblah</h2><p style=\\"text-align: center;\\"> <img alt=\\"Blahblah\\" src=\\"http://www.example.com/images/blah.jpg\\" /></p>\';\\nvar pattern=\'<$1$2>\';\\nstr=str.replace(regExp,pattern);\\nconsole.log(str);\\n\\nL\'expression régulière <([[^>]]+)\\"([[^>]]*)> cible toute sous-chaîne commençant\\npar un < et se terminant par un > dont le contenu est composé d\'une chaîne\\ncontenant tout caractère sauf >, suivie d\'un guillemet et éventuellement d\'une\\nautre chaîne de caractère contenant tout sauf >.\\n\\nPOURQUOI ÇA MARCHE PAS ?\\nLe problème est que ça ne fonctionne pas. Sous cette forme, le code ne remplace\\nque la première occurrence, de plus, si une telle chaîne se trouve sur plusieurs\\nlignes, cela ne fonctionnera pas non-plus. Naturellement, on aurait tendance à\\najouter les flags m pour multiligne et g pour global qui respectivement\\npermettent de trouver les expressions se trouvant sur plusieurs lignes et de\\ntrouver toutes les occurrences de cette dernière.\\n\\nvar regExp = new RegExp(\'<([[^>]]+)\\"([[^>]]*)>\',\'mg\');\\nvar str = \'<h2>Blahblah</h2><p style=\\"text-align: center;\\"> <img alt=\\"Blahblah\\" src=\\"http://www.example.com/images/blah.jpg\\" /></p>\';\\nvar pattern=\'<$1$2>\';\\nstr=str.replace(regExp,pattern);\\nconsole.log(str);\\n\\nOui, mais non :). la recherche globale trouve toutes les occurrences dans la\\nchaîne d\'origine. Cela signifie que si les modifications apportées à la chaîne\\ncréent de nouvelles occurrences du masque recherché, celles-cis ne seront pas\\nremplacées. Le piège naïf dans lequel je suis alors tombé, fût de tester la\\nprésence du masque sur la nouvelle chaîne afin de vérifier qu\'il n\'y a plus\\nd’occurrences de ce dernier.\\n\\nvar regExp = new RegExp(\'<([[^>]]+)\\"([[^>]]*)>\',\'mg\');\\nvar str = \'<h2>Blahblah</h2><p style=\\"text-align: center;\\"> <img alt=\\"Blahblah\\" src=\\"http://www.example.com/images/blah.jpg\\" /></p>\';\\nvar pattern=\'<$1$2>\';\\nwhile(regExp.test(str))\\n str=str.replace(regExp,pattern);\\nconsole.log(str);\\n\\nMais ça ne fonctionne pas non-plus :). En effet, contrairement à ce que l\'on\\npourrait penser RegExp.test et String.replace n\'ont pas le même comportement.\\nQuand un masque est recherché, il complète une référence interne à la dernière\\noccurrence trouvée, le fameux RegExp.lastIndex\\n[https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/lastIndex]\\n. Ainsi, quand le remplacement a été effectué, cet index est mis à jour à\\nl\'endroit du dernier remplacement, tant et si bien que la prochaine recherche\\n(ici regExp.test(str)) commence à partir de cet index.\\n\\nDeux solutions se présente alors à nous. La première est de retirer le flag\\nglobal, ce qui améliore la lisibilité du code. La seconde, celle que j\'ai\\nretenu, est de réinitialiser ce fameux lastIndex après chaque remplacement au\\nsein de la boucle.\\n\\nvar regExp = new RegExp(\'<([[^>]]+)\\"([[^>]]*)>\',\'mg\');\\nvar str = \'<h2>Blahblah</h2><p style=\\"text-align: center;\\"> <img alt=\\"Blahblah\\" src=\\"http://www.example.com/images/blah.jpg\\" /></p>\';\\nvar pattern=\'<$1$2>\';\\nwhile(regExp.test(str))\\n {\\n str=str.replace(regExp,pattern);\\n regExp.lastIndex=0;\\n }\\nconsole.log(str);\\n\\nCette solution est moins compréhensible de prime abord, mais elle à le mérite de\\nmontrer que ce fameux lastIndex existe et d\'éviter que quelqu\'un passe derrière\\net rajoute un g qu\'il sera particulièrement difficile de déboguer. Elle est\\naussi plus performante puisque l\'expression régulière n\'est ré-exécutée que si,\\nprécisément, le cas de la création d\'une nouvelle occurrence après remplacement\\nse présente plutôt que pour chaque occurrence de la chaîne originale.\\n\\nMORALITÉ\\nVous pensiez que les expressions régulières étaient l\'enfer des développeurs ?\\nVous étiez loin de la réalité, c\'est pire :). J\'ai perdu une journée sur ce\\nproblème, et c\'est finalement un rapport de bug\\n[https://bugzilla.mozilla.org/show_bug.cgi?id=837154]qui m\'a permis de connaître\\nla solution ce matin au réveil (merci Sean Stangl). Mon conseil est de tout de\\nmême vous mettre aux expressions régulières car elles sont vraiment puissantes,\\nle tout est de bien les comprendre.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc141:JSON.parse('{"path":"contents/pages/fr/blog/systeme_template_ideal.html","title":"Le système de template idéal","description":"L\'utilisation d\'un système de template est très avantageuse, mais apporte également d\'autres problématiques. L\'existant ne me satisfait pas vraiment, voyons pourquoi et comment faire mieux.","shortTitle":"Systèmes de template","shortDesc":"En savoir plus sur les systèmes de template","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLE SYSTÈME DE TEMPLATE IDÉAL\\nL\'utilisation d\'un système de template est très avantageuse, mais apporte\\négalement d\'autres problématiques. L\'existant ne me satisfait pas vraiment,\\nvoyons pourquoi et comment faire mieux.\\n\\nLES SYSTÈMES DE TEMPLATE\\nIl existe de nombreux systèmes de templating pour chaque langage de\\nprogrammation utilisé pour faire du web. Parmi eux ont peut citer Smarty,\\nTempleet pour PHP, Mustache pour Javascript etc...\\n\\nAVANTAGES\\nLes avantages d\'un système de template sont avant tout une bonne séparation du\\ncode HTML et du code PHP/Javascript. De cette façon, un intégrateur HTML/CSS\\npeut intervenir sans avoir à toucher au PHP ce qui est un confort pour lui et\\nune sécurité pour le développeur back-end. Certains diront que PHP seul, par\\nexemple, est un moteur de template. C\'est vrai. Mais utilisé de manière\\nrigoureuse. Malheureusement, peu de gens sont capable de s\'imposer un cadre\\nstrict sans que ce dernier ne soit imposé.\\n\\nUn autre avantage de cette séparation est que si vous mettez en place un cache\\nd\'OPCode pour votre PHP sur un serveur avec peu de RAM, vous permettrez une\\nexécution plus rapide de votre PHP car cette RAM ne sera pas encombrée pas du\\nHTML.\\n\\nINCONVÉNIENTS\\nParmi les inconvénients, la majeure partie des systèmes de templating (voire\\ntous) fonctionnent de manière bloquante. Ils chargent la totalité du template,\\nutilisent les expressions régulières pour matcher les variables à remplacer et\\nretournent une variable avec le texte issu de ce processus. Ce qui signifie\\nqu\'entre le moment où le template est lu et celui où il est retourné, rien n\'est\\nenvoyé au client.\\n\\nEn faisant du templating avec PHP, le code HTML est envoyé au client au fur et à\\nmesure qu\'il est interprété par PHP. Ainsi, Dès le premier octet lu, PHP est\\nsusceptible d\'envoyer des données au client. De ce fait, la RAM est moins\\nutilisée pour stocker de gros volumes de texte comme pour les systèmes de\\ntemplate. Vu le poids grandissant des pages, on comprend le problème pour des\\nsites à fort trafic.\\n\\nLa lenteur est aussi un problème. En partie à cause de cet aspect bloquant, mais\\naussi à cause de l\'enregistrement des templates sur le disque. Si vous avez\\nbeaucoup de RAM, alors, la solution du templating PHP avec le cache d\'OPCode\\ndevient une feature et booste les performances d\'affichage de vos sites. Vous\\npouvez obtenir le même résultat en cachant vos templates en RAM ou en les\\nmettant sur un RAMDisk, mais c\'est une manipulation supplémentaire qui est\\nrarement faîte dans les faits.\\n\\nEnfin, malheureusement, la plupart des systèmes de template vont trop loin. A\\nmon sens, il ne faut pas remplacer les langages de programmation dans ces\\nsystèmes et se contenter de faire du remplacement et non des appels de fonction,\\ndes expressions et toutes les autres aberrations qu\'on peut trouver dans ces\\noutils. C\'est la philosophie que j\'ai reprise quand j\'ai créé le système de\\ntemplate de XCMS [http://www.elitwork.com/xcms_template.html].\\n\\nLE SYSTÈME DE TEMPLATE IDÉAL\\nVous l\'aurez compris, je trouve qu\'un système de template c\'est bien, mais que\\nles systèmes existants sont mauvais (y compris le mien, qui date un peu). Mais\\ntout n\'est pas perdu, je pense qu\'il est possible de créer le système de\\ntemplating idéal.\\n\\nCROSS-LANGAGE\\nUn bon système de template n\'est pas dépendant d\'un langage en particulier\\n(Javascript/PHP) et doit être implémentable et interchangeable de façon neutre\\ndans chaque langage. Ce qui signifie qu\'il faut éviter tout référence aux\\nfonctions internes de chaque langage. Cela rejoint le fait que pour moi, un\\nsystème de template ne doit faire que du remplacement de variables.\\n\\nDe plus, rien ne nous empêche de faire de l\'appel de fonction grâce aux\\nsetters/getters (binding) et donc d\'implémenter des comportements plus fun sans\\nproblème et sans complexifier le système de template.\\n\\nAUSSI BIEN CÔTÉ SERVEUR QUE CLIENT\\nUn système de template doit être utilisable aussi bien côté serveur que côté\\nclient. Cela signifie qu\'il doit pouvoir être chargé par le parseur HTML du\\nnavigateur avant d\'être complété grâce au DOM. C\'est ce que propose DOM template\\n[https://github.com/joewalker/domtemplate], mais je ne suis pas d\'accord avec ce\\ndernier sur certains points. Il faut que le HTML du template soit valide en tout\\npoint. Or, il utilise des attributs du genre if=\\"macondition\\" qui ne sont pas\\nstandards.\\n\\nA mon sens, le template idéal utilise les attributs data-*. On pourrait imaginer\\ndes templates du genre :\\n\\n<div data-tpl-if=\\"articles.length\\" data-tpl-loop=\\"articles\\"> \\n <article>\\n <h1 data-tpl-cdata=\\"articles:title\\"></h1>\\n <p data-tpl-cdata=\\"articles:description\\"></p> \\n <p data-tpl-pcdata=\\"articles:content\\"></p>\\n <p><a data-tpl-att-href=\\"articles:href\\" data-tpl-att-title=\\"i18n.read_link_title\\" data-tpl-content=\\"i18n.read_link\\"></a></p> \\n</article>\\n</div>\\n\\nVous avez compris l\'idée si vous êtes familier des systèmes de template. Ce HTML\\nest tout à fait valide et peut tout aussi bien être traité côté client que côté\\nserveur avec une API de type DOM ou en faisant du parsing voire avec des\\nexpressions régulières mais nous avons déjà vu que c\'était le mal.\\n\\nAutre avantage, cela rend les templates éditables directement dans un éditeur\\nHTML WYSIWYG ou de code source avec la coloration syntaxique qui va bien sans\\neffort supplémentaire. On pourrait même imaginer ajouter une extension à un\\néditeur existant pour remplir les données à des fins de test de rendu des\\ntemplates.\\n\\nEnfin, il est tout à fait possible de générer le contenu du template côté\\nserveur mais en laissant les attributs data-tpl-*, puis de mettre à jour ce\\ndernier en Javascript côté client.\\n\\nSTREAMABLE\\nEnfin, le contenu généré par le système de template doit être streamé. C\'est à\\ndire qu\'il doit recevoir en entrée un ou plusieurs input streams et fournir un\\noutput stream en sortie afin de pouvoir lire les templates, les compléter et les\\nenvoyer au flux.\\n\\nPour ce faire, le template doit être parsé avec une API de parsing XML/SGML de\\ntype évènementiel ou directement caractères par caractères.\\n\\n * dans n\'importe quel attribut de type data-tpl-*, si la variable existe, on la\\n   traite, sinon, on stoppe la sortie en attendant la lecture de toutes les\\n   variables du template et on reprend quand c\'est terminé le test d\'existance.\\n   Pendant ce temps, on continue de lire le template et on indexe les autres\\n   appels au système de template demandés par les attributs de type data-tpl-*. \\n * pour un simple remplacement de valeur, on n\'a qu\'a remplacer la valeur. \\n * pour une condition, si elle est vraie, on continue à traiter et envoyer le\\n   template. Si elle est fausse, on stoppe le traitement des attributs\\n   data-tpl-* tant qu\'on ne rencontre pas la balise fermante. \\n * pour une boucle, on stoppe la sortie, on lit la totalité de la boucle jusqu\'à\\n   la balise fermante. Pour chaque entrée, on remplit le template de la boucle\\n   et on le dirige vers la sortie. \\n\\nDe cette façon, on optimise l\'utilisation de la mémoire, on envoie ce qui doit\\nl\'être sans attendre, bref, le système idéal. C\'est un peu ma commande pour\\nNoël, soyez chic, faîtes-le ! Ne m\'obligez pas à le faire moi-même en mode bande\\nde nerd à moi tout seul (je m\'fend la gueule !).\\n\\nPS: Si vous créez cela, appelez-le SantaTPL ;-).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc142:JSON.parse('{"path":"contents/pages/articles-systeme_template_ideal.html","title":"Le système de template idéal","description":"L\'utilisation d\'un système de template est très avantageuse, mais apporte également d\'autres problématiques. L\'existant ne me satisfait pas vraiment, voyons pourquoi et comment faire mieux.","shortTitle":"Systèmes de template","shortDesc":"En savoir plus sur les systèmes de template","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nLE SYSTÈME DE TEMPLATE IDÉAL\\nL\'utilisation d\'un système de template est très avantageuse, mais apporte\\négalement d\'autres problématiques. L\'existant ne me satisfait pas vraiment,\\nvoyons pourquoi et comment faire mieux.\\n\\nLES SYSTÈMES DE TEMPLATE\\nIl existe de nombreux systèmes de templating pour chaque langage de\\nprogrammation utilisé pour faire du web. Parmi eux ont peut citer Smarty,\\nTempleet pour PHP, Mustache pour Javascript etc...\\n\\nAVANTAGES\\nLes avantages d\'un système de template sont avant tout une bonne séparation du\\ncode HTML et du code PHP/Javascript. De cette façon, un intégrateur HTML/CSS\\npeut intervenir sans avoir à toucher au PHP ce qui est un confort pour lui et\\nune sécurité pour le développeur back-end. Certains diront que PHP seul, par\\nexemple, est un moteur de template. C\'est vrai. Mais utilisé de manière\\nrigoureuse. Malheureusement, peu de gens sont capable de s\'imposer un cadre\\nstrict sans que ce dernier ne soit imposé.\\n\\nUn autre avantage de cette séparation est que si vous mettez en place un cache\\nd\'OPCode pour votre PHP sur un serveur avec peu de RAM, vous permettrez une\\nexécution plus rapide de votre PHP car cette RAM ne sera pas encombrée pas du\\nHTML.\\n\\nINCONVÉNIENTS\\nParmi les inconvénients, la majeure partie des systèmes de templating (voire\\ntous) fonctionnent de manière bloquante. Ils chargent la totalité du template,\\nutilisent les expressions régulières pour matcher les variables à remplacer et\\nretournent une variable avec le texte issu de ce processus. Ce qui signifie\\nqu\'entre le moment où le template est lu et celui où il est retourné, rien n\'est\\nenvoyé au client.\\n\\nEn faisant du templating avec PHP, le code HTML est envoyé au client au fur et à\\nmesure qu\'il est interprété par PHP. Ainsi, Dès le premier octet lu, PHP est\\nsusceptible d\'envoyer des données au client. De ce fait, la RAM est moins\\nutilisée pour stocker de gros volumes de texte comme pour les systèmes de\\ntemplate. Vu le poids grandissant des pages, on comprend le problème pour des\\nsites à fort trafic.\\n\\nLa lenteur est aussi un problème. En partie à cause de cet aspect bloquant, mais\\naussi à cause de l\'enregistrement des templates sur le disque. Si vous avez\\nbeaucoup de RAM, alors, la solution du templating PHP avec le cache d\'OPCode\\ndevient une feature et booste les performances d\'affichage de vos sites. Vous\\npouvez obtenir le même résultat en cachant vos templates en RAM ou en les\\nmettant sur un RAMDisk, mais c\'est une manipulation supplémentaire qui est\\nrarement faîte dans les faits.\\n\\nEnfin, malheureusement, la plupart des systèmes de template vont trop loin. A\\nmon sens, il ne faut pas remplacer les langages de programmation dans ces\\nsystèmes et se contenter de faire du remplacement et non des appels de fonction,\\ndes expressions et toutes les autres aberrations qu\'on peut trouver dans ces\\noutils. C\'est la philosophie que j\'ai reprise quand j\'ai créé le système de\\ntemplate de XCMS [http://www.elitwork.com/xcms_template.html].\\n\\nLE SYSTÈME DE TEMPLATE IDÉAL\\nVous l\'aurez compris, je trouve qu\'un système de template c\'est bien, mais que\\nles systèmes existants sont mauvais (y compris le mien, qui date un peu). Mais\\ntout n\'est pas perdu, je pense qu\'il est possible de créer le système de\\ntemplating idéal.\\n\\nCROSS-LANGAGE\\nUn bon système de template n\'est pas dépendant d\'un langage en particulier\\n(Javascript/PHP) et doit être implémentable et interchangeable de façon neutre\\ndans chaque langage. Ce qui signifie qu\'il faut éviter tout référence aux\\nfonctions internes de chaque langage. Cela rejoint le fait que pour moi, un\\nsystème de template ne doit faire que du remplacement de variables.\\n\\nDe plus, rien ne nous empêche de faire de l\'appel de fonction grâce aux\\nsetters/getters (binding) et donc d\'implémenter des comportements plus fun sans\\nproblème et sans complexifier le système de template.\\n\\nAUSSI BIEN CÔTÉ SERVEUR QUE CLIENT\\nUn système de template doit être utilisable aussi bien côté serveur que côté\\nclient. Cela signifie qu\'il doit pouvoir être chargé par le parseur HTML du\\nnavigateur avant d\'être complété grâce au DOM. C\'est ce que propose DOM template\\n[https://github.com/joewalker/domtemplate], mais je ne suis pas d\'accord avec ce\\ndernier sur certains points. Il faut que le HTML du template soit valide en tout\\npoint. Or, il utilise des attributs du genre if=\\"macondition\\" qui ne sont pas\\nstandards.\\n\\nA mon sens, le template idéal utilise les attributs data-*. On pourrait imaginer\\ndes templates du genre :\\n\\n<div data-tpl-if=\\"articles.length\\" data-tpl-loop=\\"articles\\"> \\n <article>\\n <h1 data-tpl-cdata=\\"articles:title\\"></h1>\\n <p data-tpl-cdata=\\"articles:description\\"></p> \\n <p data-tpl-pcdata=\\"articles:content\\"></p>\\n <p><a data-tpl-att-href=\\"articles:href\\" data-tpl-att-title=\\"i18n.read_link_title\\" data-tpl-content=\\"i18n.read_link\\"></a></p> \\n</article>\\n</div>\\n\\nVous avez compris l\'idée si vous êtes familier des systèmes de template. Ce HTML\\nest tout à fait valide et peut tout aussi bien être traité côté client que côté\\nserveur avec une API de type DOM ou en faisant du parsing voire avec des\\nexpressions régulières mais nous avons déjà vu que c\'était le mal.\\n\\nAutre avantage, cela rend les templates éditables directement dans un éditeur\\nHTML WYSIWYG ou de code source avec la coloration syntaxique qui va bien sans\\neffort supplémentaire. On pourrait même imaginer ajouter une extension à un\\néditeur existant pour remplir les données à des fins de test de rendu des\\ntemplates.\\n\\nEnfin, il est tout à fait possible de générer le contenu du template côté\\nserveur mais en laissant les attributs data-tpl-*, puis de mettre à jour ce\\ndernier en Javascript côté client.\\n\\nSTREAMABLE\\nEnfin, le contenu généré par le système de template doit être streamé. C\'est à\\ndire qu\'il doit recevoir en entrée un ou plusieurs input streams et fournir un\\noutput stream en sortie afin de pouvoir lire les templates, les compléter et les\\nenvoyer au flux.\\n\\nPour ce faire, le template doit être parsé avec une API de parsing XML/SGML de\\ntype évènementiel ou directement caractères par caractères.\\n\\n * dans n\'importe quel attribut de type data-tpl-*, si la variable existe, on la\\n   traite, sinon, on stoppe la sortie en attendant la lecture de toutes les\\n   variables du template et on reprend quand c\'est terminé le test d\'existance.\\n   Pendant ce temps, on continue de lire le template et on indexe les autres\\n   appels au système de template demandés par les attributs de type data-tpl-*. \\n * pour un simple remplacement de valeur, on n\'a qu\'a remplacer la valeur. \\n * pour une condition, si elle est vraie, on continue à traiter et envoyer le\\n   template. Si elle est fausse, on stoppe le traitement des attributs\\n   data-tpl-* tant qu\'on ne rencontre pas la balise fermante. \\n * pour une boucle, on stoppe la sortie, on lit la totalité de la boucle jusqu\'à\\n   la balise fermante. Pour chaque entrée, on remplit le template de la boucle\\n   et on le dirige vers la sortie. \\n\\nDe cette façon, on optimise l\'utilisation de la mémoire, on envoie ce qui doit\\nl\'être sans attendre, bref, le système idéal. C\'est un peu ma commande pour\\nNoël, soyez chic, faîtes-le ! Ne m\'obligez pas à le faire moi-même en mode bande\\nde nerd à moi tout seul (je m\'fend la gueule !).\\n\\nPS: Si vous créez cela, appelez-le SantaTPL ;-).\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc143:JSON.parse('{"path":"contents/pages/fr/blog/tank_arena_html5.html","title":"Jeux HTML5 : Défi Tank Arena","description":"Si vous avez déjà joué à Tank Arena, alors vous savez que c\'est un excellent jeu. Malheureusement, il n\'existe que pour Windows. Relevons le défi d\'en faire un jeu HTML5 !","shortTitle":"Tank Arena HTML5","shortDesc":"En savoir plus sur ce projet","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nJEUX HTML5 : DÉFI TANK ARENA\\n⚠ Attention: Cet article est ancien et son contenu n\'est plus d\'actualité. Je ne\\nle conserve que pour des raisons historiques.\\n\\nSi vous avez déjà joué à Tank Arena, alors vous savez que c\'est un excellent\\njeu. Malheureusement, il n\'existe que pour Windows. Relevons le défi d\'en faire\\nun jeu HTML5 !\\n\\n Mon expérience du Casse Brique [html5_casse_brique.html]a confirmé mon\\nintuition première : développer des jeux HTML5, c\'est fun ! Après avoir goûté à \\nBrowserQuest [http://browserquest.mozilla.org/], je me suis dit que le web était\\nprêt pour embrasser l\'univers du jeu et j\'ai eu envie de m\'y frotter.\\nMalheureusement, créer un jeu de toute pièce plus évolué qu\'un simple Casse\\nBrique nécessite de monter une équipe composée de graphistes, de scenaristes et\\nde développeurs.\\n\\nJe n\'ai pas vocation à vendre ces jeux au travers de mon entreprise, mais plutôt\\nà les créer pour le fun, à mon rythme et à les proposer à la communauté. Bref,\\nje ne peux pas embaucher un graphiste pour cela.\\n\\nC\'est alors que j\'ai pensé à ce vieux freeware avec lequel j\'ai pas mal joué\\nétant plus jeune (alors en shareware) et qui me plaisait beaucoup. J\'ai donc\\ncontacté les auteurs de Tank Arena, Jorrit Rouwe et Dennis Medema et ils ont\\ngentiment accepté que ce projet démarre avec pour seule condition, une\\nutilisation non-commerciale ce qui me va tout à fait. Jorrit m\'a donc transmis\\nles sources du jeu (écrit originellement en C). Un gros travail de conversion\\ndes fichiers existants en fichiers utilisables pour le web a donc commencé.\\n\\nDeux jours plus tard, me voici donc avec une collection de sprites\\n[https://github.com/nfroidure/TankArena/tree/master/www/sprites]sous licence\\nCreative Common Non-Commercial Attribution. Il ne me reste plus qu\'à coder :D.\\n\\nPLANTONS LE DÉCOR\\n Tank Arena [http://www.jrouwe.nl/tank/]est un jeu aux graphismes 2D vus de\\ndessus. Le joueur incarne un tank, un bateau ou un avion et évolue en 3D (les\\navions surtout). En mode solo (ou en coopération), il accomplit des missions\\ncontre l\'ordinateur, en mode multijoueur, il propose des battles ou des courses.\\nAfin de bien comprendre tout l\'article, je vous conseille d\'y jouer un peu, de\\ncette façon vous aurez une bonne vision des raisons qui expliquent les choix que\\nj\'expose ci-dessous.\\n\\nJe ne sais pas encore ce que ma version proposera, mais j\'aimerai bien proposer\\nun mode mission et un mode multijoueur (avec les web sockets). Dans tous les\\ncas, les premiers prototypes [http://tank.elitwork.com]que je vais réaliser vont\\nsurtout consister à trouver la meilleure solution technique pour afficher le\\nmonde et ce qu\'il contient.\\n\\nMON PLAN D\'ACTION\\nJ\'ai contacté le développeur de Browser Quest [http://twitter.com/whatthefranck]\\net lui ai posé quelques questions à propos de la façon dont il avait travaillé\\nsur le projet. Je voulais surtout savoir si ils avaient rencontré des problèmes\\nde performance. Je ne veux surtout pas me retrouver avec un jeu injouable à\\ncause d\'une architecture mal pensée. En effet, là ou le code natif permet\\nquelques écarts, la programmation d\'un jeu avec HTML5 / Javascript nécessite de\\nbien penser aux performances.\\n\\nFinalement, un jeu de ce type se compose d\'un plan (avec étages dans notre cas)\\nsur lequel se trouvent des objets dont un certain nombre sont animés ou se\\ndéplacent contrôlés par le joueur ou par l\'ordinateur. Chaque objet est donc\\naffiché en fonction d\'une part de son état (position, orientation, niveau z\\netc..) et/ou du temps. Le jeu se résumera donc à une boucle qui parcourera\\nsuccessivement tous les objets se trouvant sur le plan pour les modifier en\\nfonction du temps pour les éléments dynamiques et pour les dessiner en fonction\\ndu point de vue actuel sur ce plan.\\n\\nLE PLAN\\nLe plan peut être subdivisé en cases dont chacune contient une texture. Ces\\ntextures sont le plus souvent figées, il n\'est donc pas nécessaire d\'imprimer\\nces dernières dans un Canvas à chaque fois. Par exemple, dans Browser Quest, la\\nmap n\'est imprimée qu\'un fois dans un Canvas et n\'est réimprimée que lorsque le\\npersonnage change de vue. Dans mon cas, le problème est que la carte doit\\ndéfiler en même temps que le tank, cependant, afin d\'économiser du CPU, je vais\\npartir sur une solution un peu spéciale, j\'espère que ça marchera.\\n\\nL\'idée est d\'imprimer tous les éléments statiques dans un Canvas de la taille de\\nla carte (donc trop grand pour être affiché en entier. Ensuite, je vais choisir\\nentre deux solutions : la première, utiliser la propriété background dans une\\nélément <div> grâce à l\'export sous forme de dataUri de l\'image composée par le\\nCanvas, la seconde, est de mettre le Canvas dans un div et de scroller le div en\\nmême temps que le personnage évolue. J\'espère que l\'une des deux solutions sera\\nconcluante.\\n\\nActuellement, je penche plutôt pour la seconde car elle me permettrait d\'animer\\ncertaines textures (vagues dans l\'eau, vent dans les arbres ou autre), je me\\nvois mal récupérer une dataURI a chaque frame d\'une animation pour l\'injecter\\ndans le background d\'une div.\\n\\nLES TANKS, BÂTIMENTS ET AUTRES OBJETS\\nEnsuite, sur la carte, il y a des bâtiments qui eux aussi sont statiques, mais\\nqui peuvent changer d\'état et donc d\'apparence. De plus, les tanks peuvent, en\\nfonction de leur position en z apparaître au dessus ou en dessous du bâtiment.\\n\\nDeux solutions se présentent à moi. La première est de décider de tout\\nredessiner à chaque boucle de jeu dans un unique canvas, la seconde est de\\nsuperposer plusieurs éléments <canvas>. La deuxième solution me paraît plus\\nsouhaitable, mais je dois déterminer combien d\'éléments <canvas> je dois\\nsuperposer.\\n\\nLes tanks terrestres ou maritimes sont au niveau 0 (sol), les bâtiments sont au\\nniveau 0 pour ceux en dessous desquels on ne peut passer ou au niveau 1 pour les\\nautres, sachant que pour les bâtiments sous lesquels on peut passer, bien qu\'il\\nne sont représentés graphiquement qu\'au niveau 1, il ont une présence physique\\nau niveau 0 qui sera à prendre en compte pour les collisions.\\n\\nJe serais bien tenté par la disposition suivante :\\n\\n * canvas de fond statique (Niveau 0) : les éléments sont imprimés une fois en\\n   debut de jeu, ceux dont l\'état change sont ré-imprimé à ce moment là et\\n   uniquement la zone concernée. On y imprimerai les textures de fond et les\\n   batiments pleins (on ne peut pas passer en dessous). \\n * canvas dynamique (Niveau 0) : on y imprimera les animations des textures puis\\n   les tanks terrestres et maritimes y seront imprimés à chaque boucle du jeu,\\n   mais uniquement pour la zone de la carte affichée à l\'écran. \\n * canvas aerien statique : on y imprimera les bâtiment en dessous desquels un\\n   tank peut passer avec une gestion du même type que le canvas de fond. \\n * canvas aerien multi-niveaux : on y imprimera tous les autres niveaux en\\n   parcourant récursivement le tableau des objets dynamiques pour chaque étage\\n   de jeu. En effet, pour tous les autres étages de jeu, il n\'y a plus que des\\n   éléments dynamiques et il ne serait donc pas opportun de créer d\'autres\\n   éléments Canvas. \\n\\nJ\'oubliais, dans le Tank Arena original, il existe des \\"trous\\" dans lesquels on\\npeut tomber. Le niveau z peut donc être négatif. Pour autant, on ne le prévoit\\npas dans la superposition des éléments <canvas> car les trous ne sont pas\\nrecouverts et il nous suffira d\'imprimer les sprites qui vont bien pour donner\\nl\'impression que le Tank est entrain de tomber.\\n\\nLES SPRITES\\nLors de la refonte des graphismes, je ne savais pas trop comment organiser les\\nsprites pour optimiser la gestion des images dans le jeu. J\'ai pris le parti de\\nréunir les sprites relatif à un même tank au sein d\'un seul fichier. De réunir\\nles structures ensemble, tout comme les bâtiments, les murs, les arbres etc...\\nDe cette façon, les sprites du jeu sont réunis dans un total de 36 fichiers ce\\nqui me parrait pas mal en terme d\'organisation.\\n\\nJ\'imagine que je devrais les charger dynamiquement au chargement du jeu afin de\\nles avoir sous la main. A savoir, le jeu original utilisait des sprites de\\n33x33pixels, je vais donc rester sur ça, mais je m\'appliquerait pour que cela\\nsoit modifiable afin que je puisse réutiliser une bonne part du code dans\\nd\'autres jeux sans forcément rester sur ce choix là.\\n\\nTYPES D\'OBJETS\\nFinalement, on distingue peu de types d\'objets différents :\\n\\n * le terrain : chaque subdivision du plan de 33x33 pixels contient une image\\n   représentant le terrain. Je ne créerai pas d\'objets pour ceux-ci, mais\\n   simplement un tableau indiquant quelle texture doit y être insérée. Ce\\n   tableau servira aussi à contenir les éléments se trouvant dans chacune de ces\\n   subdivisions. \\n * les objets statiques : il peuvent être de niveau 0 et/ou 1. Ils ont des bords\\n   physiques avec lesquels des objets mobiles peuvent entrer en collision. \\n * les objets dynamiques : il peuvent être de niveau n (entier) et peuvent\\n   entrer en collision avec des autres objets du même type ou des objets\\n   statiques. \\n\\nEn revanche, chaque objet a des types de collision différents. En fonction des\\nformes, on aura divers choix :\\n\\n * un objet suffisamment petit pourra être considéré comme un point. Je pense à\\n   un tir principalement. \\n * un objet suffisamment rond pourra être considéré comme un rond (tank ou\\n   bâtiment plutôt rond, plot). \\n * un objet suffisamment carré pourra être considéré comme une carré (bâtiment\\n   plein) ou un ensemble de carrés (bâtiments sous lequel on peut passer). \\n\\nChaque objet du monde devra donc avoir une propriété contenant un tableau de ses\\ncontours physiques et de leur type. Ajoutons enfin le fait qu\'il nous faudra\\ntoujours vérifier que les objets mobiles soient bien à l\'intérieur des limites\\ndu jeu.\\n\\nOn distinguera les objets qui devront être repositionnés (tanks) des objets qui\\nseront détruits (tirs) à la collision.\\n\\nPar convention, on déléguera aux objets mobiles la gestion de leur colision avec\\nles objets statiques et mobiles qui les entourent. En cas de collision entre\\ndeux objets mobiles, chacun de ces objets aura la responsabilité de calculer sa\\npropre réaction. Les tirs sont des objets mobiles particuliers, les autres\\nobjets mobiles ne s\'en préoccuperons pas, c\'est le tir lui même qui infligera\\nses dégâts aux objets qu\'il atteindra.\\n\\nLes objets auront également sous leur responsabilité de déclarer leur propre\\noccupation de l\'espace. En effet, afin d\'affiner la gestion des collisions,\\nchaque objet devra déclarer quelles subdivisions de 33x33 pixels du plan ils\\noccupent afin de permettre de mieux cibler les tests à effectuer pour calculer\\nles collisions. Un objet mobile calculera donc sa collision avec les objets\\ndéclarés dans les subdivisions du plan qu\'il occupe (1 à 4 dans la majorité des\\ncas). Cela permettra de réduire les calculs de collision à effectuer.\\n\\nChaque objet mobile/animé a la responsabilité d\'exposer une méthode fonction du\\ntemps que la boucle de jeu se chargera d\'appeler afin de procéder à un\\nchangement d\'état/de position/de direction etc...\\n\\nEnfin, chaque objet fournit une méthode permettant d\'imprimer sa propre\\nreprésentation graphique et ce pour chaque canvas concerné. Pour les objets\\nstatiques cette méthode sera appelée au démarrage et à chaque changement d\'état,\\npour les objets mobiles à chaque boucle si il se trouve dans la vue actuelle du\\njeu.\\n\\nOÙ , QUAND ET COMMENT ?\\n Ce projet se trouve sur GitHub [https://github.com/nfroidure/TankArena], il\\nsera développé pendant mon temps libre, sous licence GNU/GPL. Vous pouvez\\nparticiper si vous le souhaitez en le forkant et en me proposant un pull\\nrequest. De mon côté, je tenterai de prendre le temps d\'expliquer son code sur\\nce blog pour vous mettre le pied à l\'étrier.\\n\\nA vos éditeurs de code :).\\n\\nEdit : Le jeu est déjà bien avancé, j\'ai créé un petit article sur les\\ncollisions 2D [gestion_collisions_html5_canvas.html]que j\'ai dû fouillé pour\\ncoder les premières versions.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc144:JSON.parse('{"path":"contents/pages/articles-tank_arena_html5.html","title":"Jeux HTML5 : Défi Tank Arena","description":"Si vous avez déjà joué à Tank Arena, alors vous savez que c\'est un excellent jeu. Malheureusement, il n\'existe que pour Windows. Relevons le défi d\'en faire un jeu HTML5 !","shortTitle":"Tank Arena HTML5","shortDesc":"En savoir plus sur ce projet","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nJEUX HTML5 : DÉFI TANK ARENA\\n⚠ Attention: Cet article est ancien et son contenu n\'est plus d\'actualité. Je ne\\nle conserve que pour des raisons historiques.\\n\\nSi vous avez déjà joué à Tank Arena, alors vous savez que c\'est un excellent\\njeu. Malheureusement, il n\'existe que pour Windows. Relevons le défi d\'en faire\\nun jeu HTML5 !\\n\\n Mon expérience du Casse Brique [html5_casse_brique.html]a confirmé mon\\nintuition première : développer des jeux HTML5, c\'est fun ! Après avoir goûté à \\nBrowserQuest [http://browserquest.mozilla.org/], je me suis dit que le web était\\nprêt pour embrasser l\'univers du jeu et j\'ai eu envie de m\'y frotter.\\nMalheureusement, créer un jeu de toute pièce plus évolué qu\'un simple Casse\\nBrique nécessite de monter une équipe composée de graphistes, de scenaristes et\\nde développeurs.\\n\\nJe n\'ai pas vocation à vendre ces jeux au travers de mon entreprise, mais plutôt\\nà les créer pour le fun, à mon rythme et à les proposer à la communauté. Bref,\\nje ne peux pas embaucher un graphiste pour cela.\\n\\nC\'est alors que j\'ai pensé à ce vieux freeware avec lequel j\'ai pas mal joué\\nétant plus jeune (alors en shareware) et qui me plaisait beaucoup. J\'ai donc\\ncontacté les auteurs de Tank Arena, Jorrit Rouwe et Dennis Medema et ils ont\\ngentiment accepté que ce projet démarre avec pour seule condition, une\\nutilisation non-commerciale ce qui me va tout à fait. Jorrit m\'a donc transmis\\nles sources du jeu (écrit originellement en C). Un gros travail de conversion\\ndes fichiers existants en fichiers utilisables pour le web a donc commencé.\\n\\nDeux jours plus tard, me voici donc avec une collection de sprites\\n[https://github.com/nfroidure/TankArena/tree/master/www/sprites]sous licence\\nCreative Common Non-Commercial Attribution. Il ne me reste plus qu\'à coder :D.\\n\\nPLANTONS LE DÉCOR\\n Tank Arena [http://www.jrouwe.nl/tank/]est un jeu aux graphismes 2D vus de\\ndessus. Le joueur incarne un tank, un bateau ou un avion et évolue en 3D (les\\navions surtout). En mode solo (ou en coopération), il accomplit des missions\\ncontre l\'ordinateur, en mode multijoueur, il propose des battles ou des courses.\\nAfin de bien comprendre tout l\'article, je vous conseille d\'y jouer un peu, de\\ncette façon vous aurez une bonne vision des raisons qui expliquent les choix que\\nj\'expose ci-dessous.\\n\\nJe ne sais pas encore ce que ma version proposera, mais j\'aimerai bien proposer\\nun mode mission et un mode multijoueur (avec les web sockets). Dans tous les\\ncas, les premiers prototypes [http://tank.elitwork.com]que je vais réaliser vont\\nsurtout consister à trouver la meilleure solution technique pour afficher le\\nmonde et ce qu\'il contient.\\n\\nMON PLAN D\'ACTION\\nJ\'ai contacté le développeur de Browser Quest [http://twitter.com/whatthefranck]\\net lui ai posé quelques questions à propos de la façon dont il avait travaillé\\nsur le projet. Je voulais surtout savoir si ils avaient rencontré des problèmes\\nde performance. Je ne veux surtout pas me retrouver avec un jeu injouable à\\ncause d\'une architecture mal pensée. En effet, là ou le code natif permet\\nquelques écarts, la programmation d\'un jeu avec HTML5 / Javascript nécessite de\\nbien penser aux performances.\\n\\nFinalement, un jeu de ce type se compose d\'un plan (avec étages dans notre cas)\\nsur lequel se trouvent des objets dont un certain nombre sont animés ou se\\ndéplacent contrôlés par le joueur ou par l\'ordinateur. Chaque objet est donc\\naffiché en fonction d\'une part de son état (position, orientation, niveau z\\netc..) et/ou du temps. Le jeu se résumera donc à une boucle qui parcourera\\nsuccessivement tous les objets se trouvant sur le plan pour les modifier en\\nfonction du temps pour les éléments dynamiques et pour les dessiner en fonction\\ndu point de vue actuel sur ce plan.\\n\\nLE PLAN\\nLe plan peut être subdivisé en cases dont chacune contient une texture. Ces\\ntextures sont le plus souvent figées, il n\'est donc pas nécessaire d\'imprimer\\nces dernières dans un Canvas à chaque fois. Par exemple, dans Browser Quest, la\\nmap n\'est imprimée qu\'un fois dans un Canvas et n\'est réimprimée que lorsque le\\npersonnage change de vue. Dans mon cas, le problème est que la carte doit\\ndéfiler en même temps que le tank, cependant, afin d\'économiser du CPU, je vais\\npartir sur une solution un peu spéciale, j\'espère que ça marchera.\\n\\nL\'idée est d\'imprimer tous les éléments statiques dans un Canvas de la taille de\\nla carte (donc trop grand pour être affiché en entier. Ensuite, je vais choisir\\nentre deux solutions : la première, utiliser la propriété background dans une\\nélément <div> grâce à l\'export sous forme de dataUri de l\'image composée par le\\nCanvas, la seconde, est de mettre le Canvas dans un div et de scroller le div en\\nmême temps que le personnage évolue. J\'espère que l\'une des deux solutions sera\\nconcluante.\\n\\nActuellement, je penche plutôt pour la seconde car elle me permettrait d\'animer\\ncertaines textures (vagues dans l\'eau, vent dans les arbres ou autre), je me\\nvois mal récupérer une dataURI a chaque frame d\'une animation pour l\'injecter\\ndans le background d\'une div.\\n\\nLES TANKS, BÂTIMENTS ET AUTRES OBJETS\\nEnsuite, sur la carte, il y a des bâtiments qui eux aussi sont statiques, mais\\nqui peuvent changer d\'état et donc d\'apparence. De plus, les tanks peuvent, en\\nfonction de leur position en z apparaître au dessus ou en dessous du bâtiment.\\n\\nDeux solutions se présentent à moi. La première est de décider de tout\\nredessiner à chaque boucle de jeu dans un unique canvas, la seconde est de\\nsuperposer plusieurs éléments <canvas>. La deuxième solution me paraît plus\\nsouhaitable, mais je dois déterminer combien d\'éléments <canvas> je dois\\nsuperposer.\\n\\nLes tanks terrestres ou maritimes sont au niveau 0 (sol), les bâtiments sont au\\nniveau 0 pour ceux en dessous desquels on ne peut passer ou au niveau 1 pour les\\nautres, sachant que pour les bâtiments sous lesquels on peut passer, bien qu\'il\\nne sont représentés graphiquement qu\'au niveau 1, il ont une présence physique\\nau niveau 0 qui sera à prendre en compte pour les collisions.\\n\\nJe serais bien tenté par la disposition suivante :\\n\\n * canvas de fond statique (Niveau 0) : les éléments sont imprimés une fois en\\n   debut de jeu, ceux dont l\'état change sont ré-imprimé à ce moment là et\\n   uniquement la zone concernée. On y imprimerai les textures de fond et les\\n   batiments pleins (on ne peut pas passer en dessous). \\n * canvas dynamique (Niveau 0) : on y imprimera les animations des textures puis\\n   les tanks terrestres et maritimes y seront imprimés à chaque boucle du jeu,\\n   mais uniquement pour la zone de la carte affichée à l\'écran. \\n * canvas aerien statique : on y imprimera les bâtiment en dessous desquels un\\n   tank peut passer avec une gestion du même type que le canvas de fond. \\n * canvas aerien multi-niveaux : on y imprimera tous les autres niveaux en\\n   parcourant récursivement le tableau des objets dynamiques pour chaque étage\\n   de jeu. En effet, pour tous les autres étages de jeu, il n\'y a plus que des\\n   éléments dynamiques et il ne serait donc pas opportun de créer d\'autres\\n   éléments Canvas. \\n\\nJ\'oubliais, dans le Tank Arena original, il existe des \\"trous\\" dans lesquels on\\npeut tomber. Le niveau z peut donc être négatif. Pour autant, on ne le prévoit\\npas dans la superposition des éléments <canvas> car les trous ne sont pas\\nrecouverts et il nous suffira d\'imprimer les sprites qui vont bien pour donner\\nl\'impression que le Tank est entrain de tomber.\\n\\nLES SPRITES\\nLors de la refonte des graphismes, je ne savais pas trop comment organiser les\\nsprites pour optimiser la gestion des images dans le jeu. J\'ai pris le parti de\\nréunir les sprites relatif à un même tank au sein d\'un seul fichier. De réunir\\nles structures ensemble, tout comme les bâtiments, les murs, les arbres etc...\\nDe cette façon, les sprites du jeu sont réunis dans un total de 36 fichiers ce\\nqui me parrait pas mal en terme d\'organisation.\\n\\nJ\'imagine que je devrais les charger dynamiquement au chargement du jeu afin de\\nles avoir sous la main. A savoir, le jeu original utilisait des sprites de\\n33x33pixels, je vais donc rester sur ça, mais je m\'appliquerait pour que cela\\nsoit modifiable afin que je puisse réutiliser une bonne part du code dans\\nd\'autres jeux sans forcément rester sur ce choix là.\\n\\nTYPES D\'OBJETS\\nFinalement, on distingue peu de types d\'objets différents :\\n\\n * le terrain : chaque subdivision du plan de 33x33 pixels contient une image\\n   représentant le terrain. Je ne créerai pas d\'objets pour ceux-ci, mais\\n   simplement un tableau indiquant quelle texture doit y être insérée. Ce\\n   tableau servira aussi à contenir les éléments se trouvant dans chacune de ces\\n   subdivisions. \\n * les objets statiques : il peuvent être de niveau 0 et/ou 1. Ils ont des bords\\n   physiques avec lesquels des objets mobiles peuvent entrer en collision. \\n * les objets dynamiques : il peuvent être de niveau n (entier) et peuvent\\n   entrer en collision avec des autres objets du même type ou des objets\\n   statiques. \\n\\nEn revanche, chaque objet a des types de collision différents. En fonction des\\nformes, on aura divers choix :\\n\\n * un objet suffisamment petit pourra être considéré comme un point. Je pense à\\n   un tir principalement. \\n * un objet suffisamment rond pourra être considéré comme un rond (tank ou\\n   bâtiment plutôt rond, plot). \\n * un objet suffisamment carré pourra être considéré comme une carré (bâtiment\\n   plein) ou un ensemble de carrés (bâtiments sous lequel on peut passer). \\n\\nChaque objet du monde devra donc avoir une propriété contenant un tableau de ses\\ncontours physiques et de leur type. Ajoutons enfin le fait qu\'il nous faudra\\ntoujours vérifier que les objets mobiles soient bien à l\'intérieur des limites\\ndu jeu.\\n\\nOn distinguera les objets qui devront être repositionnés (tanks) des objets qui\\nseront détruits (tirs) à la collision.\\n\\nPar convention, on déléguera aux objets mobiles la gestion de leur colision avec\\nles objets statiques et mobiles qui les entourent. En cas de collision entre\\ndeux objets mobiles, chacun de ces objets aura la responsabilité de calculer sa\\npropre réaction. Les tirs sont des objets mobiles particuliers, les autres\\nobjets mobiles ne s\'en préoccuperons pas, c\'est le tir lui même qui infligera\\nses dégâts aux objets qu\'il atteindra.\\n\\nLes objets auront également sous leur responsabilité de déclarer leur propre\\noccupation de l\'espace. En effet, afin d\'affiner la gestion des collisions,\\nchaque objet devra déclarer quelles subdivisions de 33x33 pixels du plan ils\\noccupent afin de permettre de mieux cibler les tests à effectuer pour calculer\\nles collisions. Un objet mobile calculera donc sa collision avec les objets\\ndéclarés dans les subdivisions du plan qu\'il occupe (1 à 4 dans la majorité des\\ncas). Cela permettra de réduire les calculs de collision à effectuer.\\n\\nChaque objet mobile/animé a la responsabilité d\'exposer une méthode fonction du\\ntemps que la boucle de jeu se chargera d\'appeler afin de procéder à un\\nchangement d\'état/de position/de direction etc...\\n\\nEnfin, chaque objet fournit une méthode permettant d\'imprimer sa propre\\nreprésentation graphique et ce pour chaque canvas concerné. Pour les objets\\nstatiques cette méthode sera appelée au démarrage et à chaque changement d\'état,\\npour les objets mobiles à chaque boucle si il se trouve dans la vue actuelle du\\njeu.\\n\\nOÙ , QUAND ET COMMENT ?\\n Ce projet se trouve sur GitHub [https://github.com/nfroidure/TankArena], il\\nsera développé pendant mon temps libre, sous licence GNU/GPL. Vous pouvez\\nparticiper si vous le souhaitez en le forkant et en me proposant un pull\\nrequest. De mon côté, je tenterai de prendre le temps d\'expliquer son code sur\\nce blog pour vous mettre le pied à l\'étrier.\\n\\nA vos éditeurs de code :).\\n\\nEdit : Le jeu est déjà bien avancé, j\'ai créé un petit article sur les\\ncollisions 2D [gestion_collisions_html5_canvas.html]que j\'ai dû fouillé pour\\ncoder les premières versions.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc145:JSON.parse('{"path":"contents/pages/fr/blog/tester_javascript_frontend.html","title":"Tester son JavaScript front end","description":"Depuis que j\'ai découvert Karma, je ne me lasse plus de convertir mes projets pour lancer les tests grâce à cet outil. Retour d\'expérience et conseils pour une utilisation pleine et entière.","shortTitle":"Test JavaScript front","shortDesc":"En savoir plus sur Karma et les tests automatisés","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nTESTER SON JAVASCRIPT FRONT END\\nDepuis que j\'ai découvert Karma, je ne me lasse plus de convertir mes projets\\npour lancer les tests grâce à cet outil. Retour d\'expérience et conseils pour\\nune utilisation pleine et entière.\\n\\n Karma Runner [https://github.com/karma-runner/]est un lanceur de tests\\nautomatisés. Sa particularité est qu\'il gère tous les navigateurs de Firefox à\\nInternet Explorer 6. Ce projet est issu et utilisé par l\'équipe de développement\\nd\'AngularJS (un projet créé et soutenu par Google donc).\\n\\nINSTALLER KARMA\\nKarma est un module pour NodeJS, il vous faudra donc installer Node en premier\\nlieu. Une fois cela fait, il suffit d\'installer le module NPM de karma pour\\npouvoir commencer :\\n\\nnpm install -g karma\\n\\nIl vous faudra les droits administrateur pour exécuter cette commande car elle\\ninstalle Karma de manière globale ce qui est recommandé pour l\'utiliser sur tous\\nvos projets sans réinstaller Karma à chaque fois.\\n\\nL\'installation de base de Karma est volontairement minimaliste. Vous devrez\\nsûrement installer des modules complémentaires (plug-ins), comme les divers\\nframeworks de tests et de chargement de modules AMD. Pour ma part, je vais\\ntester la librairie Commandor qui se présente sous la forme d\'un module UMD, je\\nvais donc avoir besoin du plugin RequireJS :\\n\\nnpm install -g karma-requirejs\\n\\nJ\'utilise le framework de test Mocha, il me faut donc aussi installer le plug-in\\ncorrespondant :\\n\\nnpm install -g karma-mocha\\n\\nEnfin, pour chaque navigateur que nous souhaitons tester, nous devons installer\\nles lanceurs correspondants :\\n\\n# Mozilla Firefox\\nnpm install karma-firefox-launcher\\n# Google Chrome\\nnpm install karma-chrome-launcher\\n# Internet Explorer\\nnpm install karma-ie-launcher\\n# SlimerJS\\nnpm install karma-slimerjs-launcher\\n# Pour voir la liste des lanceurs disponibles\\nnpm search karma-launcher\\n\\nNous voilà donc avec une installation complète de Karma Runner, il ne reste plus\\nqu\'à tester nos projets.\\n\\nCONFIGURER LES TESTS\\nPour configurer les tests d\'un projet, vous avez deux solutions, utiliser\\nl\'initieur de projets qui vous pose toutes les questions nécessaires à la\\ncréation de votre fichier karma.conf.json :\\n\\nkarma init\\n\\nOu alors, simplement, copier/coller le fichier d\'un projet existant\\n[https://github.com/nfroidure/Commandor/blob/master/karma.conf.js]. Typiquement,\\nle fichier de configuration Karma est une simple déclaration des navigateurs que\\nvous souhaitez tester et des plug-ins que vous souhaitez utiliser.\\n\\nLes informations les plus importantes sont les fichiers que vous voulez servir\\net de quelle façon. En effet, lorsque vous lancez les tests, Karma lance un\\nserveur Web/WebSocket et démarre vos divers navigateurs en leur indiquant\\nl\'adresse à charger.\\n\\nLANCER LES TESTS\\nPour lancer les tests, il suffit de taper la commande suivante :\\n\\nkarma start karma.conf.js\\nINFO [karma]: Karma v0.10.1 server started at http://localhost:9876/\\nINFO [[launcher]]: Starting browser Chrome\\nINFO [[launcher]]: Starting browser PhantomJS\\nINFO [[launcher]]: Starting browser SlimerJS\\nINFO [[launcher]]: Starting browser Firefox\\nINFO [[launcher]]: Starting browser Opera\\nINFO [[PhantomJS 1.9.1 (Linux)]]: Connected on socket id wNBBZ8YKbSMaZ0ZUhsKy\\nINFO [[Chrome 26.0.1410 (Linux)]]: Connected on socket id _CpwDOdv2x4SdfuRhsKz\\nINFO [[Other 0.0.0 (Linux)]]: Connected on socket id ik-BRxveU9jkhpzShsK0\\nINFO [[Opera 12.16.0 (Linux)]]: Connected on socket id NTmgHieffSR3ZXBshsK1\\nINFO [[Firefox 23.0.0 (Linux)]]: Connected on socket id _p-fNdQpNOLdeJClhsK2\\n\\nDès lors, pour connecter un nouveau navigateur sans utiliser de lanceur, il\\nsuffit d\'ouvrir l\'adresse donnée par Karma dans ce dernier. Un exemple avec mon\\ntéléphone Android :\\n\\n\\nINFO [[Chrome Mobile 28.0.1500 (Android 4.1.2)]]: Connected on socket id Iyi7l8bgnvIh1mjyhsK\\n\\nPour chaque navigateur, un compte rendu des tests vous est alors présenté, si\\ndes tests échouent, alors les exceptions lancées sont affichées dans la console.\\nC\'est un peu le paradis des développeurs front-end :\\n\\nPhantomJS 1.9.1 (Linux): Executed 0 of 0 ERROR (0.025 secs / 0 secs)\\nChrome 26.0.1410 (Linux): Executed 11 of 11 SUCCESS (0.078 secs / 0.017 secs)\\nOther 0.0.0 (Linux): Executed 11 of 11 SUCCESS (0.155 secs / 0.024 secs)\\nOpera 12.16.0 (Linux): Executed 11 of 11 (5 FAILED) (0.104 secs / NaN secs)\\nFirefox 23.0.0 (Linux): Executed 11 of 11 SUCCESS (0.135 secs / 0.015 secs)\\nFirefox Mobile 23.0.0 (Android): Executed 14 of 14 (3 FAILED) (1.042 secs / NaN secs)\\n\\nVous pouvez voir qu\'il me reste encore un peu de boulot à ce stade ;).\\n\\nAUTOMATISER LES TESTS AVEC TRAVIS\\nMais ce n\'est pas tout. Peut-être que vous connaissez Travis, un hook pour\\nGitHub qui permet de lancer les tests à chaque commit dans une machine\\nvirtuelle. Les machines virtuelles de Travis embarquent PhantomJS et Firefox par\\ndéfaut. Nous allons donc utiliser Firefox pour afficher un joli logo indiquant\\nque les tests passent bien depuis le dernier commit.\\n\\nPour ce faire, il suffit de créer un fichier au format Travis nommé .travis.yml\\n[https://github.com/nfroidure/Commandor/blob/master/.travis.yml]et de l\'ajouter\\nà la racine de votre projet. Vous devrez aussi autoriser travis à accéder à\\nvotre gitHub. Voilà la petite image qui indique si Commandor passe les tests\\ndepuis le dernier commit :\\n\\n Image indiquant le statut des tests [https://travis-ci.org/nfroidure/Commandor.png?branch=master]\\n\\nJe l\'ai ajoutée au README du projet pour monter le sérieux de ce dernier. Et\\nvoilà, Travis vous enverra un mail dès que vos tests échouent pour vous avertir.\\nSi quelqu\'un fait un pull request, Travis testera pour vous si ce PR passe bien\\nles tests. Elle est pas belle la vie ?\\n\\nALLER PLUS LOIN\\nSur le salon IRC de FranceJS [irc://irc.freenode.org#francejs]on est euphoriques\\navec Karma et chacun partage ses expériences et astuces pour l\'utiliser. Erwan\\nMest a même promis qu\'il ferait un billet sur le lancement de VM IE avec Travis\\n(:p). N\'hésitez donc pas à nous rejoindre !\\n\\nDe mon côté, j\'ai bien envie de créer un lanceur pour FirefoxOS ce qui devrait\\nêtre assez simple. J\'ai créé un lanceur\\n[https://github.com/nfroidure/karma-slimerjs-launcher]pour SlimerJS\\n[http://slimerjs.org](un PhantomJS [http://phantomjs.org]basé sur Gecko), mais\\nje n\'ai pas réussi à l\'utiliser avec Travis.\\n\\nEnfin, je suis en pleine réflexion sur la création d\'un lanceur pour Android.\\nJ\'ai trouvé quelques pistes comme l\'outil de lancement de VM en ligne de\\ncommande (emulator [http://developer.android.com/tools/help/emulator.html]) et\\nl\'outil de manipulation d\'instances de l\'émulateur (monkey-runner\\n[http://developer.android.com/tools/help/monkeyrunner_concepts.html]). Je pense\\nqu\'avec tout cela, il y a moyen de faire quelque chose, n\'hésitez pas à me\\nbipper si vous connaissez déjà un outil permettant de le faire.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc146:JSON.parse('{"path":"contents/pages/articles-tester_javascript_frontend.html","title":"Tester son JavaScript front end","description":"Depuis que j\'ai découvert Karma, je ne me lasse plus de convertir mes projets pour lancer les tests grâce à cet outil. Retour d\'expérience et conseils pour une utilisation pleine et entière.","shortTitle":"Test JavaScript front","shortDesc":"En savoir plus sur Karma et les tests automatisés","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nTESTER SON JAVASCRIPT FRONT END\\nDepuis que j\'ai découvert Karma, je ne me lasse plus de convertir mes projets\\npour lancer les tests grâce à cet outil. Retour d\'expérience et conseils pour\\nune utilisation pleine et entière.\\n\\n Karma Runner [https://github.com/karma-runner/]est un lanceur de tests\\nautomatisés. Sa particularité est qu\'il gère tous les navigateurs de Firefox à\\nInternet Explorer 6. Ce projet est issu et utilisé par l\'équipe de développement\\nd\'AngularJS (un projet créé et soutenu par Google donc).\\n\\nINSTALLER KARMA\\nKarma est un module pour NodeJS, il vous faudra donc installer Node en premier\\nlieu. Une fois cela fait, il suffit d\'installer le module NPM de karma pour\\npouvoir commencer :\\n\\nnpm install -g karma\\n\\nIl vous faudra les droits administrateur pour exécuter cette commande car elle\\ninstalle Karma de manière globale ce qui est recommandé pour l\'utiliser sur tous\\nvos projets sans réinstaller Karma à chaque fois.\\n\\nL\'installation de base de Karma est volontairement minimaliste. Vous devrez\\nsûrement installer des modules complémentaires (plug-ins), comme les divers\\nframeworks de tests et de chargement de modules AMD. Pour ma part, je vais\\ntester la librairie Commandor qui se présente sous la forme d\'un module UMD, je\\nvais donc avoir besoin du plugin RequireJS :\\n\\nnpm install -g karma-requirejs\\n\\nJ\'utilise le framework de test Mocha, il me faut donc aussi installer le plug-in\\ncorrespondant :\\n\\nnpm install -g karma-mocha\\n\\nEnfin, pour chaque navigateur que nous souhaitons tester, nous devons installer\\nles lanceurs correspondants :\\n\\n# Mozilla Firefox\\nnpm install karma-firefox-launcher\\n# Google Chrome\\nnpm install karma-chrome-launcher\\n# Internet Explorer\\nnpm install karma-ie-launcher\\n# SlimerJS\\nnpm install karma-slimerjs-launcher\\n# Pour voir la liste des lanceurs disponibles\\nnpm search karma-launcher\\n\\nNous voilà donc avec une installation complète de Karma Runner, il ne reste plus\\nqu\'à tester nos projets.\\n\\nCONFIGURER LES TESTS\\nPour configurer les tests d\'un projet, vous avez deux solutions, utiliser\\nl\'initieur de projets qui vous pose toutes les questions nécessaires à la\\ncréation de votre fichier karma.conf.json :\\n\\nkarma init\\n\\nOu alors, simplement, copier/coller le fichier d\'un projet existant\\n[https://github.com/nfroidure/Commandor/blob/master/karma.conf.js]. Typiquement,\\nle fichier de configuration Karma est une simple déclaration des navigateurs que\\nvous souhaitez tester et des plug-ins que vous souhaitez utiliser.\\n\\nLes informations les plus importantes sont les fichiers que vous voulez servir\\net de quelle façon. En effet, lorsque vous lancez les tests, Karma lance un\\nserveur Web/WebSocket et démarre vos divers navigateurs en leur indiquant\\nl\'adresse à charger.\\n\\nLANCER LES TESTS\\nPour lancer les tests, il suffit de taper la commande suivante :\\n\\nkarma start karma.conf.js\\nINFO [karma]: Karma v0.10.1 server started at http://localhost:9876/\\nINFO [[launcher]]: Starting browser Chrome\\nINFO [[launcher]]: Starting browser PhantomJS\\nINFO [[launcher]]: Starting browser SlimerJS\\nINFO [[launcher]]: Starting browser Firefox\\nINFO [[launcher]]: Starting browser Opera\\nINFO [[PhantomJS 1.9.1 (Linux)]]: Connected on socket id wNBBZ8YKbSMaZ0ZUhsKy\\nINFO [[Chrome 26.0.1410 (Linux)]]: Connected on socket id _CpwDOdv2x4SdfuRhsKz\\nINFO [[Other 0.0.0 (Linux)]]: Connected on socket id ik-BRxveU9jkhpzShsK0\\nINFO [[Opera 12.16.0 (Linux)]]: Connected on socket id NTmgHieffSR3ZXBshsK1\\nINFO [[Firefox 23.0.0 (Linux)]]: Connected on socket id _p-fNdQpNOLdeJClhsK2\\n\\nDès lors, pour connecter un nouveau navigateur sans utiliser de lanceur, il\\nsuffit d\'ouvrir l\'adresse donnée par Karma dans ce dernier. Un exemple avec mon\\ntéléphone Android :\\n\\n\\nINFO [[Chrome Mobile 28.0.1500 (Android 4.1.2)]]: Connected on socket id Iyi7l8bgnvIh1mjyhsK\\n\\nPour chaque navigateur, un compte rendu des tests vous est alors présenté, si\\ndes tests échouent, alors les exceptions lancées sont affichées dans la console.\\nC\'est un peu le paradis des développeurs front-end :\\n\\nPhantomJS 1.9.1 (Linux): Executed 0 of 0 ERROR (0.025 secs / 0 secs)\\nChrome 26.0.1410 (Linux): Executed 11 of 11 SUCCESS (0.078 secs / 0.017 secs)\\nOther 0.0.0 (Linux): Executed 11 of 11 SUCCESS (0.155 secs / 0.024 secs)\\nOpera 12.16.0 (Linux): Executed 11 of 11 (5 FAILED) (0.104 secs / NaN secs)\\nFirefox 23.0.0 (Linux): Executed 11 of 11 SUCCESS (0.135 secs / 0.015 secs)\\nFirefox Mobile 23.0.0 (Android): Executed 14 of 14 (3 FAILED) (1.042 secs / NaN secs)\\n\\nVous pouvez voir qu\'il me reste encore un peu de boulot à ce stade ;).\\n\\nAUTOMATISER LES TESTS AVEC TRAVIS\\nMais ce n\'est pas tout. Peut-être que vous connaissez Travis, un hook pour\\nGitHub qui permet de lancer les tests à chaque commit dans une machine\\nvirtuelle. Les machines virtuelles de Travis embarquent PhantomJS et Firefox par\\ndéfaut. Nous allons donc utiliser Firefox pour afficher un joli logo indiquant\\nque les tests passent bien depuis le dernier commit.\\n\\nPour ce faire, il suffit de créer un fichier au format Travis nommé .travis.yml\\n[https://github.com/nfroidure/Commandor/blob/master/.travis.yml]et de l\'ajouter\\nà la racine de votre projet. Vous devrez aussi autoriser travis à accéder à\\nvotre gitHub. Voilà la petite image qui indique si Commandor passe les tests\\ndepuis le dernier commit :\\n\\n Image indiquant le statut des tests [https://travis-ci.org/nfroidure/Commandor.png?branch=master]\\n\\nJe l\'ai ajoutée au README du projet pour monter le sérieux de ce dernier. Et\\nvoilà, Travis vous enverra un mail dès que vos tests échouent pour vous avertir.\\nSi quelqu\'un fait un pull request, Travis testera pour vous si ce PR passe bien\\nles tests. Elle est pas belle la vie ?\\n\\nALLER PLUS LOIN\\nSur le salon IRC de FranceJS [irc://irc.freenode.org#francejs]on est euphoriques\\navec Karma et chacun partage ses expériences et astuces pour l\'utiliser. Erwan\\nMest a même promis qu\'il ferait un billet sur le lancement de VM IE avec Travis\\n(:p). N\'hésitez donc pas à nous rejoindre !\\n\\nDe mon côté, j\'ai bien envie de créer un lanceur pour FirefoxOS ce qui devrait\\nêtre assez simple. J\'ai créé un lanceur\\n[https://github.com/nfroidure/karma-slimerjs-launcher]pour SlimerJS\\n[http://slimerjs.org](un PhantomJS [http://phantomjs.org]basé sur Gecko), mais\\nje n\'ai pas réussi à l\'utiliser avec Travis.\\n\\nEnfin, je suis en pleine réflexion sur la création d\'un lanceur pour Android.\\nJ\'ai trouvé quelques pistes comme l\'outil de lancement de VM en ligne de\\ncommande (emulator [http://developer.android.com/tools/help/emulator.html]) et\\nl\'outil de manipulation d\'instances de l\'émulateur (monkey-runner\\n[http://developer.android.com/tools/help/monkeyrunner_concepts.html]). Je pense\\nqu\'avec tout cela, il y a moyen de faire quelque chose, n\'hésitez pas à me\\nbipper si vous connaissez déjà un outil permettant de le faire.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc147:JSON.parse('{"path":"contents/pages/fr/blog/tester_virtualhost_avant_dns.html","title":"Tester un virtualhost avant de changer les DNS","description":"Quand on migre un site vers un nouveau serveur, on a besoin de tester le bon fonctionnement de ce dernier avant de mettre à jour les DNS. Petite astuce à base de telnet et openssl.","shortTitle":"Migrer un virtualhost","shortDesc":"En savoir plus sur le migration d\'un hôte virtuel","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nTESTER UN VIRTUALHOST AVANT DE CHANGER LES DNS\\nQuand on migre un site vers un nouveau serveur, on a besoin de tester le bon\\nfonctionnement de ce dernier avant de mettre à jour les DNS. Petite astuce à\\nbase de telnet et openssl.\\n\\nCHANGEMENT DES DNS\\nChanger les DNS est simple. On fait pointer l\'enregistrement A et\\nl\'enregistrement WWW vers la nouvelle IP. Malheureusement, ceci est long.\\n\\nEn effet, la propagation des nouveaux DNS à travers les divers cache prends de\\n24 à 48 heures.\\n\\nDu coup, l\'opération est irréversible. Si vous vous rendez compte d\'une erreur\\nsur le nouveau serveur, les personnes qui ont accédé à votre site avec les\\nnouveaux DNS sont condamnées à rester sur le nouveau serveur jusqu\'à la\\nprochaine interrogation des serveurs DNS et cela peut prendre 24 heures !\\n\\nCOMMENT TESTER ?\\nBref, il nous faut un moyen de tester le nouveau serveur avant de changer les\\nDNS.\\n\\nL\'idée est de faire une requête HTTP vers le nouveau serveur en simulant le fait\\nqu\'on y accède à travers le nouveau domaine (ex: mondomaine.com)\\n\\nCela se fait avec telnet ou netcat :\\n\\n\\n\\nOn crée une connexion TCP sur le serveur HTTP vie le port 80 :\\n\\nnc ip.ip.ip.ip 80\\n\\nOn fait une requête HTTP en mettant bien l\'hôte dans les entêtes\\n\\nGET / HTTP/1.1\\nHost: mondomaine.com\\n\\nHTTP/1.1 200 Ok\\n...\\n\\nNe pas oublier de faire deux retours à la ligne. Le code de réponse donne une\\nindication sur le succès ou non de la requête.\\n\\nPour tester le virtualhost en SSL, seule la ligne de création du socket change :\\n\\nopenssl s_client -connect ip.ip.ip.ip:443\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc148:JSON.parse('{"path":"contents/pages/articles-tester_virtualhost_avant_dns.html","title":"Tester un virtualhost avant de changer les DNS","description":"Quand on migre un site vers un nouveau serveur, on a besoin de tester le bon fonctionnement de ce dernier avant de mettre à jour les DNS. Petite astuce à base de telnet et openssl.","shortTitle":"Migrer un virtualhost","shortDesc":"En savoir plus sur le migration d\'un hôte virtuel","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nTESTER UN VIRTUALHOST AVANT DE CHANGER LES DNS\\nQuand on migre un site vers un nouveau serveur, on a besoin de tester le bon\\nfonctionnement de ce dernier avant de mettre à jour les DNS. Petite astuce à\\nbase de telnet et openssl.\\n\\nCHANGEMENT DES DNS\\nChanger les DNS est simple. On fait pointer l\'enregistrement A et\\nl\'enregistrement WWW vers la nouvelle IP. Malheureusement, ceci est long.\\n\\nEn effet, la propagation des nouveaux DNS à travers les divers cache prends de\\n24 à 48 heures.\\n\\nDu coup, l\'opération est irréversible. Si vous vous rendez compte d\'une erreur\\nsur le nouveau serveur, les personnes qui ont accédé à votre site avec les\\nnouveaux DNS sont condamnées à rester sur le nouveau serveur jusqu\'à la\\nprochaine interrogation des serveurs DNS et cela peut prendre 24 heures !\\n\\nCOMMENT TESTER ?\\nBref, il nous faut un moyen de tester le nouveau serveur avant de changer les\\nDNS.\\n\\nL\'idée est de faire une requête HTTP vers le nouveau serveur en simulant le fait\\nqu\'on y accède à travers le nouveau domaine (ex: mondomaine.com)\\n\\nCela se fait avec telnet ou netcat :\\n\\n\\n\\nOn crée une connexion TCP sur le serveur HTTP vie le port 80 :\\n\\nnc ip.ip.ip.ip 80\\n\\nOn fait une requête HTTP en mettant bien l\'hôte dans les entêtes\\n\\nGET / HTTP/1.1\\nHost: mondomaine.com\\n\\nHTTP/1.1 200 Ok\\n...\\n\\nNe pas oublier de faire deux retours à la ligne. Le code de réponse donne une\\nindication sur le succès ou non de la requête.\\n\\nPour tester le virtualhost en SSL, seule la ligne de création du socket change :\\n\\nopenssl s_client -connect ip.ip.ip.ip:443\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc149:JSON.parse('{"path":"contents/pages/fr/blog/trouvailles_juillet_2012.html","title":"Mes trouvailles de juillet 2012","description":"Voici quelques liens sur l\'actualité du développement Web en ce mois de juillet 2012.","shortTitle":"Trouvailles 07/2012","shortDesc":"Voir les trouvailles","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMES TROUVAILLES DE JUILLET 2012\\nVoici quelques liens sur l\'actualité du développement Web en ce mois de juillet\\n2012.\\n\\nHTML5\\n *  Drag n\' Drop de dossier dans Google Chrome\\n   [https://developers.google.com/web/updates/2012/07/Drag-and-drop-a-folder-onto-Chrome-now-available]\\n   . Oui, de dossiers :) \\n *  La standardisation d\'HTML5 subit un schisme de plus\\n   [http://www.numerama.com/magazine/23240-html5-deux-versions-pour-diviser-les-developpeurs.html]\\n   : Santa Barbara, tu me diras, pourquoi... \\n\\nACTUS NODEJS\\n *  Un npm existe pour YSlow [https://github.com/marcelduran/yslow]: Mesure de\\n   performances directement dans vos WebApps Node, c\'est pas cool ça ? \\n * Qui a dit que MySQL avait pas assez\\n   [http://www.codediesel.com/nodejs/querying-mysql-with-node-js/]de support\\n   dans Node ? On est sur la bonne voie en tout cas ! \\n\\nPHP / MYSQL\\n *  Un codeur PHP monte au créneau\\n   [http://fabien.potencier.org/article/64/php-is-much-better-than-you-think]\\n   face aux trolls récents à son sujet. \\n *  Grâce à une simple requête SQL\\n   [http://mechanics.flite.com/blog/2012/07/16/monitoring-auto-increment-capacity-in-mysql/]\\n   , monitorez le dépassement de capacité de vos auto-increments avant le drame \\n\\nMOZILLA\\n * Howto : Essayer Firefox Mobile sur Linux.\\n   [http://blog.admin-linux.org/mobilite/howto-essayer-firefox-mobile-sur-linux-debian]\\n   Firefox OS en fait, anciennement Boot2Gecko+Gaia. \\n * Envie de faire plus avec HTML5 ? Regardez-moi cette petite liste concoctée\\n   par Mozilla\\n   [https://wiki.mozilla.org/WebAPI#Planned_for_initial_release_of_B2G_.28aka_Basecamp.29]\\n   qui sera sûrement dans les tuyaux pour être proposée comme standard au W3C.\\n   N\'est-ce pas merveilleux ? \\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc150:JSON.parse('{"path":"contents/pages/articles-trouvailles_juillet_2012.html","title":"Mes trouvailles de juillet 2012","description":"Voici quelques liens sur l\'actualité du développement Web en ce mois de juillet 2012.","shortTitle":"Trouvailles 07/2012","shortDesc":"Voir les trouvailles","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nMES TROUVAILLES DE JUILLET 2012\\nVoici quelques liens sur l\'actualité du développement Web en ce mois de juillet\\n2012.\\n\\nHTML5\\n *  Drag n\' Drop de dossier dans Google Chrome\\n   [https://developers.google.com/web/updates/2012/07/Drag-and-drop-a-folder-onto-Chrome-now-available]\\n   . Oui, de dossiers :) \\n *  La standardisation d\'HTML5 subit un schisme de plus\\n   [http://www.numerama.com/magazine/23240-html5-deux-versions-pour-diviser-les-developpeurs.html]\\n   : Santa Barbara, tu me diras, pourquoi... \\n\\nACTUS NODEJS\\n *  Un npm existe pour YSlow [https://github.com/marcelduran/yslow]: Mesure de\\n   performances directement dans vos WebApps Node, c\'est pas cool ça ? \\n * Qui a dit que MySQL avait pas assez\\n   [http://www.codediesel.com/nodejs/querying-mysql-with-node-js/]de support\\n   dans Node ? On est sur la bonne voie en tout cas ! \\n\\nPHP / MYSQL\\n *  Un codeur PHP monte au créneau\\n   [http://fabien.potencier.org/article/64/php-is-much-better-than-you-think]\\n   face aux trolls récents à son sujet. \\n *  Grâce à une simple requête SQL\\n   [http://mechanics.flite.com/blog/2012/07/16/monitoring-auto-increment-capacity-in-mysql/]\\n   , monitorez le dépassement de capacité de vos auto-increments avant le drame \\n\\nMOZILLA\\n * Howto : Essayer Firefox Mobile sur Linux.\\n   [http://blog.admin-linux.org/mobilite/howto-essayer-firefox-mobile-sur-linux-debian]\\n   Firefox OS en fait, anciennement Boot2Gecko+Gaia. \\n * Envie de faire plus avec HTML5 ? Regardez-moi cette petite liste concoctée\\n   par Mozilla\\n   [https://wiki.mozilla.org/WebAPI#Planned_for_initial_release_of_B2G_.28aka_Basecamp.29]\\n   qui sera sûrement dans les tuyaux pour être proposée comme standard au W3C.\\n   N\'est-ce pas merveilleux ? \\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc151:JSON.parse('{"path":"contents/pages/fr/blog/uml_par_la_pratique.html","title":"Critique du livre : UML par la pratique par Pascal Roques","description":"UML est un formidable outil pour modéliser vos futures applications. J\'ai compris cela en lisant ce livre.","shortTitle":"UML par la pratique","shortDesc":"Voir ma critique de ce livre sur UML","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : UML PAR LA PRATIQUE PAR PASCAL ROQUES\\nUML est un formidable outil pour modéliser vos futures applications. J\'ai\\ncompris cela en lisant ce livre.\\n\\nJ\'ai beaucoup lu sur le web à propos d\'UML, mais il manque l\'exhaustivité et une\\nvue globale ce qui m\'a décidé à acquerir ce livre. Quand on programme en POO,\\nconnaître UML est un prérequis. Il permet de modéliser le domaine du système, de\\nla vue la plus globale à la vue la plus proche du code.\\n\\nUn reproche que je fais souvent au sujet des projets libres, c\'est l\'absence\\nquasi systématique de modélisation UML. Il en résulte un gap difficile à\\nfranchir et directement proportionnel à la complexité du projet.\\n\\nEt pourtant, quel fabuleux outil de modélisation. Ce livre le démontre vraiment\\ntrès bien au moyen de cas pratiques. Avec du recul, je dirai que la modélisation\\ntranche un peu avec les techniques de développement à la mode (TDD et autres\\nméthodes agiles).\\n\\nEn fait, ce livre donne ce qu\'il annonce limpidement et simplement. Bref, je le\\nconseille pour l\'apprentissage d\'UML.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc152:JSON.parse('{"path":"contents/pages/articles-uml_par_la_pratique.html","title":"Critique du livre : UML par la pratique par Pascal Roques","description":"UML est un formidable outil pour modéliser vos futures applications. J\'ai compris cela en lisant ce livre.","shortTitle":"UML par la pratique","shortDesc":"Voir ma critique de ce livre sur UML","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCRITIQUE DU LIVRE : UML PAR LA PRATIQUE PAR PASCAL ROQUES\\nUML est un formidable outil pour modéliser vos futures applications. J\'ai\\ncompris cela en lisant ce livre.\\n\\nJ\'ai beaucoup lu sur le web à propos d\'UML, mais il manque l\'exhaustivité et une\\nvue globale ce qui m\'a décidé à acquerir ce livre. Quand on programme en POO,\\nconnaître UML est un prérequis. Il permet de modéliser le domaine du système, de\\nla vue la plus globale à la vue la plus proche du code.\\n\\nUn reproche que je fais souvent au sujet des projets libres, c\'est l\'absence\\nquasi systématique de modélisation UML. Il en résulte un gap difficile à\\nfranchir et directement proportionnel à la complexité du projet.\\n\\nEt pourtant, quel fabuleux outil de modélisation. Ce livre le démontre vraiment\\ntrès bien au moyen de cas pratiques. Avec du recul, je dirai que la modélisation\\ntranche un peu avec les techniques de développement à la mode (TDD et autres\\nméthodes agiles).\\n\\nEn fait, ce livre donne ce qu\'il annonce limpidement et simplement. Bref, je le\\nconseille pour l\'apprentissage d\'UML.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc153:JSON.parse('{"path":"contents/pages/fr/blog/utiliser_requirejs.html","title":"Astuces pour utiliser pleinement RequireJS","description":"Pour un projet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la première fois en production. J\'en profite pour vous faire un petit retour d\'expérience avec quelques astuces de mon cru ;).","shortTitle":"RequireJS","shortDesc":"En savoir plus pour bien utiliser RequireJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Les modules JavaScript sont maintenant unifiés et largement\\ndisponibles invalidant les solutions décrites dans cet article.\\n\\n Cet article est ancien et ne reflète plus ma façon de procéder. J\'utilise\\nmaintenant browserify et les modules CommonJS/NodeJS. Je vous recommande de lire \\ncet article [faire-mieux-qu-angular-avec-require.html] plus au goût du jour. \\n\\nASTUCES POUR UTILISER PLEINEMENT REQUIREJS\\nPour un projet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la\\npremière fois en production. J\'en profite pour vous faire un petit retour\\nd\'expérience avec quelques astuces de mon cru ;).\\n\\nPRÉSENTATION\\nJe vous ai parlé récemment des modules JavaScript (n\'hésites pas à lire ou\\nrelire mon billet sur les modules JavaScript [module_javascript.html]pour bien\\ncomprendre ce billet). RequireJS [http://requirejs.org]est un gestionnaire de\\nmodules asynchrone. Il permet de charger les modules JavaScript par l\'analyse\\ndes dépendances de ces derniers puis les exécute dans le bon ordre.\\n\\nBien que RequireJS gère les modules synchrone du type CommonJS, il est plutôt\\nrecommandé d\'utiliser les modules AMD (Asynchronous Module Definition) qui\\npeuvent ainsi être chargés en parallèle par RequireJS.\\n\\nPour rendre notre code compatible avec AMD, il suffit d\'utiliser l\'un des\\npatterns proposés par James Burke (le créateur de RequireJS), sur le dépôt\\n[https://github.com/umdjs/umd]du projet UMD (Unified Module Definition) visant à\\nunifier la définition de modules.\\n\\nLa seule chose qui peut paraître déroutante (et qui à mon avis est un défaut de\\nconception originel) est que les identifiants de modules sont des identifiants\\net non des chemins de fichiers. Le fait que l\'on puisse utiliser des chemins de\\nfichiers n\'est qu\'un effet de bord puisque les slashs sont permis dans les noms\\nde modules et réutilisés tels quels lors de la création de l\'URL correspondante\\nau script.\\n\\nCela amène à quelques soucis quand on souhaite importer un projet composé de\\nplusieurs modules au sein de notre propre projet.\\n\\nUTILISATION\\nPour utiliser RequireJS, rien de plus simple, il suffit de télécharger l\'unique\\nfichier require.js (soit minifié, soit en clair pour développer). Puis,\\nd\'ajouter la balise suivante dans votre HTML (la section <head> de préférence) :\\n\\n\\n<script data-main=\\"javascript/Application\\" src=\\"javascript/libs/requirejs/require.js\\" type=\\"text/javascript\\"></script>\\n\\nCe bout de code a deux effets, d\'une part, charger RequireJS, d\'autre part,\\nindiquer le fichier principal de votre application. C\'est à partir de ce fichier\\n(ici, javascript/Application.js) que RequireJS va déduire tous les fichiers\\nnécessaires pour votre application (appelés dépendances).\\n\\nComme vous pouvez le voir sur la capture d\'écran de mon dernier projet\\n[http://memory.insertafter.com/], le chargement de RequireJS et son exécution\\nprovoque bien le chargement de Application.js puis de ses trois dépendances\\n[https://github.com/nfroidure/Memory/blob/3f5cb8e52ec84ff8e7567588a9180dfb098ba50c/www/javascript/Application.js#L6]\\n Sounds.js, Commandor.js et View.js. On peut remarquer que ces trois dernières\\nsont chargées en paralèlle.\\n\\n Capture d\'écran du chargement du Memory [/images/capture-memory1.png]\\n\\nRequireJS est particulièrement utile pour le développement. Il permet de ne pas\\navoir à constamment ajouter/retirer des balises <script> à chaque nouveau module\\najouté au projet. On peut également l\'utiliser pour charger des scripts à la\\nvolée uniquement lorsque c\'est nécessaire. Par exemple, dans mon Memory, je ne\\ncharge le code spécifique à chaque vue que lorsqu\'elle est affichée. Par\\nexemple, ci dessous avec la vue VueOptions.js.\\n\\n Capture d\'écran de l\'affichage de la vue des options du jeu [/images/capture-memory2.png]\\n\\nR.JS ET MISE EN PRODUCTION\\nBien que RequireJS soit intéressant, ce n\'est bien souvent pas la solution pour\\nune application en production. En effet, même asynchrone, le chargement reste\\nbien plus lent que si l\'on regroupait tous les fichiers au sein d\'un seul et\\nmême fichier et que, par la même occasion, on en profitait pour le minifier.\\n\\nC\'est l\'objet de r.js du même auteur. Il permet en une ligne de commande de\\nréunir et minifier toutes les dépendances de votre application. Pour\\nl\'installer, rien de plus simple grâce à NodeJS :\\n\\nnpm install -g requirejs\\n\\nPour grouper et minifier tous les fichiers de mon application, cela donne :\\n\\n\\nr.js -o baseUrl=./javascript/ name=Application out=javascript/production.js\\n\\nTous ? Non ! Un certains nombre de fichiers résistent au minifieur. Les fichiers\\nchargé dynamiquement. En effet, r.js se base sur une analyse statique du code\\nsource (il n\'est pas exécuté). Il n\'a donc aucun moyen de deviner si un fichier\\nest chargé dynamiquement durant le cycle de vie de l\'application.\\n\\nCela peut-être laissé en l\'état sciemment. En effet, si la taille des fichiers\\nchargés dynamiquement est très importante, on préfèrera continuer de les charger\\ndynamiquement. Sinon, on peut facilement forcer l\'ajout de ces dépendances en \\najoutant une fonction\\n[https://github.com/nfroidure/Memory/blob/3f5cb8e52ec84ff8e7567588a9180dfb098ba50c/www/javascript/Application.js#L3]\\nfaisant un appel à la fonction require contenant toutes les dépendances. Cette\\nfonction n\'est à aucun moment exécutée, mais ça, r.js ne le sait pas puisqu\'il\\nse base sur une analyse statique.\\n\\nNous voilà donc avec un fichier production.js contenant toutes nos dépendances.\\nOn pourrait penser que nous touchons au but. Mais pour un perfectionniste, ce\\nn\'est que le début ;).\\n\\nSUPPRIMER REQUIREJS\\nr.js ne supprime pas la dépendance à RequireJS. Ainsi, pour que votre projet\\ncontinue de fonctionner, vous devez absolument le conserver. Et ça, c\'est pas\\ncool ;). Pour éviter ce problème, il existe cependant une voie à emprunter. Les\\nmodules UMD. En effet, un module UMD peut être créé pour fonctionner avec\\nRequireJS et dans le contexte global (c\'est le cas du module Commandor.js\\n[https://github.com/nfroidure/Commandor/blob/master/src/Commandor.js]par\\nexemple). Certains fonctionnent même avec Node, comme le module Promise\\n[https://github.com/nfroidure/Promise/blob/master/src/Promise.js].\\n\\nAinsi, si l\'on a utilisé les modules UMD et non seulement AMD, alors on peut\\nretirer RequireJS et nos modules continueront de fonctionner. Le seul souci est\\nqu\'ils seront exécutés dans le contexte global ce qui n\'est pas recommandé à\\ncause des collisions qu\'il peut y avoir entre les différents scripts tiers\\nprésents dans votre page.\\n\\nL\'idée est alors de modifier une dernière fois votre fichier JavaScript de\\nproduction en l\'englobant dans une focntion anonyme immédiatemment exécutée en\\nlui fournissant un contexte vierge. Voici un extrait de mon script de mise en\\nproduction (build.sh\\n[https://github.com/nfroidure/Memory/blob/f57c64ac9301aaf412f2969ddf9db96c5047cb5a/build.sh]\\n) :\\n\\n# Adding a simple closure\\nprodContent=$(cat javascript/production.js)\\necho \\"(function() { $prodContent }).call({})\\" > javascript/production.js\\n\\nEt voilà, tout est prêt, il ne nous reste plus qu\'à supprimer la balise de\\nRequireJS et ajouter une balise pour notre script de production, de préférence\\ncette fois ci à la fin de notre document HTML. J\'ai aussi automatisé ça grâce\\naux commentaires HTML :\\n\\n# Comment RequireJS script tag\\nsed -i \\"s/DEV-->/DEV--/g\\" index.html\\n# Uncomment production script tag\\nsed -i \\"s/PROD--/PROD-->/g\\" index.html\\n\\nVos commentaires, avis, améliorations éventuelles sont les bienvenues ;).\\n\\nAjout de dernière minute : Florian [https://twitter.com/_Florian_R]m\'a appris\\nsur Twitter l\'existence du projet almond [https://github.com/jrburke/almond]\\n(tjrs du même auteur), visant à réduire au maximum l\'empreinte de RequireJS. Une\\nbonne alternative à ma méthode si vous décidez de conserver le chargement\\nasynchrone.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc154:JSON.parse('{"path":"contents/pages/articles-utiliser_requirejs.html","title":"Astuces pour utiliser pleinement RequireJS","description":"Pour un projet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la première fois en production. J\'en profite pour vous faire un petit retour d\'expérience avec quelques astuces de mon cru ;).","shortTitle":"RequireJS","shortDesc":"En savoir plus pour bien utiliser RequireJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Les modules JavaScript sont maintenant unifiés et largement\\ndisponibles invalidant les solutions décrites dans cet article.\\n\\n Cet article est ancien et ne reflète plus ma façon de procéder. J\'utilise\\nmaintenant browserify et les modules CommonJS/NodeJS. Je vous recommande de lire \\ncet article [faire-mieux-qu-angular-avec-require.html] plus au goût du jour. \\n\\nASTUCES POUR UTILISER PLEINEMENT REQUIREJS\\nPour un projet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la\\npremière fois en production. J\'en profite pour vous faire un petit retour\\nd\'expérience avec quelques astuces de mon cru ;).\\n\\nPRÉSENTATION\\nJe vous ai parlé récemment des modules JavaScript (n\'hésites pas à lire ou\\nrelire mon billet sur les modules JavaScript [module_javascript.html]pour bien\\ncomprendre ce billet). RequireJS [http://requirejs.org]est un gestionnaire de\\nmodules asynchrone. Il permet de charger les modules JavaScript par l\'analyse\\ndes dépendances de ces derniers puis les exécute dans le bon ordre.\\n\\nBien que RequireJS gère les modules synchrone du type CommonJS, il est plutôt\\nrecommandé d\'utiliser les modules AMD (Asynchronous Module Definition) qui\\npeuvent ainsi être chargés en parallèle par RequireJS.\\n\\nPour rendre notre code compatible avec AMD, il suffit d\'utiliser l\'un des\\npatterns proposés par James Burke (le créateur de RequireJS), sur le dépôt\\n[https://github.com/umdjs/umd]du projet UMD (Unified Module Definition) visant à\\nunifier la définition de modules.\\n\\nLa seule chose qui peut paraître déroutante (et qui à mon avis est un défaut de\\nconception originel) est que les identifiants de modules sont des identifiants\\net non des chemins de fichiers. Le fait que l\'on puisse utiliser des chemins de\\nfichiers n\'est qu\'un effet de bord puisque les slashs sont permis dans les noms\\nde modules et réutilisés tels quels lors de la création de l\'URL correspondante\\nau script.\\n\\nCela amène à quelques soucis quand on souhaite importer un projet composé de\\nplusieurs modules au sein de notre propre projet.\\n\\nUTILISATION\\nPour utiliser RequireJS, rien de plus simple, il suffit de télécharger l\'unique\\nfichier require.js (soit minifié, soit en clair pour développer). Puis,\\nd\'ajouter la balise suivante dans votre HTML (la section <head> de préférence) :\\n\\n\\n<script data-main=\\"javascript/Application\\" src=\\"javascript/libs/requirejs/require.js\\" type=\\"text/javascript\\"></script>\\n\\nCe bout de code a deux effets, d\'une part, charger RequireJS, d\'autre part,\\nindiquer le fichier principal de votre application. C\'est à partir de ce fichier\\n(ici, javascript/Application.js) que RequireJS va déduire tous les fichiers\\nnécessaires pour votre application (appelés dépendances).\\n\\nComme vous pouvez le voir sur la capture d\'écran de mon dernier projet\\n[http://memory.insertafter.com/], le chargement de RequireJS et son exécution\\nprovoque bien le chargement de Application.js puis de ses trois dépendances\\n[https://github.com/nfroidure/Memory/blob/3f5cb8e52ec84ff8e7567588a9180dfb098ba50c/www/javascript/Application.js#L6]\\n Sounds.js, Commandor.js et View.js. On peut remarquer que ces trois dernières\\nsont chargées en paralèlle.\\n\\n Capture d\'écran du chargement du Memory [/images/capture-memory1.png]\\n\\nRequireJS est particulièrement utile pour le développement. Il permet de ne pas\\navoir à constamment ajouter/retirer des balises <script> à chaque nouveau module\\najouté au projet. On peut également l\'utiliser pour charger des scripts à la\\nvolée uniquement lorsque c\'est nécessaire. Par exemple, dans mon Memory, je ne\\ncharge le code spécifique à chaque vue que lorsqu\'elle est affichée. Par\\nexemple, ci dessous avec la vue VueOptions.js.\\n\\n Capture d\'écran de l\'affichage de la vue des options du jeu [/images/capture-memory2.png]\\n\\nR.JS ET MISE EN PRODUCTION\\nBien que RequireJS soit intéressant, ce n\'est bien souvent pas la solution pour\\nune application en production. En effet, même asynchrone, le chargement reste\\nbien plus lent que si l\'on regroupait tous les fichiers au sein d\'un seul et\\nmême fichier et que, par la même occasion, on en profitait pour le minifier.\\n\\nC\'est l\'objet de r.js du même auteur. Il permet en une ligne de commande de\\nréunir et minifier toutes les dépendances de votre application. Pour\\nl\'installer, rien de plus simple grâce à NodeJS :\\n\\nnpm install -g requirejs\\n\\nPour grouper et minifier tous les fichiers de mon application, cela donne :\\n\\n\\nr.js -o baseUrl=./javascript/ name=Application out=javascript/production.js\\n\\nTous ? Non ! Un certains nombre de fichiers résistent au minifieur. Les fichiers\\nchargé dynamiquement. En effet, r.js se base sur une analyse statique du code\\nsource (il n\'est pas exécuté). Il n\'a donc aucun moyen de deviner si un fichier\\nest chargé dynamiquement durant le cycle de vie de l\'application.\\n\\nCela peut-être laissé en l\'état sciemment. En effet, si la taille des fichiers\\nchargés dynamiquement est très importante, on préfèrera continuer de les charger\\ndynamiquement. Sinon, on peut facilement forcer l\'ajout de ces dépendances en \\najoutant une fonction\\n[https://github.com/nfroidure/Memory/blob/3f5cb8e52ec84ff8e7567588a9180dfb098ba50c/www/javascript/Application.js#L3]\\nfaisant un appel à la fonction require contenant toutes les dépendances. Cette\\nfonction n\'est à aucun moment exécutée, mais ça, r.js ne le sait pas puisqu\'il\\nse base sur une analyse statique.\\n\\nNous voilà donc avec un fichier production.js contenant toutes nos dépendances.\\nOn pourrait penser que nous touchons au but. Mais pour un perfectionniste, ce\\nn\'est que le début ;).\\n\\nSUPPRIMER REQUIREJS\\nr.js ne supprime pas la dépendance à RequireJS. Ainsi, pour que votre projet\\ncontinue de fonctionner, vous devez absolument le conserver. Et ça, c\'est pas\\ncool ;). Pour éviter ce problème, il existe cependant une voie à emprunter. Les\\nmodules UMD. En effet, un module UMD peut être créé pour fonctionner avec\\nRequireJS et dans le contexte global (c\'est le cas du module Commandor.js\\n[https://github.com/nfroidure/Commandor/blob/master/src/Commandor.js]par\\nexemple). Certains fonctionnent même avec Node, comme le module Promise\\n[https://github.com/nfroidure/Promise/blob/master/src/Promise.js].\\n\\nAinsi, si l\'on a utilisé les modules UMD et non seulement AMD, alors on peut\\nretirer RequireJS et nos modules continueront de fonctionner. Le seul souci est\\nqu\'ils seront exécutés dans le contexte global ce qui n\'est pas recommandé à\\ncause des collisions qu\'il peut y avoir entre les différents scripts tiers\\nprésents dans votre page.\\n\\nL\'idée est alors de modifier une dernière fois votre fichier JavaScript de\\nproduction en l\'englobant dans une focntion anonyme immédiatemment exécutée en\\nlui fournissant un contexte vierge. Voici un extrait de mon script de mise en\\nproduction (build.sh\\n[https://github.com/nfroidure/Memory/blob/f57c64ac9301aaf412f2969ddf9db96c5047cb5a/build.sh]\\n) :\\n\\n# Adding a simple closure\\nprodContent=$(cat javascript/production.js)\\necho \\"(function() { $prodContent }).call({})\\" > javascript/production.js\\n\\nEt voilà, tout est prêt, il ne nous reste plus qu\'à supprimer la balise de\\nRequireJS et ajouter une balise pour notre script de production, de préférence\\ncette fois ci à la fin de notre document HTML. J\'ai aussi automatisé ça grâce\\naux commentaires HTML :\\n\\n# Comment RequireJS script tag\\nsed -i \\"s/DEV-->/DEV--/g\\" index.html\\n# Uncomment production script tag\\nsed -i \\"s/PROD--/PROD-->/g\\" index.html\\n\\nVos commentaires, avis, améliorations éventuelles sont les bienvenues ;).\\n\\nAjout de dernière minute : Florian [https://twitter.com/_Florian_R]m\'a appris\\nsur Twitter l\'existence du projet almond [https://github.com/jrburke/almond]\\n(tjrs du même auteur), visant à réduire au maximum l\'empreinte de RequireJS. Une\\nbonne alternative à ma méthode si vous décidez de conserver le chargement\\nasynchrone.\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc155:JSON.parse('{"path":"contents/pages/fr/blog/watchdeps.html","title":"Surveillez les dépendances de vos projets NodeJS","description":"Avec watchdeps abonnez-vous automatiquement aux dépendences de vos\\n projets NodeJS sur GitHub.","shortTitle":"Watchdeps","shortDesc":"Découvrez comment rester informé de l\'évolution des modules tiers","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nSURVEILLEZ LES DÉPENDANCES DE VOS PROJETS NODEJS\\n⚠ Attention: Cet article est ancien et n\'est conservé que pour des raisons\\nhistoriques. Il est possible dans GitHub de ne souscrire qu\'aux versions et\\nainsi éviter de suivre la totalité du projet. L\'approche de watchdeps n\'est donc\\nplus valide maintenant.\\n\\n TL; DR:\\nsudo npm install -g watchdeps\\ncd myproject && watchdeps -u username \\n\\nDepuis que NPM a rendu la gestion de dépendences simple et pratique, nous avons\\ntendance à utiliser de plus en plus de modules. C\'est une bonne chose, ne pas\\nréinventer la roue à chaque fois est une qualité recherchée chez un développeur.\\n\\n Avec de grand pouvoirs viennent de grandes responsabilités\\n[/images/great_powers-great-responsibility.gif] Source MTV\\n[http://www.mtv.com/news/2092125/attractive-things-sober-people/]\\n\\nEn revanche, installer des modules signifie, avant tout, embarquer du code\\ntiers. Ce n\'est pas si anodin. Une fois que vous avez choisi un module\\n[choisir_module_nodejs.html], vous ne pouvez pas en rester là.\\n\\nUn développeur professionnel s\'assurera toujours de rester informé de\\nl\'évolution des modules tiers qu\'il embarque dans ses projets. Pour cela, un des\\nmeilleurs moyens est de s\'y abonner sur GitHub pour recevoir des notifications à\\nleur propos.\\n\\nMais je ne pouvais me résoudre à faire cela avec une souris ;) :\\n\\n Animation montrant l\'action de suivre un projet sur GitHub\\n[/images/github-watch.gif] [http://makegif.com/gQ4z]\\n\\nJ\'ai donc créé un petit outil en ligne de commande que j\'ai nommé watchdeps\\n[https://github.com/nfroidure/watchdeps]. En l\'exécutant, il se connecte\\ndirectement à GitHub pour vous abonner à tous les modules dont votre projet\\ndépend.\\n\\n\\n  sudo npm i -g watchdeps\\n  cd myproject/\\n  watchdeps -u nfroidure\\n  # Done!\\n\\n\\nEt voilà ! Vous savez maintenant tout sur les modules que vou embarquez,\\nn\'est-ce pas mignon ?\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc156:JSON.parse('{"path":"contents/pages/fr/blog/xinetd_super_server.html","title":"Gestion de flotte X1 Intellitrac avec xinetd sur Debian GNU Linux","description":"Le super server xinetd est vraiment très pratique pour des petits projets ne dépassant pas un certain nombre de clients. Voici une petite illustration de son utilité pour la localisation de flotte de véhicules.","shortTitle":"xinetd et X1 Intellitrac","shortDesc":"En savoir plus sur ce petit projet","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGESTION DE FLOTTE X1 INTELLITRAC AVEC XINETD SUR DEBIAN GNU LINUX\\nLe super server xinetd est vraiment très pratique pour des petits projets ne\\ndépassant pas un certain nombre de clients. Voici une petite illustration de son\\nutilité pour la localisation de flotte de véhicules.\\n\\nJ\'ai récemment dû revenir sur un ancien projet pour lequel j\'avais utilisé\\nxinetd et un petit programme C++ de mon cru pour logger une flotte de véhicule.\\n\\nJ\'ai dû pratiquer quelques optimisations pour lesquelles un retour s\'impose car\\nxinetd est très mal documenté, cela aidera peut-être certains d\'entre vous.\\n\\n\\n\\nQU\'EST-CE QU\'XINETD\\nXinetd est un super serveur destiné à remplacer inetd qui est peu sécurisé. Un\\nsuper serveur est une implémentation générique d\'un serveur qui se base sur des\\nfichiers de configuration pour fournir des services sans forcément devoir\\nréécrire toute une gestion des sockets et des forks de processus. Une chance\\nétant donné la complexité de la chose.\\n\\nPour installer xinetd sur une machine de type Debian, une ligne de commande\\nsuffit :\\n\\naptitude install xinetd\\n\\nCe que fait xinetd est simple, il écoute les connexions entrantes pour le\\nservice donné et démarre un nouveau processus avec la ligne de commande fournie\\navec la directive server. Une fois le processus démarré, il pipe le stream\\nmontant du socket vers l\'entrée standard et le descandant vers la sortie\\nstandard du nouveau processus. Toute la logique du socket est masquée et on se\\nretrouve à travailler, tout bêtement, avec stdin et stdout.\\n\\nSeul petit bémol, xinetd redirige stderr vers le socket également. Pour cette\\nraison, je vous déconseille d\'écrire vers stderr vos erreurs, mais plutôt de les\\nenvoyer vers syslog. Ceci est d\'ailleurs plus logique puisque votre programme\\ndevient un démon dès lors qu\'il est lancé par xinetd.\\n\\nCRÉATION D\'UN SERVICE : CAS X1 INTELLITRAC\\nDans mon cas précis, je me suis servi d\'xinetd pour gérer une flotte d\'une\\ntrentaine de véhicules équipés du boitier GPS X1 Intellitrac. Tout d\'abord, nous\\nallons créer un utilisateur unix appelé x1server :\\n\\nadduser x1server\\n\\nPuis, nous allons ajouter le service xinetd à /etc/services en déclarant le port\\n1337 :\\n\\necho \\"\\n# Local services\\nx1server 1337/tcp # X1 Intellitrac GPS tracking server\\" > /etc/services;\\n\\nCréons également le service xinetd. Pour ce faire, il faut créer un fichier de\\nconfiguration dans le répertoire /etc/xinetd.d/. Dans mon cas, le fichier\\nressemble à cela :\\n\\necho \\"# default: on\\n# description: X1 Intellitrac GPS tracking server\\nservice x1server\\n{\\n port= 1337\\n socket_type= stream\\n wait= no\\n user= x1server\\n server= /home/x1server/bin/x1server\\n server_args /home/x1server/log\\n log_on_success+= USERID\\n log_on_failure+= USERID\\n instances= 30\\n disable= no\\n flags= NODELAY\\n nice= -20\\n}\\" >> /etc/xinet.d/x1server\\n\\nLe port utilisé est 1337, nous le précisons avec la directive port. La directive \\nuser permet d\'éxecuter le processus pour un utilisateur particuler ce qui permet\\nde sandboxer ce dernier et éviter les effets de bord d\'un éventuel trou de\\nsécurité. La directive instances précise le nombre d\'instances maximales pour ce\\nserveur. Elle permet d\'éviter les attaques ddos.\\n\\nLa directive server désigne le fichier à exécuter. Dans mon cas, il s\'agit du\\nprojet X1 Intellitrac GPS Logger [https://github.com/nfroidure/X1-GPS-Logger]\\ncompilé directement sur la machine hôte avec la commande suivante :\\n\\nwget https://github.com/nfroidure/X1-GPS-Logger/archive/master.tar.gz\\ntar -xzvf master.tar.gz\\nmkdir /home/x1server/bin\\ng++ /home/x1server/X1-GPS-Logger-master/main.c -o /home/x1server/bin/x1server\\nchmod u+x /home/x1server/bin/x1server\\nrm -rf /home/x1server/X1-GPS-Logger-master /home/x1server/master.tar.gz\\n\\nLa directive server_args permet de préciser les arguments à utiliser pour\\ndémarrer le serveur. Dans notre cas, l\'argument est le dossier de destination\\ndes logs. Surtout, il ne faut pas oublier de créer ce dossier :\\n\\nmkdir /home/x1server/log\\nchown x1server:x1server /home/x1server/log\\n\\nENVOYEZ LE BOUSIN !\\nIl ne reste plus qu\'à redémarrer le serveur xinetd pour démarrer le service\\ncorrespondant :\\n\\n/etc/init.d/xinetd restart\\n\\nOPTIMISATIONS\\nVous aurez peut-être remarqué la directive flags = NODELAY. Cette directive\\npermet d\'éviter que les entrées/sorties (notamment stdout dans notre cas) ne\\nsoient buffurisées. En effet, le satané protocole des boitiers X1 Intellitrac\\n[http://www.nomadicsolutions.biz/produit/x1-intellitrac/]impose de renvoyer\\nintacts les 8 octets de synchronisation reçu par le serveur au boitier. Or, j\'ai\\nrencontré un problème de buffurisation qui provoquait l\'envoi des octets trop\\ntard.\\n\\nJ\'ai aussi ajouté par la suite une directive nice pour privilégier ces processus\\npeu gourmands, mais dont la réactivité est essentielle. Toutes les directives\\nd\'xinetd sont très bien documentées sur cette page\\n[http://manpages.ubuntu.com/manpages/cosmic/en/man5/xinetd.conf.5.html].\\n\\nRÉSULTAT\\nJ\'ai couplé ces logs avec un petit driver\\n[https://github.com/nfroidure/Rest4/blob/master/php/class.RestXgpsPositionDriver.php]\\npour Rest4 [https://github.com/Rest4/Rest4-php]. Le résultat donne ceci :\\n\\n Capture d\'écran du logiciel de visualisation [/images/capture-vigisystem.png]\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc157:JSON.parse('{"path":"contents/pages/articles-xinetd_super_server.html","title":"Gestion de flotte X1 Intellitrac avec xinetd sur Debian GNU Linux","description":"Le super server xinetd est vraiment très pratique pour des petits projets ne dépassant pas un certain nombre de clients. Voici une petite illustration de son utilité pour la localisation de flotte de véhicules.","shortTitle":"xinetd et X1 Intellitrac","shortDesc":"En savoir plus sur ce petit projet","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nGESTION DE FLOTTE X1 INTELLITRAC AVEC XINETD SUR DEBIAN GNU LINUX\\nLe super server xinetd est vraiment très pratique pour des petits projets ne\\ndépassant pas un certain nombre de clients. Voici une petite illustration de son\\nutilité pour la localisation de flotte de véhicules.\\n\\nJ\'ai récemment dû revenir sur un ancien projet pour lequel j\'avais utilisé\\nxinetd et un petit programme C++ de mon cru pour logger une flotte de véhicule.\\n\\nJ\'ai dû pratiquer quelques optimisations pour lesquelles un retour s\'impose car\\nxinetd est très mal documenté, cela aidera peut-être certains d\'entre vous.\\n\\n\\n\\nQU\'EST-CE QU\'XINETD\\nXinetd est un super serveur destiné à remplacer inetd qui est peu sécurisé. Un\\nsuper serveur est une implémentation générique d\'un serveur qui se base sur des\\nfichiers de configuration pour fournir des services sans forcément devoir\\nréécrire toute une gestion des sockets et des forks de processus. Une chance\\nétant donné la complexité de la chose.\\n\\nPour installer xinetd sur une machine de type Debian, une ligne de commande\\nsuffit :\\n\\naptitude install xinetd\\n\\nCe que fait xinetd est simple, il écoute les connexions entrantes pour le\\nservice donné et démarre un nouveau processus avec la ligne de commande fournie\\navec la directive server. Une fois le processus démarré, il pipe le stream\\nmontant du socket vers l\'entrée standard et le descandant vers la sortie\\nstandard du nouveau processus. Toute la logique du socket est masquée et on se\\nretrouve à travailler, tout bêtement, avec stdin et stdout.\\n\\nSeul petit bémol, xinetd redirige stderr vers le socket également. Pour cette\\nraison, je vous déconseille d\'écrire vers stderr vos erreurs, mais plutôt de les\\nenvoyer vers syslog. Ceci est d\'ailleurs plus logique puisque votre programme\\ndevient un démon dès lors qu\'il est lancé par xinetd.\\n\\nCRÉATION D\'UN SERVICE : CAS X1 INTELLITRAC\\nDans mon cas précis, je me suis servi d\'xinetd pour gérer une flotte d\'une\\ntrentaine de véhicules équipés du boitier GPS X1 Intellitrac. Tout d\'abord, nous\\nallons créer un utilisateur unix appelé x1server :\\n\\nadduser x1server\\n\\nPuis, nous allons ajouter le service xinetd à /etc/services en déclarant le port\\n1337 :\\n\\necho \\"\\n# Local services\\nx1server 1337/tcp # X1 Intellitrac GPS tracking server\\" > /etc/services;\\n\\nCréons également le service xinetd. Pour ce faire, il faut créer un fichier de\\nconfiguration dans le répertoire /etc/xinetd.d/. Dans mon cas, le fichier\\nressemble à cela :\\n\\necho \\"# default: on\\n# description: X1 Intellitrac GPS tracking server\\nservice x1server\\n{\\n port= 1337\\n socket_type= stream\\n wait= no\\n user= x1server\\n server= /home/x1server/bin/x1server\\n server_args /home/x1server/log\\n log_on_success+= USERID\\n log_on_failure+= USERID\\n instances= 30\\n disable= no\\n flags= NODELAY\\n nice= -20\\n}\\" >> /etc/xinet.d/x1server\\n\\nLe port utilisé est 1337, nous le précisons avec la directive port. La directive \\nuser permet d\'éxecuter le processus pour un utilisateur particuler ce qui permet\\nde sandboxer ce dernier et éviter les effets de bord d\'un éventuel trou de\\nsécurité. La directive instances précise le nombre d\'instances maximales pour ce\\nserveur. Elle permet d\'éviter les attaques ddos.\\n\\nLa directive server désigne le fichier à exécuter. Dans mon cas, il s\'agit du\\nprojet X1 Intellitrac GPS Logger [https://github.com/nfroidure/X1-GPS-Logger]\\ncompilé directement sur la machine hôte avec la commande suivante :\\n\\nwget https://github.com/nfroidure/X1-GPS-Logger/archive/master.tar.gz\\ntar -xzvf master.tar.gz\\nmkdir /home/x1server/bin\\ng++ /home/x1server/X1-GPS-Logger-master/main.c -o /home/x1server/bin/x1server\\nchmod u+x /home/x1server/bin/x1server\\nrm -rf /home/x1server/X1-GPS-Logger-master /home/x1server/master.tar.gz\\n\\nLa directive server_args permet de préciser les arguments à utiliser pour\\ndémarrer le serveur. Dans notre cas, l\'argument est le dossier de destination\\ndes logs. Surtout, il ne faut pas oublier de créer ce dossier :\\n\\nmkdir /home/x1server/log\\nchown x1server:x1server /home/x1server/log\\n\\nENVOYEZ LE BOUSIN !\\nIl ne reste plus qu\'à redémarrer le serveur xinetd pour démarrer le service\\ncorrespondant :\\n\\n/etc/init.d/xinetd restart\\n\\nOPTIMISATIONS\\nVous aurez peut-être remarqué la directive flags = NODELAY. Cette directive\\npermet d\'éviter que les entrées/sorties (notamment stdout dans notre cas) ne\\nsoient buffurisées. En effet, le satané protocole des boitiers X1 Intellitrac\\n[http://www.nomadicsolutions.biz/produit/x1-intellitrac/]impose de renvoyer\\nintacts les 8 octets de synchronisation reçu par le serveur au boitier. Or, j\'ai\\nrencontré un problème de buffurisation qui provoquait l\'envoi des octets trop\\ntard.\\n\\nJ\'ai aussi ajouté par la suite une directive nice pour privilégier ces processus\\npeu gourmands, mais dont la réactivité est essentielle. Toutes les directives\\nd\'xinetd sont très bien documentées sur cette page\\n[http://manpages.ubuntu.com/manpages/cosmic/en/man5/xinetd.conf.5.html].\\n\\nRÉSULTAT\\nJ\'ai couplé ces logs avec un petit driver\\n[https://github.com/nfroidure/Rest4/blob/master/php/class.RestXgpsPositionDriver.php]\\npour Rest4 [https://github.com/Rest4/Rest4-php]. Le résultat donne ceci :\\n\\n Capture d\'écran du logiciel de visualisation [/images/capture-vigisystem.png]\\n\\n< Blog [/fr/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc158:JSON.parse('{"path":"contents/pages/fr/blog/index.html","title":"Blog d\'un développeur web à Lille","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBLOG\\nSur mon blog, vous trouverez de nombreux articles sur le développement web mais\\naussi sur l’administration système, l’informatique, le hacking et la\\nprogrammation en général. Mes langages préférés : Javascript, HTML5, PHP/MySQL\\net REST\\n\\n Rendre votre contenu Markdown avec React via l\'AST\\n[/fr/blog/markdown_ast_vers_react.html] \\n\\nOù comment ne plus jamais utiliser dangerouslySetInnerHTML.\\n\\nPublié le mercredi 1 décembre 2021 23:00\\n\\n Obtenir 4 PR facilement et utilement pour l\'Hacktoberfest\\n[/fr/blog/hacktobefest_4_pr_facilement.html] \\n\\nVous voulez participer à l\'Hacktoberfest et gagner un t-shirt, voire mieux,\\nplanter un arbre ? Suivez le guide !\\n\\nPublié le mardi 12 octobre 2021 11:07\\n\\n Kafka avec docker-compose [/fr/blog/kafka_docker_compose.html] \\n\\nFaire tourner Apache Kafka en local avec docker-compose.\\n\\nPublié le jeudi 31 décembre 2020 14:07\\n\\n Injection de dépendances avec NodeJS\\n[/fr/blog/injection_de_dependance_nodejs.html] \\n\\nPrésentation donnée lors du ChtiJS 21 à propos de l\'injection de dépendances en\\nJavaScript.\\n\\nPublié le samedi 2 février 2019 08:00\\n\\n Ma configuration VSCode [/fr/blog/ma_config_vscode.html] \\n\\nPetit tour d\'horizon de ma configuration VSCode pour ceux que ça peut intéresser\\n;).\\n\\nPublié le dimanche 30 décembre 2018 21:00\\n\\n Critique du livre : Les 7 habitudes de Stephen R. Covey\\n[/fr/blog/les_7_habitudes.html] \\n\\nLes 7 habitudes des gens qui réussissent tout ce qu\'ils entreprennent de Stephen\\nR. Covey vous propose de diriger votre vie selon vos principes. Pas si évident\\nque cela à la lecture de ce livre.\\n\\nPublié le samedi 28 octobre 2017 14:16\\n\\n Développer de l\'impact [/fr/blog/developper_de_l_impact.html] \\n\\nPrésentation donnée lors du Club Tech à Euratechnologies.\\n\\nPublié le mercredi 25 octobre 2017 15:00\\n\\n Documentation d\'applications en JavaScript\\n[/fr/blog/documentation_du_code.html] \\n\\nDocumenter son code est parfois fastidieux. Pourtant, c\'est une nécessité. Petit\\nretour d\'expérience sur les techniques et outils que j\'utilise.\\n\\nPublié le samedi 11 mars 2017 19:02\\n\\n Normalisation des retours JSON [/fr/blog/normalisation_retours_json.html] \\n\\nPeu de gens pensent à normaliser les JSON en début de projet. C\'est dommage car\\nc\'est le meilleur moment pour.\\n\\nPublié le vendredi 3 mars 2017 11:07\\n\\n Génération automatique de clients d\'APIs [/fr/blog/generation_api_cliente.html] \\n\\nPersonne de devrait perdre du temps à écrire du code qui peut être généré\\nautomatiquement. Voici comment je m\'y prends pour les clients d\'APIs.\\n\\nPublié le dimanche 19 février 2017 16:00\\n\\n «Histoire des Mathématiques» par Mickaël Launay\\n[/fr/blog/histoire_des_mathematiques.html] \\n\\nCritique du livre «Histoire des Mathématiques» par Mickaël Launay\\n\\nPublié le samedi 11 février 2017 19:02\\n\\n Méta-paquets NPM avec metapak [/fr/blog/metapak.html] \\n\\nPrésentation sur metapak, un module d\'aide à la création de méta-paquets NPM.\\n\\nPublié le dimanche 5 février 2017 08:46\\n\\n Micro-services first avec NodeJS\\n[/fr/blog/presentation_nodejs_rest_microservices.html] \\n\\nRetour rapide sur ma présentation au ChtiJS 15 sur les microservices et le\\ndesign d\'APIs avec NodeJS.\\n\\nPublié le dimanche 28 février 2016 21:32\\n\\n Architecture d\'une API NodeJS [/fr/blog/infrastructure_microservices.html] \\n\\nPrésentation d\'une architecture d\'API REST réalisée avec des microservices.\\n\\nPublié le mardi 12 mai 2015 10:21\\n\\n ES6 dans ton code [/fr/blog/es6_dans_ton_code.html] \\n\\nPrésentation sur les évolutions apportées par la version 6 d\'ECMAScript donnée à\\nl\'occasion de ChtiJS.\\n\\nPublié le mardi 12 mai 2015 10:21\\n\\n MongoDB ou la conception probabiliste\\n[/fr/blog/design_probabiliste_mongodb.html] \\n\\nConcevoir une base de donnée MongoDB c\'est composer avec le hasard. Dans ce\\nbillet je vous propose de découvrir pourquoi et comment.\\n\\nPublié le samedi 4 avril 2015 15:29\\n\\n Design de bases de données MongoDB [/fr/blog/design_base_donnee_mongodb.html] \\n\\nLe design de bases de données MongoDB est une activité complexe qui nécessite\\nd\'avoir une profonde connaissance des implications des divers choix possibles.\\n\\nPublié le samedi 28 mars 2015 13:40\\n\\n Améliorer les erreurs JavaScript [/fr/blog/erreurs_javascript_ameliorees.html] \\n\\nPour un meilleur débogage, il faut de meilleures erreurs. C\'est pourquoi j\'ai\\nmis en place une stratégie pour les rendre plus pertinentes.\\n\\nPublié le dimanche 15 mars 2015 12:04\\n\\n Faire mieux qu\'AngularJS avec require()\\n[/fr/blog/faire-mieux-qu-angular-avec-require.html] \\n\\nLe système CommonJS-like de NodeJS permet un grand nombre de subtilités. Je vous\\npropose de les découvrir en reproduisant les fonctionnalités du système de\\nmodules d\'AngularJS.\\n\\nPublié le jeudi 12 mars 2015 08:49\\n\\n Surveillez les dépendances de vos projets NodeJS [/fr/blog/watchdeps.html] \\n\\nAvec watchdeps abonnez-vous automatiquement aux dépendences de vos projets\\nNodeJS sur GitHub.\\n\\nPublié le dimanche 8 mars 2015 11:07\\n\\nSuivant [/fr/blog/index-2.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc159:JSON.parse('{"path":"contents/pages/fr/blog/index.atom","title":"Blog d\'un développeur web à Lille","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index.html InsertAfter : Blog d\'un développeur\\nweb à Lille Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille. \\n2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/markdown_ast_vers_react.html Rendre votre\\ncontenu Markdown avec React via l\'AST 2021-12-01T22:00:00.000Z \\n2021-12-01T22:00:00.000Z Où comment ne plus jamais utiliser\\ndangerouslySetInnerHTML. \\nhttps://insertafter.com/fr/blog/hacktobefest_4_pr_facilement.html Obtenir 4 PR\\nfacilement et utilement pour l\'Hacktoberfest 2021-10-12T09:07:32.000Z \\n2021-10-12T09:07:32.000Z Vous voulez participer à l\'Hacktoberfest et gagner un\\nt-shirt, voire mieux, planter un arbre ? Suivez le guide ! \\nhttps://insertafter.com/fr/blog/kafka_docker_compose.html Kafka avec\\ndocker-compose 2020-12-31T13:07:32.000Z 2020-12-31T13:07:32.000Z Faire tourner\\nApache Kafka en local avec docker-compose. \\nhttps://insertafter.com/fr/blog/injection_de_dependance_nodejs.html Injection de\\ndépendances avec NodeJS 2019-02-02T07:00:00.000Z 2019-02-02T07:00:00.000Z \\nPrésentation donnée lors du ChtiJS 21 à propos de l\'injection de dépendances en\\nJavaScript. https://insertafter.com/fr/blog/ma_config_vscode.html Ma\\nconfiguration VSCode 2018-12-30T20:00:00.000Z 2018-12-30T20:00:00.000Z Petit\\ntour d\'horizon de ma configuration VSCode pour ceux que ça peut intéresser ;). \\nhttps://insertafter.com/fr/blog/les_7_habitudes.html Critique du livre : Les 7\\nhabitudes de Stephen R. Covey 2017-10-28T12:16:03.000Z 2017-10-28T12:16:03.000Z \\nLes 7 habitudes des gens qui réussissent tout ce qu\'ils entreprennent de Stephen\\nR. Covey vous propose de diriger votre vie selon vos principes. Pas si évident\\nque cela à la lecture de ce livre. \\nhttps://insertafter.com/fr/blog/developper_de_l_impact.html Développer de\\nl\'impact 2017-10-25T13:00:00.000Z 2017-10-25T13:00:00.000Z Présentation donnée\\nlors du Club Tech à Euratechnologies. \\nhttps://insertafter.com/fr/blog/documentation_du_code.html Documentation\\nd\'applications en JavaScript 2017-03-11T18:02:27.000Z 2017-03-11T18:02:27.000Z \\nDocumenter son code est parfois fastidieux. Pourtant, c\'est une nécessité. Petit\\nretour d\'expérience sur les techniques et outils que j\'utilise. \\nhttps://insertafter.com/fr/blog/normalisation_retours_json.html Normalisation\\ndes retours JSON 2017-03-03T10:07:32.000Z 2017-03-03T10:07:32.000Z Peu de gens\\npensent à normaliser les JSON en début de projet. C\'est dommage car c\'est le\\nmeilleur moment pour. \\nhttps://insertafter.com/fr/blog/generation_api_cliente.html Génération\\nautomatique de clients d\'APIs 2017-02-19T15:00:00.000Z 2017-02-19T15:00:00.000Z \\nPersonne de devrait perdre du temps à écrire du code qui peut être généré\\nautomatiquement. Voici comment je m\'y prends pour les clients d\'APIs. \\nhttps://insertafter.com/fr/blog/histoire_des_mathematiques.html «Histoire des\\nMathématiques» par Mickaël Launay 2017-02-11T18:02:27.000Z \\n2017-02-11T18:02:27.000Z Critique du livre «Histoire des Mathématiques» par\\nMickaël Launay https://insertafter.com/fr/blog/metapak.html Méta-paquets NPM\\navec metapak 2017-02-05T07:46:44.000Z 2017-02-05T07:46:44.000Z Présentation sur\\nmetapak, un module d\'aide à la création de méta-paquets NPM. \\nhttps://insertafter.com/fr/blog/presentation_nodejs_rest_microservices.html \\nMicro-services first avec NodeJS 2016-02-28T20:32:43.033Z \\n2016-02-28T20:32:43.033Z Retour rapide sur ma présentation au ChtiJS 15 sur les\\nmicroservices et le design d\'APIs avec NodeJS. \\nhttps://insertafter.com/fr/blog/infrastructure_microservices.html Architecture\\nd\'une API NodeJS 2015-05-12T08:21:43.000Z 2015-05-12T08:21:43.000Z Présentation\\nd\'une architecture d\'API REST réalisée avec des microservices. \\nhttps://insertafter.com/fr/blog/es6_dans_ton_code.html ES6 dans ton code \\n2015-05-12T08:21:43.000Z 2015-05-12T08:21:43.000Z Présentation sur les\\névolutions apportées par la version 6 d\'ECMAScript donnée à l\'occasion de\\nChtiJS. https://insertafter.com/fr/blog/design_probabiliste_mongodb.html MongoDB\\nou la conception probabiliste 2015-04-04T13:29:02.000Z 2015-04-04T13:29:02.000Z \\nConcevoir une base de donnée MongoDB c\'est composer avec le hasard. Dans ce\\nbillet je vous propose de découvrir pourquoi et comment. \\nhttps://insertafter.com/fr/blog/design_base_donnee_mongodb.html Design de bases\\nde données MongoDB 2015-03-28T12:40:32.000Z 2015-03-28T12:40:32.000Z Le design\\nde bases de données MongoDB est une activité complexe qui nécessite d\'avoir une\\nprofonde connaissance des implications des divers choix possibles. \\nhttps://insertafter.com/fr/blog/erreurs_javascript_ameliorees.html Améliorer les\\nerreurs JavaScript 2015-03-15T11:04:02.000Z 2015-03-15T11:04:02.000Z Pour un\\nmeilleur débogage, il faut de meilleures erreurs. C\'est pourquoi j\'ai mis en\\nplace une stratégie pour les rendre plus pertinentes. \\nhttps://insertafter.com/fr/blog/faire-mieux-qu-angular-avec-require.html Faire\\nmieux qu\'AngularJS avec require() 2015-03-12T07:49:00.000Z \\n2015-03-12T07:49:00.000Z Le système CommonJS-like de NodeJS permet un grand\\nnombre de subtilités. Je vous propose de les découvrir en reproduisant les\\nfonctionnalités du système de modules d\'AngularJS. \\nhttps://insertafter.com/fr/blog/watchdeps.html Surveillez les dépendances de vos\\nprojets NodeJS 2015-03-08T10:07:32.000Z 2015-03-08T10:07:32.000Z Avec watchdeps\\nabonnez-vous automatiquement aux dépendences de vos projets NodeJS sur GitHub."}'),doc160:JSON.parse('{"path":"contents/pages/articles.atom","title":"Blog d\'un développeur web à Lille","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index.html InsertAfter : Blog d\'un développeur\\nweb à Lille Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille. \\n2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/markdown_ast_vers_react.html Rendre votre\\ncontenu Markdown avec React via l\'AST 2021-12-01T22:00:00.000Z \\n2021-12-01T22:00:00.000Z Où comment ne plus jamais utiliser\\ndangerouslySetInnerHTML. \\nhttps://insertafter.com/fr/blog/hacktobefest_4_pr_facilement.html Obtenir 4 PR\\nfacilement et utilement pour l\'Hacktoberfest 2021-10-12T09:07:32.000Z \\n2021-10-12T09:07:32.000Z Vous voulez participer à l\'Hacktoberfest et gagner un\\nt-shirt, voire mieux, planter un arbre ? Suivez le guide ! \\nhttps://insertafter.com/fr/blog/kafka_docker_compose.html Kafka avec\\ndocker-compose 2020-12-31T13:07:32.000Z 2020-12-31T13:07:32.000Z Faire tourner\\nApache Kafka en local avec docker-compose. \\nhttps://insertafter.com/fr/blog/injection_de_dependance_nodejs.html Injection de\\ndépendances avec NodeJS 2019-02-02T07:00:00.000Z 2019-02-02T07:00:00.000Z \\nPrésentation donnée lors du ChtiJS 21 à propos de l\'injection de dépendances en\\nJavaScript. https://insertafter.com/fr/blog/ma_config_vscode.html Ma\\nconfiguration VSCode 2018-12-30T20:00:00.000Z 2018-12-30T20:00:00.000Z Petit\\ntour d\'horizon de ma configuration VSCode pour ceux que ça peut intéresser ;). \\nhttps://insertafter.com/fr/blog/les_7_habitudes.html Critique du livre : Les 7\\nhabitudes de Stephen R. Covey 2017-10-28T12:16:03.000Z 2017-10-28T12:16:03.000Z \\nLes 7 habitudes des gens qui réussissent tout ce qu\'ils entreprennent de Stephen\\nR. Covey vous propose de diriger votre vie selon vos principes. Pas si évident\\nque cela à la lecture de ce livre. \\nhttps://insertafter.com/fr/blog/developper_de_l_impact.html Développer de\\nl\'impact 2017-10-25T13:00:00.000Z 2017-10-25T13:00:00.000Z Présentation donnée\\nlors du Club Tech à Euratechnologies. \\nhttps://insertafter.com/fr/blog/documentation_du_code.html Documentation\\nd\'applications en JavaScript 2017-03-11T18:02:27.000Z 2017-03-11T18:02:27.000Z \\nDocumenter son code est parfois fastidieux. Pourtant, c\'est une nécessité. Petit\\nretour d\'expérience sur les techniques et outils que j\'utilise. \\nhttps://insertafter.com/fr/blog/normalisation_retours_json.html Normalisation\\ndes retours JSON 2017-03-03T10:07:32.000Z 2017-03-03T10:07:32.000Z Peu de gens\\npensent à normaliser les JSON en début de projet. C\'est dommage car c\'est le\\nmeilleur moment pour. \\nhttps://insertafter.com/fr/blog/generation_api_cliente.html Génération\\nautomatique de clients d\'APIs 2017-02-19T15:00:00.000Z 2017-02-19T15:00:00.000Z \\nPersonne de devrait perdre du temps à écrire du code qui peut être généré\\nautomatiquement. Voici comment je m\'y prends pour les clients d\'APIs. \\nhttps://insertafter.com/fr/blog/histoire_des_mathematiques.html «Histoire des\\nMathématiques» par Mickaël Launay 2017-02-11T18:02:27.000Z \\n2017-02-11T18:02:27.000Z Critique du livre «Histoire des Mathématiques» par\\nMickaël Launay https://insertafter.com/fr/blog/metapak.html Méta-paquets NPM\\navec metapak 2017-02-05T07:46:44.000Z 2017-02-05T07:46:44.000Z Présentation sur\\nmetapak, un module d\'aide à la création de méta-paquets NPM. \\nhttps://insertafter.com/fr/blog/presentation_nodejs_rest_microservices.html \\nMicro-services first avec NodeJS 2016-02-28T20:32:43.033Z \\n2016-02-28T20:32:43.033Z Retour rapide sur ma présentation au ChtiJS 15 sur les\\nmicroservices et le design d\'APIs avec NodeJS. \\nhttps://insertafter.com/fr/blog/infrastructure_microservices.html Architecture\\nd\'une API NodeJS 2015-05-12T08:21:43.000Z 2015-05-12T08:21:43.000Z Présentation\\nd\'une architecture d\'API REST réalisée avec des microservices. \\nhttps://insertafter.com/fr/blog/es6_dans_ton_code.html ES6 dans ton code \\n2015-05-12T08:21:43.000Z 2015-05-12T08:21:43.000Z Présentation sur les\\névolutions apportées par la version 6 d\'ECMAScript donnée à l\'occasion de\\nChtiJS. https://insertafter.com/fr/blog/design_probabiliste_mongodb.html MongoDB\\nou la conception probabiliste 2015-04-04T13:29:02.000Z 2015-04-04T13:29:02.000Z \\nConcevoir une base de donnée MongoDB c\'est composer avec le hasard. Dans ce\\nbillet je vous propose de découvrir pourquoi et comment. \\nhttps://insertafter.com/fr/blog/design_base_donnee_mongodb.html Design de bases\\nde données MongoDB 2015-03-28T12:40:32.000Z 2015-03-28T12:40:32.000Z Le design\\nde bases de données MongoDB est une activité complexe qui nécessite d\'avoir une\\nprofonde connaissance des implications des divers choix possibles. \\nhttps://insertafter.com/fr/blog/erreurs_javascript_ameliorees.html Améliorer les\\nerreurs JavaScript 2015-03-15T11:04:02.000Z 2015-03-15T11:04:02.000Z Pour un\\nmeilleur débogage, il faut de meilleures erreurs. C\'est pourquoi j\'ai mis en\\nplace une stratégie pour les rendre plus pertinentes. \\nhttps://insertafter.com/fr/blog/faire-mieux-qu-angular-avec-require.html Faire\\nmieux qu\'AngularJS avec require() 2015-03-12T07:49:00.000Z \\n2015-03-12T07:49:00.000Z Le système CommonJS-like de NodeJS permet un grand\\nnombre de subtilités. Je vous propose de les découvrir en reproduisant les\\nfonctionnalités du système de modules d\'AngularJS. \\nhttps://insertafter.com/fr/blog/watchdeps.html Surveillez les dépendances de vos\\nprojets NodeJS 2015-03-08T10:07:32.000Z 2015-03-08T10:07:32.000Z Avec watchdeps\\nabonnez-vous automatiquement aux dépendences de vos projets NodeJS sur GitHub."}'),doc161:JSON.parse('{"path":"contents/pages/fr/blog/index.rss","title":"Blog d\'un développeur web à Lille","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Rendre votre contenu Markdown avec React via l\'AST \\nOù comment ne plus jamais utiliser dangerouslySetInnerHTML. \\nhttps://insertafter.com/fr/blog/markdown_ast_vers_react.html \\n2021-12-01T22:00:00.000Z Obtenir 4 PR facilement et utilement pour\\nl\'Hacktoberfest Vous voulez participer à l\'Hacktoberfest et gagner un t-shirt,\\nvoire mieux, planter un arbre ? Suivez le guide ! \\nhttps://insertafter.com/fr/blog/hacktobefest_4_pr_facilement.html \\n2021-10-12T09:07:32.000Z Kafka avec docker-compose Faire tourner Apache Kafka en\\nlocal avec docker-compose. \\nhttps://insertafter.com/fr/blog/kafka_docker_compose.html \\n2020-12-31T13:07:32.000Z Injection de dépendances avec NodeJS Présentation\\ndonnée lors du ChtiJS 21 à propos de l\'injection de dépendances en JavaScript. \\nhttps://insertafter.com/fr/blog/injection_de_dependance_nodejs.html \\n2019-02-02T07:00:00.000Z Ma configuration VSCode Petit tour d\'horizon de ma\\nconfiguration VSCode pour ceux que ça peut intéresser ;). \\nhttps://insertafter.com/fr/blog/ma_config_vscode.html 2018-12-30T20:00:00.000Z \\nCritique du livre : Les 7 habitudes de Stephen R. Covey Les 7 habitudes des gens\\nqui réussissent tout ce qu\'ils entreprennent de Stephen R. Covey vous propose de\\ndiriger votre vie selon vos principes. Pas si évident que cela à la lecture de\\nce livre. https://insertafter.com/fr/blog/les_7_habitudes.html \\n2017-10-28T12:16:03.000Z Développer de l\'impact Présentation donnée lors du Club\\nTech à Euratechnologies. \\nhttps://insertafter.com/fr/blog/developper_de_l_impact.html \\n2017-10-25T13:00:00.000Z Documentation d\'applications en JavaScript Documenter\\nson code est parfois fastidieux. Pourtant, c\'est une nécessité. Petit retour\\nd\'expérience sur les techniques et outils que j\'utilise. \\nhttps://insertafter.com/fr/blog/documentation_du_code.html \\n2017-03-11T18:02:27.000Z Normalisation des retours JSON Peu de gens pensent à\\nnormaliser les JSON en début de projet. C\'est dommage car c\'est le meilleur\\nmoment pour. https://insertafter.com/fr/blog/normalisation_retours_json.html \\n2017-03-03T10:07:32.000Z Génération automatique de clients d\'APIs Personne de\\ndevrait perdre du temps à écrire du code qui peut être généré automatiquement.\\nVoici comment je m\'y prends pour les clients d\'APIs. \\nhttps://insertafter.com/fr/blog/generation_api_cliente.html \\n2017-02-19T15:00:00.000Z «Histoire des Mathématiques» par Mickaël Launay \\nCritique du livre «Histoire des Mathématiques» par Mickaël Launay \\nhttps://insertafter.com/fr/blog/histoire_des_mathematiques.html \\n2017-02-11T18:02:27.000Z Méta-paquets NPM avec metapak Présentation sur metapak,\\nun module d\'aide à la création de méta-paquets NPM. \\nhttps://insertafter.com/fr/blog/metapak.html 2017-02-05T07:46:44.000Z \\nMicro-services first avec NodeJS Retour rapide sur ma présentation au ChtiJS 15\\nsur les microservices et le design d\'APIs avec NodeJS. \\nhttps://insertafter.com/fr/blog/presentation_nodejs_rest_microservices.html \\n2016-02-28T20:32:43.033Z Architecture d\'une API NodeJS Présentation d\'une\\narchitecture d\'API REST réalisée avec des microservices. \\nhttps://insertafter.com/fr/blog/infrastructure_microservices.html \\n2015-05-12T08:21:43.000Z ES6 dans ton code Présentation sur les évolutions\\napportées par la version 6 d\'ECMAScript donnée à l\'occasion de ChtiJS. \\nhttps://insertafter.com/fr/blog/es6_dans_ton_code.html 2015-05-12T08:21:43.000Z \\nMongoDB ou la conception probabiliste Concevoir une base de donnée MongoDB c\'est\\ncomposer avec le hasard. Dans ce billet je vous propose de découvrir pourquoi et\\ncomment. https://insertafter.com/fr/blog/design_probabiliste_mongodb.html \\n2015-04-04T13:29:02.000Z Design de bases de données MongoDB Le design de bases\\nde données MongoDB est une activité complexe qui nécessite d\'avoir une profonde\\nconnaissance des implications des divers choix possibles. \\nhttps://insertafter.com/fr/blog/design_base_donnee_mongodb.html \\n2015-03-28T12:40:32.000Z Améliorer les erreurs JavaScript Pour un meilleur\\ndébogage, il faut de meilleures erreurs. C\'est pourquoi j\'ai mis en place une\\nstratégie pour les rendre plus pertinentes. \\nhttps://insertafter.com/fr/blog/erreurs_javascript_ameliorees.html \\n2015-03-15T11:04:02.000Z Faire mieux qu\'AngularJS avec require() Le système\\nCommonJS-like de NodeJS permet un grand nombre de subtilités. Je vous propose de\\nles découvrir en reproduisant les fonctionnalités du système de modules\\nd\'AngularJS. \\nhttps://insertafter.com/fr/blog/faire-mieux-qu-angular-avec-require.html \\n2015-03-12T07:49:00.000Z Surveillez les dépendances de vos projets NodeJS Avec\\nwatchdeps abonnez-vous automatiquement aux dépendences de vos projets NodeJS sur\\nGitHub. https://insertafter.com/fr/blog/watchdeps.html 2015-03-08T10:07:32.000Z"}'),doc162:JSON.parse('{"path":"contents/pages/articles.rss","title":"Blog d\'un développeur web à Lille","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Rendre votre contenu Markdown avec React via l\'AST \\nOù comment ne plus jamais utiliser dangerouslySetInnerHTML. \\nhttps://insertafter.com/fr/blog/markdown_ast_vers_react.html \\n2021-12-01T22:00:00.000Z Obtenir 4 PR facilement et utilement pour\\nl\'Hacktoberfest Vous voulez participer à l\'Hacktoberfest et gagner un t-shirt,\\nvoire mieux, planter un arbre ? Suivez le guide ! \\nhttps://insertafter.com/fr/blog/hacktobefest_4_pr_facilement.html \\n2021-10-12T09:07:32.000Z Kafka avec docker-compose Faire tourner Apache Kafka en\\nlocal avec docker-compose. \\nhttps://insertafter.com/fr/blog/kafka_docker_compose.html \\n2020-12-31T13:07:32.000Z Injection de dépendances avec NodeJS Présentation\\ndonnée lors du ChtiJS 21 à propos de l\'injection de dépendances en JavaScript. \\nhttps://insertafter.com/fr/blog/injection_de_dependance_nodejs.html \\n2019-02-02T07:00:00.000Z Ma configuration VSCode Petit tour d\'horizon de ma\\nconfiguration VSCode pour ceux que ça peut intéresser ;). \\nhttps://insertafter.com/fr/blog/ma_config_vscode.html 2018-12-30T20:00:00.000Z \\nCritique du livre : Les 7 habitudes de Stephen R. Covey Les 7 habitudes des gens\\nqui réussissent tout ce qu\'ils entreprennent de Stephen R. Covey vous propose de\\ndiriger votre vie selon vos principes. Pas si évident que cela à la lecture de\\nce livre. https://insertafter.com/fr/blog/les_7_habitudes.html \\n2017-10-28T12:16:03.000Z Développer de l\'impact Présentation donnée lors du Club\\nTech à Euratechnologies. \\nhttps://insertafter.com/fr/blog/developper_de_l_impact.html \\n2017-10-25T13:00:00.000Z Documentation d\'applications en JavaScript Documenter\\nson code est parfois fastidieux. Pourtant, c\'est une nécessité. Petit retour\\nd\'expérience sur les techniques et outils que j\'utilise. \\nhttps://insertafter.com/fr/blog/documentation_du_code.html \\n2017-03-11T18:02:27.000Z Normalisation des retours JSON Peu de gens pensent à\\nnormaliser les JSON en début de projet. C\'est dommage car c\'est le meilleur\\nmoment pour. https://insertafter.com/fr/blog/normalisation_retours_json.html \\n2017-03-03T10:07:32.000Z Génération automatique de clients d\'APIs Personne de\\ndevrait perdre du temps à écrire du code qui peut être généré automatiquement.\\nVoici comment je m\'y prends pour les clients d\'APIs. \\nhttps://insertafter.com/fr/blog/generation_api_cliente.html \\n2017-02-19T15:00:00.000Z «Histoire des Mathématiques» par Mickaël Launay \\nCritique du livre «Histoire des Mathématiques» par Mickaël Launay \\nhttps://insertafter.com/fr/blog/histoire_des_mathematiques.html \\n2017-02-11T18:02:27.000Z Méta-paquets NPM avec metapak Présentation sur metapak,\\nun module d\'aide à la création de méta-paquets NPM. \\nhttps://insertafter.com/fr/blog/metapak.html 2017-02-05T07:46:44.000Z \\nMicro-services first avec NodeJS Retour rapide sur ma présentation au ChtiJS 15\\nsur les microservices et le design d\'APIs avec NodeJS. \\nhttps://insertafter.com/fr/blog/presentation_nodejs_rest_microservices.html \\n2016-02-28T20:32:43.033Z Architecture d\'une API NodeJS Présentation d\'une\\narchitecture d\'API REST réalisée avec des microservices. \\nhttps://insertafter.com/fr/blog/infrastructure_microservices.html \\n2015-05-12T08:21:43.000Z ES6 dans ton code Présentation sur les évolutions\\napportées par la version 6 d\'ECMAScript donnée à l\'occasion de ChtiJS. \\nhttps://insertafter.com/fr/blog/es6_dans_ton_code.html 2015-05-12T08:21:43.000Z \\nMongoDB ou la conception probabiliste Concevoir une base de donnée MongoDB c\'est\\ncomposer avec le hasard. Dans ce billet je vous propose de découvrir pourquoi et\\ncomment. https://insertafter.com/fr/blog/design_probabiliste_mongodb.html \\n2015-04-04T13:29:02.000Z Design de bases de données MongoDB Le design de bases\\nde données MongoDB est une activité complexe qui nécessite d\'avoir une profonde\\nconnaissance des implications des divers choix possibles. \\nhttps://insertafter.com/fr/blog/design_base_donnee_mongodb.html \\n2015-03-28T12:40:32.000Z Améliorer les erreurs JavaScript Pour un meilleur\\ndébogage, il faut de meilleures erreurs. C\'est pourquoi j\'ai mis en place une\\nstratégie pour les rendre plus pertinentes. \\nhttps://insertafter.com/fr/blog/erreurs_javascript_ameliorees.html \\n2015-03-15T11:04:02.000Z Faire mieux qu\'AngularJS avec require() Le système\\nCommonJS-like de NodeJS permet un grand nombre de subtilités. Je vous propose de\\nles découvrir en reproduisant les fonctionnalités du système de modules\\nd\'AngularJS. \\nhttps://insertafter.com/fr/blog/faire-mieux-qu-angular-avec-require.html \\n2015-03-12T07:49:00.000Z Surveillez les dépendances de vos projets NodeJS Avec\\nwatchdeps abonnez-vous automatiquement aux dépendences de vos projets NodeJS sur\\nGitHub. https://insertafter.com/fr/blog/watchdeps.html 2015-03-08T10:07:32.000Z"}'),doc163:JSON.parse('{"path":"contents/pages/fr/blog/index-2.html","title":"Blog d\'un développeur web à Lille - 2","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBLOG\\nSur mon blog, vous trouverez de nombreux articles sur le développement web mais\\naussi sur l’administration système, l’informatique, le hacking et la\\nprogrammation en général. Mes langages préférés : Javascript, HTML5, PHP/MySQL\\net REST\\n\\n Bref, j\'ai lu Lean Startup [/fr/blog/bref_j_ai_lu_lean_startup.html] \\n\\nCritique du livre Lean Startup à travers le prisme d\'un développeur.\\n\\nPublié le lundi 2 mars 2015 19:02\\n\\n L\'isomorphisme par l\'exemple [/fr/blog/isomorphisme_par_l_exemple.html] \\n\\nPrésentation sur la gestion des droits dans une application JavaScript de façon\\nuniverselle.\\n\\nPublié le mardi 3 février 2015 08:08\\n\\n MongoDB : Retour d\'expérience [/fr/blog/retour_xp_mongodb.html] \\n\\nJe travaille avec MongoDB depuis maintenant presque un an, il est temps pour moi\\nde faire un petit retour sur cette base de données et sur le NoSQL de manière\\ngénérale.\\n\\nPublié le jeudi 4 décembre 2014 20:44\\n\\n Gulp : Retour d\'expérience [/fr/blog/retour_experience_gulp.html] \\n\\nComme promis, Gulp revient à l\'ordre du jour de ce Blog avec un retour\\nd\'expérience sur l\'utilisation de Gulp et le développement de plugins.\\n\\nPublié le dimanche 26 janvier 2014 09:01\\n\\n Gulp remplacera-t-il Grunt ? [/fr/blog/gulp_vs_grunt.html] \\n\\nGulp est un concurrent de Grunt qui se targue d\'exploiter les capacités des\\nstreams NodeJS. Petit passage en revue de cet outil.\\n\\nPublié le lundi 23 décembre 2013 23:25\\n\\n Browserify : Partager le code JavaScript entre front et back end\\n[/fr/blog/browserify.html] \\n\\nExécuter du JavaScript aussi bien côté serveur que dans le navigateur de vos\\nclients devient possible grâce à Browserify.\\n\\nPublié le lundi 16 décembre 2013 13:23\\n\\n Générer des fontes d\'icônes avec GruntJS [/fr/blog/gruntjs_font_icons.html] \\n\\nCette semaine, je me suis penché sur la génération de fontes automatiquement\\navec GruntJS. Compte rendu de mes découvertes et des développements qui les ont\\nsuivies.\\n\\nPublié le samedi 9 novembre 2013 15:25\\n\\n Un livre pour apprendre JavaScript [/fr/blog/livre_javascript.html] \\n\\nEn Avril 2013 j\'ai été contacté par MA-Édition pour écrire un livre sur\\nJavaScript. Aujourd\'hui, il est en librairie. Retour sur cette belle aventure.\\n\\nPublié le dimanche 22 septembre 2013 17:45\\n\\n L\'enseignement dirigé par les tests\\n[/fr/blog/enseignement_dirige_par_tests.html] \\n\\nLes tests unitaires et fonctionnels ont véritablement révolutionné le\\ndéveloppement professionnel, pourquoi pas également celui de l\'enseignement et\\nde la formation ?\\n\\nPublié le mercredi 4 septembre 2013 11:22\\n\\n Tester son JavaScript front end [/fr/blog/tester_javascript_frontend.html] \\n\\nDepuis que j\'ai découvert Karma, je ne me lasse plus de convertir mes projets\\npour lancer les tests grâce à cet outil. Retour d\'expérience et conseils pour\\nune utilisation pleine et entière.\\n\\nPublié le dimanche 25 août 2013 15:24\\n\\n Gestion des erreurs en JavaScript [/fr/blog/erreurs_javascript.html] \\n\\nGérer les erreurs en JavaScript peut paraître simple, mais il n\'est pas toujours\\névident de choisir entre exceptions, retours d\'erreurs et callbacks d\'erreurs.\\n\\nPublié le mardi 30 juillet 2013 15:18\\n\\n Bien choisir ses modules NodeJS : ma méthode\\n[/fr/blog/choisir_module_nodejs.html] \\n\\nHier à la troisième édition de ChtiJS, un question a été soulevée sur la\\nconfiance que l\'on pouvait avoir dans les modules NodeJS. Je vous dévoile donc\\nma méthode pour trancher entre npm install et npm remove ;).\\n\\nPublié le vendredi 26 juillet 2013 16:04\\n\\n Astuces pour utiliser pleinement RequireJS [/fr/blog/utiliser_requirejs.html] \\n\\nPour un projet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la\\npremière fois en production. J\'en profite pour vous faire un petit retour\\nd\'expérience avec quelques astuces de mon cru ;).\\n\\nPublié le jeudi 11 juillet 2013 11:57\\n\\n Les promises avec JavaScript : ouvrons le capot !\\n[/fr/blog/promises_javascript_ouvrons_capot.html] \\n\\nDans le petit monde de JavaScript les promises font l\'actualité. Je vous propose\\nde comprendre les promises par l\'implémentation.\\n\\nPublié le samedi 8 juin 2013 12:04\\n\\n Créer un bot IRC avec NodeJS [/fr/blog/creer_bot_irc_avec_nodejs.html] \\n\\nJ\'ai récemment pu tester la création d\'un bot NodeJS grâce à la mise en place de\\nMarionnette, le bot IRC de FranceJS.\\n\\nPublié le dimanche 5 mai 2013 10:04\\n\\n Les animations sur les sites web en 2013 [/fr/blog/animations_css3.html] \\n\\nOn a d\'abord connu les animations avec Flash, puis les animations sans Flash\\ngrâce aux frameworks JavaScript. Aujourd\'hui, ce sont les animations CSS3 qui\\noccupent le devant de la scène et, a priori, ça va durer.\\n\\nPublié le mercredi 3 avril 2013 18:02\\n\\n Gestion de flotte X1 Intellitrac avec xinetd sur Debian GNU Linux\\n[/fr/blog/xinetd_super_server.html] \\n\\nLe super server xinetd est vraiment très pratique pour des petits projets ne\\ndépassant pas un certain nombre de clients. Voici une petite illustration de son\\nutilité pour la localisation de flotte de véhicules.\\n\\nPublié le lundi 1 avril 2013 16:35\\n\\n CapsKiller : Stop aux majuscules [/fr/blog/capskiller_stop_aux_majuscules.html] \\n\\nLes digital natives supportent mal les majuscules dans les courriels. En effet,\\ncela est assimilé à des cris. Malheureusement, tout le monde n\'en fait pas grand\\ncas. CapsKiller pour Thunderbird est là pour vous en protéger.\\n\\nPublié le samedi 23 février 2013 12:05\\n\\n Une application desktop avec Chrome\\n[/fr/blog/application_desktop_avec_chrome.html] \\n\\nBien que HTML5 progresse de jour en jour, on aimerait parfois pouvoir accéder à\\nn\'importe quoi dans son navigateur. C\'est déjà possible, grâce à un nouveau\\npetit projet NodeJS.\\n\\nPublié le vendredi 8 février 2013 16:54\\n\\n Les subtilités de RegExp en Javascript [/fr/blog/subtilites_de_regexp.html] \\n\\nLes expressions régulières sont très peu populaires, elles sont pourtant\\nsurpuissantes. Néanmoins, il y a quelques subtilités à connaître, dont une que\\nj\'ai récemment apprise.\\n\\nPublié le samedi 2 février 2013 10:41\\n\\nPrécédent [/fr/blog/index.html] Suivant [/fr/blog/index-3.html] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc164:JSON.parse('{"path":"contents/pages/fr/blog/index-2.atom","title":"Blog d\'un développeur web à Lille - 2","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index-2.html InsertAfter : Blog d\'un\\ndéveloppeur web à Lille - 2 Blog de Nicolas Froidure, développeur JavaScript\\nfullstack à Lille. 2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/bref_j_ai_lu_lean_startup.html Bref, j\'ai lu\\nLean Startup 2015-03-02T18:02:27.000Z 2015-03-02T18:02:27.000Z Critique du livre\\nLean Startup à travers le prisme d\'un développeur. \\nhttps://insertafter.com/fr/blog/isomorphisme_par_l_exemple.html L\'isomorphisme\\npar l\'exemple 2015-02-03T07:08:19.000Z 2015-02-03T07:08:19.000Z Présentation sur\\nla gestion des droits dans une application JavaScript de façon universelle. \\nhttps://insertafter.com/fr/blog/retour_xp_mongodb.html MongoDB : Retour\\nd\'expérience 2014-12-04T19:44:40.000Z 2014-12-04T19:44:40.000Z Je travaille avec\\nMongoDB depuis maintenant presque un an, il est temps pour moi de faire un petit\\nretour sur cette base de données et sur le NoSQL de manière générale. \\nhttps://insertafter.com/fr/blog/retour_experience_gulp.html Gulp : Retour\\nd\'expérience 2014-01-26T08:01:26.000Z 2014-01-26T08:01:26.000Z Comme promis,\\nGulp revient à l\'ordre du jour de ce Blog avec un retour d\'expérience sur\\nl\'utilisation de Gulp et le développement de plugins. \\nhttps://insertafter.com/fr/blog/gulp_vs_grunt.html Gulp remplacera-t-il Grunt ? \\n2013-12-23T22:25:29.000Z 2013-12-23T22:25:29.000Z Gulp est un concurrent de\\nGrunt qui se targue d\'exploiter les capacités des streams NodeJS. Petit passage\\nen revue de cet outil. https://insertafter.com/fr/blog/browserify.html \\nBrowserify : Partager le code JavaScript entre front et back end \\n2013-12-16T12:23:52.000Z 2013-12-16T12:23:52.000Z Exécuter du JavaScript aussi\\nbien côté serveur que dans le navigateur de vos clients devient possible grâce à\\nBrowserify. https://insertafter.com/fr/blog/gruntjs_font_icons.html Générer des\\nfontes d\'icônes avec GruntJS 2013-11-09T14:25:29.000Z 2013-11-09T14:25:29.000Z \\nCette semaine, je me suis penché sur la génération de fontes automatiquement\\navec GruntJS. Compte rendu de mes découvertes et des développements qui les ont\\nsuivies. https://insertafter.com/fr/blog/livre_javascript.html Un livre pour\\napprendre JavaScript 2013-09-22T15:45:27.000Z 2013-09-22T15:45:27.000Z En Avril\\n2013 j\'ai été contacté par MA-Édition pour écrire un livre sur JavaScript.\\nAujourd\'hui, il est en librairie. Retour sur cette belle aventure. \\nhttps://insertafter.com/fr/blog/enseignement_dirige_par_tests.html \\nL\'enseignement dirigé par les tests 2013-09-04T09:22:53.000Z \\n2013-09-04T09:22:53.000Z Les tests unitaires et fonctionnels ont véritablement\\nrévolutionné le développement professionnel, pourquoi pas également celui de\\nl\'enseignement et de la formation ? \\nhttps://insertafter.com/fr/blog/tester_javascript_frontend.html Tester son\\nJavaScript front end 2013-08-25T13:24:22.000Z 2013-08-25T13:24:22.000Z Depuis\\nque j\'ai découvert Karma, je ne me lasse plus de convertir mes projets pour\\nlancer les tests grâce à cet outil. Retour d\'expérience et conseils pour une\\nutilisation pleine et entière. \\nhttps://insertafter.com/fr/blog/erreurs_javascript.html Gestion des erreurs en\\nJavaScript 2013-07-30T13:18:42.000Z 2013-07-30T13:18:42.000Z Gérer les erreurs\\nen JavaScript peut paraître simple, mais il n\'est pas toujours évident de\\nchoisir entre exceptions, retours d\'erreurs et callbacks d\'erreurs. \\nhttps://insertafter.com/fr/blog/choisir_module_nodejs.html Bien choisir ses\\nmodules NodeJS : ma méthode 2013-07-26T14:04:25.000Z 2013-07-26T14:04:25.000Z \\nHier à la troisième édition de ChtiJS, un question a été soulevée sur la\\nconfiance que l\'on pouvait avoir dans les modules NodeJS. Je vous dévoile donc\\nma méthode pour trancher entre npm install et npm remove ;). \\nhttps://insertafter.com/fr/blog/utiliser_requirejs.html Astuces pour utiliser\\npleinement RequireJS 2013-07-11T09:57:45.000Z 2013-07-11T09:57:45.000Z Pour un\\nprojet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la première\\nfois en production. J\'en profite pour vous faire un petit retour d\'expérience\\navec quelques astuces de mon cru ;). \\nhttps://insertafter.com/fr/blog/promises_javascript_ouvrons_capot.html Les\\npromises avec JavaScript : ouvrons le capot ! 2013-06-08T10:04:17.000Z \\n2013-06-08T10:04:17.000Z Dans le petit monde de JavaScript les promises font\\nl\'actualité. Je vous propose de comprendre les promises par l\'implémentation. \\nhttps://insertafter.com/fr/blog/creer_bot_irc_avec_nodejs.html Créer un bot IRC\\navec NodeJS 2013-05-05T08:04:57.000Z 2013-05-05T08:04:57.000Z J\'ai récemment pu\\ntester la création d\'un bot NodeJS grâce à la mise en place de Marionnette, le\\nbot IRC de FranceJS. https://insertafter.com/fr/blog/animations_css3.html Les\\nanimations sur les sites web en 2013 2013-04-03T16:02:18.000Z \\n2013-04-03T16:02:18.000Z On a d\'abord connu les animations avec Flash, puis les\\nanimations sans Flash grâce aux frameworks JavaScript. Aujourd\'hui, ce sont les\\nanimations CSS3 qui occupent le devant de la scène et, a priori, ça va durer. \\nhttps://insertafter.com/fr/blog/xinetd_super_server.html Gestion de flotte X1\\nIntellitrac avec xinetd sur Debian GNU Linux 2013-04-01T14:35:58.000Z \\n2013-04-01T14:35:58.000Z Le super server xinetd est vraiment très pratique pour\\ndes petits projets ne dépassant pas un certain nombre de clients. Voici une\\npetite illustration de son utilité pour la localisation de flotte de véhicules. \\nhttps://insertafter.com/fr/blog/capskiller_stop_aux_majuscules.html CapsKiller :\\nStop aux majuscules 2013-02-23T11:05:23.000Z 2013-02-23T11:05:23.000Z Les\\ndigital natives supportent mal les majuscules dans les courriels. En effet, cela\\nest assimilé à des cris. Malheureusement, tout le monde n\'en fait pas grand cas.\\nCapsKiller pour Thunderbird est là pour vous en protéger. \\nhttps://insertafter.com/fr/blog/application_desktop_avec_chrome.html Une\\napplication desktop avec Chrome 2013-02-08T15:54:30.000Z \\n2013-02-08T15:54:30.000Z Bien que HTML5 progresse de jour en jour, on aimerait\\nparfois pouvoir accéder à n\'importe quoi dans son navigateur. C\'est déjà\\npossible, grâce à un nouveau petit projet NodeJS. \\nhttps://insertafter.com/fr/blog/subtilites_de_regexp.html Les subtilités de\\nRegExp en Javascript 2013-02-02T09:41:13.000Z 2013-02-02T09:41:13.000Z Les\\nexpressions régulières sont très peu populaires, elles sont pourtant\\nsurpuissantes. Néanmoins, il y a quelques subtilités à connaître, dont une que\\nj\'ai récemment apprise."}'),doc165:JSON.parse('{"path":"contents/pages/articles.atom","title":"Blog d\'un développeur web à Lille - 2","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index-2.html InsertAfter : Blog d\'un\\ndéveloppeur web à Lille - 2 Blog de Nicolas Froidure, développeur JavaScript\\nfullstack à Lille. 2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/bref_j_ai_lu_lean_startup.html Bref, j\'ai lu\\nLean Startup 2015-03-02T18:02:27.000Z 2015-03-02T18:02:27.000Z Critique du livre\\nLean Startup à travers le prisme d\'un développeur. \\nhttps://insertafter.com/fr/blog/isomorphisme_par_l_exemple.html L\'isomorphisme\\npar l\'exemple 2015-02-03T07:08:19.000Z 2015-02-03T07:08:19.000Z Présentation sur\\nla gestion des droits dans une application JavaScript de façon universelle. \\nhttps://insertafter.com/fr/blog/retour_xp_mongodb.html MongoDB : Retour\\nd\'expérience 2014-12-04T19:44:40.000Z 2014-12-04T19:44:40.000Z Je travaille avec\\nMongoDB depuis maintenant presque un an, il est temps pour moi de faire un petit\\nretour sur cette base de données et sur le NoSQL de manière générale. \\nhttps://insertafter.com/fr/blog/retour_experience_gulp.html Gulp : Retour\\nd\'expérience 2014-01-26T08:01:26.000Z 2014-01-26T08:01:26.000Z Comme promis,\\nGulp revient à l\'ordre du jour de ce Blog avec un retour d\'expérience sur\\nl\'utilisation de Gulp et le développement de plugins. \\nhttps://insertafter.com/fr/blog/gulp_vs_grunt.html Gulp remplacera-t-il Grunt ? \\n2013-12-23T22:25:29.000Z 2013-12-23T22:25:29.000Z Gulp est un concurrent de\\nGrunt qui se targue d\'exploiter les capacités des streams NodeJS. Petit passage\\nen revue de cet outil. https://insertafter.com/fr/blog/browserify.html \\nBrowserify : Partager le code JavaScript entre front et back end \\n2013-12-16T12:23:52.000Z 2013-12-16T12:23:52.000Z Exécuter du JavaScript aussi\\nbien côté serveur que dans le navigateur de vos clients devient possible grâce à\\nBrowserify. https://insertafter.com/fr/blog/gruntjs_font_icons.html Générer des\\nfontes d\'icônes avec GruntJS 2013-11-09T14:25:29.000Z 2013-11-09T14:25:29.000Z \\nCette semaine, je me suis penché sur la génération de fontes automatiquement\\navec GruntJS. Compte rendu de mes découvertes et des développements qui les ont\\nsuivies. https://insertafter.com/fr/blog/livre_javascript.html Un livre pour\\napprendre JavaScript 2013-09-22T15:45:27.000Z 2013-09-22T15:45:27.000Z En Avril\\n2013 j\'ai été contacté par MA-Édition pour écrire un livre sur JavaScript.\\nAujourd\'hui, il est en librairie. Retour sur cette belle aventure. \\nhttps://insertafter.com/fr/blog/enseignement_dirige_par_tests.html \\nL\'enseignement dirigé par les tests 2013-09-04T09:22:53.000Z \\n2013-09-04T09:22:53.000Z Les tests unitaires et fonctionnels ont véritablement\\nrévolutionné le développement professionnel, pourquoi pas également celui de\\nl\'enseignement et de la formation ? \\nhttps://insertafter.com/fr/blog/tester_javascript_frontend.html Tester son\\nJavaScript front end 2013-08-25T13:24:22.000Z 2013-08-25T13:24:22.000Z Depuis\\nque j\'ai découvert Karma, je ne me lasse plus de convertir mes projets pour\\nlancer les tests grâce à cet outil. Retour d\'expérience et conseils pour une\\nutilisation pleine et entière. \\nhttps://insertafter.com/fr/blog/erreurs_javascript.html Gestion des erreurs en\\nJavaScript 2013-07-30T13:18:42.000Z 2013-07-30T13:18:42.000Z Gérer les erreurs\\nen JavaScript peut paraître simple, mais il n\'est pas toujours évident de\\nchoisir entre exceptions, retours d\'erreurs et callbacks d\'erreurs. \\nhttps://insertafter.com/fr/blog/choisir_module_nodejs.html Bien choisir ses\\nmodules NodeJS : ma méthode 2013-07-26T14:04:25.000Z 2013-07-26T14:04:25.000Z \\nHier à la troisième édition de ChtiJS, un question a été soulevée sur la\\nconfiance que l\'on pouvait avoir dans les modules NodeJS. Je vous dévoile donc\\nma méthode pour trancher entre npm install et npm remove ;). \\nhttps://insertafter.com/fr/blog/utiliser_requirejs.html Astuces pour utiliser\\npleinement RequireJS 2013-07-11T09:57:45.000Z 2013-07-11T09:57:45.000Z Pour un\\nprojet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la première\\nfois en production. J\'en profite pour vous faire un petit retour d\'expérience\\navec quelques astuces de mon cru ;). \\nhttps://insertafter.com/fr/blog/promises_javascript_ouvrons_capot.html Les\\npromises avec JavaScript : ouvrons le capot ! 2013-06-08T10:04:17.000Z \\n2013-06-08T10:04:17.000Z Dans le petit monde de JavaScript les promises font\\nl\'actualité. Je vous propose de comprendre les promises par l\'implémentation. \\nhttps://insertafter.com/fr/blog/creer_bot_irc_avec_nodejs.html Créer un bot IRC\\navec NodeJS 2013-05-05T08:04:57.000Z 2013-05-05T08:04:57.000Z J\'ai récemment pu\\ntester la création d\'un bot NodeJS grâce à la mise en place de Marionnette, le\\nbot IRC de FranceJS. https://insertafter.com/fr/blog/animations_css3.html Les\\nanimations sur les sites web en 2013 2013-04-03T16:02:18.000Z \\n2013-04-03T16:02:18.000Z On a d\'abord connu les animations avec Flash, puis les\\nanimations sans Flash grâce aux frameworks JavaScript. Aujourd\'hui, ce sont les\\nanimations CSS3 qui occupent le devant de la scène et, a priori, ça va durer. \\nhttps://insertafter.com/fr/blog/xinetd_super_server.html Gestion de flotte X1\\nIntellitrac avec xinetd sur Debian GNU Linux 2013-04-01T14:35:58.000Z \\n2013-04-01T14:35:58.000Z Le super server xinetd est vraiment très pratique pour\\ndes petits projets ne dépassant pas un certain nombre de clients. Voici une\\npetite illustration de son utilité pour la localisation de flotte de véhicules. \\nhttps://insertafter.com/fr/blog/capskiller_stop_aux_majuscules.html CapsKiller :\\nStop aux majuscules 2013-02-23T11:05:23.000Z 2013-02-23T11:05:23.000Z Les\\ndigital natives supportent mal les majuscules dans les courriels. En effet, cela\\nest assimilé à des cris. Malheureusement, tout le monde n\'en fait pas grand cas.\\nCapsKiller pour Thunderbird est là pour vous en protéger. \\nhttps://insertafter.com/fr/blog/application_desktop_avec_chrome.html Une\\napplication desktop avec Chrome 2013-02-08T15:54:30.000Z \\n2013-02-08T15:54:30.000Z Bien que HTML5 progresse de jour en jour, on aimerait\\nparfois pouvoir accéder à n\'importe quoi dans son navigateur. C\'est déjà\\npossible, grâce à un nouveau petit projet NodeJS. \\nhttps://insertafter.com/fr/blog/subtilites_de_regexp.html Les subtilités de\\nRegExp en Javascript 2013-02-02T09:41:13.000Z 2013-02-02T09:41:13.000Z Les\\nexpressions régulières sont très peu populaires, elles sont pourtant\\nsurpuissantes. Néanmoins, il y a quelques subtilités à connaître, dont une que\\nj\'ai récemment apprise."}'),doc166:JSON.parse('{"path":"contents/pages/fr/blog/index-2.rss","title":"Blog d\'un développeur web à Lille - 2","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille - 2 Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index-2.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Bref, j\'ai lu Lean Startup Critique du livre Lean\\nStartup à travers le prisme d\'un développeur. \\nhttps://insertafter.com/fr/blog/bref_j_ai_lu_lean_startup.html \\n2015-03-02T18:02:27.000Z L\'isomorphisme par l\'exemple Présentation sur la\\ngestion des droits dans une application JavaScript de façon universelle. \\nhttps://insertafter.com/fr/blog/isomorphisme_par_l_exemple.html \\n2015-02-03T07:08:19.000Z MongoDB : Retour d\'expérience Je travaille avec MongoDB\\ndepuis maintenant presque un an, il est temps pour moi de faire un petit retour\\nsur cette base de données et sur le NoSQL de manière générale. \\nhttps://insertafter.com/fr/blog/retour_xp_mongodb.html 2014-12-04T19:44:40.000Z \\nGulp : Retour d\'expérience Comme promis, Gulp revient à l\'ordre du jour de ce\\nBlog avec un retour d\'expérience sur l\'utilisation de Gulp et le développement\\nde plugins. https://insertafter.com/fr/blog/retour_experience_gulp.html \\n2014-01-26T08:01:26.000Z Gulp remplacera-t-il Grunt ? Gulp est un concurrent de\\nGrunt qui se targue d\'exploiter les capacités des streams NodeJS. Petit passage\\nen revue de cet outil. https://insertafter.com/fr/blog/gulp_vs_grunt.html \\n2013-12-23T22:25:29.000Z Browserify : Partager le code JavaScript entre front et\\nback end Exécuter du JavaScript aussi bien côté serveur que dans le navigateur\\nde vos clients devient possible grâce à Browserify. \\nhttps://insertafter.com/fr/blog/browserify.html 2013-12-16T12:23:52.000Z Générer\\ndes fontes d\'icônes avec GruntJS Cette semaine, je me suis penché sur la\\ngénération de fontes automatiquement avec GruntJS. Compte rendu de mes\\ndécouvertes et des développements qui les ont suivies. \\nhttps://insertafter.com/fr/blog/gruntjs_font_icons.html 2013-11-09T14:25:29.000Z \\nUn livre pour apprendre JavaScript En Avril 2013 j\'ai été contacté par\\nMA-Édition pour écrire un livre sur JavaScript. Aujourd\'hui, il est en\\nlibrairie. Retour sur cette belle aventure. \\nhttps://insertafter.com/fr/blog/livre_javascript.html 2013-09-22T15:45:27.000Z \\nL\'enseignement dirigé par les tests Les tests unitaires et fonctionnels ont\\nvéritablement révolutionné le développement professionnel, pourquoi pas\\négalement celui de l\'enseignement et de la formation ? \\nhttps://insertafter.com/fr/blog/enseignement_dirige_par_tests.html \\n2013-09-04T09:22:53.000Z Tester son JavaScript front end Depuis que j\'ai\\ndécouvert Karma, je ne me lasse plus de convertir mes projets pour lancer les\\ntests grâce à cet outil. Retour d\'expérience et conseils pour une utilisation\\npleine et entière. \\nhttps://insertafter.com/fr/blog/tester_javascript_frontend.html \\n2013-08-25T13:24:22.000Z Gestion des erreurs en JavaScript Gérer les erreurs en\\nJavaScript peut paraître simple, mais il n\'est pas toujours évident de choisir\\nentre exceptions, retours d\'erreurs et callbacks d\'erreurs. \\nhttps://insertafter.com/fr/blog/erreurs_javascript.html 2013-07-30T13:18:42.000Z \\nBien choisir ses modules NodeJS : ma méthode Hier à la troisième édition de\\nChtiJS, un question a été soulevée sur la confiance que l\'on pouvait avoir dans\\nles modules NodeJS. Je vous dévoile donc ma méthode pour trancher entre npm\\ninstall et npm remove ;). \\nhttps://insertafter.com/fr/blog/choisir_module_nodejs.html \\n2013-07-26T14:04:25.000Z Astuces pour utiliser pleinement RequireJS Pour un\\nprojet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la première\\nfois en production. J\'en profite pour vous faire un petit retour d\'expérience\\navec quelques astuces de mon cru ;). \\nhttps://insertafter.com/fr/blog/utiliser_requirejs.html 2013-07-11T09:57:45.000Z \\nLes promises avec JavaScript : ouvrons le capot ! Dans le petit monde de\\nJavaScript les promises font l\'actualité. Je vous propose de comprendre les\\npromises par l\'implémentation. \\nhttps://insertafter.com/fr/blog/promises_javascript_ouvrons_capot.html \\n2013-06-08T10:04:17.000Z Créer un bot IRC avec NodeJS J\'ai récemment pu tester\\nla création d\'un bot NodeJS grâce à la mise en place de Marionnette, le bot IRC\\nde FranceJS. https://insertafter.com/fr/blog/creer_bot_irc_avec_nodejs.html \\n2013-05-05T08:04:57.000Z Les animations sur les sites web en 2013 On a d\'abord\\nconnu les animations avec Flash, puis les animations sans Flash grâce aux\\nframeworks JavaScript. Aujourd\'hui, ce sont les animations CSS3 qui occupent le\\ndevant de la scène et, a priori, ça va durer. \\nhttps://insertafter.com/fr/blog/animations_css3.html 2013-04-03T16:02:18.000Z \\nGestion de flotte X1 Intellitrac avec xinetd sur Debian GNU Linux Le super\\nserver xinetd est vraiment très pratique pour des petits projets ne dépassant\\npas un certain nombre de clients. Voici une petite illustration de son utilité\\npour la localisation de flotte de véhicules. \\nhttps://insertafter.com/fr/blog/xinetd_super_server.html \\n2013-04-01T14:35:58.000Z CapsKiller : Stop aux majuscules Les digital natives\\nsupportent mal les majuscules dans les courriels. En effet, cela est assimilé à\\ndes cris. Malheureusement, tout le monde n\'en fait pas grand cas. CapsKiller\\npour Thunderbird est là pour vous en protéger. \\nhttps://insertafter.com/fr/blog/capskiller_stop_aux_majuscules.html \\n2013-02-23T11:05:23.000Z Une application desktop avec Chrome Bien que HTML5\\nprogresse de jour en jour, on aimerait parfois pouvoir accéder à n\'importe quoi\\ndans son navigateur. C\'est déjà possible, grâce à un nouveau petit projet\\nNodeJS. https://insertafter.com/fr/blog/application_desktop_avec_chrome.html \\n2013-02-08T15:54:30.000Z Les subtilités de RegExp en Javascript Les expressions\\nrégulières sont très peu populaires, elles sont pourtant surpuissantes.\\nNéanmoins, il y a quelques subtilités à connaître, dont une que j\'ai récemment\\napprise. https://insertafter.com/fr/blog/subtilites_de_regexp.html \\n2013-02-02T09:41:13.000Z"}'),doc167:JSON.parse('{"path":"contents/pages/articles.rss","title":"Blog d\'un développeur web à Lille - 2","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille - 2 Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index-2.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Bref, j\'ai lu Lean Startup Critique du livre Lean\\nStartup à travers le prisme d\'un développeur. \\nhttps://insertafter.com/fr/blog/bref_j_ai_lu_lean_startup.html \\n2015-03-02T18:02:27.000Z L\'isomorphisme par l\'exemple Présentation sur la\\ngestion des droits dans une application JavaScript de façon universelle. \\nhttps://insertafter.com/fr/blog/isomorphisme_par_l_exemple.html \\n2015-02-03T07:08:19.000Z MongoDB : Retour d\'expérience Je travaille avec MongoDB\\ndepuis maintenant presque un an, il est temps pour moi de faire un petit retour\\nsur cette base de données et sur le NoSQL de manière générale. \\nhttps://insertafter.com/fr/blog/retour_xp_mongodb.html 2014-12-04T19:44:40.000Z \\nGulp : Retour d\'expérience Comme promis, Gulp revient à l\'ordre du jour de ce\\nBlog avec un retour d\'expérience sur l\'utilisation de Gulp et le développement\\nde plugins. https://insertafter.com/fr/blog/retour_experience_gulp.html \\n2014-01-26T08:01:26.000Z Gulp remplacera-t-il Grunt ? Gulp est un concurrent de\\nGrunt qui se targue d\'exploiter les capacités des streams NodeJS. Petit passage\\nen revue de cet outil. https://insertafter.com/fr/blog/gulp_vs_grunt.html \\n2013-12-23T22:25:29.000Z Browserify : Partager le code JavaScript entre front et\\nback end Exécuter du JavaScript aussi bien côté serveur que dans le navigateur\\nde vos clients devient possible grâce à Browserify. \\nhttps://insertafter.com/fr/blog/browserify.html 2013-12-16T12:23:52.000Z Générer\\ndes fontes d\'icônes avec GruntJS Cette semaine, je me suis penché sur la\\ngénération de fontes automatiquement avec GruntJS. Compte rendu de mes\\ndécouvertes et des développements qui les ont suivies. \\nhttps://insertafter.com/fr/blog/gruntjs_font_icons.html 2013-11-09T14:25:29.000Z \\nUn livre pour apprendre JavaScript En Avril 2013 j\'ai été contacté par\\nMA-Édition pour écrire un livre sur JavaScript. Aujourd\'hui, il est en\\nlibrairie. Retour sur cette belle aventure. \\nhttps://insertafter.com/fr/blog/livre_javascript.html 2013-09-22T15:45:27.000Z \\nL\'enseignement dirigé par les tests Les tests unitaires et fonctionnels ont\\nvéritablement révolutionné le développement professionnel, pourquoi pas\\négalement celui de l\'enseignement et de la formation ? \\nhttps://insertafter.com/fr/blog/enseignement_dirige_par_tests.html \\n2013-09-04T09:22:53.000Z Tester son JavaScript front end Depuis que j\'ai\\ndécouvert Karma, je ne me lasse plus de convertir mes projets pour lancer les\\ntests grâce à cet outil. Retour d\'expérience et conseils pour une utilisation\\npleine et entière. \\nhttps://insertafter.com/fr/blog/tester_javascript_frontend.html \\n2013-08-25T13:24:22.000Z Gestion des erreurs en JavaScript Gérer les erreurs en\\nJavaScript peut paraître simple, mais il n\'est pas toujours évident de choisir\\nentre exceptions, retours d\'erreurs et callbacks d\'erreurs. \\nhttps://insertafter.com/fr/blog/erreurs_javascript.html 2013-07-30T13:18:42.000Z \\nBien choisir ses modules NodeJS : ma méthode Hier à la troisième édition de\\nChtiJS, un question a été soulevée sur la confiance que l\'on pouvait avoir dans\\nles modules NodeJS. Je vous dévoile donc ma méthode pour trancher entre npm\\ninstall et npm remove ;). \\nhttps://insertafter.com/fr/blog/choisir_module_nodejs.html \\n2013-07-26T14:04:25.000Z Astuces pour utiliser pleinement RequireJS Pour un\\nprojet dont je vous reparlerai bientôt, j\'ai utilisé RequireJS pour la première\\nfois en production. J\'en profite pour vous faire un petit retour d\'expérience\\navec quelques astuces de mon cru ;). \\nhttps://insertafter.com/fr/blog/utiliser_requirejs.html 2013-07-11T09:57:45.000Z \\nLes promises avec JavaScript : ouvrons le capot ! Dans le petit monde de\\nJavaScript les promises font l\'actualité. Je vous propose de comprendre les\\npromises par l\'implémentation. \\nhttps://insertafter.com/fr/blog/promises_javascript_ouvrons_capot.html \\n2013-06-08T10:04:17.000Z Créer un bot IRC avec NodeJS J\'ai récemment pu tester\\nla création d\'un bot NodeJS grâce à la mise en place de Marionnette, le bot IRC\\nde FranceJS. https://insertafter.com/fr/blog/creer_bot_irc_avec_nodejs.html \\n2013-05-05T08:04:57.000Z Les animations sur les sites web en 2013 On a d\'abord\\nconnu les animations avec Flash, puis les animations sans Flash grâce aux\\nframeworks JavaScript. Aujourd\'hui, ce sont les animations CSS3 qui occupent le\\ndevant de la scène et, a priori, ça va durer. \\nhttps://insertafter.com/fr/blog/animations_css3.html 2013-04-03T16:02:18.000Z \\nGestion de flotte X1 Intellitrac avec xinetd sur Debian GNU Linux Le super\\nserver xinetd est vraiment très pratique pour des petits projets ne dépassant\\npas un certain nombre de clients. Voici une petite illustration de son utilité\\npour la localisation de flotte de véhicules. \\nhttps://insertafter.com/fr/blog/xinetd_super_server.html \\n2013-04-01T14:35:58.000Z CapsKiller : Stop aux majuscules Les digital natives\\nsupportent mal les majuscules dans les courriels. En effet, cela est assimilé à\\ndes cris. Malheureusement, tout le monde n\'en fait pas grand cas. CapsKiller\\npour Thunderbird est là pour vous en protéger. \\nhttps://insertafter.com/fr/blog/capskiller_stop_aux_majuscules.html \\n2013-02-23T11:05:23.000Z Une application desktop avec Chrome Bien que HTML5\\nprogresse de jour en jour, on aimerait parfois pouvoir accéder à n\'importe quoi\\ndans son navigateur. C\'est déjà possible, grâce à un nouveau petit projet\\nNodeJS. https://insertafter.com/fr/blog/application_desktop_avec_chrome.html \\n2013-02-08T15:54:30.000Z Les subtilités de RegExp en Javascript Les expressions\\nrégulières sont très peu populaires, elles sont pourtant surpuissantes.\\nNéanmoins, il y a quelques subtilités à connaître, dont une que j\'ai récemment\\napprise. https://insertafter.com/fr/blog/subtilites_de_regexp.html \\n2013-02-02T09:41:13.000Z"}'),doc168:JSON.parse('{"path":"contents/pages/fr/blog/index-3.html","title":"Blog d\'un développeur web à Lille - 3","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBLOG\\nSur mon blog, vous trouverez de nombreux articles sur le développement web mais\\naussi sur l’administration système, l’informatique, le hacking et la\\nprogrammation en général. Mes langages préférés : Javascript, HTML5, PHP/MySQL\\net REST\\n\\n Quelques jeux HTML5 sympas [/fr/blog/jeux_html5_sympas.html] \\n\\nDans mes recherches pour tenter de trouver la meilleure formule pour créer des\\njeux HTML5 addictifs et de bonne qualité, j\'ai trouvé plusieurs jeux aux\\nfinitions plus qu\'acceptables. Découvrez-les !\\n\\nPublié le dimanche 27 janvier 2013 13:03\\n\\n Performance des sites web avec SVG [/fr/blog/performance_et_svg.html] \\n\\nSVG est de plus en plus supporté par les navigateurs. Cela peut nous amener à\\nreconsidérer nos choix en ce qui concerne la performance du front-end. Petit\\ntour d\'horizon des plus de ce format.\\n\\nPublié le dimanche 13 janvier 2013 22:09\\n\\n Et si HTML5 accédait à mon véhicule ? [/fr/blog/applications_vehicules.html] \\n\\nCitroën vient de lancer un petit concours tout simple auquel je vais proposer\\nune idée. Découvrez là, mais aussi, comment elle pourrait être mise en oeuvre.\\n\\nPublié le mercredi 9 janvier 2013 09:54\\n\\n Un futur radieux pour les applications HTML5 [/fr/blog/applications_html5.html] \\n\\nL\'importance des applications HTML5 va croissante, les acteurs qui parient sur\\nces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique.\\n\\nPublié le samedi 5 janvier 2013 16:06\\n\\n Hackaton Windows Phone 8 [/fr/blog/hackaton_microsoft.html] \\n\\nDepuis que Windows 8 gère le HTML5, je me suis un peu plus rapproché de la\\ncommunauté Microsoft grâce notamment à un développeurs de mon coin. Petit retour\\nsur ce hackaton.\\n\\nPublié le mardi 25 décembre 2012 21:11\\n\\n Le système de template idéal [/fr/blog/systeme_template_ideal.html] \\n\\nL\'utilisation d\'un système de template est très avantageuse, mais apporte\\négalement d\'autres problématiques. L\'existant ne me satisfait pas vraiment,\\nvoyons pourquoi et comment faire mieux.\\n\\nPublié le vendredi 30 novembre 2012 11:16\\n\\n Devenez un homme, streamez vos données ! [/fr/blog/streamer_donnees.html] \\n\\nPeut-être ne le saviez-vous pas, mais XMLHttpRequest Level 2 permet d\'accéder\\nvos données avant leur chargement complet grâce à l\'écouteur d\'évènement\\nonProgress. Il est temps de grandir et de l\'utiliser.\\n\\nPublié le vendredi 23 novembre 2012 11:11\\n\\n Gérer les monnaies dans un logiciel (CRM,ERP)\\n[/fr/blog/gerer_monnaies_logiciel.html] \\n\\nJe suis actuellement entrain de développer une solution CRM basée sur mon\\nframework Rest PHP. Il faut donc gérer les différentes monnaies.\\n\\nPublié le vendredi 16 novembre 2012 10:24\\n\\n BugMeBack : La solution pour venir à bout de vos bugs ?\\n[/fr/blog/bugmeback.html] \\n\\nLe problème avec les bugs, c\'est qu\'ils ont la facheuse tendance à être détectés\\npar des novices. C\'est alors le parcours du combattant pour se les faire\\nexpliquer. BugMeBack va vous aider !\\n\\nPublié le samedi 27 octobre 2012 23:53\\n\\n Faut-il utiliser les polyfills ? [/fr/blog/polyfill_or_not.html] \\n\\nTout à chacun est tenté d\'utiliser HTML5 pour créer des applications sympa\\nexpérimentant le champs des possibles. Malheureusement, HTML5 n\'est pas supporté\\npar tous les navigateurs. C\'est alors que se pose la question des polyfills.\\n\\nPublié le dimanche 21 octobre 2012 09:23\\n\\n Tester un virtualhost avant de changer les DNS\\n[/fr/blog/tester_virtualhost_avant_dns.html] \\n\\nQuand on migre un site vers un nouveau serveur, on a besoin de tester le bon\\nfonctionnement de ce dernier avant de mettre à jour les DNS. Petite astuce à\\nbase de telnet et openssl.\\n\\nPublié le jeudi 18 octobre 2012 10:29\\n\\n Créer un service Rest [/fr/blog/creer_un_bon_service_rest.html] \\n\\nRest est de plus en plus utilisé pour la création de services web. J\'ai moi-même\\ncréé un framework basé sur ce principe. Découvrez mes petits plus pour créer un\\nbon service Rest !\\n\\nPublié le samedi 6 octobre 2012 15:04\\n\\n Mes trouvailles de septembre 2012 [/fr/blog/resume_septembre_2012.html] \\n\\nCe mois-ci, j\'ai vu passer assez de petites choses pour faire un point rapide\\nsur les dernières nouveautés et actualités du développement web.\\n\\nPublié le samedi 29 septembre 2012 12:54\\n\\n Dev camp Microsoft Lille : Bienvenue en boîte !\\n[/fr/blog/devcamp_microsoft_lille.html] \\n\\nHier je suis allé au Devcamp Microsoft organisé à Lille pour découvrir le\\nnouveau Windows et ses nouvelles possibilités pour la création de logiciels. Je\\npense que l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5\\n/ Javascript.\\n\\nPublié le vendredi 28 septembre 2012 14:50\\n\\n Gestion des collisions 2D dans un jeu HTML5 / Javascript\\n[/fr/blog/gestion_collisions_html5_canvas.html] \\n\\nL\'expérience du développement de Tank Arena m\'amène à faire un petit point sur\\nla gestion des collisions dans un jeu 2D écrit avec Javascript/HTML5.\\n\\nPublié le dimanche 23 septembre 2012 12:29\\n\\n Les champs SET et les requêtes GROUP BY [/fr/blog/champs_set_et_group_by.html] \\n\\nJ\'adore utiliser les champs de type SET pour leur souplesse et leur nature\\nmultivaluées, mais quand GROUP BY entre dans la place, attention les dégâts !\\n\\nPublié le mardi 28 août 2012 09:34\\n\\n Les modules Javascript : Un joyeux B [/fr/blog/module_javascript.html] \\n\\nDès lors que l\'on tente de créer des applications complexes en Javascript, la\\nsegmentation du code en divers fichiers devient nécessaire. Cela génère une\\nnouvelle difficulté, la modularisation du Javascript.\\n\\nPublié le vendredi 17 août 2012 13:34\\n\\n Utilisation de l\'accéléromètre dans le Casse Brique\\n[/fr/blog/accelerometre_casse_briques.html] \\n\\nHTML5 expose via l\'API accelerometer des information sur l\'inclinaison de\\nl\'appareil en fonction des trois axes de l\'espace, utilisons les pour notre\\nCasse brique.\\n\\nPublié le jeudi 9 août 2012 14:14\\n\\n Bases de données : Concepts, utilisation et développement de Jean-Luc Hainaut\\n[/fr/blog/critique_livre_base_de_donnees.html] \\n\\nJ\'ai terminé ce livre sur les bases de donnée et je l\'ai trouvé très intéressant\\net instructif, voici un petit résumé de ce qu\'il m\'a apporté.\\n\\nPublié le jeudi 2 août 2012 11:43\\n\\n Mes trouvailles de juillet 2012 [/fr/blog/trouvailles_juillet_2012.html] \\n\\nVoici quelques liens sur l\'actualité du développement Web en ce mois de juillet\\n2012.\\n\\nPublié le vendredi 27 juillet 2012 17:00\\n\\nPrécédent [/fr/blog/index-2.html] Suivant [/fr/blog/index-4.html] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc169:JSON.parse('{"path":"contents/pages/fr/blog/index-3.atom","title":"Blog d\'un développeur web à Lille - 3","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index-3.html InsertAfter : Blog d\'un\\ndéveloppeur web à Lille - 3 Blog de Nicolas Froidure, développeur JavaScript\\nfullstack à Lille. 2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/jeux_html5_sympas.html Quelques jeux HTML5\\nsympas 2013-01-27T12:03:52.000Z 2013-01-27T12:03:52.000Z Dans mes recherches\\npour tenter de trouver la meilleure formule pour créer des jeux HTML5 addictifs\\net de bonne qualité, j\'ai trouvé plusieurs jeux aux finitions plus\\nqu\'acceptables. Découvrez-les ! \\nhttps://insertafter.com/fr/blog/performance_et_svg.html Performance des sites\\nweb avec SVG 2013-01-13T21:09:05.000Z 2013-01-13T21:09:05.000Z SVG est de plus\\nen plus supporté par les navigateurs. Cela peut nous amener à reconsidérer nos\\nchoix en ce qui concerne la performance du front-end. Petit tour d\'horizon des\\nplus de ce format. https://insertafter.com/fr/blog/applications_vehicules.html \\nEt si HTML5 accédait à mon véhicule ? 2013-01-09T08:54:05.000Z \\n2013-01-09T08:54:05.000Z Citroën vient de lancer un petit concours tout simple\\nauquel je vais proposer une idée. Découvrez là, mais aussi, comment elle\\npourrait être mise en oeuvre. \\nhttps://insertafter.com/fr/blog/applications_html5.html Un futur radieux pour\\nles applications HTML5 2013-01-05T15:06:11.000Z 2013-01-05T15:06:11.000Z \\nL\'importance des applications HTML5 va croissante, les acteurs qui parient sur\\nces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique. \\nhttps://insertafter.com/fr/blog/hackaton_microsoft.html Hackaton Windows Phone 8 \\n2012-12-25T20:11:57.000Z 2012-12-25T20:11:57.000Z Depuis que Windows 8 gère le\\nHTML5, je me suis un peu plus rapproché de la communauté Microsoft grâce\\nnotamment à un développeurs de mon coin. Petit retour sur ce hackaton. \\nhttps://insertafter.com/fr/blog/systeme_template_ideal.html Le système de\\ntemplate idéal 2012-11-30T10:16:24.000Z 2012-11-30T10:16:24.000Z L\'utilisation\\nd\'un système de template est très avantageuse, mais apporte également d\'autres\\nproblématiques. L\'existant ne me satisfait pas vraiment, voyons pourquoi et\\ncomment faire mieux. https://insertafter.com/fr/blog/streamer_donnees.html \\nDevenez un homme, streamez vos données ! 2012-11-23T10:11:41.000Z \\n2012-11-23T10:11:41.000Z Peut-être ne le saviez-vous pas, mais XMLHttpRequest\\nLevel 2 permet d\'accéder vos données avant leur chargement complet grâce à\\nl\'écouteur d\'évènement onProgress. Il est temps de grandir et de l\'utiliser. \\nhttps://insertafter.com/fr/blog/gerer_monnaies_logiciel.html Gérer les monnaies\\ndans un logiciel (CRM,ERP) 2012-11-16T09:24:57.000Z 2012-11-16T09:24:57.000Z Je\\nsuis actuellement entrain de développer une solution CRM basée sur mon framework\\nRest PHP. Il faut donc gérer les différentes monnaies. \\nhttps://insertafter.com/fr/blog/bugmeback.html BugMeBack : La solution pour\\nvenir à bout de vos bugs ? 2012-10-27T21:53:43.000Z 2012-10-27T21:53:43.000Z Le\\nproblème avec les bugs, c\'est qu\'ils ont la facheuse tendance à être détectés\\npar des novices. C\'est alors le parcours du combattant pour se les faire\\nexpliquer. BugMeBack va vous aider ! \\nhttps://insertafter.com/fr/blog/polyfill_or_not.html Faut-il utiliser les\\npolyfills ? 2012-10-21T07:23:29.000Z 2012-10-21T07:23:29.000Z Tout à chacun est\\ntenté d\'utiliser HTML5 pour créer des applications sympa expérimentant le champs\\ndes possibles. Malheureusement, HTML5 n\'est pas supporté par tous les\\nnavigateurs. C\'est alors que se pose la question des polyfills. \\nhttps://insertafter.com/fr/blog/tester_virtualhost_avant_dns.html Tester un\\nvirtualhost avant de changer les DNS 2012-10-18T08:29:18.000Z \\n2012-10-18T08:29:18.000Z Quand on migre un site vers un nouveau serveur, on a\\nbesoin de tester le bon fonctionnement de ce dernier avant de mettre à jour les\\nDNS. Petite astuce à base de telnet et openssl. \\nhttps://insertafter.com/fr/blog/creer_un_bon_service_rest.html Créer un service\\nRest 2012-10-06T13:04:04.000Z 2012-10-06T13:04:04.000Z Rest est de plus en plus\\nutilisé pour la création de services web. J\'ai moi-même créé un framework basé\\nsur ce principe. Découvrez mes petits plus pour créer un bon service Rest ! \\nhttps://insertafter.com/fr/blog/resume_septembre_2012.html Mes trouvailles de\\nseptembre 2012 2012-09-29T10:54:05.000Z 2012-09-29T10:54:05.000Z Ce mois-ci,\\nj\'ai vu passer assez de petites choses pour faire un point rapide sur les\\ndernières nouveautés et actualités du développement web. \\nhttps://insertafter.com/fr/blog/devcamp_microsoft_lille.html Dev camp Microsoft\\nLille : Bienvenue en boîte ! 2012-09-28T12:50:44.000Z 2012-09-28T12:50:44.000Z \\nHier je suis allé au Devcamp Microsoft organisé à Lille pour découvrir le\\nnouveau Windows et ses nouvelles possibilités pour la création de logiciels. Je\\npense que l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5\\n/ Javascript. \\nhttps://insertafter.com/fr/blog/gestion_collisions_html5_canvas.html Gestion des\\ncollisions 2D dans un jeu HTML5 / Javascript 2012-09-23T10:29:46.000Z \\n2012-09-23T10:29:46.000Z L\'expérience du développement de Tank Arena m\'amène à\\nfaire un petit point sur la gestion des collisions dans un jeu 2D écrit avec\\nJavascript/HTML5. https://insertafter.com/fr/blog/champs_set_et_group_by.html \\nLes champs SET et les requêtes GROUP BY 2012-08-28T07:34:25.000Z \\n2012-08-28T07:34:25.000Z J\'adore utiliser les champs de type SET pour leur\\nsouplesse et leur nature multivaluées, mais quand GROUP BY entre dans la place,\\nattention les dégâts ! https://insertafter.com/fr/blog/module_javascript.html \\nLes modules Javascript : Un joyeux B 2012-08-17T11:34:48.000Z \\n2012-08-17T11:34:48.000Z Dès lors que l\'on tente de créer des applications\\ncomplexes en Javascript, la segmentation du code en divers fichiers devient\\nnécessaire. Cela génère une nouvelle difficulté, la modularisation du\\nJavascript. https://insertafter.com/fr/blog/accelerometre_casse_briques.html \\nUtilisation de l\'accéléromètre dans le Casse Brique 2012-08-09T12:14:36.000Z \\n2012-08-09T12:14:36.000Z HTML5 expose via l\'API accelerometer des information\\nsur l\'inclinaison de l\'appareil en fonction des trois axes de l\'espace,\\nutilisons les pour notre Casse brique. \\nhttps://insertafter.com/fr/blog/critique_livre_base_de_donnees.html Bases de\\ndonnées : Concepts, utilisation et développement de Jean-Luc Hainaut \\n2012-08-02T09:43:00.000Z 2012-08-02T09:43:00.000Z J\'ai terminé ce livre sur les\\nbases de donnée et je l\'ai trouvé très intéressant et instructif, voici un petit\\nrésumé de ce qu\'il m\'a apporté. \\nhttps://insertafter.com/fr/blog/trouvailles_juillet_2012.html Mes trouvailles de\\njuillet 2012 2012-07-27T15:00:07.000Z 2012-07-27T15:00:07.000Z Voici quelques\\nliens sur l\'actualité du développement Web en ce mois de juillet 2012."}'),doc170:JSON.parse('{"path":"contents/pages/articles.atom","title":"Blog d\'un développeur web à Lille - 3","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index-3.html InsertAfter : Blog d\'un\\ndéveloppeur web à Lille - 3 Blog de Nicolas Froidure, développeur JavaScript\\nfullstack à Lille. 2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/jeux_html5_sympas.html Quelques jeux HTML5\\nsympas 2013-01-27T12:03:52.000Z 2013-01-27T12:03:52.000Z Dans mes recherches\\npour tenter de trouver la meilleure formule pour créer des jeux HTML5 addictifs\\net de bonne qualité, j\'ai trouvé plusieurs jeux aux finitions plus\\nqu\'acceptables. Découvrez-les ! \\nhttps://insertafter.com/fr/blog/performance_et_svg.html Performance des sites\\nweb avec SVG 2013-01-13T21:09:05.000Z 2013-01-13T21:09:05.000Z SVG est de plus\\nen plus supporté par les navigateurs. Cela peut nous amener à reconsidérer nos\\nchoix en ce qui concerne la performance du front-end. Petit tour d\'horizon des\\nplus de ce format. https://insertafter.com/fr/blog/applications_vehicules.html \\nEt si HTML5 accédait à mon véhicule ? 2013-01-09T08:54:05.000Z \\n2013-01-09T08:54:05.000Z Citroën vient de lancer un petit concours tout simple\\nauquel je vais proposer une idée. Découvrez là, mais aussi, comment elle\\npourrait être mise en oeuvre. \\nhttps://insertafter.com/fr/blog/applications_html5.html Un futur radieux pour\\nles applications HTML5 2013-01-05T15:06:11.000Z 2013-01-05T15:06:11.000Z \\nL\'importance des applications HTML5 va croissante, les acteurs qui parient sur\\nces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique. \\nhttps://insertafter.com/fr/blog/hackaton_microsoft.html Hackaton Windows Phone 8 \\n2012-12-25T20:11:57.000Z 2012-12-25T20:11:57.000Z Depuis que Windows 8 gère le\\nHTML5, je me suis un peu plus rapproché de la communauté Microsoft grâce\\nnotamment à un développeurs de mon coin. Petit retour sur ce hackaton. \\nhttps://insertafter.com/fr/blog/systeme_template_ideal.html Le système de\\ntemplate idéal 2012-11-30T10:16:24.000Z 2012-11-30T10:16:24.000Z L\'utilisation\\nd\'un système de template est très avantageuse, mais apporte également d\'autres\\nproblématiques. L\'existant ne me satisfait pas vraiment, voyons pourquoi et\\ncomment faire mieux. https://insertafter.com/fr/blog/streamer_donnees.html \\nDevenez un homme, streamez vos données ! 2012-11-23T10:11:41.000Z \\n2012-11-23T10:11:41.000Z Peut-être ne le saviez-vous pas, mais XMLHttpRequest\\nLevel 2 permet d\'accéder vos données avant leur chargement complet grâce à\\nl\'écouteur d\'évènement onProgress. Il est temps de grandir et de l\'utiliser. \\nhttps://insertafter.com/fr/blog/gerer_monnaies_logiciel.html Gérer les monnaies\\ndans un logiciel (CRM,ERP) 2012-11-16T09:24:57.000Z 2012-11-16T09:24:57.000Z Je\\nsuis actuellement entrain de développer une solution CRM basée sur mon framework\\nRest PHP. Il faut donc gérer les différentes monnaies. \\nhttps://insertafter.com/fr/blog/bugmeback.html BugMeBack : La solution pour\\nvenir à bout de vos bugs ? 2012-10-27T21:53:43.000Z 2012-10-27T21:53:43.000Z Le\\nproblème avec les bugs, c\'est qu\'ils ont la facheuse tendance à être détectés\\npar des novices. C\'est alors le parcours du combattant pour se les faire\\nexpliquer. BugMeBack va vous aider ! \\nhttps://insertafter.com/fr/blog/polyfill_or_not.html Faut-il utiliser les\\npolyfills ? 2012-10-21T07:23:29.000Z 2012-10-21T07:23:29.000Z Tout à chacun est\\ntenté d\'utiliser HTML5 pour créer des applications sympa expérimentant le champs\\ndes possibles. Malheureusement, HTML5 n\'est pas supporté par tous les\\nnavigateurs. C\'est alors que se pose la question des polyfills. \\nhttps://insertafter.com/fr/blog/tester_virtualhost_avant_dns.html Tester un\\nvirtualhost avant de changer les DNS 2012-10-18T08:29:18.000Z \\n2012-10-18T08:29:18.000Z Quand on migre un site vers un nouveau serveur, on a\\nbesoin de tester le bon fonctionnement de ce dernier avant de mettre à jour les\\nDNS. Petite astuce à base de telnet et openssl. \\nhttps://insertafter.com/fr/blog/creer_un_bon_service_rest.html Créer un service\\nRest 2012-10-06T13:04:04.000Z 2012-10-06T13:04:04.000Z Rest est de plus en plus\\nutilisé pour la création de services web. J\'ai moi-même créé un framework basé\\nsur ce principe. Découvrez mes petits plus pour créer un bon service Rest ! \\nhttps://insertafter.com/fr/blog/resume_septembre_2012.html Mes trouvailles de\\nseptembre 2012 2012-09-29T10:54:05.000Z 2012-09-29T10:54:05.000Z Ce mois-ci,\\nj\'ai vu passer assez de petites choses pour faire un point rapide sur les\\ndernières nouveautés et actualités du développement web. \\nhttps://insertafter.com/fr/blog/devcamp_microsoft_lille.html Dev camp Microsoft\\nLille : Bienvenue en boîte ! 2012-09-28T12:50:44.000Z 2012-09-28T12:50:44.000Z \\nHier je suis allé au Devcamp Microsoft organisé à Lille pour découvrir le\\nnouveau Windows et ses nouvelles possibilités pour la création de logiciels. Je\\npense que l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5\\n/ Javascript. \\nhttps://insertafter.com/fr/blog/gestion_collisions_html5_canvas.html Gestion des\\ncollisions 2D dans un jeu HTML5 / Javascript 2012-09-23T10:29:46.000Z \\n2012-09-23T10:29:46.000Z L\'expérience du développement de Tank Arena m\'amène à\\nfaire un petit point sur la gestion des collisions dans un jeu 2D écrit avec\\nJavascript/HTML5. https://insertafter.com/fr/blog/champs_set_et_group_by.html \\nLes champs SET et les requêtes GROUP BY 2012-08-28T07:34:25.000Z \\n2012-08-28T07:34:25.000Z J\'adore utiliser les champs de type SET pour leur\\nsouplesse et leur nature multivaluées, mais quand GROUP BY entre dans la place,\\nattention les dégâts ! https://insertafter.com/fr/blog/module_javascript.html \\nLes modules Javascript : Un joyeux B 2012-08-17T11:34:48.000Z \\n2012-08-17T11:34:48.000Z Dès lors que l\'on tente de créer des applications\\ncomplexes en Javascript, la segmentation du code en divers fichiers devient\\nnécessaire. Cela génère une nouvelle difficulté, la modularisation du\\nJavascript. https://insertafter.com/fr/blog/accelerometre_casse_briques.html \\nUtilisation de l\'accéléromètre dans le Casse Brique 2012-08-09T12:14:36.000Z \\n2012-08-09T12:14:36.000Z HTML5 expose via l\'API accelerometer des information\\nsur l\'inclinaison de l\'appareil en fonction des trois axes de l\'espace,\\nutilisons les pour notre Casse brique. \\nhttps://insertafter.com/fr/blog/critique_livre_base_de_donnees.html Bases de\\ndonnées : Concepts, utilisation et développement de Jean-Luc Hainaut \\n2012-08-02T09:43:00.000Z 2012-08-02T09:43:00.000Z J\'ai terminé ce livre sur les\\nbases de donnée et je l\'ai trouvé très intéressant et instructif, voici un petit\\nrésumé de ce qu\'il m\'a apporté. \\nhttps://insertafter.com/fr/blog/trouvailles_juillet_2012.html Mes trouvailles de\\njuillet 2012 2012-07-27T15:00:07.000Z 2012-07-27T15:00:07.000Z Voici quelques\\nliens sur l\'actualité du développement Web en ce mois de juillet 2012."}'),doc171:JSON.parse('{"path":"contents/pages/fr/blog/index-3.rss","title":"Blog d\'un développeur web à Lille - 3","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille - 3 Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index-3.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Quelques jeux HTML5 sympas Dans mes recherches\\npour tenter de trouver la meilleure formule pour créer des jeux HTML5 addictifs\\net de bonne qualité, j\'ai trouvé plusieurs jeux aux finitions plus\\nqu\'acceptables. Découvrez-les ! \\nhttps://insertafter.com/fr/blog/jeux_html5_sympas.html 2013-01-27T12:03:52.000Z \\nPerformance des sites web avec SVG SVG est de plus en plus supporté par les\\nnavigateurs. Cela peut nous amener à reconsidérer nos choix en ce qui concerne\\nla performance du front-end. Petit tour d\'horizon des plus de ce format. \\nhttps://insertafter.com/fr/blog/performance_et_svg.html 2013-01-13T21:09:05.000Z \\nEt si HTML5 accédait à mon véhicule ? Citroën vient de lancer un petit concours\\ntout simple auquel je vais proposer une idée. Découvrez là, mais aussi, comment\\nelle pourrait être mise en oeuvre. \\nhttps://insertafter.com/fr/blog/applications_vehicules.html \\n2013-01-09T08:54:05.000Z Un futur radieux pour les applications HTML5 \\nL\'importance des applications HTML5 va croissante, les acteurs qui parient sur\\nces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique. \\nhttps://insertafter.com/fr/blog/applications_html5.html 2013-01-05T15:06:11.000Z \\nHackaton Windows Phone 8 Depuis que Windows 8 gère le HTML5, je me suis un peu\\nplus rapproché de la communauté Microsoft grâce notamment à un développeurs de\\nmon coin. Petit retour sur ce hackaton. \\nhttps://insertafter.com/fr/blog/hackaton_microsoft.html 2012-12-25T20:11:57.000Z \\nLe système de template idéal L\'utilisation d\'un système de template est très\\navantageuse, mais apporte également d\'autres problématiques. L\'existant ne me\\nsatisfait pas vraiment, voyons pourquoi et comment faire mieux. \\nhttps://insertafter.com/fr/blog/systeme_template_ideal.html \\n2012-11-30T10:16:24.000Z Devenez un homme, streamez vos données ! Peut-être ne\\nle saviez-vous pas, mais XMLHttpRequest Level 2 permet d\'accéder vos données\\navant leur chargement complet grâce à l\'écouteur d\'évènement onProgress. Il est\\ntemps de grandir et de l\'utiliser. \\nhttps://insertafter.com/fr/blog/streamer_donnees.html 2012-11-23T10:11:41.000Z \\nGérer les monnaies dans un logiciel (CRM,ERP) Je suis actuellement entrain de\\ndévelopper une solution CRM basée sur mon framework Rest PHP. Il faut donc gérer\\nles différentes monnaies. \\nhttps://insertafter.com/fr/blog/gerer_monnaies_logiciel.html \\n2012-11-16T09:24:57.000Z BugMeBack : La solution pour venir à bout de vos bugs ? \\nLe problème avec les bugs, c\'est qu\'ils ont la facheuse tendance à être détectés\\npar des novices. C\'est alors le parcours du combattant pour se les faire\\nexpliquer. BugMeBack va vous aider ! \\nhttps://insertafter.com/fr/blog/bugmeback.html 2012-10-27T21:53:43.000Z Faut-il\\nutiliser les polyfills ? Tout à chacun est tenté d\'utiliser HTML5 pour créer des\\napplications sympa expérimentant le champs des possibles. Malheureusement, HTML5\\nn\'est pas supporté par tous les navigateurs. C\'est alors que se pose la question\\ndes polyfills. https://insertafter.com/fr/blog/polyfill_or_not.html \\n2012-10-21T07:23:29.000Z Tester un virtualhost avant de changer les DNS Quand on\\nmigre un site vers un nouveau serveur, on a besoin de tester le bon\\nfonctionnement de ce dernier avant de mettre à jour les DNS. Petite astuce à\\nbase de telnet et openssl. \\nhttps://insertafter.com/fr/blog/tester_virtualhost_avant_dns.html \\n2012-10-18T08:29:18.000Z Créer un service Rest Rest est de plus en plus utilisé\\npour la création de services web. J\'ai moi-même créé un framework basé sur ce\\nprincipe. Découvrez mes petits plus pour créer un bon service Rest ! \\nhttps://insertafter.com/fr/blog/creer_un_bon_service_rest.html \\n2012-10-06T13:04:04.000Z Mes trouvailles de septembre 2012 Ce mois-ci, j\'ai vu\\npasser assez de petites choses pour faire un point rapide sur les dernières\\nnouveautés et actualités du développement web. \\nhttps://insertafter.com/fr/blog/resume_septembre_2012.html \\n2012-09-29T10:54:05.000Z Dev camp Microsoft Lille : Bienvenue en boîte ! Hier je\\nsuis allé au Devcamp Microsoft organisé à Lille pour découvrir le nouveau\\nWindows et ses nouvelles possibilités pour la création de logiciels. Je pense\\nque l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5 /\\nJavascript. https://insertafter.com/fr/blog/devcamp_microsoft_lille.html \\n2012-09-28T12:50:44.000Z Gestion des collisions 2D dans un jeu HTML5 /\\nJavascript L\'expérience du développement de Tank Arena m\'amène à faire un petit\\npoint sur la gestion des collisions dans un jeu 2D écrit avec Javascript/HTML5. \\nhttps://insertafter.com/fr/blog/gestion_collisions_html5_canvas.html \\n2012-09-23T10:29:46.000Z Les champs SET et les requêtes GROUP BY J\'adore\\nutiliser les champs de type SET pour leur souplesse et leur nature multivaluées,\\nmais quand GROUP BY entre dans la place, attention les dégâts ! \\nhttps://insertafter.com/fr/blog/champs_set_et_group_by.html \\n2012-08-28T07:34:25.000Z Les modules Javascript : Un joyeux B Dès lors que l\'on\\ntente de créer des applications complexes en Javascript, la segmentation du code\\nen divers fichiers devient nécessaire. Cela génère une nouvelle difficulté, la\\nmodularisation du Javascript. \\nhttps://insertafter.com/fr/blog/module_javascript.html 2012-08-17T11:34:48.000Z \\nUtilisation de l\'accéléromètre dans le Casse Brique HTML5 expose via l\'API\\naccelerometer des information sur l\'inclinaison de l\'appareil en fonction des\\ntrois axes de l\'espace, utilisons les pour notre Casse brique. \\nhttps://insertafter.com/fr/blog/accelerometre_casse_briques.html \\n2012-08-09T12:14:36.000Z Bases de données : Concepts, utilisation et\\ndéveloppement de Jean-Luc Hainaut J\'ai terminé ce livre sur les bases de donnée\\net je l\'ai trouvé très intéressant et instructif, voici un petit résumé de ce\\nqu\'il m\'a apporté. \\nhttps://insertafter.com/fr/blog/critique_livre_base_de_donnees.html \\n2012-08-02T09:43:00.000Z Mes trouvailles de juillet 2012 Voici quelques liens\\nsur l\'actualité du développement Web en ce mois de juillet 2012. \\nhttps://insertafter.com/fr/blog/trouvailles_juillet_2012.html \\n2012-07-27T15:00:07.000Z"}'),doc172:JSON.parse('{"path":"contents/pages/articles.rss","title":"Blog d\'un développeur web à Lille - 3","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille - 3 Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index-3.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Quelques jeux HTML5 sympas Dans mes recherches\\npour tenter de trouver la meilleure formule pour créer des jeux HTML5 addictifs\\net de bonne qualité, j\'ai trouvé plusieurs jeux aux finitions plus\\nqu\'acceptables. Découvrez-les ! \\nhttps://insertafter.com/fr/blog/jeux_html5_sympas.html 2013-01-27T12:03:52.000Z \\nPerformance des sites web avec SVG SVG est de plus en plus supporté par les\\nnavigateurs. Cela peut nous amener à reconsidérer nos choix en ce qui concerne\\nla performance du front-end. Petit tour d\'horizon des plus de ce format. \\nhttps://insertafter.com/fr/blog/performance_et_svg.html 2013-01-13T21:09:05.000Z \\nEt si HTML5 accédait à mon véhicule ? Citroën vient de lancer un petit concours\\ntout simple auquel je vais proposer une idée. Découvrez là, mais aussi, comment\\nelle pourrait être mise en oeuvre. \\nhttps://insertafter.com/fr/blog/applications_vehicules.html \\n2013-01-09T08:54:05.000Z Un futur radieux pour les applications HTML5 \\nL\'importance des applications HTML5 va croissante, les acteurs qui parient sur\\nces dernières aussi. L\'avenir des applications HTML5 s\'annonce épique. \\nhttps://insertafter.com/fr/blog/applications_html5.html 2013-01-05T15:06:11.000Z \\nHackaton Windows Phone 8 Depuis que Windows 8 gère le HTML5, je me suis un peu\\nplus rapproché de la communauté Microsoft grâce notamment à un développeurs de\\nmon coin. Petit retour sur ce hackaton. \\nhttps://insertafter.com/fr/blog/hackaton_microsoft.html 2012-12-25T20:11:57.000Z \\nLe système de template idéal L\'utilisation d\'un système de template est très\\navantageuse, mais apporte également d\'autres problématiques. L\'existant ne me\\nsatisfait pas vraiment, voyons pourquoi et comment faire mieux. \\nhttps://insertafter.com/fr/blog/systeme_template_ideal.html \\n2012-11-30T10:16:24.000Z Devenez un homme, streamez vos données ! Peut-être ne\\nle saviez-vous pas, mais XMLHttpRequest Level 2 permet d\'accéder vos données\\navant leur chargement complet grâce à l\'écouteur d\'évènement onProgress. Il est\\ntemps de grandir et de l\'utiliser. \\nhttps://insertafter.com/fr/blog/streamer_donnees.html 2012-11-23T10:11:41.000Z \\nGérer les monnaies dans un logiciel (CRM,ERP) Je suis actuellement entrain de\\ndévelopper une solution CRM basée sur mon framework Rest PHP. Il faut donc gérer\\nles différentes monnaies. \\nhttps://insertafter.com/fr/blog/gerer_monnaies_logiciel.html \\n2012-11-16T09:24:57.000Z BugMeBack : La solution pour venir à bout de vos bugs ? \\nLe problème avec les bugs, c\'est qu\'ils ont la facheuse tendance à être détectés\\npar des novices. C\'est alors le parcours du combattant pour se les faire\\nexpliquer. BugMeBack va vous aider ! \\nhttps://insertafter.com/fr/blog/bugmeback.html 2012-10-27T21:53:43.000Z Faut-il\\nutiliser les polyfills ? Tout à chacun est tenté d\'utiliser HTML5 pour créer des\\napplications sympa expérimentant le champs des possibles. Malheureusement, HTML5\\nn\'est pas supporté par tous les navigateurs. C\'est alors que se pose la question\\ndes polyfills. https://insertafter.com/fr/blog/polyfill_or_not.html \\n2012-10-21T07:23:29.000Z Tester un virtualhost avant de changer les DNS Quand on\\nmigre un site vers un nouveau serveur, on a besoin de tester le bon\\nfonctionnement de ce dernier avant de mettre à jour les DNS. Petite astuce à\\nbase de telnet et openssl. \\nhttps://insertafter.com/fr/blog/tester_virtualhost_avant_dns.html \\n2012-10-18T08:29:18.000Z Créer un service Rest Rest est de plus en plus utilisé\\npour la création de services web. J\'ai moi-même créé un framework basé sur ce\\nprincipe. Découvrez mes petits plus pour créer un bon service Rest ! \\nhttps://insertafter.com/fr/blog/creer_un_bon_service_rest.html \\n2012-10-06T13:04:04.000Z Mes trouvailles de septembre 2012 Ce mois-ci, j\'ai vu\\npasser assez de petites choses pour faire un point rapide sur les dernières\\nnouveautés et actualités du développement web. \\nhttps://insertafter.com/fr/blog/resume_septembre_2012.html \\n2012-09-29T10:54:05.000Z Dev camp Microsoft Lille : Bienvenue en boîte ! Hier je\\nsuis allé au Devcamp Microsoft organisé à Lille pour découvrir le nouveau\\nWindows et ses nouvelles possibilités pour la création de logiciels. Je pense\\nque l\'expérience mérite un petit résumé, surtout en ce qui concerne HTML5 /\\nJavascript. https://insertafter.com/fr/blog/devcamp_microsoft_lille.html \\n2012-09-28T12:50:44.000Z Gestion des collisions 2D dans un jeu HTML5 /\\nJavascript L\'expérience du développement de Tank Arena m\'amène à faire un petit\\npoint sur la gestion des collisions dans un jeu 2D écrit avec Javascript/HTML5. \\nhttps://insertafter.com/fr/blog/gestion_collisions_html5_canvas.html \\n2012-09-23T10:29:46.000Z Les champs SET et les requêtes GROUP BY J\'adore\\nutiliser les champs de type SET pour leur souplesse et leur nature multivaluées,\\nmais quand GROUP BY entre dans la place, attention les dégâts ! \\nhttps://insertafter.com/fr/blog/champs_set_et_group_by.html \\n2012-08-28T07:34:25.000Z Les modules Javascript : Un joyeux B Dès lors que l\'on\\ntente de créer des applications complexes en Javascript, la segmentation du code\\nen divers fichiers devient nécessaire. Cela génère une nouvelle difficulté, la\\nmodularisation du Javascript. \\nhttps://insertafter.com/fr/blog/module_javascript.html 2012-08-17T11:34:48.000Z \\nUtilisation de l\'accéléromètre dans le Casse Brique HTML5 expose via l\'API\\naccelerometer des information sur l\'inclinaison de l\'appareil en fonction des\\ntrois axes de l\'espace, utilisons les pour notre Casse brique. \\nhttps://insertafter.com/fr/blog/accelerometre_casse_briques.html \\n2012-08-09T12:14:36.000Z Bases de données : Concepts, utilisation et\\ndéveloppement de Jean-Luc Hainaut J\'ai terminé ce livre sur les bases de donnée\\net je l\'ai trouvé très intéressant et instructif, voici un petit résumé de ce\\nqu\'il m\'a apporté. \\nhttps://insertafter.com/fr/blog/critique_livre_base_de_donnees.html \\n2012-08-02T09:43:00.000Z Mes trouvailles de juillet 2012 Voici quelques liens\\nsur l\'actualité du développement Web en ce mois de juillet 2012. \\nhttps://insertafter.com/fr/blog/trouvailles_juillet_2012.html \\n2012-07-27T15:00:07.000Z"}'),doc173:JSON.parse('{"path":"contents/pages/fr/blog/index-4.html","title":"Blog d\'un développeur web à Lille - 4","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBLOG\\nSur mon blog, vous trouverez de nombreux articles sur le développement web mais\\naussi sur l’administration système, l’informatique, le hacking et la\\nprogrammation en général. Mes langages préférés : Javascript, HTML5, PHP/MySQL\\net REST\\n\\n Comparatif des webapp stores [/fr/blog/comparatif_appstores.html] \\n\\nUne fois qu\'une application web est développée, il peut être intéressant de lui\\ndonner de la visibilité. Les AppStores sont censés aider les développeurs dans\\ncette tâche.\\n\\nPublié le vendredi 27 juillet 2012 16:28\\n\\n Utilisation de requestAnimationFrame pour les jeux HTML5\\n[/fr/blog/request_animation_frame.html] \\n\\nUne nouvelle spécification permet d\'optimiser l\'affichage des jeux HTML5 en\\nsynchronisant ces derniers avec le moteur graphique du navigateur. Petit exemple\\nde mise en oeuvre avec notre casse brique.\\n\\nPublié le jeudi 26 juillet 2012 10:13\\n\\n Conventions de nommage des bases de données\\n[/fr/blog/nommenclature_table_sql_base.html] \\n\\nDepuis que j\'ai découvert les bases de données avec MySQL, je n\'ai pas cessé de\\nm\'en servir, tant et si bien que j\'ai fini par définir une convention de\\nnommage.\\n\\nPublié le mercredi 18 juillet 2012 16:34\\n\\n Exemple de mise en oeuvre des VarStreams avec WebSockIPC et NodeJS\\n[/fr/blog/application_des_varstreams_avec_websockipc.html] \\n\\nAfin de mieux mettre en exergue l\'intérêt des VarStreams, j\'ai créé une petite\\napplication NodeJS mettant en oeuvre une communication inter processus avec les\\nWebSockets.\\n\\nPublié le lundi 9 juillet 2012 13:57\\n\\n Pourquoi j\'ai remplacé JSON par VarStream\\n[/fr/blog/remplacer_json_par_varstream.html] \\n\\nJSON est très connu et semble bon pour la plupart des utilisations, cependant,\\npar \\"hasard\\", j\'ai créé un format de données que je trouve supérieur et que j\'ai\\ndécidé d\'appeler VarStream.\\n\\nPublié le vendredi 6 juillet 2012 10:56\\n\\n Comment bien designer les url de son site ou application web\\n[/fr/blog/bien_designer_url_site_applications_web.html] \\n\\nLes URL ou URI d\'une application ou d\'un site Internet nécessitent de prendre un\\nmoment pour réfléchir à leur schema. Voici quelques bonnes pratiques issues de\\nmon expérience REST.\\n\\nPublié le samedi 30 juin 2012 12:02\\n\\n Firefox Mobile Android : Accéder aux consoles d\'erreur Javascript / stderr\\n[/fr/blog/firefox_mobile_console.html] \\n\\nPour développer pour Firefox Mobile, mieux vaut avoir la console d\'erreur à\\nportée de main. Voici la méthode.\\n\\nPublié le lundi 18 juin 2012 09:49\\n\\n Orange HTML5 Hackathon : Pourquoi j\'ai aimé ! [/fr/blog/orange_hackaton.html] \\n\\nDans le cadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a\\nété organisé. Avec mon équipe, nous avons remporté le grand prix du jury.\\n\\nPublié le mercredi 13 juin 2012 10:28\\n\\n Jeux HTML5 : Défi Tank Arena [/fr/blog/tank_arena_html5.html] \\n\\nSi vous avez déjà joué à Tank Arena, alors vous savez que c\'est un excellent\\njeu. Malheureusement, il n\'existe que pour Windows. Relevons le défi d\'en faire\\nun jeu HTML5 !\\n\\nPublié le samedi 9 juin 2012 16:20\\n\\n Récupérer les privilèges de l\'utilisateur root de MySQL\\n[/fr/blog/recuperer_privilege_root_mysql.html] \\n\\nEn administration système, tout arrive, même les cas les plus désespérés. Perdre\\nle mot de passe ou les privilèges de root de MySQL en fait partie. Voici comment\\ns\'en sortir.\\n\\nPublié le samedi 19 mai 2012 15:02\\n\\n Comment devenir un meilleur père grâce à Cron\\n[/fr/blog/meilleur_pere_grace_a_cron.html] \\n\\nDécrocher de l\'écran en plein milieu d\'une session de code est difficile. Mais\\narriver en retard à la garderie, c\'est pas cool. Heureusement cron et Patrick\\nSébastien sont là !\\n\\nPublié le samedi 12 mai 2012 12:24\\n\\n Jeux HTML5 : Développement d\'un casse brique [/fr/blog/html5_casse_brique.html] \\n\\nCréer un jeu en HTML5 est simple. Cependant, il faut respecter quelques bonnes\\npratiques pour éviter que cela tourne au cauchemar.\\n\\nPublié le vendredi 11 mai 2012 10:51\\n\\n Migrer toute une base de données vers UTF8\\n[/fr/blog/migrer_base_de_donnees_utf8.html] \\n\\nVous avez peut-être commencé votre application avec les caractères latins et\\npour des besoins d\'internationalisation, vous souhaitez passer vos bases en UTF8\\n? La solution tient en un seul script.\\n\\nPublié le jeudi 10 mai 2012 08:48\\n\\n Tester ses sites web sur les mobiles [/fr/blog/developpement_web_mobile.html] \\n\\nOn ne peut pas toujours s\'offrir un téléphone haut de gamme pour tester son site\\nweb. Heureusement, les émulateurs sont là !\\n\\nPublié le mercredi 9 mai 2012 19:47\\n\\n Amélioration d\'un casse brique [/fr/blog/ameliration_casse_brique.html] \\n\\nJ\'ai cliqué via Twitter sur un lien vers un casse brique en développement. Il\\navait des problèmes de performance étonnants. J\'y ai mis mon grain de sel.\\n\\nPublié le mardi 8 mai 2012 20:09\\n\\n Pourquoi j\'ai nommé ce blog InsertAfter [/fr/blog/pourquoi_insert_after.html] \\n\\nJe viens de m\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle\\nInsertAfter, c\'est le moment de palier à ce manque.\\n\\nPublié le mardi 8 mai 2012 14:23\\n\\n Installer/utiliser Notepad++ sous Debian GNU/Linux\\n[/fr/blog/notepad_plus_plus_debian_gnu_linux.html] \\n\\nL\'univers windows est pour moi du passé, mais Notepad++ reste un must-have sans\\nlequel coder serait bien moins sympa. Découvrez comment profiter de ce logiciel\\nsous Linux.\\n\\nPublié le mardi 8 mai 2012 09:36\\n\\n Lecteur/parseur de fichiers de POIs .ASC en PHP\\n[/fr/blog/lecteur_fichiers_asc_php.html] \\n\\nPeut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format\\n.ASC. Voici un petit parseur créé par mes soins.\\n\\nPublié le samedi 5 mai 2012 22:16\\n\\n Critique du livre : Performances PHP, audit et optimisation LAMP\\n[/fr/blog/performances_php_lamp.html] \\n\\nAfin de compléter mes compétences en administration système, j\'ai acheté le\\nlivre Performance PHP aux éditions Eyrolles. Bonne pioche !\\n\\nPublié le samedi 5 mai 2012 19:06\\n\\n Critique du livre : Linux embarqué. Comprendre, développer, réussir de Gilles\\nBlanc [/fr/blog/linux_embarque.html] \\n\\nJ\'ai récemment hacké mon Nas et mon routeur Linksys. Pour aller plus loin, j\'ai\\nacheté un livre sur Linux dans le domaine de l\'embarqué.\\n\\nPublié le dimanche 8 avril 2012 04:16\\n\\nPrécédent [/fr/blog/index-3.html] Suivant [/fr/blog/index-5.html] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc174:JSON.parse('{"path":"contents/pages/fr/blog/index-4.atom","title":"Blog d\'un développeur web à Lille - 4","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index-4.html InsertAfter : Blog d\'un\\ndéveloppeur web à Lille - 4 Blog de Nicolas Froidure, développeur JavaScript\\nfullstack à Lille. 2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/comparatif_appstores.html Comparatif des webapp\\nstores 2012-07-27T14:28:05.000Z 2012-07-27T14:28:05.000Z Une fois qu\'une\\napplication web est développée, il peut être intéressant de lui donner de la\\nvisibilité. Les AppStores sont censés aider les développeurs dans cette tâche. \\nhttps://insertafter.com/fr/blog/request_animation_frame.html Utilisation de\\nrequestAnimationFrame pour les jeux HTML5 2012-07-26T08:13:35.000Z \\n2012-07-26T08:13:35.000Z Une nouvelle spécification permet d\'optimiser\\nl\'affichage des jeux HTML5 en synchronisant ces derniers avec le moteur\\ngraphique du navigateur. Petit exemple de mise en oeuvre avec notre casse\\nbrique. https://insertafter.com/fr/blog/nommenclature_table_sql_base.html \\nConventions de nommage des bases de données 2012-07-18T14:34:39.000Z \\n2012-07-18T14:34:39.000Z Depuis que j\'ai découvert les bases de données avec\\nMySQL, je n\'ai pas cessé de m\'en servir, tant et si bien que j\'ai fini par\\ndéfinir une convention de nommage. \\nhttps://insertafter.com/fr/blog/application_des_varstreams_avec_websockipc.html \\nExemple de mise en oeuvre des VarStreams avec WebSockIPC et NodeJS \\n2012-07-09T11:57:39.000Z 2012-07-09T11:57:39.000Z Afin de mieux mettre en\\nexergue l\'intérêt des VarStreams, j\'ai créé une petite application NodeJS\\nmettant en oeuvre une communication inter processus avec les WebSockets. \\nhttps://insertafter.com/fr/blog/remplacer_json_par_varstream.html Pourquoi j\'ai\\nremplacé JSON par VarStream 2012-07-06T08:56:35.000Z 2012-07-06T08:56:35.000Z \\nJSON est très connu et semble bon pour la plupart des utilisations, cependant,\\npar \\"hasard\\", j\'ai créé un format de données que je trouve supérieur et que j\'ai\\ndécidé d\'appeler VarStream. \\nhttps://insertafter.com/fr/blog/bien_designer_url_site_applications_web.html \\nComment bien designer les url de son site ou application web \\n2012-06-30T10:02:27.000Z 2012-06-30T10:02:27.000Z Les URL ou URI d\'une\\napplication ou d\'un site Internet nécessitent de prendre un moment pour\\nréfléchir à leur schema. Voici quelques bonnes pratiques issues de mon\\nexpérience REST. https://insertafter.com/fr/blog/firefox_mobile_console.html \\nFirefox Mobile Android : Accéder aux consoles d\'erreur Javascript / stderr \\n2012-06-18T07:49:47.000Z 2012-06-18T07:49:47.000Z Pour développer pour Firefox\\nMobile, mieux vaut avoir la console d\'erreur à portée de main. Voici la méthode. \\nhttps://insertafter.com/fr/blog/orange_hackaton.html Orange HTML5 Hackathon :\\nPourquoi j\'ai aimé ! 2012-06-13T08:28:45.000Z 2012-06-13T08:28:45.000Z Dans le\\ncadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a été\\norganisé. Avec mon équipe, nous avons remporté le grand prix du jury. \\nhttps://insertafter.com/fr/blog/tank_arena_html5.html Jeux HTML5 : Défi Tank\\nArena 2012-06-09T14:20:22.000Z 2012-06-09T14:20:22.000Z Si vous avez déjà joué à\\nTank Arena, alors vous savez que c\'est un excellent jeu. Malheureusement, il\\nn\'existe que pour Windows. Relevons le défi d\'en faire un jeu HTML5 ! \\nhttps://insertafter.com/fr/blog/recuperer_privilege_root_mysql.html Récupérer\\nles privilèges de l\'utilisateur root de MySQL 2012-05-19T13:02:39.000Z \\n2012-05-19T13:02:39.000Z En administration système, tout arrive, même les cas\\nles plus désespérés. Perdre le mot de passe ou les privilèges de root de MySQL\\nen fait partie. Voici comment s\'en sortir. \\nhttps://insertafter.com/fr/blog/meilleur_pere_grace_a_cron.html Comment devenir\\nun meilleur père grâce à Cron 2012-05-12T10:24:25.000Z 2012-05-12T10:24:25.000Z \\nDécrocher de l\'écran en plein milieu d\'une session de code est difficile. Mais\\narriver en retard à la garderie, c\'est pas cool. Heureusement cron et Patrick\\nSébastien sont là ! https://insertafter.com/fr/blog/html5_casse_brique.html Jeux\\nHTML5 : Développement d\'un casse brique 2012-05-11T08:51:19.000Z \\n2012-05-11T08:51:19.000Z Créer un jeu en HTML5 est simple. Cependant, il faut\\nrespecter quelques bonnes pratiques pour éviter que cela tourne au cauchemar. \\nhttps://insertafter.com/fr/blog/migrer_base_de_donnees_utf8.html Migrer toute\\nune base de données vers UTF8 2012-05-10T06:48:13.000Z 2012-05-10T06:48:13.000Z \\nVous avez peut-être commencé votre application avec les caractères latins et\\npour des besoins d\'internationalisation, vous souhaitez passer vos bases en UTF8\\n? La solution tient en un seul script. \\nhttps://insertafter.com/fr/blog/developpement_web_mobile.html Tester ses sites\\nweb sur les mobiles 2012-05-09T17:47:14.000Z 2012-05-09T17:47:14.000Z On ne peut\\npas toujours s\'offrir un téléphone haut de gamme pour tester son site web.\\nHeureusement, les émulateurs sont là ! \\nhttps://insertafter.com/fr/blog/ameliration_casse_brique.html Amélioration d\'un\\ncasse brique 2012-05-08T18:09:31.000Z 2012-05-08T18:09:31.000Z J\'ai cliqué via\\nTwitter sur un lien vers un casse brique en développement. Il avait des\\nproblèmes de performance étonnants. J\'y ai mis mon grain de sel. \\nhttps://insertafter.com/fr/blog/pourquoi_insert_after.html Pourquoi j\'ai nommé\\nce blog InsertAfter 2012-05-08T12:23:29.000Z 2012-05-08T12:23:29.000Z Je viens\\nde m\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle InsertAfter,\\nc\'est le moment de palier à ce manque. \\nhttps://insertafter.com/fr/blog/notepad_plus_plus_debian_gnu_linux.html \\nInstaller/utiliser Notepad++ sous Debian GNU/Linux 2012-05-08T07:36:03.000Z \\n2012-05-08T07:36:03.000Z L\'univers windows est pour moi du passé, mais Notepad++\\nreste un must-have sans lequel coder serait bien moins sympa. Découvrez comment\\nprofiter de ce logiciel sous Linux. \\nhttps://insertafter.com/fr/blog/lecteur_fichiers_asc_php.html Lecteur/parseur de\\nfichiers de POIs .ASC en PHP 2012-05-05T20:16:48.000Z 2012-05-05T20:16:48.000Z \\nPeut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format\\n.ASC. Voici un petit parseur créé par mes soins. \\nhttps://insertafter.com/fr/blog/performances_php_lamp.html Critique du livre :\\nPerformances PHP, audit et optimisation LAMP 2012-05-05T17:06:27.000Z \\n2012-05-05T17:06:27.000Z Afin de compléter mes compétences en administration\\nsystème, j\'ai acheté le livre Performance PHP aux éditions Eyrolles. Bonne\\npioche ! https://insertafter.com/fr/blog/linux_embarque.html Critique du livre :\\nLinux embarqué. Comprendre, développer, réussir de Gilles Blanc \\n2012-04-08T02:16:03.000Z 2012-04-08T02:16:03.000Z J\'ai récemment hacké mon Nas\\net mon routeur Linksys. Pour aller plus loin, j\'ai acheté un livre sur Linux\\ndans le domaine de l\'embarqué."}'),doc175:JSON.parse('{"path":"contents/pages/articles.atom","title":"Blog d\'un développeur web à Lille - 4","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index-4.html InsertAfter : Blog d\'un\\ndéveloppeur web à Lille - 4 Blog de Nicolas Froidure, développeur JavaScript\\nfullstack à Lille. 2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/comparatif_appstores.html Comparatif des webapp\\nstores 2012-07-27T14:28:05.000Z 2012-07-27T14:28:05.000Z Une fois qu\'une\\napplication web est développée, il peut être intéressant de lui donner de la\\nvisibilité. Les AppStores sont censés aider les développeurs dans cette tâche. \\nhttps://insertafter.com/fr/blog/request_animation_frame.html Utilisation de\\nrequestAnimationFrame pour les jeux HTML5 2012-07-26T08:13:35.000Z \\n2012-07-26T08:13:35.000Z Une nouvelle spécification permet d\'optimiser\\nl\'affichage des jeux HTML5 en synchronisant ces derniers avec le moteur\\ngraphique du navigateur. Petit exemple de mise en oeuvre avec notre casse\\nbrique. https://insertafter.com/fr/blog/nommenclature_table_sql_base.html \\nConventions de nommage des bases de données 2012-07-18T14:34:39.000Z \\n2012-07-18T14:34:39.000Z Depuis que j\'ai découvert les bases de données avec\\nMySQL, je n\'ai pas cessé de m\'en servir, tant et si bien que j\'ai fini par\\ndéfinir une convention de nommage. \\nhttps://insertafter.com/fr/blog/application_des_varstreams_avec_websockipc.html \\nExemple de mise en oeuvre des VarStreams avec WebSockIPC et NodeJS \\n2012-07-09T11:57:39.000Z 2012-07-09T11:57:39.000Z Afin de mieux mettre en\\nexergue l\'intérêt des VarStreams, j\'ai créé une petite application NodeJS\\nmettant en oeuvre une communication inter processus avec les WebSockets. \\nhttps://insertafter.com/fr/blog/remplacer_json_par_varstream.html Pourquoi j\'ai\\nremplacé JSON par VarStream 2012-07-06T08:56:35.000Z 2012-07-06T08:56:35.000Z \\nJSON est très connu et semble bon pour la plupart des utilisations, cependant,\\npar \\"hasard\\", j\'ai créé un format de données que je trouve supérieur et que j\'ai\\ndécidé d\'appeler VarStream. \\nhttps://insertafter.com/fr/blog/bien_designer_url_site_applications_web.html \\nComment bien designer les url de son site ou application web \\n2012-06-30T10:02:27.000Z 2012-06-30T10:02:27.000Z Les URL ou URI d\'une\\napplication ou d\'un site Internet nécessitent de prendre un moment pour\\nréfléchir à leur schema. Voici quelques bonnes pratiques issues de mon\\nexpérience REST. https://insertafter.com/fr/blog/firefox_mobile_console.html \\nFirefox Mobile Android : Accéder aux consoles d\'erreur Javascript / stderr \\n2012-06-18T07:49:47.000Z 2012-06-18T07:49:47.000Z Pour développer pour Firefox\\nMobile, mieux vaut avoir la console d\'erreur à portée de main. Voici la méthode. \\nhttps://insertafter.com/fr/blog/orange_hackaton.html Orange HTML5 Hackathon :\\nPourquoi j\'ai aimé ! 2012-06-13T08:28:45.000Z 2012-06-13T08:28:45.000Z Dans le\\ncadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a été\\norganisé. Avec mon équipe, nous avons remporté le grand prix du jury. \\nhttps://insertafter.com/fr/blog/tank_arena_html5.html Jeux HTML5 : Défi Tank\\nArena 2012-06-09T14:20:22.000Z 2012-06-09T14:20:22.000Z Si vous avez déjà joué à\\nTank Arena, alors vous savez que c\'est un excellent jeu. Malheureusement, il\\nn\'existe que pour Windows. Relevons le défi d\'en faire un jeu HTML5 ! \\nhttps://insertafter.com/fr/blog/recuperer_privilege_root_mysql.html Récupérer\\nles privilèges de l\'utilisateur root de MySQL 2012-05-19T13:02:39.000Z \\n2012-05-19T13:02:39.000Z En administration système, tout arrive, même les cas\\nles plus désespérés. Perdre le mot de passe ou les privilèges de root de MySQL\\nen fait partie. Voici comment s\'en sortir. \\nhttps://insertafter.com/fr/blog/meilleur_pere_grace_a_cron.html Comment devenir\\nun meilleur père grâce à Cron 2012-05-12T10:24:25.000Z 2012-05-12T10:24:25.000Z \\nDécrocher de l\'écran en plein milieu d\'une session de code est difficile. Mais\\narriver en retard à la garderie, c\'est pas cool. Heureusement cron et Patrick\\nSébastien sont là ! https://insertafter.com/fr/blog/html5_casse_brique.html Jeux\\nHTML5 : Développement d\'un casse brique 2012-05-11T08:51:19.000Z \\n2012-05-11T08:51:19.000Z Créer un jeu en HTML5 est simple. Cependant, il faut\\nrespecter quelques bonnes pratiques pour éviter que cela tourne au cauchemar. \\nhttps://insertafter.com/fr/blog/migrer_base_de_donnees_utf8.html Migrer toute\\nune base de données vers UTF8 2012-05-10T06:48:13.000Z 2012-05-10T06:48:13.000Z \\nVous avez peut-être commencé votre application avec les caractères latins et\\npour des besoins d\'internationalisation, vous souhaitez passer vos bases en UTF8\\n? La solution tient en un seul script. \\nhttps://insertafter.com/fr/blog/developpement_web_mobile.html Tester ses sites\\nweb sur les mobiles 2012-05-09T17:47:14.000Z 2012-05-09T17:47:14.000Z On ne peut\\npas toujours s\'offrir un téléphone haut de gamme pour tester son site web.\\nHeureusement, les émulateurs sont là ! \\nhttps://insertafter.com/fr/blog/ameliration_casse_brique.html Amélioration d\'un\\ncasse brique 2012-05-08T18:09:31.000Z 2012-05-08T18:09:31.000Z J\'ai cliqué via\\nTwitter sur un lien vers un casse brique en développement. Il avait des\\nproblèmes de performance étonnants. J\'y ai mis mon grain de sel. \\nhttps://insertafter.com/fr/blog/pourquoi_insert_after.html Pourquoi j\'ai nommé\\nce blog InsertAfter 2012-05-08T12:23:29.000Z 2012-05-08T12:23:29.000Z Je viens\\nde m\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle InsertAfter,\\nc\'est le moment de palier à ce manque. \\nhttps://insertafter.com/fr/blog/notepad_plus_plus_debian_gnu_linux.html \\nInstaller/utiliser Notepad++ sous Debian GNU/Linux 2012-05-08T07:36:03.000Z \\n2012-05-08T07:36:03.000Z L\'univers windows est pour moi du passé, mais Notepad++\\nreste un must-have sans lequel coder serait bien moins sympa. Découvrez comment\\nprofiter de ce logiciel sous Linux. \\nhttps://insertafter.com/fr/blog/lecteur_fichiers_asc_php.html Lecteur/parseur de\\nfichiers de POIs .ASC en PHP 2012-05-05T20:16:48.000Z 2012-05-05T20:16:48.000Z \\nPeut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format\\n.ASC. Voici un petit parseur créé par mes soins. \\nhttps://insertafter.com/fr/blog/performances_php_lamp.html Critique du livre :\\nPerformances PHP, audit et optimisation LAMP 2012-05-05T17:06:27.000Z \\n2012-05-05T17:06:27.000Z Afin de compléter mes compétences en administration\\nsystème, j\'ai acheté le livre Performance PHP aux éditions Eyrolles. Bonne\\npioche ! https://insertafter.com/fr/blog/linux_embarque.html Critique du livre :\\nLinux embarqué. Comprendre, développer, réussir de Gilles Blanc \\n2012-04-08T02:16:03.000Z 2012-04-08T02:16:03.000Z J\'ai récemment hacké mon Nas\\net mon routeur Linksys. Pour aller plus loin, j\'ai acheté un livre sur Linux\\ndans le domaine de l\'embarqué."}'),doc176:JSON.parse('{"path":"contents/pages/fr/blog/index-4.rss","title":"Blog d\'un développeur web à Lille - 4","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille - 4 Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index-4.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Comparatif des webapp stores Une fois qu\'une\\napplication web est développée, il peut être intéressant de lui donner de la\\nvisibilité. Les AppStores sont censés aider les développeurs dans cette tâche. \\nhttps://insertafter.com/fr/blog/comparatif_appstores.html \\n2012-07-27T14:28:05.000Z Utilisation de requestAnimationFrame pour les jeux\\nHTML5 Une nouvelle spécification permet d\'optimiser l\'affichage des jeux HTML5\\nen synchronisant ces derniers avec le moteur graphique du navigateur. Petit\\nexemple de mise en oeuvre avec notre casse brique. \\nhttps://insertafter.com/fr/blog/request_animation_frame.html \\n2012-07-26T08:13:35.000Z Conventions de nommage des bases de données Depuis que\\nj\'ai découvert les bases de données avec MySQL, je n\'ai pas cessé de m\'en\\nservir, tant et si bien que j\'ai fini par définir une convention de nommage. \\nhttps://insertafter.com/fr/blog/nommenclature_table_sql_base.html \\n2012-07-18T14:34:39.000Z Exemple de mise en oeuvre des VarStreams avec\\nWebSockIPC et NodeJS Afin de mieux mettre en exergue l\'intérêt des VarStreams,\\nj\'ai créé une petite application NodeJS mettant en oeuvre une communication\\ninter processus avec les WebSockets. \\nhttps://insertafter.com/fr/blog/application_des_varstreams_avec_websockipc.html \\n2012-07-09T11:57:39.000Z Pourquoi j\'ai remplacé JSON par VarStream JSON est très\\nconnu et semble bon pour la plupart des utilisations, cependant, par \\"hasard\\",\\nj\'ai créé un format de données que je trouve supérieur et que j\'ai décidé\\nd\'appeler VarStream. \\nhttps://insertafter.com/fr/blog/remplacer_json_par_varstream.html \\n2012-07-06T08:56:35.000Z Comment bien designer les url de son site ou\\napplication web Les URL ou URI d\'une application ou d\'un site Internet\\nnécessitent de prendre un moment pour réfléchir à leur schema. Voici quelques\\nbonnes pratiques issues de mon expérience REST. \\nhttps://insertafter.com/fr/blog/bien_designer_url_site_applications_web.html \\n2012-06-30T10:02:27.000Z Firefox Mobile Android : Accéder aux consoles d\'erreur\\nJavascript / stderr Pour développer pour Firefox Mobile, mieux vaut avoir la\\nconsole d\'erreur à portée de main. Voici la méthode. \\nhttps://insertafter.com/fr/blog/firefox_mobile_console.html \\n2012-06-18T07:49:47.000Z Orange HTML5 Hackathon : Pourquoi j\'ai aimé ! Dans le\\ncadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a été\\norganisé. Avec mon équipe, nous avons remporté le grand prix du jury. \\nhttps://insertafter.com/fr/blog/orange_hackaton.html 2012-06-13T08:28:45.000Z \\nJeux HTML5 : Défi Tank Arena Si vous avez déjà joué à Tank Arena, alors vous\\nsavez que c\'est un excellent jeu. Malheureusement, il n\'existe que pour Windows.\\nRelevons le défi d\'en faire un jeu HTML5 ! \\nhttps://insertafter.com/fr/blog/tank_arena_html5.html 2012-06-09T14:20:22.000Z \\nRécupérer les privilèges de l\'utilisateur root de MySQL En administration\\nsystème, tout arrive, même les cas les plus désespérés. Perdre le mot de passe\\nou les privilèges de root de MySQL en fait partie. Voici comment s\'en sortir. \\nhttps://insertafter.com/fr/blog/recuperer_privilege_root_mysql.html \\n2012-05-19T13:02:39.000Z Comment devenir un meilleur père grâce à Cron Décrocher\\nde l\'écran en plein milieu d\'une session de code est difficile. Mais arriver en\\nretard à la garderie, c\'est pas cool. Heureusement cron et Patrick Sébastien\\nsont là ! https://insertafter.com/fr/blog/meilleur_pere_grace_a_cron.html \\n2012-05-12T10:24:25.000Z Jeux HTML5 : Développement d\'un casse brique Créer un\\njeu en HTML5 est simple. Cependant, il faut respecter quelques bonnes pratiques\\npour éviter que cela tourne au cauchemar. \\nhttps://insertafter.com/fr/blog/html5_casse_brique.html 2012-05-11T08:51:19.000Z \\nMigrer toute une base de données vers UTF8 Vous avez peut-être commencé votre\\napplication avec les caractères latins et pour des besoins\\nd\'internationalisation, vous souhaitez passer vos bases en UTF8 ? La solution\\ntient en un seul script. \\nhttps://insertafter.com/fr/blog/migrer_base_de_donnees_utf8.html \\n2012-05-10T06:48:13.000Z Tester ses sites web sur les mobiles On ne peut pas\\ntoujours s\'offrir un téléphone haut de gamme pour tester son site web.\\nHeureusement, les émulateurs sont là ! \\nhttps://insertafter.com/fr/blog/developpement_web_mobile.html \\n2012-05-09T17:47:14.000Z Amélioration d\'un casse brique J\'ai cliqué via Twitter\\nsur un lien vers un casse brique en développement. Il avait des problèmes de\\nperformance étonnants. J\'y ai mis mon grain de sel. \\nhttps://insertafter.com/fr/blog/ameliration_casse_brique.html \\n2012-05-08T18:09:31.000Z Pourquoi j\'ai nommé ce blog InsertAfter Je viens de\\nm\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle InsertAfter,\\nc\'est le moment de palier à ce manque. \\nhttps://insertafter.com/fr/blog/pourquoi_insert_after.html \\n2012-05-08T12:23:29.000Z Installer/utiliser Notepad++ sous Debian GNU/Linux \\nL\'univers windows est pour moi du passé, mais Notepad++ reste un must-have sans\\nlequel coder serait bien moins sympa. Découvrez comment profiter de ce logiciel\\nsous Linux. \\nhttps://insertafter.com/fr/blog/notepad_plus_plus_debian_gnu_linux.html \\n2012-05-08T07:36:03.000Z Lecteur/parseur de fichiers de POIs .ASC en PHP \\nPeut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format\\n.ASC. Voici un petit parseur créé par mes soins. \\nhttps://insertafter.com/fr/blog/lecteur_fichiers_asc_php.html \\n2012-05-05T20:16:48.000Z Critique du livre : Performances PHP, audit et\\noptimisation LAMP Afin de compléter mes compétences en administration système,\\nj\'ai acheté le livre Performance PHP aux éditions Eyrolles. Bonne pioche ! \\nhttps://insertafter.com/fr/blog/performances_php_lamp.html \\n2012-05-05T17:06:27.000Z Critique du livre : Linux embarqué. Comprendre,\\ndévelopper, réussir de Gilles Blanc J\'ai récemment hacké mon Nas et mon routeur\\nLinksys. Pour aller plus loin, j\'ai acheté un livre sur Linux dans le domaine de\\nl\'embarqué. https://insertafter.com/fr/blog/linux_embarque.html \\n2012-04-08T02:16:03.000Z"}'),doc177:JSON.parse('{"path":"contents/pages/articles.rss","title":"Blog d\'un développeur web à Lille - 4","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille - 4 Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index-4.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Comparatif des webapp stores Une fois qu\'une\\napplication web est développée, il peut être intéressant de lui donner de la\\nvisibilité. Les AppStores sont censés aider les développeurs dans cette tâche. \\nhttps://insertafter.com/fr/blog/comparatif_appstores.html \\n2012-07-27T14:28:05.000Z Utilisation de requestAnimationFrame pour les jeux\\nHTML5 Une nouvelle spécification permet d\'optimiser l\'affichage des jeux HTML5\\nen synchronisant ces derniers avec le moteur graphique du navigateur. Petit\\nexemple de mise en oeuvre avec notre casse brique. \\nhttps://insertafter.com/fr/blog/request_animation_frame.html \\n2012-07-26T08:13:35.000Z Conventions de nommage des bases de données Depuis que\\nj\'ai découvert les bases de données avec MySQL, je n\'ai pas cessé de m\'en\\nservir, tant et si bien que j\'ai fini par définir une convention de nommage. \\nhttps://insertafter.com/fr/blog/nommenclature_table_sql_base.html \\n2012-07-18T14:34:39.000Z Exemple de mise en oeuvre des VarStreams avec\\nWebSockIPC et NodeJS Afin de mieux mettre en exergue l\'intérêt des VarStreams,\\nj\'ai créé une petite application NodeJS mettant en oeuvre une communication\\ninter processus avec les WebSockets. \\nhttps://insertafter.com/fr/blog/application_des_varstreams_avec_websockipc.html \\n2012-07-09T11:57:39.000Z Pourquoi j\'ai remplacé JSON par VarStream JSON est très\\nconnu et semble bon pour la plupart des utilisations, cependant, par \\"hasard\\",\\nj\'ai créé un format de données que je trouve supérieur et que j\'ai décidé\\nd\'appeler VarStream. \\nhttps://insertafter.com/fr/blog/remplacer_json_par_varstream.html \\n2012-07-06T08:56:35.000Z Comment bien designer les url de son site ou\\napplication web Les URL ou URI d\'une application ou d\'un site Internet\\nnécessitent de prendre un moment pour réfléchir à leur schema. Voici quelques\\nbonnes pratiques issues de mon expérience REST. \\nhttps://insertafter.com/fr/blog/bien_designer_url_site_applications_web.html \\n2012-06-30T10:02:27.000Z Firefox Mobile Android : Accéder aux consoles d\'erreur\\nJavascript / stderr Pour développer pour Firefox Mobile, mieux vaut avoir la\\nconsole d\'erreur à portée de main. Voici la méthode. \\nhttps://insertafter.com/fr/blog/firefox_mobile_console.html \\n2012-06-18T07:49:47.000Z Orange HTML5 Hackathon : Pourquoi j\'ai aimé ! Dans le\\ncadre du programme Orange Partner, un hackathon HTML5 de 30h non-stop a été\\norganisé. Avec mon équipe, nous avons remporté le grand prix du jury. \\nhttps://insertafter.com/fr/blog/orange_hackaton.html 2012-06-13T08:28:45.000Z \\nJeux HTML5 : Défi Tank Arena Si vous avez déjà joué à Tank Arena, alors vous\\nsavez que c\'est un excellent jeu. Malheureusement, il n\'existe que pour Windows.\\nRelevons le défi d\'en faire un jeu HTML5 ! \\nhttps://insertafter.com/fr/blog/tank_arena_html5.html 2012-06-09T14:20:22.000Z \\nRécupérer les privilèges de l\'utilisateur root de MySQL En administration\\nsystème, tout arrive, même les cas les plus désespérés. Perdre le mot de passe\\nou les privilèges de root de MySQL en fait partie. Voici comment s\'en sortir. \\nhttps://insertafter.com/fr/blog/recuperer_privilege_root_mysql.html \\n2012-05-19T13:02:39.000Z Comment devenir un meilleur père grâce à Cron Décrocher\\nde l\'écran en plein milieu d\'une session de code est difficile. Mais arriver en\\nretard à la garderie, c\'est pas cool. Heureusement cron et Patrick Sébastien\\nsont là ! https://insertafter.com/fr/blog/meilleur_pere_grace_a_cron.html \\n2012-05-12T10:24:25.000Z Jeux HTML5 : Développement d\'un casse brique Créer un\\njeu en HTML5 est simple. Cependant, il faut respecter quelques bonnes pratiques\\npour éviter que cela tourne au cauchemar. \\nhttps://insertafter.com/fr/blog/html5_casse_brique.html 2012-05-11T08:51:19.000Z \\nMigrer toute une base de données vers UTF8 Vous avez peut-être commencé votre\\napplication avec les caractères latins et pour des besoins\\nd\'internationalisation, vous souhaitez passer vos bases en UTF8 ? La solution\\ntient en un seul script. \\nhttps://insertafter.com/fr/blog/migrer_base_de_donnees_utf8.html \\n2012-05-10T06:48:13.000Z Tester ses sites web sur les mobiles On ne peut pas\\ntoujours s\'offrir un téléphone haut de gamme pour tester son site web.\\nHeureusement, les émulateurs sont là ! \\nhttps://insertafter.com/fr/blog/developpement_web_mobile.html \\n2012-05-09T17:47:14.000Z Amélioration d\'un casse brique J\'ai cliqué via Twitter\\nsur un lien vers un casse brique en développement. Il avait des problèmes de\\nperformance étonnants. J\'y ai mis mon grain de sel. \\nhttps://insertafter.com/fr/blog/ameliration_casse_brique.html \\n2012-05-08T18:09:31.000Z Pourquoi j\'ai nommé ce blog InsertAfter Je viens de\\nm\'apercevoir que je n\'ai pas expliqué pourquoi ce blog s\'appelle InsertAfter,\\nc\'est le moment de palier à ce manque. \\nhttps://insertafter.com/fr/blog/pourquoi_insert_after.html \\n2012-05-08T12:23:29.000Z Installer/utiliser Notepad++ sous Debian GNU/Linux \\nL\'univers windows est pour moi du passé, mais Notepad++ reste un must-have sans\\nlequel coder serait bien moins sympa. Découvrez comment profiter de ce logiciel\\nsous Linux. \\nhttps://insertafter.com/fr/blog/notepad_plus_plus_debian_gnu_linux.html \\n2012-05-08T07:36:03.000Z Lecteur/parseur de fichiers de POIs .ASC en PHP \\nPeut-être avez vous déjà été confronté à ces infâmes fichiers de POI au format\\n.ASC. Voici un petit parseur créé par mes soins. \\nhttps://insertafter.com/fr/blog/lecteur_fichiers_asc_php.html \\n2012-05-05T20:16:48.000Z Critique du livre : Performances PHP, audit et\\noptimisation LAMP Afin de compléter mes compétences en administration système,\\nj\'ai acheté le livre Performance PHP aux éditions Eyrolles. Bonne pioche ! \\nhttps://insertafter.com/fr/blog/performances_php_lamp.html \\n2012-05-05T17:06:27.000Z Critique du livre : Linux embarqué. Comprendre,\\ndévelopper, réussir de Gilles Blanc J\'ai récemment hacké mon Nas et mon routeur\\nLinksys. Pour aller plus loin, j\'ai acheté un livre sur Linux dans le domaine de\\nl\'embarqué. https://insertafter.com/fr/blog/linux_embarque.html \\n2012-04-08T02:16:03.000Z"}'),doc178:JSON.parse('{"path":"contents/pages/fr/blog/index-5.html","title":"Blog d\'un développeur web à Lille - 5","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nBLOG\\nSur mon blog, vous trouverez de nombreux articles sur le développement web mais\\naussi sur l’administration système, l’informatique, le hacking et la\\nprogrammation en général. Mes langages préférés : Javascript, HTML5, PHP/MySQL\\net REST\\n\\n Critique du livre : UML par la pratique par Pascal Roques\\n[/fr/blog/uml_par_la_pratique.html] \\n\\nUML est un formidable outil pour modéliser vos futures applications. J\'ai\\ncompris cela en lisant ce livre.\\n\\nPublié le dimanche 26 février 2012 21:18\\n\\n Critique du livre : Développement système sous Linux de Christophe Blaess\\n[/fr/blog/developpement_systeme_sous_linux.html] \\n\\nCette semaine, j\'ai lu l\'un des livres les plus intéressants qu\'il m\'ait été\\ndonné de lire.\\n\\nPublié le mercredi 15 février 2012 19:31\\n\\n Critique du livre : Exercices en langage C++\\n[/fr/blog/exercices_en_cplusplus.html] \\n\\nAfin de parfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre\\nd\'exercices assez bien ficelé.\\n\\nPublié le jeudi 26 janvier 2012 21:28\\n\\n Décompiler/désassembler un paquet Android (.apk)\\n[/fr/blog/desasembler_apk.html] \\n\\nGrâce à la combinaison de deux outils simples et pratiques, il est possible\\nd\'obtenir un code source assez fidèle à celui d\'origine pour un paquet Android.\\n\\nPublié le jeudi 19 janvier 2012 13:11\\n\\n Critique du livre : Services Web RESTful par Richarson & Ruby\\n[/fr/blog/services_web_restful.html] \\n\\nSi on me demandait quel livre a véritablement influencé mon quotidien de\\ndéveloppeur web, ce serait sans hésitation celui-là.\\n\\nPublié le mardi 17 janvier 2012 20:44\\n\\n Bonjour InsertAfter ! [/fr/blog/creation_insert_after.html] \\n\\nDix ans après, je décide de créer mon blog. Mieux vaut tard que jamais !\\n\\nPublié le dimanche 1 janvier 2012 14:38\\n\\nPrécédent [/fr/blog/index-4.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc179:JSON.parse('{"path":"contents/pages/fr/blog/index-5.atom","title":"Blog d\'un développeur web à Lille - 5","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index-5.html InsertAfter : Blog d\'un\\ndéveloppeur web à Lille - 5 Blog de Nicolas Froidure, développeur JavaScript\\nfullstack à Lille. 2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/uml_par_la_pratique.html Critique du livre : UML\\npar la pratique par Pascal Roques 2012-02-26T20:18:55.000Z \\n2012-02-26T20:18:55.000Z UML est un formidable outil pour modéliser vos futures\\napplications. J\'ai compris cela en lisant ce livre. \\nhttps://insertafter.com/fr/blog/developpement_systeme_sous_linux.html Critique\\ndu livre : Développement système sous Linux de Christophe Blaess \\n2012-02-15T18:31:26.000Z 2012-02-15T18:31:26.000Z Cette semaine, j\'ai lu l\'un\\ndes livres les plus intéressants qu\'il m\'ait été donné de lire. \\nhttps://insertafter.com/fr/blog/exercices_en_cplusplus.html Critique du livre :\\nExercices en langage C++ 2012-01-26T20:28:14.000Z 2012-01-26T20:28:14.000Z Afin\\nde parfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre\\nd\'exercices assez bien ficelé. \\nhttps://insertafter.com/fr/blog/desasembler_apk.html Décompiler/désassembler un\\npaquet Android (.apk) 2012-01-19T12:11:27.000Z 2012-01-19T12:11:27.000Z Grâce à\\nla combinaison de deux outils simples et pratiques, il est possible d\'obtenir un\\ncode source assez fidèle à celui d\'origine pour un paquet Android. \\nhttps://insertafter.com/fr/blog/services_web_restful.html Critique du livre :\\nServices Web RESTful par Richarson & Ruby 2012-01-17T19:44:40.000Z \\n2012-01-17T19:44:40.000Z Si on me demandait quel livre a véritablement influencé\\nmon quotidien de développeur web, ce serait sans hésitation celui-là. \\nhttps://insertafter.com/fr/blog/creation_insert_after.html Bonjour InsertAfter ! \\n2012-01-01T13:38:15.000Z 2012-01-01T13:38:15.000Z Dix ans après, je décide de\\ncréer mon blog. Mieux vaut tard que jamais !"}'),doc180:JSON.parse('{"path":"contents/pages/articles.atom","title":"Blog d\'un développeur web à Lille - 5","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" https://insertafter.com/fr/blog/index-5.html InsertAfter : Blog d\'un\\ndéveloppeur web à Lille - 5 Blog de Nicolas Froidure, développeur JavaScript\\nfullstack à Lille. 2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/fr/blog/uml_par_la_pratique.html Critique du livre : UML\\npar la pratique par Pascal Roques 2012-02-26T20:18:55.000Z \\n2012-02-26T20:18:55.000Z UML est un formidable outil pour modéliser vos futures\\napplications. J\'ai compris cela en lisant ce livre. \\nhttps://insertafter.com/fr/blog/developpement_systeme_sous_linux.html Critique\\ndu livre : Développement système sous Linux de Christophe Blaess \\n2012-02-15T18:31:26.000Z 2012-02-15T18:31:26.000Z Cette semaine, j\'ai lu l\'un\\ndes livres les plus intéressants qu\'il m\'ait été donné de lire. \\nhttps://insertafter.com/fr/blog/exercices_en_cplusplus.html Critique du livre :\\nExercices en langage C++ 2012-01-26T20:28:14.000Z 2012-01-26T20:28:14.000Z Afin\\nde parfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre\\nd\'exercices assez bien ficelé. \\nhttps://insertafter.com/fr/blog/desasembler_apk.html Décompiler/désassembler un\\npaquet Android (.apk) 2012-01-19T12:11:27.000Z 2012-01-19T12:11:27.000Z Grâce à\\nla combinaison de deux outils simples et pratiques, il est possible d\'obtenir un\\ncode source assez fidèle à celui d\'origine pour un paquet Android. \\nhttps://insertafter.com/fr/blog/services_web_restful.html Critique du livre :\\nServices Web RESTful par Richarson & Ruby 2012-01-17T19:44:40.000Z \\n2012-01-17T19:44:40.000Z Si on me demandait quel livre a véritablement influencé\\nmon quotidien de développeur web, ce serait sans hésitation celui-là. \\nhttps://insertafter.com/fr/blog/creation_insert_after.html Bonjour InsertAfter ! \\n2012-01-01T13:38:15.000Z 2012-01-01T13:38:15.000Z Dix ans après, je décide de\\ncréer mon blog. Mieux vaut tard que jamais !"}'),doc181:JSON.parse('{"path":"contents/pages/fr/blog/index-5.rss","title":"Blog d\'un développeur web à Lille - 5","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille - 5 Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index-5.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Critique du livre : UML par la pratique par Pascal\\nRoques UML est un formidable outil pour modéliser vos futures applications. J\'ai\\ncompris cela en lisant ce livre. \\nhttps://insertafter.com/fr/blog/uml_par_la_pratique.html \\n2012-02-26T20:18:55.000Z Critique du livre : Développement système sous Linux de\\nChristophe Blaess Cette semaine, j\'ai lu l\'un des livres les plus intéressants\\nqu\'il m\'ait été donné de lire. \\nhttps://insertafter.com/fr/blog/developpement_systeme_sous_linux.html \\n2012-02-15T18:31:26.000Z Critique du livre : Exercices en langage C++ Afin de\\nparfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre\\nd\'exercices assez bien ficelé. \\nhttps://insertafter.com/fr/blog/exercices_en_cplusplus.html \\n2012-01-26T20:28:14.000Z Décompiler/désassembler un paquet Android (.apk) Grâce\\nà la combinaison de deux outils simples et pratiques, il est possible d\'obtenir\\nun code source assez fidèle à celui d\'origine pour un paquet Android. \\nhttps://insertafter.com/fr/blog/desasembler_apk.html 2012-01-19T12:11:27.000Z \\nCritique du livre : Services Web RESTful par Richarson & Ruby Si on me demandait\\nquel livre a véritablement influencé mon quotidien de développeur web, ce serait\\nsans hésitation celui-là. \\nhttps://insertafter.com/fr/blog/services_web_restful.html \\n2012-01-17T19:44:40.000Z Bonjour InsertAfter ! Dix ans après, je décide de créer\\nmon blog. Mieux vaut tard que jamais ! \\nhttps://insertafter.com/fr/blog/creation_insert_after.html \\n2012-01-01T13:38:15.000Z"}'),doc182:JSON.parse('{"path":"contents/pages/articles.rss","title":"Blog d\'un développeur web à Lille - 5","description":"Blog de Nicolas Froidure, développeur JavaScript fullstack à Lille.","shortTitle":"Blog","shortDesc":"Retour à l\'index du blog","contents":" InsertAfter : Blog d\'un développeur web à Lille - 5 Blog de Nicolas Froidure,\\ndéveloppeur JavaScript fullstack à Lille. \\nhttps://insertafter.com/fr/blog/index-5.html 2023-08-20T08:32:09.420Z \\n2023-08-20T08:32:09.420Z 1800 Critique du livre : UML par la pratique par Pascal\\nRoques UML est un formidable outil pour modéliser vos futures applications. J\'ai\\ncompris cela en lisant ce livre. \\nhttps://insertafter.com/fr/blog/uml_par_la_pratique.html \\n2012-02-26T20:18:55.000Z Critique du livre : Développement système sous Linux de\\nChristophe Blaess Cette semaine, j\'ai lu l\'un des livres les plus intéressants\\nqu\'il m\'ait été donné de lire. \\nhttps://insertafter.com/fr/blog/developpement_systeme_sous_linux.html \\n2012-02-15T18:31:26.000Z Critique du livre : Exercices en langage C++ Afin de\\nparfaire ma connaissance du C++, j\'ai entrepris la lecture de ce livre\\nd\'exercices assez bien ficelé. \\nhttps://insertafter.com/fr/blog/exercices_en_cplusplus.html \\n2012-01-26T20:28:14.000Z Décompiler/désassembler un paquet Android (.apk) Grâce\\nà la combinaison de deux outils simples et pratiques, il est possible d\'obtenir\\nun code source assez fidèle à celui d\'origine pour un paquet Android. \\nhttps://insertafter.com/fr/blog/desasembler_apk.html 2012-01-19T12:11:27.000Z \\nCritique du livre : Services Web RESTful par Richarson & Ruby Si on me demandait\\nquel livre a véritablement influencé mon quotidien de développeur web, ce serait\\nsans hésitation celui-là. \\nhttps://insertafter.com/fr/blog/services_web_restful.html \\n2012-01-17T19:44:40.000Z Bonjour InsertAfter ! Dix ans après, je décide de créer\\nmon blog. Mieux vaut tard que jamais ! \\nhttps://insertafter.com/fr/blog/creation_insert_after.html \\n2012-01-01T13:38:15.000Z"}'),doc183:JSON.parse('{"path":"contents/pages/en/blog/considerations_for_generating_api_clients.html","title":"Considerations for Automatic Generation of API Clients","description":"No one should loose time writing code that can be generated \\nautomatically. Here are some tips on how I did it.","shortTitle":"API Clients Generation","shortDesc":"Learn how to generate API clients","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nCONSIDERATIONS FOR AUTOMATIC GENERATION OF API CLIENTS\\n TL; DR:\\nGenerating simple, unopinionated, API clients is the way to go. \\n\\nNowadays, with APIs built on top of HapiJS, ExpressJS or even your custom router\\nlike in my case, there is no more field for building undocumented APIs. The \\nOpenAPI [https://www.openapis.org/] initiative (formerly known as Swagger) is\\nnow providing a strong and heavily supported API documentation format.\\n\\nCurrently frontend developers expect having a clear and straightforward way to\\nconsume your APIs. But providing a documentation is not enough in my opinion. We\\nmust take the opportunity of formal API descriptions to also generate client\\nAPIs.\\n\\nIn fact, if you look at Swagger Codegen\\n[https://swagger.io/tools/swagger-codegen/], you\'ll find there are a lot of\\nclients generators ready to use.\\n\\nI recently had to generate a client API for that good old AngularJS framework\\n(which is far better than Angular2 in my opinion).\\n\\nSadly, the AngularJS client API codegen is generating an API interface\\nleveraging POO (an irrelevant pattern for this case in my opinion) and\\nintroducing unnecessary complexities like spawning several files for a single\\nAPI.\\n\\nAlso, it creates as many function arguments for each endpoint than the possible\\nparameters enforcing us to remember their order and creating function calls with\\na huge signature. In the context of an ES6 based AngularJS application, I wanted\\nto use ES6 destructuring for a nicer API interface.\\n\\nI decided to create one that would be aligned with the following architecture\\nrequirements for generating a good API client:\\n\\nAUTOMATICALLY GENERATED CODE SHOULD NEVER BE MODIFIED BY HANDS\\nIndeed, if we can generate some code once, we can do it again forever. So,\\ngenerating the client API should be part of your frontend build process.\\n\\nIn my case, I quickly created a Webpack loader matching the *.swagger.json \\nallowing me to simply import the client API into the AngularJS application with\\na single line of code require(\'./api.swagger.json\');.\\n\\nThe good news with choosing to never change the generated code is that we do not\\ncare anymore about generating elegant or readable code. We just want to create\\nan appropriate surface API.\\n\\nAPI SURFACE SHOULD HIDE HTTP DETAILS\\nThere is nothing worse than having thousands of line of frontend applications\\nthat depends on a particular HTTP implementation. Maintaining HTTP APIs\\nretrocompatibility is a real pain (believe me, you do not want to write HTTP\\nproxies for older versions support...).\\n\\nUntil your API is public, you can avoid a lot of work by using a client API that\\nmasks HTTP calls by simply providing your functions with a single argument where\\nyou can put your parameters as object properties.\\n\\nFor instance, in my API client, GET /articles/{articleId}?token=x simply becomes \\ngetArticle({ articleId, token }). What if the token need to be set in the \\nAuthorization header instead of in the query string?\\n\\nIt will just be transparent for frontends, they will only have to generate the\\nSwagger definition again, include it in their project and continue using the\\nendpoint as if nothing changed.\\n\\nI kind of specialized on working on plain old ExpressJS projects and managing to\\nmake them RESTful progressively. Having that flexibility to smoothly change\\nendpoints helps a lot. For example, transforming each POST into a PUT with\\nclient generated UUIDs become really easy.\\n\\nAPI SURFACE SHOULD BE MINIMALIST\\nFor the AngularJS client API I just export a service called API and having as\\nmuch methods as there are operation ids on the swagger file. No POO, no token\\nmanagement, just map functions to HTTP calls.\\n\\nUsing this client basically means creating another service on top of it that\\nadds custom behaviors for the host application logic.\\n\\nNICE SIDE EFFECTS\\nSince I started creating my REST APIs in a Documentation Driven way (I was till\\ndoing it with PHP\\n[https://github.com/Rest4/Rest4-php/blob/master/php/class.RestAuthDigestDriver.php#L7-L30]\\nat that time), I enforce a particular order for query parameters.\\n\\nIt allows to ensure URLs are always unique for the same content. That way\\nvarious cache layers are optimized (even public proxies that cannot assume the\\nquery parameters do not matters). You can read my post on strict-qs\\n[toward_stricter_query_string_parser.html] for more informations about this.\\n\\nThat said, it can be annoying for frontends developer to work with such strict\\nAPIs. The benefits of generating the client APIs is that we can take care of it\\nfor them so that they never face REST APIs misuse issues anymore.\\n\\nWHY NOT HAVING SOME FUN?\\nWell. Generating code is less boring than writing it but I wanted to test an old\\nidea. Why not making JavaScript templates in a new way? I already leveraged the\\nAST power with jsub [./lets_subset_javascript.html] but I wanted to make\\nsomething I called AST templating.\\n\\nThe idea was to create templates that would be pure syntactically valid\\nJavaScript files. That way, linters, syntax analyzers and all the usual\\nJavaScript tools would just work on it.\\n\\nThis is how I created astpl [https://github.com/nfroidure/asttpl] and you can\\nsee how our API client looks like in its real world tests\\n[https://github.com/nfroidure/asttpl/blob/master/src/realworld.mocha.js#L82-L131]\\n.\\n\\nEt voilà! I hope you will enjoy creating your own API clients. I plan to create\\nanother template for React applications since the raw JavaScript codegen does\\nnot looks good either.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc184:JSON.parse('{"path":"contents/pages/en/blog/fifo_lifo_javascript.html","title":"Easily Implement Stacks (Fifo) And Queues (Lifo) With JavaScript","description":"I\'m currently reviewing Javascript basis for a personnal project\\n and it appears I often use stacks and queues implicitly. Let\'s make it\\n explicit and easyer to debug/use.","shortTitle":"Stacks and queues","shortDesc":"Discover my tips to use stacks and queues well.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nEASILY IMPLEMENT STACKS (FIFO) AND QUEUES (LIFO) WITH JAVASCRIPT\\nI\'m currently reviewing Javascript basis for a personnal project and it appears\\nI often use stacks and queues implicitly. Let\'s make it explicit and easyer to\\ndebug/use.\\n\\nIt\'s really easy to create queues (FIFO) by simply creating an Array and only\\nuse push and shift methods. The same for stacks (LIFO) with push and pop. But\\nwhen coming back to the code or working together it can lead to hardly\\ndetectable bugs or unexpected behaviors. That\'s why I decided to implement them\\nseriously with the help of the closure pattern. Let\'s dive in the code.\\n\\nQUEUES : FIRST IN FIRT OUT\\nHere is the code :\\n\\nvar Queue = function()\\n {\\n var functionSet=(function()\\n {\\n var _elements=[]; // creating a private array\\n return [[function() // push function\\n { return _elements.push .apply(_elements,arguments); },\\n function() // shift function\\n { return _elements.shift .apply(_elements,arguments); },\\n function() { return _elements.length; },\\n function(n) { return _elements.length=n; }]];\\n })();\\n this.push=functionSet[[0]];\\n this.shift=functionSet[[1]];\\n this.getLength=functionSet[[2]];\\n this.setLength=functionSet[[3]];\\n // initializing the queue with given arguments\\n this.push.apply(this,arguments);\\n }; \\n\\nvar q=new Queue(0,1), e;\\nq.push(2);\\nconsole.log(q.getLength()); // 3\\nwhile(undefined!==(e=q.shift()))\\n console.log(e); // 0, 1, 2 \\n\\nThe tip is deadly simple, we\'re keeping a reference to the elements in the scope\\nof our set of functions and the Queue instances expose only those functions as\\nmethods. So, we\'re sure our queues will be used properly.\\n\\nIf you\'re coding in a modern JavaScript engine you\'ll probably want to access\\nthe queue length as a property like it\'s done with arrays or strings. Here is\\nthe way to:\\n\\nvar Queue = function() {\\n var functionSet=(function() {\\n var _elements=[[]]; // creating a private array\\n return [[function() // push function\\n { return _elements.push .apply(_elements,arguments); }, function() // shift function\\n { return _elements.shift .apply(_elements,arguments); },\\n function() { return _elements.length; }, function(n) { return _elements.length=n; }]];\\n })();\\n this.push=functionSet[[0]];\\n this.shift=functionSet[[1]];\\n Object.defineProperty(this,\'length\',{\'get\':functionSet[[2]],\'set\':functionSet[[3]]});\\n // initializing the queue with given arguments\\n this.push.apply(this,arguments);\\n }; \\n\\nOur sample code becomes :\\n\\nvar q=new Queue(0,1), e;\\nq.push(2);\\nconsole.log(q.length); // 3\\nwhile(undefined!==(e=q.shift()))\\n console.log(e); // 0, 1, 2 \\n\\nSTACKS (LAST IN FIRST OUT)\\nNow we can simply modify the above code to also manage stacks:\\n\\nvar Stack = function() {\\n var functionSet=(function() {\\n var _elements=[[]]; // creating a private array\\n return [[function() // push function\\n { return _elements.push .apply(_elements,arguments); },\\n function() // pop function\\n { return _elements.pop .apply(_elements,arguments); },\\n function() { return _elements.length; },\\n function(n) { return _elements.length=n; }]];\\n })();\\n this.push=functionSet[[0]];\\n this.pop=functionSet[[1]];\\n this.getLength=functionSet[[2]];\\n this.setLength=functionSet[[3]];\\n // initializing the stack with given arguments\\n this.push.apply(this,arguments);\\n }; \\n\\nLet\'s test it:\\n\\nvar s=new Stack(0,1), e;\\ns.push(2);\\nconsole.log(s.getLength()); // 3\\nwhile(undefined!==(e=s.pop()))\\n console.log(e); // 2, 1, 0\\n\\nAs you can see JavaScript closures allows you to easily create constructors\\nusing only a subset of an existing data type. Feel free to use or patch it!\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc185:JSON.parse('{"path":"contents/pages/blog-fifo_lifo_javascript.html","title":"Easily Implement Stacks (Fifo) And Queues (Lifo) With JavaScript","description":"I\'m currently reviewing Javascript basis for a personnal project\\n and it appears I often use stacks and queues implicitly. Let\'s make it\\n explicit and easyer to debug/use.","shortTitle":"Stacks and queues","shortDesc":"Discover my tips to use stacks and queues well.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nEASILY IMPLEMENT STACKS (FIFO) AND QUEUES (LIFO) WITH JAVASCRIPT\\nI\'m currently reviewing Javascript basis for a personnal project and it appears\\nI often use stacks and queues implicitly. Let\'s make it explicit and easyer to\\ndebug/use.\\n\\nIt\'s really easy to create queues (FIFO) by simply creating an Array and only\\nuse push and shift methods. The same for stacks (LIFO) with push and pop. But\\nwhen coming back to the code or working together it can lead to hardly\\ndetectable bugs or unexpected behaviors. That\'s why I decided to implement them\\nseriously with the help of the closure pattern. Let\'s dive in the code.\\n\\nQUEUES : FIRST IN FIRT OUT\\nHere is the code :\\n\\nvar Queue = function()\\n {\\n var functionSet=(function()\\n {\\n var _elements=[]; // creating a private array\\n return [[function() // push function\\n { return _elements.push .apply(_elements,arguments); },\\n function() // shift function\\n { return _elements.shift .apply(_elements,arguments); },\\n function() { return _elements.length; },\\n function(n) { return _elements.length=n; }]];\\n })();\\n this.push=functionSet[[0]];\\n this.shift=functionSet[[1]];\\n this.getLength=functionSet[[2]];\\n this.setLength=functionSet[[3]];\\n // initializing the queue with given arguments\\n this.push.apply(this,arguments);\\n }; \\n\\nvar q=new Queue(0,1), e;\\nq.push(2);\\nconsole.log(q.getLength()); // 3\\nwhile(undefined!==(e=q.shift()))\\n console.log(e); // 0, 1, 2 \\n\\nThe tip is deadly simple, we\'re keeping a reference to the elements in the scope\\nof our set of functions and the Queue instances expose only those functions as\\nmethods. So, we\'re sure our queues will be used properly.\\n\\nIf you\'re coding in a modern JavaScript engine you\'ll probably want to access\\nthe queue length as a property like it\'s done with arrays or strings. Here is\\nthe way to:\\n\\nvar Queue = function() {\\n var functionSet=(function() {\\n var _elements=[[]]; // creating a private array\\n return [[function() // push function\\n { return _elements.push .apply(_elements,arguments); }, function() // shift function\\n { return _elements.shift .apply(_elements,arguments); },\\n function() { return _elements.length; }, function(n) { return _elements.length=n; }]];\\n })();\\n this.push=functionSet[[0]];\\n this.shift=functionSet[[1]];\\n Object.defineProperty(this,\'length\',{\'get\':functionSet[[2]],\'set\':functionSet[[3]]});\\n // initializing the queue with given arguments\\n this.push.apply(this,arguments);\\n }; \\n\\nOur sample code becomes :\\n\\nvar q=new Queue(0,1), e;\\nq.push(2);\\nconsole.log(q.length); // 3\\nwhile(undefined!==(e=q.shift()))\\n console.log(e); // 0, 1, 2 \\n\\nSTACKS (LAST IN FIRST OUT)\\nNow we can simply modify the above code to also manage stacks:\\n\\nvar Stack = function() {\\n var functionSet=(function() {\\n var _elements=[[]]; // creating a private array\\n return [[function() // push function\\n { return _elements.push .apply(_elements,arguments); },\\n function() // pop function\\n { return _elements.pop .apply(_elements,arguments); },\\n function() { return _elements.length; },\\n function(n) { return _elements.length=n; }]];\\n })();\\n this.push=functionSet[[0]];\\n this.pop=functionSet[[1]];\\n this.getLength=functionSet[[2]];\\n this.setLength=functionSet[[3]];\\n // initializing the stack with given arguments\\n this.push.apply(this,arguments);\\n }; \\n\\nLet\'s test it:\\n\\nvar s=new Stack(0,1), e;\\ns.push(2);\\nconsole.log(s.getLength()); // 3\\nwhile(undefined!==(e=s.pop()))\\n console.log(e); // 2, 1, 0\\n\\nAs you can see JavaScript closures allows you to easily create constructors\\nusing only a subset of an existing data type. Feel free to use or patch it!\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc186:JSON.parse('{"path":"contents/pages/en/blog/hacktobefest_4_prs_easily.html","title":"Get 4 PRs easily and usefuly for the Hacktoberfest","description":"You want to get involved into the Hacktoberfest \\n an win a shirt or plant a tree? Follow your guide!","shortTitle":"Easy and ecological Hacktoberfest","shortDesc":"See how to complete the Hacktobefest easily","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/FR/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Accueil [/fr/index.html] \\n *  Blog [/fr/blog/index.html] \\n *  Projets [/fr/projets.html] \\n *  À propos [/fr/a_propos.html] \\n\\nCOMPLETE THE HACKTOBERFEST EASILY AND USEFULLY!\\nWell, I just finished my 4 PRs this year, and got a few questions on how to\\ncomplete the Hacktoberfest for people that are not used to open-source\\ndevelopment.\\n\\nI have an easy trick to do so. NPM modules are in fact packages that should only\\ncontain the actual code, eventual mappings for built code and the package.json \\nfile.\\n\\nSadly, it is often not the case. It frequently contains a lot of contents that\\nain\'t supposed to be in the distributed code. It leads to wasted disk space and\\nnetwork bandwidth.\\n\\nA simple yet useful way to contribute to the open-source community is to reduce\\nthe NPM modules size. To identify which modules needs your help, go to any of\\nyour NodeJS project and run the following command:\\ndu -ch -d0 node_modules/*\\nTo focus on the biggest modules, you can filter the output:\\ndu -ch -d0 node_modules/* | grep M\\n\\nNow we know which modules are too heavy. On the DiagRAMS Technologies API, the\\nheaviest is typescript with 61Mb.\\nTo browse the repository code, just run:\\nnpm repo typescript\\n\\nNow we can investigate, I think you should avoid big modules like TypeScript for\\nyour first PRs since it can be complicated to understand. Most heavy modules are\\nnot using the files\\n[https://docs.npmjs.com/cli/v7/configuring-npm/package-json#files]field in their \\npackage.json file.\\n\\nOnce you could identify which files are required and which ain\'t, you can clone\\nand fork the repository:\\n\\n\\n  # Clone and install\\n  git clone git@github.com:{my_usersame}/{my_fork}.git;\\n  cd module;\\n  npm i;\\n\\n  # Package the module and see its size\\n  npm pack;\\n  du -h my_fork-x.x.x.tgz\\n\\n  # Add the `file` field to the package.json\\n\\n\\n  # Package the module again and check its new size\\n  npm pack;\\n  du -h my_fork-x.x.x.tgz\\n\\n  # Install the module in your projet and check\\n  # it still works\\n  cd my_project;\\n  npm install my_fork-x.x.x.tgz;\\n  npm test;\\n\\n\\nYour are now ready to submit your pull-request with the package size before and\\nafter your modifications!\\nSimple, ecological and useful, mission accomplished!\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/fr/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc187:JSON.parse('{"path":"contents/pages/en/blog/http_rest_apis_with_nodejs.html","title":"Designing HTTP REST APIs with NodeJS","description":"Designing good HTTP services is still a hard thing despite the many\\n tools you can find to make them with NodeJS. I\'m trying to define a formal\\n approach to architecture them by embracing the HTTP protocol nature and the\\n RESTful principles.","shortTitle":"HTTP API Design","shortDesc":"See how i design HTTP APIs with NodeJS","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nDESIGNING HTTP REST APIS\\nYou may have read my no more middlewares [no_more_middlewares.html] blog post\\nand wonder what led me to this mindset about middlewares. I would like to\\nexplain here why i think that Express (but also its contesters like Hapi or\\nRestify) are not that good when it comes to build REST APIs by explaining the\\nchallenges of designing a HTTP REST API and how I\'m trying to do it.\\n\\n TL.DR. HTTP/REST API complexity does not worth creating a framework. \\n\\nDESIGN CONSIDERATIONS\\nTHE SERVER: A STATE DEALER\\n An HTTP server is a gateway allowing to read/write states. Those states may sit\\nin a database or a file storage system. An HTTP transaction allows you to\\nretrieve those states (with the OPTIONS/GET verbs) and to change them (with\\nPOST/PUT/PATCH/DELETE ones). The states are located with the help of URIs,\\nbehind an URI one or more states can be involved.\\n\\nBuilding an HTTP server mainly consist in defining the states you want to keep\\nand where you want to store them. Once defined, you\'ll have to define the rules\\ndetermining what happens when a state changes.\\n\\nRETRIEVING STATES\\nThis is the easy part. Retrieving states is done with simple GET requests (you\\nmay also have heard about the SEARCH method\\n[https://datatracker.ietf.org/doc/rfc5323/]).\\n\\nStates are rarely provided as is from their storage. They are often transformed\\ninto a representation, this is known as representational state transfer (REST)\\n[https://fr.wikipedia.org/wiki/Representational_state_transfer].\\n\\nIt is worth noting a resource representation can be seen as a pure function:\\nresponse = f(request, ...states)\\nAnswering a GET HTTP request is as simple as decoding the request, retrieve the\\ninvolved states and build a representation of the actual resource.\\n\\nThe beauty of an HTTP server is that states are more concepts than real data.\\nThe state of an unexisting resource is that it doesn\'t exists.\\n\\nCHANGING STATES\\nWhen using the PUT/POST/PATCH methods in an HTTP request, we typically provide\\nsome content with our HTTP request that describes the changes we want to\\nperform.\\n\\nFor DELETE ones, it is a bit simpler. We are only providing the name (its URI\\nfor instance) of the resource we want to delete.\\n\\nHandling state changes is a bit harder. Indeed, i usually split it into two\\nphases:\\n\\nACKNOWLEDGMENT\\nThis is when the status code and the HTTP headers are sent to the client. When a\\nserver acknowledge a resource change, the implicit contract is that any other\\nrequest involving its underlying states will take those changes in count.\\n\\nIf someone upload a file by performing a PUT /fs/myfile request, you can send\\nresponse headers only when it is guaranteed that a GET /fs/myfile will\\nsuccessfully complete. This is the transactional part of an HTTP server.\\n\\nThis might not be true for large systems on short time frames or for two clients\\nbased on two very distant regions but those trade offs doesn\'t affect an API\\ndesign in most cases.\\n\\nThe new states of the resource can be expressed as a pure function of the HTTP\\nrequest:\\nstates = f(request)\\n\\nCONTRACTUAL COMPUTATIONS\\nThen, you will probably need to perform some computations based on those\\nchanges. Things like sending an email, processing an image, syncing with third\\nparties etc...\\n\\nThose post HTTP transaction computes shouldn\'t change the server state. But\\nsince you already answered to the HTTP client everything went fine, you should\\nguarantee those computes will always happen.\\n\\nThe best way to handle this is using a message queueing system like RabbitMQ and\\nhaving some workers computing those post changes triggers. Once your state\\nchange event is in the queue, you can acknowledge the request and be sure\\nexpected computations will be done.\\n\\nThe big part in designing those triggers is to ensure the acknowledged data is\\nvalid and won\'t suffer of a lack of information. Content validation is a major\\nconcern here.\\n\\nYou also have to deal with the possible outage of the various systems your\\ntriggers rely on. This is why i mostly try to handle it with idempotent calls.\\nThat way, workers can retry computing an event until it eventually works. This\\nis not always possible though, by example for sending e-mails.\\n\\nA STATELESS PROTOCOL\\nDespite the fact an HTTP server is full of states, the interesting thing to\\nnotice about HTTP is that it is a stateless protocol. HTTP transactions are\\nfully independent from each others.\\n\\nSince a resource representation is a pure function returning a response from a\\nrequest and its involved states. You can see the HTTP GET request/response\\nrelation as a pure function until its underlying states change:\\nresponse = f(request)\\n\\nThis is where the stateless nature of HTTP helps designing APIs in a simple\\nmanner. For the same state and the same request, you\'ll always get the same\\nresponse (it is slightly different for POST calls, this is why i avoid using it\\nin most cases).\\n\\nIndeed, OPTIONS, GET, PUT and DELETE requests are known as idempotent. PATCH and\\nPOST ones are not. I avoid using POST but i often create PATCH endpoints while\\nensuring mines are idempotent (this is while i strongly discourage you using \\nJSON patch [http://jsonpatch.com/] since its current implementation forbids\\ndoing idempotent patches).\\n\\nAnother interesting property of HTTP is that since a PUT/PATCH and DELETE\\nrequest contains the full recipe to build the final state of the resource its\\nchanging, even if the initial resource state is different, the final state will\\nbe the same for two identical requests.\\n\\nSo we end up with a crystal clear vision of modificative and idempotent HTTP\\nrequests\\nstates = f(request) response = f(request, ...states))\\n\\nAll in all, designing a REST API is mainly about describing very simple\\nasynchronous workflows into a few key steps were simple function composition can\\neasily do the job.\\n\\nKEEPING STATES CONSISTENT\\nThis is impossible. At least with high performances and availability. Indeed, to\\nensure a coherent global state, you have to queue state changes (at least those\\ndepending on other states). This is typically the relational databases strategy.\\n\\nSubscribing to this strategy involves accepting to refuse some state changes.\\nIndeed, imagine that a user wants to change the price of a product. The web\\napplication would first retrieve it and prompt a form allowing him to make that\\nchange.\\n\\nAnother user could have deleted this product so that when the user will validate\\nthe form, the product will no longer exists. Most server side implementation\\nwill simply return an error saying the product no longer exists and the user\\nwill simply loose its changes. But another implementation could simply \\"revive\\"\\nthe product or change the archived product price.\\n\\nBut what about two users changing the product price at the same time? Should we\\nrefuse edition and warn the user? Should we compute the difference between the\\ntwo concurrent changes? Or maybe prompt the user to do so (like git do for\\ndevelopers).\\n\\nThe final choice strongly depends on a lot of factors and, in fact, the only\\nthing I\'m sure about is that you can\'t fully automate those choices.\\n\\nEach server endpoint has its own constraint, its own reason to exist and needs\\nyou to implement its own, original workflow based on your business constraints.\\n\\nCODING REST APIS WITH NODEJS\\nSo, given all those interesting aspects of designing a REST API, why would we\\nuse things like middlewares [https://en.wikipedia.org/wiki/Middleware], ORM\\n[https://en.wikipedia.org/wiki/Object-relational_mapping] or that shinny new\\nframework plugin system?\\n\\nIn my quest to find the holy grail of the REST API frameworks, i ended up\\nbuilding my own: Whook [https://github.com/nfroidure/whook].\\n\\n Double Face Palm: Because you forgot to get in the wooden rabbit [http://static.fjcdn.com/pictures/Monty_4501e1_493629.jpg]\\n\\nGuess what, i failed. I thought existing framework were bad while the framework\\nidea itself was bad. Don\'t get me wrong, i don\'t say that all HTTP frameworks\\nyou can find out on NPM should not be used.\\n\\nIn fact, i managed to use ExpressJS successfully many times and i think it can\\nstill be useful for quickly prototyping NodeJS backends. But the truth is that i\\nspent most of my time reducing the Express features i used overtime.\\n\\nCurrently, I\'m leaving behind the last Express pieces by using simple libraries\\nproviding pure functions most of the time.\\n\\nIn my quest to design great REST APIs with NodeJS, i finally ended up with a few\\nsimple patterns and principles i want to share with you:\\n\\nPROCESS LIFETIME\\nAs we saw above, an HTTP server is constantly dealing with external states.\\nThose states can be database servers, key/value stores, other REST APIs, the\\ncurrent time etc...\\n\\nThis has a lot to do with the process lifetime. Indeed, before accepting\\nconnections we must ensure the database connection is correctly set. Also, when\\nshutting down a server, we must ensure that every requests were fulfilled.\\n\\nFor those concerns, i created Knifecyle\\n[https://github.com/nfroidure/knifecycle], a dependency injection system\\ninspired by the Angular one. It is pretty simple but allows me maintaining\\nstates services decoupled from the actual server endpoints code.\\n\\nIt also allow me to tied an endpoint with its required services and only those\\nones. That way i can easily reuse an endpoint in another project while being\\nsure all its needed services are available.\\n\\nSince it injects services thanks to a simple object, it has no footprint on the\\nendpoint handlers. That way i can reuse it in any other application.\\n\\nDOCUMENTATION DRIVEN API\\nThere is nothing worse than having no documentation. The first building block of\\nan endpoint should be its documentation.\\n\\nWhen creating endpoints, i begin by writing a module describing its inputs and\\noutputs. It is not necessarily a Swagger definition but an intermediate\\ndescription that could produce a Swagger definition file\\n[https://github.com/nfroidure/TripStory/blob/master/backend/app/trips/trips.metadata.js]\\n.\\n\\nThat way we avoid documentation drifting. Never rely on a human when it comes to\\ndocumenting anything.\\n\\nSINGLE ENDPOINT ROUTING\\nSince an HTTP endpoint is a unique and original workflow you have to implement,\\ni prefer using only one handler per endpoint and use async functions composition\\nin a single file that describes this workflow.\\n\\nI recently released Siso [https://github.com/nfroidure/siso] that allows to\\ncreate a simple routing function without having to rely on a complete framework.\\n\\nWORKFLOW BASED ENDPOINT HANDLERS\\nFor each endpoints, i create an unique workflow based on a promise chain whose\\nstages basically are:\\n\\n * decode/transform/validate the request with function composition;\\n * perform state changes with the help of injected services;\\n * acknowledge changes;\\n * build the response.\\n\\nIn consequence, my code is organized in a simple manner that map the above\\nworkflow structure:\\n\\n * metadata: configuration describing routes, their input/ouput and any other\\n   information allowing to generate a documentation; \\n * validators: pure functions that validate datas or throw errors. I like using\\n   JSONSchema to create them since it can be used to produce a Swagger file; \\n * transformers: pure re-entrant functions that transform states to\\n   representations and representations to states; \\n * services: injected code to deal with application states;\\n * helpers: pure functions that factorize redundant workflow stages (parsing\\n   payloads according to the content type header, rights management etc...). \\n\\nI take care to avoid coupling endpoint workflows with route declaration in order\\nto keep my workflows the purest possible. You can see those principles in action\\ninto the Trip Story [https://github.com/nfroidure/TripStory] project we made for\\nan hackathon (worth nothing it till uses Express ;) ). It is a step backward\\nthough but i promise I\'ll soon release a new side project with all those\\nprinciples in action.\\n\\nAS A CONCLUSION\\nI\'d like to end this post by a call to the JavaScript community: please, release\\npurely functional modules whenever possible. Projects like jshttp\\n[https://github.com/jshttp] are nice and allows a shift to a more functional\\napproach.\\n\\nWe should stop assuming a req, res or app object and instead create pure\\nfunction that manipulate headers, query strings or contents directly.\\n\\nA STEP TOWARD UNIVERSAL APIS\\nWith the raise of service workers, the need to reuse backend code in the browser\\nwill be crucial. Adopting a more functional approach will allow to take best\\nadvantages of the existing codebases.\\n\\nIt will be very hard, maybe impossible, to reuse your ORM code into the browser,\\nneither to make predictive HTTP responses in a service worker with a codebase\\nrelying on middlewares or your preferred framework plugin system.\\n\\nI hope you find this post more clear and wish it will help improve the way we\\nare creating REST web services with NodeJS.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc188:JSON.parse('{"path":"contents/pages/en/blog/json_structure_for_rest_apis.html","title":"Normalizing JSON Data from REST APIs","description":"Very few developer takes the time to think about\\n how they structure their JSON at the very beginning of the\\n project, it is the best moment to do so though.","shortTitle":"JSON Normalization","shortDesc":"See how to create rocking JSONs","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nNORMALIZING JSON DATA FROM REST APIS\\nTL; DR:\\n\\n{\\n  items: [1, 2, ...otherUsersIds],\\n  users: {\\n    \'1\' : {\\n      content: {\\n        id: 1,\\n        name: \'Popol\',\\n        organization_id: 1\\n      },\\n      avatarURL: \'//img.ur/trololol.png\'\\n    },\\n    ...otherUsers\\n  },\\n  organisations: {\\n    \'1\': {\\n      content: {\\n        id: 1,\\n        name: \'Popol inc.\',\\n        owner_id: 1\\n      }\\n    }\\n  }\\n}\\n  \\n\\n\\n\\nI always wanted to write down this post on how I design JSON data on the REST\\nAPIs I build. At least for a reference to give to people that ask me why I\'m\\ndoing it that way.\\n\\nIf you didn\'t rage quit right after reading the TL;DR, then here is everything\\nyou have to know to understand the reasons behind those choices.\\n\\nNORMALIZATION\\nIt is not about structuring or standardization, but really normalization like\\nyou would apply it to relational databases. Except that here, we are normalizing\\na single JSON.\\n\\nAs you may know, in a lot of APIs, some additional resources are embedded with a\\ngiven resource representation. Mainly, those have relations with it. For\\ninstance, a GET /users/:userIdendpoint could embed the user\'s organization\\nrepresentation.\\n\\nOne could say that it is a sign you need to use GraphQL. I wont be that\\ncategoric. I think it is convenient to add some related data in your JSON\\nrepresentations. In fact, RESTful principles allows several representations of\\nthe same resource.\\n\\nBut a common mistake when doing so is to add the linked resource to the\\noriginating one as a property of it. It leads to content duplication. Indeed, if\\n2 users have the same organization, it will be embedded twice.\\n\\nYou should now better understand this post\'s TL;DR. The JSON structure I use is\\navoiding duplication for linked resources.\\n\\nYou\'ll also notice the collection items aren\'t directly put in the corresponding\\narray. Only identifiers are there. The reason behind that is to allow having\\nrepeating collections. For instance, a GET /usersQueue endpoint could have the\\nsame user two times in the queue. The JSON format I use allows that without\\nduplicating it. Finally, if a user owns the organization of the above example,\\nthen, you can easily find him from the organization owner identifier.\\n\\nYou may wonder why I did not use JSON reference\\n[https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03]. The are 3 reasons\\nfor it:\\n\\n * first of all, I really want to use the native JSON deserializer on every\\n   browsers. For performance reasons of course. A browser is constantly parsing\\n   JSON data so I do not want to use a polyfill and do it with JS. With my way\\n   to set JSON data, resources are directly addressable though a hash, not more\\n   computing needed after parsing the JSON;\\n * also, having directly usable hashes, allows to combine them in order to\\n   optimize the front-end memory consumption. By maintaining objects stores, I\\n   can ensure the uniqueness of a single object across the whole application.\\n   With a simple Object.assign in my API wrapper\\n   [./considerations_for_generating_api_clients.html]or the use of weak sets\\n   where possible there are huge performance gains;\\n * finally, I do not want to pollute objects with their related resources which\\n   leads us to segregation.\\n\\nSEGREGATION\\nMost resource representations contains two kinds of data. Normalized data are\\nthe ones you would store in a relational database. It is the source of truth,\\nbasically, the data CRUD operates on. In other words, the data PUT calls send to\\nchange a resource.\\n\\nThis is why I put it in a content property. It is a convention to point out the\\ndata you could modify in your front-ends forms. It simplifies front-end\\ndevelopment since they do not have to filter data. They just pick-up the content\\nand build their forms around it.\\n\\nThe other data are calculated ones. Those are only useful for display concerns.\\nThis is the case for the above avatar URL or for example for database\\nmodification/creation timestamps.\\n\\nJSON SCHEMAS COMPOSITION\\nI really like JSON schema. That said, I do not like to write them down ;). My\\nJSON format allows to reuse definitions to avoid writing specific JSON schemas\\nfor each resource. Here is how I would define the above data format as a JSON\\nSchema:\\n\\n\\n  const userSchema = require(\'user\');\\n  const organizationSchema = require(\'organization\');\\n  const { idSchema, idPattern } = require(\'utils\');\\n\\n  module.exports = {\\n    title: \'Users collection\',\\n    type: \'object\',\\n    additionalProperties: false,\\n    properties: {\\n      items: {\\n        title: \'User\\\\\'s identifiers for the queried collection.\',\\n        type: \'array\',\\n        items: idSchema,\\n      },\\n      users: {\\n        title: \'Users hash\',\\n        description: \'A hash containing users in the items collection.\',\\n        type: \'object\',\\n        patternProperties: {\\n          idPattern: userSchema,\\n        }\\n      },\\n      organizations: {\\n        title: \'Organizations hash\',\\n        description: \'A hash containing organizations linked to users in the collection.\',\\n        type: \'object\',\\n        patternProperties: {\\n          idPattern: organizationSchema,\\n        },\\n      },\\n    },\\n  };\\n\\n\\nThat\'s it! I hope you find that way of designing JSON data useful. Feel free to\\ncomment with your own tips!\\n\\n Last minute addition :\\nKévin Dunglas, a compatriot strongly involved in PHP/REST communities, cited the\\nfollowing standards a replacement for the structure I showed here:\\n\\n *  JSON-LD : [http://json-ld.org/] an alternative to using JSON Reference. What\\n   make me discarding it is the fact it nests actual data with its definition.\\n   It adds an overhead when serializing/deserializing and transporting the data. \\n *  Hydra : [http://www.hydra-cg.com/spec/latest/core/]it is a layer over\\n   JSON-LD, discarding it per the above facts. It goes forward in a direction I\\n   do not approve. \\n *  HAL : [http://stateless.co/hal_specification.html]I didn\'t know it but just\\n   follow the link and scroll to the first JSON. Do you enjoy reading it ? I do\\n   not write APIs for bots, but rather for humans. That said, bots can have a\\n   look to my Swagger definition. \\n\\nI did not mention Hypermedia APIs for brevity but of course we should all use\\nit. That said, nowadays, any JSON browser can detect an URI without having to\\nexplicitly define it in the JSON. Anyway, bots can again read the Swagger\\ndefinition if they are not smart enough to detect an URL.\\n\\nSwagger/OpenAPI are open standards allowing a lot of benefits from generating\\nclient to generating documentation. They benefit from a large set of tools built\\nspecifically for it. It is my standard of choice since it allows a clean\\nseparation between data and schemas while allowing developers to add their own\\nvalue over it.\\n\\nI have a lot of respect for people involved in standardization. Any standard\\nshould, at least, be considered when designing systems. But I keep for myself\\nthe right to choose the one fitting my needs/wills. I wouldn\'t use XML again,\\nneither JSONX\\n[https://www.ibm.com/support/knowledgecenter/SS9H2Y_7.1.0/com.ibm.dp.doc/json_jsonx.html]\\n;). Do not blindly follow standards but choose the one empowering you.\\n\\nI like Swagger because it is clear and light. It is like JavaScript: it helps\\nreaching your goal without creating barriers. To be honest, I\'m not that\\noptimist about the OpenAPI initiative. I fear it takes a direction that is not\\ncompatible anymore with my concerns. But, maybe, another standard will come to\\nrule all of them.\\n\\n An XKCD comic on competing standards [https://imgs.xkcd.com/comics/standards.png]\\nSource: XKCD [https://xkcd.com/927/]\\n\\nFinally, keep in mind that using standards is not the only way to go. Innovating\\noften means the opposite. There are plenty of examples out there but let me cite\\nthe last one that just blown my mind and led me to reconsider, once again, a\\nrock solid certitude:\\n\\n> So much devs refers to practices as ugly or conceptually weird when real\\nmeasurement of systems is efficiency on the short and long run.\\n\\n— Nicolas Froidure (@nfroidure) 18 février 2017\\n[https://twitter.com/nfroidure/status/832923111355973632]\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc189:JSON.parse('{"path":"contents/pages/en/blog/jsperf_use_with_caution.html","title":"Detecting Bad JavaScript Performance Tests On JSPerf","description":"JSPerf gives us a simple way to write JavaScript performance tests.\\n Unfortunately, tests found aren\'t always well designed. Here\'s how to detect\\n and avoid them.","shortTitle":"JSPerf, the dark side","shortDesc":"Learn more about the bad parts of JSPerf","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nDETECTING BAD JAVASCRIPT PERFORMANCE TESTS ON JSPERF\\nJSPerf gives us a simple way to write JavaScript performance tests.\\nUnfortunately, tests found aren\'t always well designed. Here\'s how to detect and\\navoid them.\\n\\nWhen I discovered JSperf.com [https://jsperf.com/], I was realy impressed by its\\nease of use. Writing JavaScript performance tests just became as simple as\\nwriting JavaScript :). Knowing it, i\'m often looking for perf tests on it to\\nquickly have an overview of results for a particular case.\\n\\nSadly, it rarely fit my needs, whislt it often reflect a poor understanding of\\nwhat performance testing means. Here is a summary of my experience with those\\ntests, how to detect them and how to impeach them to lead developpers to\\nmistakes.\\n\\nWHEN TESTS SMELL\\nOne particular case you should be aware of is the use of console.* methods.\\nThoses methods should never be found in a test since they are really slow\\n[https://jsperf.com/console-log-performance/6]and will tend to equalize test\\nresults especially for critical performance test. Unfortunately, it\'s very\\ncommon to see tests using console.log\\n[https://www.google.com/search?q=site%3Ajsperf.com++%22console.log(%22&aq=f&oq=site%3Ajsperf.com++%22console.log(%22]\\n.\\n\\nBy the way, If you test something, test it only. The above console.log test\'s \\nprior versions [https://jsperf.com/console-log-performance/2]were completely\\nunusefull since they didn\'t test only console.log. The purpose of a test is to\\nreveal the overhead of the tested feature, so you should find the smallest\\nfootprint possible for your wrapping code.\\n\\nAnother problem with previous revisions of this test is usage of a for loop in\\norder to make the test more \\"massive\\": JSPerf do it for you, stop wasting your\\ntime.\\n\\nAnother common issue is when code is valid, but not well formed. It often lead\\nto strange test results. So, take time to read the test code if you plan to\\nexploit it\'s results. Common mistakes of that kind are :\\n\\n * forgetting to execute a function (myFunction; instead of myFunction();), \\n * abnormal return or break instruction,\\n * bad logic,\\n * undefined identifiers,\\n * etc...\\n\\nThose mistakes are leading most of the time to better performances since some\\nparts of the code aren\'t executed.\\n\\nAnother way to detect bad tests is to look at later revisions, it sometimes add\\nsome tests but often fix them. All in all, if you do not want to spend time\\nchecking if a test is right, you can look after JavaScript Rockstars tests (Addy\\nOsmani, John Resig, ...).\\n\\nAVOID CREATING BAD TEST\\nAnyone can create a bad test, but there are some good practices to reduce the\\nrisk :\\n\\n * if you\'re a noob : don\'t write tests, \\n * read your code many times before submitting,\\n * test your code in the JavaScript console first,\\n * if you made shit, mark it as shit (comment with a link to the modified\\n   revisions), \\n * if someone mark it as shit, don\'t be hurt. Testing is not about you, it\'s\\n   about truth. \\n\\nThat\'s it, this post is over. If you\'ve got some other good practices or another\\nway to detect bad tests let me know!\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc190:JSON.parse('{"path":"contents/pages/blog-jsperf_use_with_caution.html","title":"Detecting Bad JavaScript Performance Tests On JSPerf","description":"JSPerf gives us a simple way to write JavaScript performance tests.\\n Unfortunately, tests found aren\'t always well designed. Here\'s how to detect\\n and avoid them.","shortTitle":"JSPerf, the dark side","shortDesc":"Learn more about the bad parts of JSPerf","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nDETECTING BAD JAVASCRIPT PERFORMANCE TESTS ON JSPERF\\nJSPerf gives us a simple way to write JavaScript performance tests.\\nUnfortunately, tests found aren\'t always well designed. Here\'s how to detect and\\navoid them.\\n\\nWhen I discovered JSperf.com [https://jsperf.com/], I was realy impressed by its\\nease of use. Writing JavaScript performance tests just became as simple as\\nwriting JavaScript :). Knowing it, i\'m often looking for perf tests on it to\\nquickly have an overview of results for a particular case.\\n\\nSadly, it rarely fit my needs, whislt it often reflect a poor understanding of\\nwhat performance testing means. Here is a summary of my experience with those\\ntests, how to detect them and how to impeach them to lead developpers to\\nmistakes.\\n\\nWHEN TESTS SMELL\\nOne particular case you should be aware of is the use of console.* methods.\\nThoses methods should never be found in a test since they are really slow\\n[https://jsperf.com/console-log-performance/6]and will tend to equalize test\\nresults especially for critical performance test. Unfortunately, it\'s very\\ncommon to see tests using console.log\\n[https://www.google.com/search?q=site%3Ajsperf.com++%22console.log(%22&aq=f&oq=site%3Ajsperf.com++%22console.log(%22]\\n.\\n\\nBy the way, If you test something, test it only. The above console.log test\'s \\nprior versions [https://jsperf.com/console-log-performance/2]were completely\\nunusefull since they didn\'t test only console.log. The purpose of a test is to\\nreveal the overhead of the tested feature, so you should find the smallest\\nfootprint possible for your wrapping code.\\n\\nAnother problem with previous revisions of this test is usage of a for loop in\\norder to make the test more \\"massive\\": JSPerf do it for you, stop wasting your\\ntime.\\n\\nAnother common issue is when code is valid, but not well formed. It often lead\\nto strange test results. So, take time to read the test code if you plan to\\nexploit it\'s results. Common mistakes of that kind are :\\n\\n * forgetting to execute a function (myFunction; instead of myFunction();), \\n * abnormal return or break instruction,\\n * bad logic,\\n * undefined identifiers,\\n * etc...\\n\\nThose mistakes are leading most of the time to better performances since some\\nparts of the code aren\'t executed.\\n\\nAnother way to detect bad tests is to look at later revisions, it sometimes add\\nsome tests but often fix them. All in all, if you do not want to spend time\\nchecking if a test is right, you can look after JavaScript Rockstars tests (Addy\\nOsmani, John Resig, ...).\\n\\nAVOID CREATING BAD TEST\\nAnyone can create a bad test, but there are some good practices to reduce the\\nrisk :\\n\\n * if you\'re a noob : don\'t write tests, \\n * read your code many times before submitting,\\n * test your code in the JavaScript console first,\\n * if you made shit, mark it as shit (comment with a link to the modified\\n   revisions), \\n * if someone mark it as shit, don\'t be hurt. Testing is not about you, it\'s\\n   about truth. \\n\\nThat\'s it, this post is over. If you\'ve got some other good practices or another\\nway to detect bad tests let me know!\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc191:JSON.parse('{"path":"contents/pages/en/blog/kafka_docker_compose.html","title":"Kafka with docker-compose","description":"Run Apache Kafka locally with docker-compose.","shortTitle":"Kafka and Docker","shortDesc":"See how to use Kafka with docker-compose","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nUSING APACHE KAFKA LOCALLY WITH DOCKER-COMPOSE\\n TL; DR:\\n\\ncurl -O https://gist.githubusercontent.com/nfroidure/720e83d6796a7c276f69ec8ad27fd7e9/raw/0bb69bbb8e8d97dd31f5b9dc3655fd6407910480/docker-compose.yml\\ndocker-compose up\\n    \\n\\n\\n\\nInnovation is often driven by data. Through my various professional experience,\\nI naturally went to use message queuing and then streams processing.\\n\\nI first used Kinesis for its ease of use but it do not support topics and it is\\nnot open-source with is not good to stay cloud agnostic so I decided to switch\\nto Kafka for my new position at DiagRAMS.\\n\\nThe thing is that there is no official Kafka docker image which lead to a lack\\nof documentation on how to use it. This article may help you to spend less time\\non it than I had to.\\n\\nCONFIGURING DOCKER-COMPOSE\\nIf you like using docker-compose for your developer environment, here is the\\nrecipe.\\n\\nI choose to use the Bitnami images (feel free to share yours!) since no official\\none exists at the time of this writing.\\n\\nI also explicitly declare the network options for two main reasons:\\n\\n * I need to choose the IP range range docker uses to avoid collisions with my\\n   various VPC (which led to a few annoying moments configuring my VPN\\n   connection...), \\n * Apache Kafka uses an advertising system to share the brokers hosts leading to\\n   an easier setup if you can rely on a fixed IP adresses for them to fill the \\n   KAFKA_ADVERTISED_LISTENERSenvironment variable. \\n\\nHere is the result:\\n\\n \\n\\n\\nversion: \\"3.5\\"\\nnetworks:\\n  myapp:\\n    name: \\"myapp\\"\\n    driver: bridge\\n    ipam:\\n      driver: default\\n      config:\\n        - subnet: 10.5.0.0/16\\n          ip_range: 10.5.0.0/24\\n          gateway: 10.5.0.1\\n          aux_addresses:\\n            kafka: 10.5.0.2\\n            zookeeper: 10.5.0.3\\nservices:\\n# See:\\n# https://hub.docker.com/r/bitnami/zookeeper\\nzookeeper:\\n  image: \\"bitnami/zookeeper:latest\\"\\n  container_name: \\"myapp-zookeeper\\"\\n  networks:\\n    - \\"myapp\\"\\n  ports:\\n    - \\"2181:2181\\"\\n  environment:\\n    - ALLOW_ANONYMOUS_LOGIN=yes\\n\\n# See:\\n# https://hub.docker.com/r/bitnami/kafka\\nkafka:\\n  image: bitnami/kafka:2.5.0\\n  container_name: \\"myapp-kafka\\"\\n  networks:\\n    - \\"myapp\\"\\n  ports:\\n    - \\"9092:9092\\"\\n  environment:\\n    - KAFKA_BROKER_ID=1\\n    - KAFKA_LISTENERS=PLAINTEXT://:9092\\n    - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.5.0.1:9092\\n    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\\n    - ALLOW_PLAINTEXT_LISTENER=yes\\n  depends_on:\\n    - zookeeper\\n\\n\\nYou can add more brokers if you wish thought is it not generally useful for\\ndevelopment. Just beware that you will have to tweak the various environment\\nvariables.\\n\\nCONNECTING WITH KAFDROP\\nKafdrop can be directly added to the docker-compose file but I prefer not doing\\nso to keep the development environment lighter.\\n\\nIt also allows to selectively run Kafdrop for both local and production\\nenvironments.\\n\\nSo let\'s run Kafdrop once we need it with that simple command:\\n\\n\\n  docker run --rm -p 9000:9000 \\\\\\n  -e KAFKA_BROKERCONNECT=\\"10.5.0.1:9092\\" \\\\\\n  -e JVM_OPTS=\\"-Xms32M -Xmx256M\\" --network myapp \\\\\\n  -e SERVER_SERVLET_CONTEXTPATH=\\"/\\" \\\\\\n  obsidiandynamics/kafdrop:latest\\n\\n\\n\\n\\nNote that --network myapp allows Kafdrop to live in the same network than our\\nKafka brokers.\\n\\nHere is the command for production were you will probably need to add the SSL\\nconfiguration like this:\\n\\n\\n  docker run --rm -p 9000:9000 \\\\\\n  -e KAFKA_BROKERCONNECT=$(node -e \\"process.stdout.write($(terraform output kafka_bootstrap_brokers))\\") \\\\\\n  -e JVM_OPTS=\\"-Xms128M -Xmx2G\\" -e KAFKA_PROPERTIES=$(echo security.protocol=SSL | base64) \\\\\\n  -e SERVER_SERVLET_CONTEXTPATH=\\"/\\" \\\\\\n  obsidiandynamics/kafdrop:latest\\n\\n\\n\\n\\nAs you can see, I directly retrieve the Kafka brokers via my Terraform states,\\nfeel free to do so or simply add it by hands.\\n\\nUSING KAFKA SCRIPTS\\nBy reading the Kafka docs, you will probably be prompted to use the scripts\\nembedded by Kafka, here is, for example, how you would create a topic with the\\nabove setup:\\n\\n\\ndocker-compose exec kafka /opt/bitnami/kafka/bin/kafka-topics.sh \\\\\\n  --create \\\\\\n  --bootstrap-server localhost:9092 \\\\\\n  --replication-factor 1 \\\\\\n  --partitions 1 \\\\\\n  --topic users\\n\\n\\n\\n\\nListing available commands is done simply that way:\\n\\n\\ndocker-compose exec kafka ls /opt/bitnami/kafka/bin\\n\\n\\n\\n\\nKafka is an interesting technology, that said, you should be aware that using\\nKafka is not on its own a passport for managing big data.\\n\\nFinally, I found out that searching for documentation often leads to Confluent\\nspecific tutorial which is not great. I think that using free software should\\nnot be tied to a particular company so I hope more people will take some time to\\ntell how to use raw Kafka, I will be glad to read it ;).\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc192:JSON.parse('{"path":"contents/pages/en/blog/lets_subset_javascript.html","title":"Let\'s Subset JavaScript","description":"Currently, it\'s all about JavaScript and how to compile, transpile\\n and every \\"ile\\"y things you could imagine. But what about making JavaScript\\n smaller?","shortTitle":"JavaScript subset","shortDesc":"Why and how to subset JavaScript.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nLET\'S SUBSET JAVASCRIPT\\nTL;DR: Subsetting JavaScript is easy, you can do it with jsub\\n[https://github.com/SimpliField/jsub].\\n\\nAt SimpliField [https://www.simplifield.com], we allow users to collect and\\nanalyse field data and as part of it, our users can create their own data\\nmodels.\\n\\nAs a consequence, we needed a solution that allows to define dynamically\\ncomputed relational constraints. Things like dynamically define a form field as\\noptional based on some conditions/computations.\\n\\nWe ended up with a reliable solution based on a user interface and simple\\nconditions. The problem we faced was that every new feature resulted in new\\ncomplexity.\\n\\nWe were also defining a new language our API consumers would certainly hate,\\nonce publicly available. And friends don\'t let friends struggling with bad APIs\\n;).\\n\\nA FEW WORDS ABOUT OUR STACK\\nWe\'re using a full JavaScript stack (we call it MEANI for Mongo Express Angular\\nNodeJS and Ionic). The big win of this kind of stack is not only isomorphism (I\\nhad great moments building the end-to-end user\'s rights management system\\n[http://slides.com/nfroidure/reaccess]for our apps) but is mainly skill reuse.\\n\\nAs a JavaScript developer, I can make some changes to the back-end and apply the\\nresulting changes in both the front-end and the mobile app. It is really\\nvaluable as you don\'t have to rely on someone else to make a bunch of related\\nchanges.\\n\\nSUBSETTING JAVASCRIPT\\n Always bet in JavaScript [https://brendaneich.com/wp-content/uploads/2011/09/CapitolJS.021-768x576.png]\\nSource: Brendan Eich\'s blog\\n[https://brendaneich.com/2011/09/capitoljs-rivertrail/]\\n\\nSo we choose to rely on JavaScript for conditionally displayed fields, computed\\nfields, etc... The idea is simple: we need a formula language like those you can\\nfind in Open Office Calc or Microsoft Excel but we don\'t want to reinvent the\\nwheel.\\n\\nWe also want to have the minimal learning curve for developpers that will\\ninteract with our API. Since JavaScript was already a first class citizen in our\\nstack, subsetting its syntax was in evidence.\\n\\nThanks to the great Esprima project [http://esprima.org], only a few hours were\\nsufficient to create a first prototype of jsub\\n[https://github.com/SimpliField/jsub]; a tiny project aimed to simply define a\\ncustom JavaScript subset.\\n\\nYou basically define a set of conditions that shapes syntactically allowed\\nexpressions. Then, you check your script against those conditions and if\\nsomething is going wrong, errors will simply show up.\\n\\n\\nvar simpleMath = {\\n  conditions: [{\\n    type: \'Program\' // allow the root node\\n  }, {\\n    type: \'ExpressionStatement\' // allow expressions\\n  }, {\\n    type: \'BinaryExpression\', // allow the + and - operators\\n    operator: [\'+\', \'-\']\\n  }, {\\n    type: \'Literal\',\\n    raw: /^([0-9]{1,5})$/ // allow positive numbers\\n  }]\\n};\\n\\nvar errors = jsub(\'(1 + 2) - 1\', simpleMath);\\nassert.equal(errors.length, 0);\\n\\n\\nBENEFITS\\nHaving a custom syntax subsetting JavaScript provides a lot of out of the box\\nadvantages:\\n\\n * Syntax highlighting: you can simply add highlighted syntax to your own API\\n   docs \\n * Hinting: what about a custom JSLint module to help your customers?\\n * Parsing: syntax errors will be the same than for JavaScript;\\n * No overhead: Just run it, especially if you are using the MEANI stack ;). \\n\\nThere\'s probably a lot more things interesting with this approach let me know\\nyour thoughts.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc193:JSON.parse('{"path":"contents/pages/en/blog/markdown_ast_to_react.html","title":"Print your Markdown content with React through AST","description":"A journey to printing my blog Markdown contents \\nwith my custom components.","shortTitle":"Markdown AST and React","shortDesc":"Discover own I render my markdown content","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nPRINT YOUR MARKDOWN CONTENT WITH REACT THROUGH AST\\nIf you ever used Contentful, the head-less CMS, chances are that, like I did,\\nyou ended up creating some code to map your contentful blocks to your React\\ncomponents\\n[https://github.com/nfroidure/douaisis-2021/blob/7c154197556fea1a86744c38a730a9cc21f567aa/utils/contentful.tsx#L131-L160]\\n.\\n\\nI found out this approach really neat, but for my own blog, I didn\'t want to use\\nanything else then Markdown files committed in my repository.\\n\\nGET A TREE FROM YOUR MARKDOWN\\nThe first thing I start looking for is to have a tree from my Markdown files,\\npreferably, something resembling the Contenful block tree.\\n\\nI found out that by combining the unified and remark\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L323-L325] \\nmodules, you end up with something that really looks like the Contenful data.\\n\\nDEALING WITH HTML\\nThe hard part were to deal with the HTML markup. Indeed, it wasn\'t parsed taking\\nin count the start and end of the elements. I had to create a recursive\\nalgorithm to wrap it up altogether\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L361-L439] \\nin something meaningful. I still have to parse the HTML attributes to have\\nsomething usable for most use cases.\\n\\nFINALLY, MAPPING TO ELEMENTS\\nThe final rendering function\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L327-L342] \\nis pretty similar to the Contenful one. Never use the dangerouslySetInnerHTML\\nmethod again ;).\\n\\nNEAT THINGS\\nAdditionally, I managed to make of all my <h2+>titles to have anchors\\nautomatically generated so that one can link to a particular section easily\\n(like here with the \\"Une fuite en avant sans vision politique\\" title)\\n[https://nicolasfroidure.fr/blog/pour-une-region-actrice-d-un-numerique-humain#une-fuite-en-avant-sans-vision-politique]\\n.\\n\\nI just had to create a function that retrieve the title text whatever its\\ncontents and its depth\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L344-L359].\\nAnd add my anchor\\n[https://github.com/nfroidure/politics/blob/main/components/anchored.tsx] \\ncomponent to the element mapper\\n[https://github.com/nfroidure/politics/blob/main/utils/markdown.tsx#L156-L161].\\n\\nI hope you will enjoy the code, feel free to reuse parts of it in your own\\nrepos. I\'ll make a library of it once I get something stable and reusable.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc194:JSON.parse('{"path":"contents/pages/en/blog/match_ie8_with_gulp_and_rework.html","title":"Match IE8 With Rework And Gulp!","description":"Rework is a very powerful tool. It allows working with CSS contents\\n in a friendly manner. Let\'s improve you IE8 compatibility with it.","shortTitle":"Matching IE8 with rework","shortDesc":"Learn how to match IE8 with rework","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nMATCH IE8 WITH REWORK AND GULP!\\nRework is a very powerful tool. It allows working with CSS contents in a\\nfriendly manner. Let\'s improve you IE8 compatibility with it.\\n\\nI discovered Rework [https://github.com/reworkcss/rework]recently thanks to the \\nNicolas Gallagher recent blog post\\n[http://nicolasgallagher.com/custom-css-preprocessing/]. It made me think about\\nthe recent ChtiJS build migration from Grunt to Gulp. One thing I did with our\\nGrunt build was to create a IE8 specific CSS file\\n[https://github.com/ChtiJS/chtijs.francejs.org/blob/223ba7bbce89d46ed08dd329dcf520ce92f812d1/grunt-config/website_build/build_front-tasks.js#L3]\\nby removing each rem units and replacing them with px units. It worked well but\\nwasn\'t perfect since it didn\'t took in count the CSS syntax and could have lead\\nto bugs for complex stylesheets.\\n\\nOn the other hand, give up rem units just for IE8 support is a bad idea. The rem\\nunit system is really powerful\\n[http://snook.ca/archives/html_and_css/font-size-with-rem]when you want to size\\nyour contents. It gives you the em advantages without the well know nested em\\nproblems.\\n\\nSo I decided to create a Rework plugin in order to reproduce this behavior more\\nsafely. I called it rework-rem2px [https://github.com/nfroidure/rework-rem2px]\\nand you can already find it on NPM. It works well, but the IE specific\\nstylesheet were still containing some extra code, especially media queries that\\nold IE version doesn\'t understand.\\n\\nThanks to the community, something already exists. css-queryless\\n[https://github.com/iamdustan/queryless]remove media queries from a CSS file and\\nalso allows you to specify some expressions for wich you want to keep the media\\nqueries content in place that matches.\\n\\nEnded up with this Gulp task\\n[https://github.com/ChtiJS/chtijs.francejs.org/blob/09c02aa9ab71fd324c61f917b907aafb706398ff/gulpfile.js#L127]\\n:\\n\\n // CSS\\ngulp.task(\'build_styles\', function(cb) {\\n var keepmatches = [\\n \'screen and (min-width: 61rem)\',\\n \'print\'\\n ];\\n\\n gulp.src(conf.src.less + \'/main.less\')\\n .pipe(g.less())\\n .pipe(g.autoprefixer())\\n .pipe(gulp.dest(conf.build.css))\\n .pipe(g.rework(queryless(keepmatches), rem2px(16)))\\n .pipe(g.rename({\\n suffix: \'-ie\'\\n }))\\n .pipe(gulp.dest(conf.build.css))\\n .once(\'end\', cb);\\n}); \\n\\nLet me know you own tips to write modern CSS that work on IE8!\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc195:JSON.parse('{"path":"contents/pages/blog-match_ie8_with_gulp_and_rework.html","title":"Match IE8 With Rework And Gulp!","description":"Rework is a very powerful tool. It allows working with CSS contents\\n in a friendly manner. Let\'s improve you IE8 compatibility with it.","shortTitle":"Matching IE8 with rework","shortDesc":"Learn how to match IE8 with rework","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nMATCH IE8 WITH REWORK AND GULP!\\nRework is a very powerful tool. It allows working with CSS contents in a\\nfriendly manner. Let\'s improve you IE8 compatibility with it.\\n\\nI discovered Rework [https://github.com/reworkcss/rework]recently thanks to the \\nNicolas Gallagher recent blog post\\n[http://nicolasgallagher.com/custom-css-preprocessing/]. It made me think about\\nthe recent ChtiJS build migration from Grunt to Gulp. One thing I did with our\\nGrunt build was to create a IE8 specific CSS file\\n[https://github.com/ChtiJS/chtijs.francejs.org/blob/223ba7bbce89d46ed08dd329dcf520ce92f812d1/grunt-config/website_build/build_front-tasks.js#L3]\\nby removing each rem units and replacing them with px units. It worked well but\\nwasn\'t perfect since it didn\'t took in count the CSS syntax and could have lead\\nto bugs for complex stylesheets.\\n\\nOn the other hand, give up rem units just for IE8 support is a bad idea. The rem\\nunit system is really powerful\\n[http://snook.ca/archives/html_and_css/font-size-with-rem]when you want to size\\nyour contents. It gives you the em advantages without the well know nested em\\nproblems.\\n\\nSo I decided to create a Rework plugin in order to reproduce this behavior more\\nsafely. I called it rework-rem2px [https://github.com/nfroidure/rework-rem2px]\\nand you can already find it on NPM. It works well, but the IE specific\\nstylesheet were still containing some extra code, especially media queries that\\nold IE version doesn\'t understand.\\n\\nThanks to the community, something already exists. css-queryless\\n[https://github.com/iamdustan/queryless]remove media queries from a CSS file and\\nalso allows you to specify some expressions for wich you want to keep the media\\nqueries content in place that matches.\\n\\nEnded up with this Gulp task\\n[https://github.com/ChtiJS/chtijs.francejs.org/blob/09c02aa9ab71fd324c61f917b907aafb706398ff/gulpfile.js#L127]\\n:\\n\\n // CSS\\ngulp.task(\'build_styles\', function(cb) {\\n var keepmatches = [\\n \'screen and (min-width: 61rem)\',\\n \'print\'\\n ];\\n\\n gulp.src(conf.src.less + \'/main.less\')\\n .pipe(g.less())\\n .pipe(g.autoprefixer())\\n .pipe(gulp.dest(conf.build.css))\\n .pipe(g.rework(queryless(keepmatches), rem2px(16)))\\n .pipe(g.rename({\\n suffix: \'-ie\'\\n }))\\n .pipe(gulp.dest(conf.build.css))\\n .once(\'end\', cb);\\n}); \\n\\nLet me know you own tips to write modern CSS that work on IE8!\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc196:JSON.parse('{"path":"contents/pages/en/blog/metapak.html","title":"Meta NPM Packages","description":"On managing a lot of NPM modules.","shortTitle":"Meta NPM Packages","shortDesc":"A presentation introducing metapak","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nMETA NPM PACKAGES\\nFind more about metapak on its repository [https://github.com/nfroidure/metapak]\\n.\\n\\n < Blog [/en/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc197:JSON.parse('{"path":"contents/pages/en/blog/my_vscode_configuration.html","title":"My VSCode Configuration","description":"A quick tour of my VSCode configuration.","shortTitle":"VSCode configuration","shortDesc":"Check my VSCode configuration","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nMY VSCODE CONFIGURATION\\nI used a lot of editors for coding, from Notepad++\\n[https://notepad-plus-plus.org/fr/] to SublimeText\\n[https://www.sublimetext.com/] and Atom [https://atom.io/] (GitHub\'s code\\neditor) to finally adopt VSCode, following the hype.\\n\\nAfter using it for almost a year, I\'m satisfied by it. VSCode is kinda like Atom\\nbut faster (based on my experience of Atom a year ago, things may have change in\\nthe meanwhile).\\n\\nI\'m not really a customization aficionado so my configuration won\'t blow your\\nmind. I consider it as the configuration VSCode should have by default, so that\\npeople like me could just download it and avoid spending time on customizing it.\\n\\nPREFERENCES\\nOne nice thing with VSCode is that settings are saved as plain JSON, so let\'s\\nprint it rawly:\\n\\n\\n{\\n  \\"window.zoomLevel\\": 0,\\n  \\"editor.mouseWheelZoom\\": true,\\n  \\"workbench.colorTheme\\": \\"Default High Contrast\\",\\n  \\"extensions.ignoreRecommendations\\": false,\\n  \\"javascript.updateImportsOnFileMove.enabled\\": \\"always\\",\\n  \\"explorer.confirmDragAndDrop\\": false,\\n  \\"files.associations\\": {\\n    \\"*.html\\": \\"html\\"\\n  }\\n}\\n\\n\\nThe first parameters are here due to strange zooming default behavior of VSCode.\\nIt basically set it like Atom\'s one.\\n\\nI didn\'t add the fourth by hand but VSCode suggestions are a good way to\\ndiscover new plugins so left it as is. The same goes for imports but it is\\nconvenient to avoid spending time on renaming files by hand.\\n\\nThe drag and drop configuration removes the confirmation modal when moving files\\nin the file tree. It could be dangerous but since I use git for everything, it\\ndo not care accidentally messing up my folders.\\n\\nVSCode tends to detect file types correctly out of the box except for my blog\'s\\nHTML files (yes, I write my blog posts in raw HTML). I don\'t know why but adding\\nthat line fixed the issue.\\n\\nINSTALLED EXTENSIONS\\nWorking with VSCode requires installing a few extensions.\\n\\nLANGUAGES\\nHere are the various extensions I had to install to work with the various\\nlanguages I use:\\n\\n *  JavaScript: Babel ES6/ES7\\n   [https://marketplace.visualstudio.com/items?itemName=dzannotti.vscode-babel-coloring]\\n   for syntax highlighting ESLint\\n   [https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint]\\n   and Prettier - Code formatter\\n   [https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode],\\n   by Esben Petersen, for quality checks, Jest\\n   [https://marketplace.visualstudio.com/items?itemName=orta.vscode-jest]for\\n   testing and snapshot-tools\\n   [https://marketplace.visualstudio.com/items?itemName=asvetliakov.snapshot-tools]\\n   to have nice shortcuts to the snapshots. JSON Tools\\n   [https://marketplace.visualstudio.com/items?itemName=eriklynd.json-tools], by\\n   Erik Lynd, is useful to format some JSON right in the editor. Debugger for\\n   Chrome\\n   [https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome]\\n   is installed but I rarely use it preferring the Chrome console. \\n *  Rust:\\n   Rust (rls)\\n   [https://marketplace.visualstudio.com/items?itemName=rust-lang.rust]provides\\n   great support for the Rust language while Crates\\n   [https://marketplace.visualstudio.com/items?itemName=serayuzgur.crates], by\\n   Seray Uzgur, helps managing dependencies. \\n *  C/C++:\\n   C/C++\\n   [https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools]is\\n   nice for syntax highlighting, debugging, browsing and autocompletion. I used\\n   it in association with Arduino\\n   [https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino]\\n   for my hardware projects. \\n *  Go:\\n   Go [https://marketplace.visualstudio.com/items?itemName=ms-vscode.go]were\\n   sufficient for the little use of Go I had. \\n *  DevOps:\\n   Docker\\n   [https://marketplace.visualstudio.com/items?itemName=peterjausovec.vscode-docker]\\n   allows seeing summaries of what docker does right in your editor. Not bad. \\n   Terraform\\n   [https://marketplace.visualstudio.com/items?itemName=mauve.terraform], by\\n   Mikael Olenfalk, adds Terraform files (.tf) autocompletion and syntax\\n   highlighting. Kubernetes\\n   [https://marketplace.visualstudio.com/items?itemName=ms-kubernetes-tools.vscode-kubernetes-tools]\\n   and Kubernetes Support\\n   [https://marketplace.visualstudio.com/items?itemName=ipedrazas.kubernetes-snippets]\\n   are installed but not enough usage currently to give a decent feedback. \\n *  The *ML things:\\n   YAML [https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml]\\n   to write YAML despite YAML. Better TOML\\n   [https://marketplace.visualstudio.com/items?itemName=bungcip.better-toml]to\\n   write TOML, despite TOML. \\n *  Blogging:\\n   Spell Right\\n   [https://marketplace.visualstudio.com/items?itemName=ban.spellright]by\\n   Bartosz Antosik is nice to avoid typos but you\'ll probably have to set it up\\n   with languages dictionaries of your choice. Markdown All in One\\n   [https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one]\\n   by Yu Zhang provides all you need to write Markdown (keyboard shortcuts,\\n   table of contents, auto preview and more). \\n\\nOTHERS\\nI had to install Duplicate action\\n[https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-duplicate]to\\nbe able to duplicate files/folders in the file tree view...\\n\\n Git History\\n[https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory]add\\nGit views in VSCode. I prefer using CLI most of the time but it is sometimes\\nuseful for a clearer view of the repository state.\\n\\n VS Live Share\\n[https://marketplace.visualstudio.com/items?itemName=ms-vsliveshare.vsliveshare]\\nis theorically great but in practice we tried it once and reviews finally ends\\nup IRL since way more convenient.\\n\\nSHORTCUTS\\nHere is the plain list:\\n\\n\\n[\\n    {\\n        \\"key\\": \\"ctrl+shift+d\\",\\n        \\"command\\": \\"editor.action.copyLinesDownAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+shift+alt+down\\",\\n        \\"command\\": \\"-editor.action.copyLinesDownAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+shift+t\\",\\n        \\"command\\": \\"workbench.action.tasks.test\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+l\\",\\n        \\"command\\": \\"expandLineSelection\\",\\n        \\"when\\": \\"textInputFocus\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+i\\",\\n        \\"command\\": \\"-expandLineSelection\\",\\n        \\"when\\": \\"textInputFocus\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+down\\",\\n        \\"command\\": \\"editor.action.moveLinesDownAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"alt+down\\",\\n        \\"command\\": \\"-editor.action.moveLinesDownAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+up\\",\\n        \\"command\\": \\"editor.action.moveLinesUpAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"alt+up\\",\\n        \\"command\\": \\"-editor.action.moveLinesUpAction\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+alt+f\\",\\n        \\"command\\": \\"editor.action.formatDocument\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+shift+i\\",\\n        \\"command\\": \\"-editor.action.formatDocument\\",\\n        \\"when\\": \\"editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+alt+f\\",\\n        \\"command\\": \\"editor.action.formatSelection\\",\\n        \\"when\\": \\"editorHasSelection && editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+k ctrl+f\\",\\n        \\"command\\": \\"-editor.action.formatSelection\\",\\n        \\"when\\": \\"editorHasSelection && editorTextFocus && !editorReadonly\\"\\n    },\\n    {\\n        \\"key\\": \\"ctrl+k\\",\\n        \\"command\\": \\"workbench.action.terminal.clear\\"\\n    }\\n]\\n  \\n\\n ctrl + shift + d is for duplicating a line like in Atom\'s (and many other\\neditors) defaults. The same goes for ctrl + l to select a line, ctrl + t to run\\ntests, ctrl + down/up to move selected lines and ctrl + alt + f to format the\\ncurrent file. The last shortcut is ctrl + k that allows to empty the integrated\\nterminal\'s buffer to fit the native terminal custom configuration I set up since\\nI\'m used to the Mac cmd + k shortcut.\\n\\nThat\'s it! I hope you find this post helpful and feel free to share yours.\\n\\nEdit: Found out that you can [recommend\\nextensions](https://github.com/ChtiJS/chtijs.francejs.org/blob/master/.vscode/extensions.json)\\ndirectly in your project\'s repository. This is a really nice way to onboard you\\nteammates to your projects.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc198:JSON.parse('{"path":"contents/pages/en/blog/native-node-module.html","title":"Create Native NodeJS Modules Fallbacking To Emscripten Ones","description":"Suprisingly, creating a native module is not that hard. Making it \\n compile on any platform and gracefully handle compilation fails is a bit more \\n tricky.","shortTitle":"Native NodeJS module","shortDesc":"Learn how to creative native modules surviving compilation failures.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nCREATE NATIVE NODEJS MODULES FALLBACKING TO EMSCRIPTEN ONES\\nIf you\'re a frontend developper, you probably already heard about icon fonts. If\\nyou use the Gulp build tool, you maybe already used gulp-iconfont\\n[https://www.npmjs.com/package/gulp-iconfont]. As its maintainer, when I heard\\nabout the WOFF2 font format, I really wanted to get it in output of my gulp\\nplugin.\\n\\nSadly, there were no JavaScript implementation of it. It was the time for me to\\ndive deeper into NodeJS C++ add-ons and the Emscripten project.\\n\\nNODEJS C++ ADD-ON: EASY!\\nCreating a NodeJS add-on was blazing fast. The build system is incredibly well\\ndocumented and works like a charm.\\n\\nTypically when creating a native add-on you need to create a wrapper written in\\nC++ that glue the library you want to use to the V8 engine. Mine is pretty\\nsimple\\n[https://github.com/nfroidure/ttf2woff2/blob/8060224462994f283842c7ff5dec13cb0914376c/csrc/addon.cc]\\n. It indeed wraps the Google\'s woff2 project\\n[https://github.com/google/woff2/blob/09c4eba0f679640ddddfd5315edbb72e4d7d8447/src/woff2_enc.cc#L175]\\nencoding function. This C++ function signature:\\n\\n\\nbool ConvertTTFToWOFF2(\\n  const uint8_t *data, size_t length,\\n  uint8_t *result, size_t *result_length\\n);\\n\\n\\nbecomes this NodeJS one:\\n\\n\\noutput:Buffer function ttf2woff2(input:Buffer);\\n\\n\\nThe most complex work was to figure out how to create a NodeJS Buffer from a C\\none. Indeed, I had to create a new JavaScript Buffer instance by invoking its\\nglobal constructor from the C++ code. That way, when no more references to the\\nBuffer will be set in the JS userland, then, it will automatically be garbage\\ncollected per the V8 engine avoiding the need to free it manually via another\\nfunction call.\\n\\nOnce the wrapper is made, you just have to create a file named binding.gyp\\n[https://github.com/nfroidure/ttf2woff2/blob/8060224462994f283842c7ff5dec13cb0914376c/binding.gyp]\\nthat allows you to specify building instruction for the various compilers. We\\nhad to struggle a bit with the MacOSX one since I couldn\'t test by myself.\\n\\nAnd that\'s it! Your module gets compiled at npm install. In fact, I had to test\\na few time and correct compilation errors progressively but it was suprisingly\\nfast to get it up and running. For that testing matter I set up a few commands\\n[https://github.com/nfroidure/ttf2woff2/blob/8060224462994f283842c7ff5dec13cb0914376c/package.json#L14-L15]\\nto my package.json.\\n\\nBut what about users whose OS can\'t build it? How to not let them down?\\n\\nEMSCRIPTEN FOR THE WIN!\\nThe Emscripten project allows you to copmile C/C++ projects to JavaScript. It\\nwas a great chance for me to improve my module quality by fallbacking to such a\\nbuild.\\n\\nIt was a bit harder to get it running. First the Emscripten documentation is\\nreally light especially on how to interface your build with your other\\nJavaScript code.\\n\\nI finally managed to create a wrapper\\n[https://github.com/nfroidure/ttf2woff2/blob/8060224462994f283842c7ff5dec13cb0914376c/jssrc/index.js]\\nfor it. As you can see, I had to manually manage the allocated memory in the JS\\nwrapper except for the output buffer that I had to free on the C side with a\\nsecond function call (strange errors happens when trying to free C side\\nallocated memory from the JavaScript module).\\n\\nOnce again, I made some scripts\\n[https://github.com/nfroidure/ttf2woff2/blob/8060224462994f283842c7ff5dec13cb0914376c/package.json#L16-L17]\\nto simplify the build. Basically, it query the binding.gyp file with miniquery\\n[https://github.com/SimpliField/miniquery] for the C/C++ files to build, remove\\nthe addon.cc one that we do not want and then set it as args to the emcc\\n[http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html]\\ncompiler.\\n\\nThe output file is basically a JavaScript module that can either be used with\\nNodeJS or in the browser.\\n\\nGRACEFULLY FAIL COMPILATION\\nSo, now we have our Emscripten build, let\'s fallback to him when the native\\nNodeJS add-on compilation goes wrong. First, we must ensure that any failure\\nwon\'t impeach the module to install. We\'re basically doing this by overriding\\n[https://github.com/nfroidure/ttf2woff2/blob/8060224462994f283842c7ff5dec13cb0914376c/package.json#L18]\\nthe default installation script to exit with a 0 code whatever result the\\ncompiler gives.\\n\\nThen, as a main JavaScript file we will ensure failing to bind to the native\\nadd-on will result in requiring the Emscripten fallback. It is simply done by \\ncatching exceptions\\n[https://github.com/nfroidure/ttf2woff2/blob/8060224462994f283842c7ff5dec13cb0914376c/src/index.js]\\nwhen requiring the bindings.\\n\\nIt works! But what about browserifying it ?\\n\\nBROWSERIFY\\nIn order to allow gulp-iconfont users to preview and download the resulting\\nfonts made with it (and to see if it was feasible :p), I a full frontend font\\nbuilder [http://nfroidure.github.io/svgiconfont/]. So, I immediatly tried to use\\nmy shinny new module to also output WOFF2 files.\\n\\nThe fact is that it doesn\'t work out of the box. Browserify try to add every\\nNodeJS dependencies that appears to be useless when using the Emscripten module\\non the front-end side.\\n\\nChances are that Browserify allows to skip the parsing for some files. Plus a\\nsimple trick [https://github.com/nfroidure/ttf2woff2/blob/master/jssrc/post.js]\\nto fix the Emscripten require, i\'ve finally been able to make the magic happen.\\n\\nI\'m really impressed by how a C/C++ noob like me have been able to do this in\\nthe free time of a few days. If you didn\'t already, you really should have a\\nlook at NodeJS native bindings!\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc199:JSON.parse('{"path":"contents/pages/en/blog/no_more_middlewares.html","title":"No more middlewares, please","description":"Why I think middlewares are a bad thing, how I am replacing them.","shortTitle":"No more middlewares!","shortDesc":"See why I won\'t use middlewares anymore","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nNO MORE MIDDLEWARES, PLEASE\\nWhen it comes to programming, there is a trap on which every programmer fall:\\nelegant code. I\'m often surprised to see even experienced developers qualifying\\na code snippet as elegant or beautiful.\\n\\nFrom my point of view, each time I found an API interface allowing me to create\\nsome elegant code, it ended up as a nightmare codebase, full of unmaintainable\\nspaghetti code.\\n\\nMost of those nice, elegant and cool APIs fallen in disgrace in developers\\nminds:\\n\\n *  Method Chaining\\n   [https://www.reddit.com/r/javascript/comments/1sk8vm/method_chaining_good_or_bad_thing/cdyebjh/]\\n   : I think it is the first reason why JQuery will finally died, if not yet\\n   done. \\n *  POO\\n   [https://blog.pivotal.io/labs/labs/all-evidence-points-to-oop-being-bullshit]\\n   : Not that object and classes are harmful but thinking everything in term of\\n   objects/classes is a non-sense. Can\'t remind the time I find out that a fully\\n   OOP application was easily maintainable. \\n *  ORM/ODM [http://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html]\\n   : Even OOP guys find it harmful. I spent horrible moments using Mongoose.\\n   Would not recommend it to my worst enemy. \\n *  Mixins\\n   [https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.8k7i3x68a]\\n   : Everything is in the name. Mixing is the best way to get messy code. \\n\\nMy current statement is: if you find some code elegant, it has great chances to\\nbe the next bullshit you\'ll step in.\\n\\n \\nvia GIPHY [http://giphy.com/gifs/elegance-p3uxGU2jLsgLK]\\n\\nHERE BE MIDDLEWARES\\nAs a JavaScript developer I heavily used Express with NodeJS. At first, I found\\nits middleware system really elegant. Well, at first.\\n\\n When it comes to debugging, it is just a nightmare. Your stack traces are\\nunreadable. When you open a controller, you have to check what happens before it\\nis invoked and what will be done next to fully understand its behavior.\\n\\nYou end up with lots of a god objects, req, res and app for instance, that may\\nor may not contain: a query, some cookies, encoded or decoded body, that method\\nor this other one... It not only makes you mad when it comes to work on an\\nExpress application but also makes the code reuse very difficult.\\n\\nIndeed, to reuse a controller, you have to find out every middlewares it depends\\non and set them up in the Express application where you want to reuse it.\\nProblem: There is great chances that the same middleware is already in use but\\nwith a different version. And it is not the same shitty property that is set on\\nthat shitty god object.\\n\\nThis is why I think middlewares are an anti-pattern. Your controller should\\ncontain the complete workflow that allows you to get a response from an HTTP\\nrequest. Transforming the following usual code:\\n\\n\\n  module.exports = (app) => {\\n\\n    // where the hell is this config set?\\n    const config = app.get(\'config\');\\n    // How can I see what this timer do?\\n    const timer = app.get(\'timer\');\\n\\n    app.post((req, res, next) => {\\n      const data = {};\\n      // Which middleware set up this query params?\\n      if(req.query.ms) {\\n        data.when = timer.now();\\n      } else {\\n        data.when = new Date(timer.now()).toISOString();\\n      }\\n      // How this body was set, in which middleware?\\n      if(config.repeatBody) {\\n        data.body = req.body;\\n      }\\n      res.jsonBody = data; // Which consequences setting that jsonBody has?\\n      next(); // What happens then? New headers? Body transformations?\\n    })\\n\\n  };\\n\\n\\nInto something way more expressive:\\n\\n\\n// No middleware, just pure functions\\nconst getBodyFromReq from \'pureBodyParser\';\\nconst getQueryFromReq from \'pureQueryParser\';\\nconst sendToRes from \'pureResponseMaker\';\\n\\n// Use dependency injection for required services\\n// app/config/timer just come from this function caller\\nmodule.exports = ({ app, config, timer}) => {\\n\\n  app.post((req, res) => {\\n    // Promise based workflow instead of a middleware chain\\n    // could have been async/await too\\n    Promise.all([\\n      // No surprise, the body comes from the pureBodyParser module\\n      // But I can already guess it allows JSON or YAML\\n      getBodyFromReq.bind(null, req, [\'json\', \'yaml\']),\\n      // And so on for the query\\n      getQueryFromReq.bind(null, req),\\n    ])\\n    .then(_buildResponse.bind(null, {timer, config})\\n    // No surprise, the response is sent by the pureResponseMaker module\\n    // But I can already guess it could output JSON or YAML\\n    .sendToRes(sendToRes.bind(null, req, res, [\'json\', \'yaml\'], 200));\\n  });\\n\\n};\\n\\n// the pure function that process the request\\n// could be reused in a completly different context\\n// a frontend service worker or a websocket server\\nfunction _buildResponse({timer, config}, [body, query]) => {\\n    const data = {};\\n    if(query.ms) {\\n      data.when = timer.now();\\n    } else {\\n      data.when = new Date(timer.now()).toISOString();\\n    }\\n    if(config.repeatBody) {\\n      data.body = req.body;\\n    }\\n    return data;\\n  }\\n\\n\\nSince the controller is strongly tied to its dependencies, you could just copy\\npaste it into your other projects and npm install the various modules it\\nactually uses. Magic? No, simple, atomic, reliable code. Nothing elegant, no\\nhype, just stupid code telling what it does.\\n\\nOne could argue that it introduces huge boilerplates. We are switching from a 24\\nlines controller to a 42 one. My advice is that the glue code that strongly tie\\nthe controller with its actual underlying logic can be considered as comments\\nthat ends up to be code.\\n\\nThe middleware based code, to be inclusive, should add comments telling where\\nall that magic happens. But the fact is that commenting is a shitty way to help\\nothers to grasp your code. I personally use it only to explain something I\\ncannot show with meaningful code. Most of the time, it\'s all about business\\nconstraints or legacy issues.\\n\\nAlso, nothing impeach you to group several stages of your workflow into a single\\npure function if you figure out that a particular step sequence is used in most\\ncontrollers. Importing this function will always show the way for readers to\\nfind out their content.\\n\\nFinally, this workflow approach is in my opinion way more adapted to HTTP.\\nIndeed, what is an HTTP endpoint except a function that takes a request and\\nreturns a response?Why would we have to deal with something else than functions\\ndecomposing it into simple steps?\\n\\nAs a conclusion, I would say that good code is not smart or elegant. It is\\nreadable, reliable, naive in a word: simple. And you probably know how hard it\\nis to do simple ;).\\n\\nEdit: I ended up bringing up all those preferences in a JavaScript module\\nintended to help building REst APIs called Whook\\n[https://github.com/nfroidure/whook].\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc200:JSON.parse('{"path":"contents/pages/en/blog/reaccess.html","title":"REST API access control with reaccess","description":"A presentation introducing reaccess an its\\n use on a MEAN stack.","shortTitle":"Reaccess","shortDesc":"A presentation introducing reaccess","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nREST API ACCESS CONTROL WITH REACCESS\\nFind more about reaccess on its repository\\n[https://github.com/SimpliField/express-reaccess].\\n\\n < Blog [/en/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc201:JSON.parse('{"path":"contents/pages/blog-reaccess.html","title":"REST API access control with reaccess","description":"A presentation introducing reaccess an its\\n use on a MEAN stack.","shortTitle":"Reaccess","shortDesc":"A presentation introducing reaccess","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nREST API ACCESS CONTROL WITH REACCESS\\nFind more about reaccess on its repository\\n[https://github.com/SimpliField/express-reaccess].\\n\\n < Blog [/en/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc202:JSON.parse('{"path":"contents/pages/en/blog/revisiting_js_singleton_pattern.html","title":"Revisiting The JavaScript Singleton Pattern","description":"JavaScript design patterns are quite good examples to sharp your\\n JavaScript skills. Let\'s take a look to the singleton pattern.","shortTitle":"JavaScript Singletons","shortDesc":"Learn more about this design pattern","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nREVISITING THE JAVASCRIPT SINGLETON PATTERN\\n⚠ Beware: This article is outdated. I now think that inherance is often not a\\ngood pattern, I\'m rarely using POO in JavaScript currently too. I prefer\\nfunctions composition and singleton factories that I combine thanks to depency\\ninjection and inversion of control with Knifecycle\\n[https://github.com/nfroidure/knifecycle].\\n\\nJavaScript design patterns are quite good examples to sharpen your JavaScript\\nskills. Let\'s take a look at the singleton pattern.\\n\\nI\'m currently reading Addy Osmani’s [https://twitter.com/addyosmani] book about\\nJavaScript design patterns [http://shop.oreilly.com/product/0636920025832.do].\\nIt\'s a very interesting introduction and I strongly recommend you this read.\\nViewing his Singleton Pattern implementation I had two simple ideas of\\nimprovement to get them more powerful. Here is a basic implementation of this\\npattern:\\n\\n\\n// Singleton pattern var MySingleton=(function() { // creating a variable to contain the instance var instance=null; // here goes private stuff var _myPrivateVar=1; var _myPrivateFunction=function(){ console.log(\'In private function.\'); }; // creating singleton constructor function Constructor() { // assigning instance to our variable instance=this; } // here goes public method and properties Constructor.prototype.publicProperty=1; Constructor.prototype.publicMethod=function() { console.log(\'In public method.\'); _myPrivateFunction(); }; // creating a constructor to generate an exception var FakeContructor=function() { throw SyntaxError(\'Singleton : Use getInstance instead.\'); } // associating him getInstance() FakeContructor.getInstance=function(){ return instance || new Constructor(); }; return FakeContructor; })();  // Usage var singleton=MySingleton.getInstance(); console.log(singleton===MySingleton.getInstance() &&singleton===MySingleton.getInstance() &&singleton===MySingleton.getInstance()); // true console.log(singleton.publicProperty); // 1 singleton.publicMethod(); // In public method. // In private function.   // Misuse attempts var singleton=new MySingleton(); // SyntaxError : Singleton : Use getInstance instead.\\n\\nTo the Addy\'s implementation I just added a fake constructor in order to prevent\\nmisuses of the singleton pattern. As you can see, the Singleton pattern purpose\\nis to ensure there will always be only one instance of it\'s \\"class\\".\\n\\nAfter reading it I wondered if there could be a way to make singletons inherance\\npossible. I finally got it by adding a simple snippet to the previous\\nimplementation\\n\\n\\n// Inherit JavaScript Singleton function ParentConstructor() {} ParentConstructor.prototype.publicProperty1=1;  var InheritSingleton=(function(parentConstructor) { // creating a variable to contain the instance var instance=null; // creating singleton constructor function Constructor() { // assigning instance to our variable instance=this; } // adding parent object to the singleton constructor prototype function F() {} F.prototype = (parentConstructor.getInstance? parentConstructor.getInstance(): new parentConstructor());  Constructor.prototype=new F(); // here goes public method and properties Constructor.prototype.publicProperty2=2; Constructor.prototype.publicMethod2=function() { console.log(\'In public method 2.\'); _myPrivateFunction(); }; // creating a constructor to generate an exception var FakeContructor=function() { throw SyntaxError(\'Singleton : Use getInstance instead.\'); } // associating him getInstance() FakeContructor.getInstance=function(){ return instance || new Constructor(); }; return FakeContructor; })(ParentConstructor);  // Usage var singleton=InheritSingleton.getInstance(); console.log(singleton.publicProperty1); // 1 console.log(singleton.publicProperty2); // 2\\n\\nAs you can see our singleton inherits from the parent constructor we have given\\nit. It also can take a conventional objet constructor or another singleton.\\n\\nThe main use case for it is the ability to extend to another conventional\\nconstructor the singleton pattern. It also provide a way to extend existing\\nsingletons and change their behavior with no risk to alter them.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc203:JSON.parse('{"path":"contents/pages/blog-revisiting_js_singleton_pattern.html","title":"Revisiting The JavaScript Singleton Pattern","description":"JavaScript design patterns are quite good examples to sharp your\\n JavaScript skills. Let\'s take a look to the singleton pattern.","shortTitle":"JavaScript Singletons","shortDesc":"Learn more about this design pattern","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nREVISITING THE JAVASCRIPT SINGLETON PATTERN\\n⚠ Beware: This article is outdated. I now think that inherance is often not a\\ngood pattern, I\'m rarely using POO in JavaScript currently too. I prefer\\nfunctions composition and singleton factories that I combine thanks to depency\\ninjection and inversion of control with Knifecycle\\n[https://github.com/nfroidure/knifecycle].\\n\\nJavaScript design patterns are quite good examples to sharpen your JavaScript\\nskills. Let\'s take a look at the singleton pattern.\\n\\nI\'m currently reading Addy Osmani’s [https://twitter.com/addyosmani] book about\\nJavaScript design patterns [http://shop.oreilly.com/product/0636920025832.do].\\nIt\'s a very interesting introduction and I strongly recommend you this read.\\nViewing his Singleton Pattern implementation I had two simple ideas of\\nimprovement to get them more powerful. Here is a basic implementation of this\\npattern:\\n\\n\\n// Singleton pattern var MySingleton=(function() { // creating a variable to contain the instance var instance=null; // here goes private stuff var _myPrivateVar=1; var _myPrivateFunction=function(){ console.log(\'In private function.\'); }; // creating singleton constructor function Constructor() { // assigning instance to our variable instance=this; } // here goes public method and properties Constructor.prototype.publicProperty=1; Constructor.prototype.publicMethod=function() { console.log(\'In public method.\'); _myPrivateFunction(); }; // creating a constructor to generate an exception var FakeContructor=function() { throw SyntaxError(\'Singleton : Use getInstance instead.\'); } // associating him getInstance() FakeContructor.getInstance=function(){ return instance || new Constructor(); }; return FakeContructor; })();  // Usage var singleton=MySingleton.getInstance(); console.log(singleton===MySingleton.getInstance() &&singleton===MySingleton.getInstance() &&singleton===MySingleton.getInstance()); // true console.log(singleton.publicProperty); // 1 singleton.publicMethod(); // In public method. // In private function.   // Misuse attempts var singleton=new MySingleton(); // SyntaxError : Singleton : Use getInstance instead.\\n\\nTo the Addy\'s implementation I just added a fake constructor in order to prevent\\nmisuses of the singleton pattern. As you can see, the Singleton pattern purpose\\nis to ensure there will always be only one instance of it\'s \\"class\\".\\n\\nAfter reading it I wondered if there could be a way to make singletons inherance\\npossible. I finally got it by adding a simple snippet to the previous\\nimplementation\\n\\n\\n// Inherit JavaScript Singleton function ParentConstructor() {} ParentConstructor.prototype.publicProperty1=1;  var InheritSingleton=(function(parentConstructor) { // creating a variable to contain the instance var instance=null; // creating singleton constructor function Constructor() { // assigning instance to our variable instance=this; } // adding parent object to the singleton constructor prototype function F() {} F.prototype = (parentConstructor.getInstance? parentConstructor.getInstance(): new parentConstructor());  Constructor.prototype=new F(); // here goes public method and properties Constructor.prototype.publicProperty2=2; Constructor.prototype.publicMethod2=function() { console.log(\'In public method 2.\'); _myPrivateFunction(); }; // creating a constructor to generate an exception var FakeContructor=function() { throw SyntaxError(\'Singleton : Use getInstance instead.\'); } // associating him getInstance() FakeContructor.getInstance=function(){ return instance || new Constructor(); }; return FakeContructor; })(ParentConstructor);  // Usage var singleton=InheritSingleton.getInstance(); console.log(singleton.publicProperty1); // 1 console.log(singleton.publicProperty2); // 2\\n\\nAs you can see our singleton inherits from the parent constructor we have given\\nit. It also can take a conventional objet constructor or another singleton.\\n\\nThe main use case for it is the ability to extend to another conventional\\nconstructor the singleton pattern. It also provide a way to extend existing\\nsingletons and change their behavior with no risk to alter them.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc204:JSON.parse('{"path":"contents/pages/en/blog/swagger_ui_docker_compose.html","title":"Leveraging docker-compose and SwaggerUI","description":"Having a local SwaggerUI instance and deal with CORS by a single command to easily get your API documentation.","shortTitle":"Using SwaggerUI and docker-compose","shortDesc":"See how to use SwaggerUI and docker-compose altogether","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nYOUR API DOCUMENTATION LOCALLY WITH SWAGGERUI AND DOCKER-COMPOSE\\n TL; DR:\\n\\ngit clone git@gist.github.com:79f6f33b6907af59fb496365cd7a5054.git swagger_compose\\ncd swagger_compose\\nNGINX_API_URL=https://api.example.com API_PATH=/v0/openAPI docker-compose up\\n    \\n\\n\\n\\nBack-end developers often gets their own SwaggerUI instance while developing\\ntheir own APIs. Accessing the API documentation is not a problem for them.\\n\\nI often had to build APIs but there is still a moment when you don\'t want to put\\nAPI docs online but you neither want to require your teammates to fork your\\nproject and run the whole project just for docs.\\n\\nI encountered that situation at DiagRAMS since data scientists needed to get\\naccess to the docs but it was a bit overkill for them to clone and setup the\\nproject locally.\\n\\nOPENAPI GOODNESS\\nI made a back-end framework (called Whook [https://github.com/nfroidure/whook])\\nthat leverage a nice standard for documenting APIs: OpenAPI\\n[https://www.openapis.org/].\\n\\nYou cannot create a new route without documenting it. It not only ties\\ndocumenting and coding. It ensures that documentation and code cannot drift\\novertime thanks to TypeScript and the schema2dts\\n[https://github.com/nfroidure/schema2dts]project.\\n\\nWe plan to put our documentation online but we are currently moving fast on\\nfeatures and our API is not public at the moment. I also didn\'t want to create a\\nnew website for 3 visits a month, it wouldn\'t be green at all. So we needed a B\\nplan.\\n\\nDOCKER TO THE RESCUE\\nAs usual, Docker can be a great tool to give access to nice features locally.\\nThat way, you only run the server when you need it.\\n\\nMy first approach was to use docker run with a local copy of the OpenAPI\\ndeclaration:\\n\\n\\ndocker run -e \\"SWAGGER_JSON_URL=openapi.json\\" -v \\"$PWD/openapi.json:/usr/share/nginx/html/openapi.json\\" --rm -p 16640:8080 swaggerapi/swagger-ui\\n\\nBut I then evolved to something more live since our API serves its own OpenAPI\\nfile, let\'s just use it.\\n\\nUSING DOCKER-COMPOSE\\nI couldn\'t simply fill up the SWAGGER_JSON_URL with our documentation URL.\\nIndeed, for security reasons, the CORS are enabled on our API and it simply\\ndoesn\'t work.\\n\\nThis is why I finally used 2 Docker images. One for SwaggerUI and another for\\nproxying the API and change the Access-Control-Allow-Origin header.\\n\\nI made it generic and write this blog post since I think it can benefit to you\\nor my future self. So here is the code:\\n\\n \\n\\ndefault.conf.template\\n\\n\\n  server {\\n    listen ${NGINX_PORT} default_server;\\n    server_name ${NGINX_HOST};\\n    server_name_in_redirect off;\\n\\n    location / {\\n      proxy_pass ${NGINX_API_URL};\\n\\n      proxy_hide_header Access-Control-Allow-Origin;\\n      add_header    \'Access-Control-Allow-Origin\' \'http://docs.localhost:16640\' always;\\n    }\\n}\\n\\n\\ndocker-compose.yml\\n\\n\\nversion: \\"3.5\\"\\nnetworks:\\n  api_docs:\\n    name: \'api_docs\'\\n    driver: bridge\\n    # Avoid colliding with the AWS VPC subnet\\n    ipam:\\n      driver: default\\n      config:\\n        - subnet: 10.6.0.0/16\\n          ip_range: 10.6.0.0/24\\n          gateway: 10.6.0.1\\n          aux_addresses:\\n            swagger: 10.6.0.2\\n            api: 10.6.0.3\\nservices:\\n  swagger:\\n    image: swaggerapi/swagger-ui\\n    networks:\\n      - \'api_docs\'\\n    ports:\\n      - \\"16640:8080\\"\\n    environment:\\n      - SWAGGER_JSON_URL=http://api.localhost:16641${API_PATH-/openapi.json}\\n  api:\\n    image: nginx\\n    networks:\\n      - \'api_docs\'\\n    volumes:\\n      - ./default.conf.template:/etc/nginx/templates/default.conf.template\\n    ports:\\n      - \\"16641:80\\"\\n    environment:\\n      - NGINX_HOST=_\\n      - NGINX_PORT=80\\n      - NGINX_API_URL\\n\\n\\nThe same approach can be taken for allowing frontend devs to build the app\\nwithout cloning the API.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc205:JSON.parse('{"path":"contents/pages/en/blog/toward_stricter_query_string_parser.html","title":"Toward a stricter query string parser","description":"With most query string parsers, a lot of URIs can point to the same\\n content. It not only mess you cache system but make your logs less expressive.\\n To avoid those problems I just wrote a stricter query string parser.","shortTitle":"A stricter query string parser","shortDesc":"Find a better way to deal with query strings","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nTOWARD A STRICTER QUERY STRING PARSER\\n TL.DR. Having a stricter query string policy adds value to APIs. Checkout \\nstrict-qs [https://github.com/nfroidure/strict-qs]. \\n\\nI my journey to the NodeJS HTTP server of my choice, I just reached a new\\nmilestone. Indeed, in the ancient ages, when PHP was my language of choice, i\\nmade a simple framework called Rest4 [https://github.com/Rest4].\\n\\nOne of its features was to strictly check for query params types, order and\\nexistence. I felt a bit unpowered when I figured out that most NodeJS frameworks\\nfollow a non restrictive path when it comes to parse query strings.\\n\\nWhen no checks are done on query strings, you can end up with a lot of URIs\\npointing to the same resource. By example, in most applications the following\\nURIs would serve the same resource:\\n/articles?q=test,\\n/articles?q=test&page=1,\\n/articles?page=1&q=test,\\n/articles?q=test&page=invalid,\\n/articles?q=test&page,\\n/articles?q=test&page=1&dummy=lol.\\nThis has a lot of undesired effects.\\n\\nCONTENT DUPLICATION\\nIf you are serving webpages you may want to avoid being downgraded in search\\nengines [https://support.google.com/webmasters/answer/66359?hl=en]. There are\\nother ways to prevent this but with a strict query string policy it comes out of\\nthe box.\\n\\nHARDER CACHING\\nIf you want to use the resource URI as a key in a Redis cache to speed up your\\nAPI, you won\'t be able to use the URI as is, without being vulnerable to cache\\nflooding.\\n\\nYou\'ll first have to create a canonical URI to store your contents and this\\nextra compute will be done every time you will access your cache. Also public\\nproxies often have their own interpretation of HTTP caching specs, providing\\nunique URIs ensure you a better handling of your HTTP requests by them.\\n\\nMESSY LOGS\\nLogs get harder to reduce/compare/read until you reorder query strings yourself\\nbefore logging. Even if you do that, your upstream tools (say NGinX, HAProxy,\\nFastly...) won\'t take advantage of it.\\n\\nDEFENSIVE PROGRAMMING\\nConsider the following URI:\\n/articles?q=test&page=1&page=1&page=1&page=1.\\nWith a simple query parser, it will lead to an array of pages which is probably\\nnot what you want. It leads to unexpected behavior and lots of attacks are based\\non it.\\n\\nJust created strict-qs [https://github.com/nfroidure/strict-qs] to match those\\nissues. It simply builds an object whose properties are query parameters of the\\ntypes you would expect. If you try it, let me know ;).\\n\\nYou\'ll still have to validate it with a JSONSchema validator since I wanted it\\nto do one thing and do it well. There is plenty of JSONSchema validators, I\\ncurrently use AJV [https://github.com/epoberezkin/ajv].\\n\\nFinally, there is still some work to achieve in order to ensure unicity of paths\\ntoo. The following URIs would also lead to the same resource:\\n/articles/1, /articles/0001, /articles/1/ I updated siso\\n[https://github.com/nfroidure/siso] to handle this problem too.\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc206:JSON.parse('{"path":"contents/pages/en/blog/unobstrusive_dependency_injection_with_knifecycle.html","title":"Unobtrusive Dependency Injection with Knifecycle","description":"Knifecycle is a NodeJS module aimed to provide DI power without the headaches..","shortTitle":"DI with Knifecycle","shortDesc":"Learn more about this module","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nUNOBTRUSIVE DEPENDENCY INJECTION WITH KNIFECYCLE\\nUNOBTRUSIVE DEPENDENCY INJECTION WITH KNIFECYCLE\\nI first used the dependency injection (DI) pattern with the AngularJS framework\\na few years ago. Since then, I am convinced it is one of the best design pattern\\nout there, when used with caution. Here\'s why and how I finally bundled my own\\ndependency injection library for JavaScript and NodeJS.\\n\\nWHAT IS DEPENDENCY INJECTION?\\nThe dependency injection pattern\\n[https://en.wikipedia.org/wiki/Dependency_injection]aims to provide the states\\nsome code depends on. That way, the actual code is completely decoupled from its\\nown dependencies implementation / initialization.\\n\\nPeople rarely have no advice on it, they often hate or love it, no mitigation\\nthere. I think it comes from the fact it really brings great powers but sadly it\\noften forces you to respect a few annoying conventions on how you write and\\nsplit your code.\\n\\nDEFINITION\\nFirst of all, let\'s briefly recall you the DI advantages. The DI comes with the\\nidea that the applications life cycle usually is about initializing things, use\\nit and finally free it.\\n\\n Application Lifecycle Timeline [/images/dependency-injection.svg]\\n\\nIt may be databases, external APIs, RPC calls, anything implying IOs with the\\nrest of the world. They are a bit special and this is why DI threat it\\ndifferently than simple code libraries.\\n\\nThose dependencies are linked to each other so that we finally have an oriented\\ndependency graph. The initialization and shutdown sequences are then resolving\\nthe graph in an optimized way with the best parallelism possible. This is the\\ninjector role to take care of it.\\n\\n Dependencies graph initialization and shutdown sequence [/images/dependencies-graph-sequences.svg]\\n\\nBasically, in JavaScript, DI looks like this:\\n\\n\\n// With Classes\\nclass User {\\n  constructor(db, log) {\\n    this.db = db;\\n    this.log = log;\\n  }\\n  async delete() {\\n    const result = await this.db.query(\'DELETE FROM users WHERE id = $id\', { id });\\n\\n    if (result.deletedRows) {\\n      this.log(`User ${id} has been deleted!`);\\n    }\\n  }\\n}\\n\\n// With functions\\nasync function deleteUser(db, log, id) {\\n  const result = await db.query(\'DELETE FROM users WHERE id = $id\', { id });\\n\\n  if (result.deletedRows) {\\n    log(`User ${id} has been deleted!`);\\n  }\\n}    \\n\\n\\nTHE DI GOODNESS\\nUsing DI allows you to just declare your services dependencies and delegate the\\nstartup and shutdown process to the injector. It saves you a lot of time and\\nallows to focus on your actual business code.\\n\\nIt also make your code more testable since you can easily replace a dependency\\nper another (mocks, stubs).\\n\\nMaking dependencies easy to substitute also leads to a more configurable code\\nbase. Your code base pieces are also more reusable.\\n\\nFinally, splitting your code into more specialized modules helps reducing the\\ncognitive load of reasoning on its parts.\\n\\nTHE DI DOWNSIDES\\nUsually, dependency injection with the help of an injector comes with downsides.\\nFirst, it makes debugging harder since the code only express dependencies in a\\ndeclarative way. That said, usually, injectors are bullet proof and some have a\\nlimited set of features reducing the bug risks.\\n\\nAlso, when using types, since DI is dynamically done, you may loose some\\nadvantages of strong typing and static code analysis.\\n\\nThose downsides can be mitigated as we\'ll see later.\\n\\nINTRODUCING KNIFECYCLE\\nWhen it comes to DI, most tools are levering OOP and decorators. While it may\\nfit the needs of OOP lovers, I prefer using the function based approach where a\\nservice is simply initialized by an asynchronous function taking the service\'s\\ndependencies in argument and returning the initialized service.\\n\\nUsing functions also makes the code independent of the actual DI library since,\\nyou know, it\'s just functions and function can be called without any framework.\\nOne could just use those functions and initialize the process dependencies with\\nactual code.\\n\\nIn fact, I used to create my services that way and to create the initialization\\ncode by hand for years. The thing is that it is repetitive, error prone and\\ncreate boilerplate that adds no value.\\n\\nI finally decided to automatize it but I didn\'t found a tool allowing DI usage\\nwithout having to embrace a whole opinionated framework. I just wanted to use\\nsimple functions so I created one. Here comes, Knifecycle\\n[https://github.com/nfroidure/knifecycle].\\n\\nI like to refer to Knifecycle as the DI banana without the Gorilla\\n[https://en.wikipedia.org/wiki/Object-oriented_programming#cite_ref-armstrongjoe_39-1]\\nsince most DI libraries are using OOP and I am really convinced it is a mistake.\\n\\nUSING KNIFECYCLE\\nDeclaring a service is pretty simple actually, you just have to use the various\\nfunctions that allows tagging initialization functions (called initializers)\\nwith the dependencies they actually need, the name and the kind of service it\\nprovides.\\n\\n\\nimport { Knifecycle, constant, autoService, autoProvider } from \'knifecycle\';\\n\\n// Initialize the injector\\nconst $ = new Knifecycle();\\n\\n// Declare constants\\n$.register(constant(\'FTP_CONFIG\', { user: \'test\', password: \'test\' }));\\n$.register(constant(\'DB_CONFIG\', { user: \'test\', password: \'test\' }));\\n\\n// Declare services\\n$.register(autoService(async function initFileServer({ FTP_CONFIG }) {\\n  let fileServer;\\n  \\n  // Actual initialization code \\n\\n  return fileServer;\\n}));\\n\\n// Declare providers\\n$.register(autoProvider(async function initDatabase({ DB_CONFIG }) {\\n  let database;\\n  \\n  // Returning a structure describing the provider service and disposal\\n  return {\\n    service: database,\\n    dispose: async () => {\\n      // Do whatever needed to shut the db down properly here\\n    },\\n  };\\n}));\\n\\n// Initialize root dependencies\\n$.run([\'fileServer\', \'database\', \'$shutdown\'])\\n.then(({ fileServer, database, $shutdown }) => {\\n  // Do the actual program work here\\n\\n  // Shutdown properly the process (will call dispose on every providers in order)\\n  // Useful for graceful stop\\n  return $shutdown();\\n});\\n\\n\\nThe reason why the autoService and autoProvider are prefixed by auto is that\\nthey infer from the function shape the names of the services and the\\ndependencies they need from the functions signature. One could use the service \\nand provider functions that basically do the same but in a more verbose manner.\\nThey can be useful to have more control on them though. That said, you can use\\nthe automatic versions and transpile it to the explicit ones by using the \\nbabel-plugin-knifecycle [https://github.com/nfroidure/babel-plugin-knifecycle]\\nmodule in your project\'s build.\\n\\nKnifecycle provides a lot of helpers you can find on the documentation\\n[https://github.com/nfroidure/knifecycle#api]. Since services initializer are\\nsimple functions, there is a lot of functional programming concepts that applies\\nto them (wrappers, compositions, piping...). Each decorators create a newly\\nbound function so you can reuse an initialization function with different names\\nand dependencies as many times as you need. For instance, in the previous\\nexample, if you needed to use the FTP service several times with different\\noptions you would just have to do the following:\\n\\n\\nimport { Knifecycle, constant, autoService, service } from \'knifecycle\';\\n\\n// Initialize the injector\\nconst $ = new Knifecycle();\\n\\n// Declare constants\\n$.register(constant(\'FTP_CONFIG\', { user: \'test\', password: \'test\' }));\\n$.register(constant(\'FTP_CONFIG2\', { user: \'test2\', password: \'test2\' }));\\n\\n// Declare services\\n$.register(autoService(async function initFileServer({ FTP_CONFIG }) {\\n  let fileServer;\\n  \\n  // Actual initialization code \\n\\n  return fileServer;\\n}));\\n$.register(\\n  service(initFileServer, \'fileServer2\', [\'FTP_CONFIG>FTP_CONFIG2\'])\\n);\\n\\n// Initialize root dependencies\\n$.run([\'fileServer\', \'fileServer2\', \'$shutdown\'])\\n.then(({ fileServer, fileServer2, $shutdown }) => {\\n  // Do the actual program work here\\n\\n  // Shutdown properly the process\\n  return $shutdown();\\n});\\n\\n\\nADDRESSING DI COMMON DOWNSIDES\\nSometime, using DI makes hard to figure out the final dependency graph since you\\njust declare each piece of code\'s dependencies separately. Knifecycle provides a\\nway to build graphs from your code for that purpose. You can see an example of\\nthose graph in the jsarch architecture notes\\n[https://github.com/nfroidure/jsarch/blob/master/ARCHITECTURE.md]. It is built\\nusing mermaid [https://github.com/nfroidure/jsarch/blob/master/package.json#L38]\\n.\\n\\nAnother downside is the dynamic code that implies DI. Knifecycle allows you to\\nbuild the injector code statically\\n[https://github.com/nfroidure/knifecycle/blob/master/src/build.mocha.js#L72-L133]\\nso that you no longer need to embed Knifecycle in your final build. This is how\\nI build the AWS Lambda functions of the Sencrop\'s backend. That way, the lambdas\\nonly contains the code they need to rely on. This is a nice side effect of\\nlimiting the DI influence on your own code.\\n\\nYou can see a full repository [https://github.com/nfroidure/di-test] with\\nKnifecycle usage example for a TypeScript project. It starts with no DI and then\\nimplement it with Knifecycle. In this post example, I declared the services\\nmanually but the injector can load the services automatically. This concept is \\nalso illustrated\\n[https://github.com/nfroidure/di-test/blob/master/src/services/_autoload.ts]in\\nthe above TypeScript project.\\n\\nI hope you\'ll find your own usage of Knifecycle\\n[https://github.com/nfroidure/knifecycle], I use it happily since 2 years now.\\nIf you want to try, feel free to reach me for help whenever you need some ;).\\n\\n < Blog [/en/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc207:JSON.parse('{"path":"contents/pages/en/blog/watchdeps.html","title":"Watching Your NodeJS Projects\'s Dependencies The Easy Way","description":"Using watchdeps to automagically watch your project\'s dependencies.","shortTitle":"Meet watchdeps","shortDesc":"Learn more about how to keep in touch with the NPM modules you use.","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nWATCHING YOUR NODEJS PROJECTS\'S DEPENDENCIES THE EASY WAY\\n⚠ Beware: This article is outdated. The watchdep approach is not relevant\\nanymore since you can subscribe to versions only reducing noises of listening to\\nthe entire project\'s activity.\\n\\n TL; DR:\\nsudo npm install -g watchdeps\\ncd myproject && watchdeps -u username \\n\\nSince NPM made easy the dependency management, we tend to use a lot of third\\nparty code. That\'s a good thing. Keep not repeating yourself.\\n\\n With great powers comes great responsibility\\n[/images/great_powers-great-responsibility.gif] Source MTV\\n[http://www.mtv.com/news/2092125/attractive-things-sober-people/]\\n\\nThat said, embedding third party code is not just about npm installing modules.\\n\\nAs developpers, we\'re responsible of listening to new versions, changes, issues\\netc. of that code.\\n\\nSince I couldn\'t accept spending my lifetime doing the following:\\n\\n Animation showing the GitHub watch action [/images/github-watch.gif]\\n[http://makegif.com/gQ4z]\\n\\nI created a simple CLI utility called watchdeps\\n[https://github.com/nfroidure/watchdeps]. It just watch every dependencies of a\\nNode project for you by simply running one command.\\n\\n\\n  sudo npm i -g watchdeps\\n  cd myproject/\\n  watchdeps -u nfroidure\\n  # Done!\\n\\n\\nThat\'s it! All your dependencies with a GitHub repository associated are now\\nwatched and you\'ll know everything about its evolution. Simple enough?\\n\\n< Blog [/en/blog/index.html] Please enable JavaScript to view the comments\\npowered by Disqus. [https://disqus.com/?ref_noscript] Twitter\\n[https://twitter.com/nfroidure] GitHub [https://github.com/nfroidure] NPM\\n[https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc208:JSON.parse('{"path":"contents/pages/en/blog/webservices_at_7digital.html","title":"Project Webservices at 7Digital","description":"A sum-up of my last 6 months working at 7Digital","shortTitle":"Webservices at 7Digital","shortDesc":"A presentation of the architecture of the 7Digital Project\'s Webservices","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nPROJECT WEBSERVICES AT 7DIGITAL\\nScript of the presentation:\\n\\nA BIT OF CONTEXT\\nAs you may have noticed, the project team at 7 Digital has a very different way\\nto ship software than the product team.\\nIndeed, what make us working so differently is mainly timelines. We have to ship\\nfeatures on a regular basis in order to get feedback from our partners.\\n\\nCUSTOM PROJECTS\\nOur customer projects require us to slightly change our webservices behavior.\\nFrom custom APIs to third party integrations. We need to be able to build\\nseveral custom platforms at the same time without degrading our service\'s\\nquality.\\n\\nTRANSITIONING\\nAll of it has to be done gradually, implying a lot of backward compatibility\\nconsiderations on an old codebase with no tests at all.\\n\\nCONTRACTORS\\nWe also have to manage relationship with contractors and keep sure we can\\nprovide them the environment quick enough to be sure they won\'t be stuck on\\ntheir working days.\\n\\nPROJECT ORIENTED\\nWe\'re building projects over a product. It sometimes enforce us to implement\\nfeatures that will then ship into our core features.\\n\\nMODULARIZATION\\nTo address our projects specificities we had to create an highly modular\\ncodebase thanks to a few common patterns.\\n\\nONE REPOSITORY PER CONCERN\\nFirst of all, we created several normalized repositories: infrastructure,\\nwebservices, frontends. Each repository of the same category shares the same\\nCLI/directory tree interface to avoid having to figure out what is where for\\neach project.\\n\\nA DOCKER IMAGE PER REPOSITORY\\nThe subsequent fact of it is that each repository\'s goal is to contain the\\nrecipe to build a single Docker container.\\n\\nMODULARIZATION ISSUES\\nBut the modularization comes with its own costs and we had to automate their\\nevolution to avoid falling into a messy codebase with disparate configurations\\nfor each project/microservice.\\n\\nAN AUTOMATED UPDATE PROCESS\\nBasically, what we\'re doing is maintaining a set of versioned macros that\\napplies to a project once the module containing them is updated.\\n\\nAUTOMATICALLY CUSTOMIZED DOCUMENTATION\\nSince building customer projects is like picking features in an existing toolbox\\nplus creating specific ones, we automated the documentation in a way that allows\\nus to spend 0 time on bundling it or on already documented features. We just\\nfocus on new features.\\n\\nCODE ARCHITECTURE\\nDEPENDENCY INJECTION WITH INVERSION OF CONTROL\\nWe\'re using an open-source tool I made that implement Dependency Injection with\\nInversion of Control and looks similar to what\'s done in Angular. There is a\\nsmall difference though, since it also handle service shutdown. Indeed, to\\nensure high availability we must shutdown services like PostgreSQL only when\\nevery connections to the HTTP server where closed.\\n\\nPURE FUNCTIONS FOR THE WIN\\nA side effect of using services to enclose global states is that we can use pure\\nfunctions everywhere else. I won\'t cover functional programming here but you\\nshould really have a look at its patterns.\\n\\nDOCUMENTATION DRIVEN APIS\\nLike any developer, I prefer write code than documentation. But I also prefer\\nusing documented code. To conciliate those two paradoxical needs, I managed to\\ntie documentation and code. By writing the documentation, you create (routing\\n[https://github.com/nfroidure/siso], input filtering\\n[https://github.com/nfroidure/strict-qs], clients API\\n[https://github.com/nfroidure/asttpl/blob/master/src/realworld.mocha.js], ...).\\n\\nWORKFLOW ORIENTED CONTROLLER\\nI am not an MVC fan. Indeed, experience proves that answering to an HTTP request\\nis often more a unique workflow specific to a given endpoint. I would say I am\\nusing a Workflow Stages Service pattern where Workflow is a bunch of\\nasynchronous sequential operation, Stages is about running pure functions or\\nservices functions and Service is just dealing with system\'s or third party\\nglobal states.\\n\\nCACHE READY\\nI think enforcing URLs uniqueness in the stricter manner possible is a very\\nimportant thing. It makes caching strategy efficient. What\'s the point of taking\\ntrains to go to the office if your code is wasting resources? I want to code\\ngreen and URI unicity is maybe the best improvement you can achieve for that\\nmatter.\\n\\nIt can be less convenient for frontends that are forced to follow a strict\\npattern when using the API but since we are generating the client API they don\'t\\neven know that those restrictions exists ;).\\n\\nSome old URIs contents are still varying but fortunately when frontends will all\\nuse the generated client API we will be able to change URIs transparently.\\n\\nSTILL A WORK IN PROGRESS\\nWhich leads us to the fact there is still some work in progress under the hoods.\\nFrom JSONSchema definition to the RESTful shift, the road is long.\\n\\nDEPLOYMENT\\nONE REPOSITORY TO RULE THEM ALL\\nBuilding and deploying several projects at the same time requires to be rigorous\\nand rely on single sources of truth. To handle this, every single utility\\nscript, deployment configuration lies in a single centralized repository per\\nproject.\\n\\nEvery repositories involved in a project are embedded into the infrastructure\\nrepository as a Git submodule in order to be able to setup the development\\nenvironment by cloning a single repository.\\n\\nCLOUD HOSTING POWERS\\nWe managed to create scripts that aggregate each webservices/frontends\\ndefinitions and output a platform agnostic project definition we can then\\nconvert for many targets: AWS, Google Cloud Engine or even a simple instance\\nrunning Docker or PM2 if necessary.\\n\\nBACK TO THE FUTURE\\nSince each project has its own hosting budget, traffic expectations, we want to\\nprovide more targets for deployments to precisely fit needs at the better cost.\\n\\nQUALITY INSURANCE\\nThere is a lot of checks before shipping to UAT or production dramatically\\nreducing risks to deploy non working versions. Most of the BDD tests I made also\\nhelped to ensure backward compatibility with the old APIs.\\n\\nTHANKS\\nThanks you for your attention. If you have any question, please ask ;).\\n\\n < Blog [/en/blog/index.html]\\n\\nPlease enable JavaScript to view the comments powered by Disqus.\\n[https://disqus.com/?ref_noscript] Twitter [https://twitter.com/nfroidure] \\nGitHub [https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] \\nLinkedIn [https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] \\n© Nicolas Froidure 2012-2023"}'),doc209:JSON.parse('{"path":"contents/pages/en/blog/index.html","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nBLOG\\nFind on this blog many developer resources I find useful to share and more\\ninformations on my projects.\\n\\n Leveraging docker-compose and SwaggerUI\\n[/en/blog/swagger_ui_docker_compose.html] \\n\\nHaving a local SwaggerUI instance and deal with CORS by a single command to\\neasily get your API documentation.\\n\\nPublished on Friday, February 4, 2022 11:00 AM\\n\\n Print your Markdown content with React through AST\\n[/en/blog/markdown_ast_to_react.html] \\n\\nA journey to printing my blog Markdown contents with my custom components.\\n\\nPublished on Wednesday, December 1, 2021 11:00 PM\\n\\n Get 4 PRs easily and usefuly for the Hacktoberfest\\n[/en/blog/hacktobefest_4_prs_easily.html] \\n\\nYou want to get involved into the Hacktoberfest an win a shirt or plant a tree?\\nFollow your guide!\\n\\nPublished on Tuesday, October 12, 2021 11:07 AM\\n\\n Kafka with docker-compose [/en/blog/kafka_docker_compose.html] \\n\\nRun Apache Kafka locally with docker-compose.\\n\\nPublished on Thursday, December 31, 2020 2:07 PM\\n\\n Unobtrusive Dependency Injection with Knifecycle\\n[/en/blog/unobstrusive_dependency_injection_with_knifecycle.html] \\n\\nKnifecycle is a NodeJS module aimed to provide DI power without the headaches..\\n\\nPublished on Saturday, January 26, 2019 1:00 PM\\n\\n My VSCode Configuration [/en/blog/my_vscode_configuration.html] \\n\\nA quick tour of my VSCode configuration.\\n\\nPublished on Thursday, January 3, 2019 9:00 PM\\n\\n Normalizing JSON Data from REST APIs\\n[/en/blog/json_structure_for_rest_apis.html] \\n\\nVery few developer takes the time to think about how they structure their JSON\\nat the very beginning of the project, it is the best moment to do so though.\\n\\nPublished on Friday, March 3, 2017 11:07 AM\\n\\n Considerations for Automatic Generation of API Clients\\n[/en/blog/considerations_for_generating_api_clients.html] \\n\\nNo one should loose time writing code that can be generated automatically. Here\\nare some tips on how I did it.\\n\\nPublished on Sunday, February 19, 2017 4:00 PM\\n\\n Project Webservices at 7Digital [/en/blog/webservices_at_7digital.html] \\n\\nA sum-up of my last 6 months working at 7Digital\\n\\nPublished on Tuesday, February 7, 2017 2:09 PM\\n\\n Meta NPM Packages [/en/blog/metapak.html] \\n\\nOn managing a lot of NPM modules.\\n\\nPublished on Thursday, February 2, 2017 5:29 AM\\n\\n Toward a stricter query string parser\\n[/en/blog/toward_stricter_query_string_parser.html] \\n\\nWith most query string parsers, a lot of URIs can point to the same content. It\\nnot only mess you cache system but make your logs less expressive. To avoid\\nthose problems I just wrote a stricter query string parser.\\n\\nPublished on Monday, December 12, 2016 8:50 PM\\n\\n Designing HTTP REST APIs with NodeJS [/en/blog/http_rest_apis_with_nodejs.html] \\n\\nDesigning good HTTP services is still a hard thing despite the many tools you\\ncan find to make them with NodeJS. I\'m trying to define a formal approach to\\narchitecture them by embracing the HTTP protocol nature and the RESTful\\nprinciples.\\n\\nPublished on Saturday, November 12, 2016 10:50 AM\\n\\n No more middlewares, please [/en/blog/no_more_middlewares.html] \\n\\nWhy I think middlewares are a bad thing, how I am replacing them.\\n\\nPublished on Saturday, November 5, 2016 8:50 PM\\n\\n Let\'s Subset JavaScript [/en/blog/lets_subset_javascript.html] \\n\\nCurrently, it\'s all about JavaScript and how to compile, transpile and every\\n\\"ile\\"y things you could imagine. But what about making JavaScript smaller?\\n\\nPublished on Friday, July 10, 2015 3:38 PM\\n\\n Create Native NodeJS Modules Fallbacking To Emscripten Ones\\n[/en/blog/native-node-module.html] \\n\\nSuprisingly, creating a native module is not that hard. Making it compile on any\\nplatform and gracefully handle compilation fails is a bit more tricky.\\n\\nPublished on Friday, June 26, 2015 5:50 PM\\n\\n Watching Your NodeJS Projects\'s Dependencies The Easy Way\\n[/en/blog/watchdeps.html] \\n\\nUsing watchdeps to automagically watch your project\'s dependencies.\\n\\nPublished on Sunday, March 8, 2015 11:07 AM\\n\\n REST API access control with reaccess [/en/blog/reaccess.html] \\n\\nA presentation introducing reaccess an its use on a MEAN stack.\\n\\nPublished on Wednesday, October 1, 2014 1:44 PM\\n\\n Match IE8 With Rework And Gulp! [/en/blog/match_ie8_with_gulp_and_rework.html] \\n\\nRework is a very powerful tool. It allows working with CSS contents in a\\nfriendly manner. Let\'s improve you IE8 compatibility with it.\\n\\nPublished on Saturday, March 15, 2014 4:05 PM\\n\\n Detecting Bad JavaScript Performance Tests On JSPerf\\n[/en/blog/jsperf_use_with_caution.html] \\n\\nJSPerf gives us a simple way to write JavaScript performance tests.\\nUnfortunately, tests found aren\'t always well designed. Here\'s how to detect and\\navoid them.\\n\\nPublished on Thursday, June 6, 2013 6:21 PM\\n\\n Revisiting The JavaScript Singleton Pattern\\n[/en/blog/revisiting_js_singleton_pattern.html] \\n\\nJavaScript design patterns are quite good examples to sharp your JavaScript\\nskills. Let\'s take a look to the singleton pattern.\\n\\nPublished on Thursday, May 30, 2013 9:38 AM\\n\\nNext [/en/blog/index-2.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc210:JSON.parse('{"path":"contents/pages/en/blog/index.atom","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":" https://insertafter.com/en/blog/index.html InsertAfter : Nicolas Froidure\'s\\nBlog, Fullstack JavaScript Developper Learn more about me \\n2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/en/blog/swagger_ui_docker_compose.html Leveraging\\ndocker-compose and SwaggerUI 2022-02-04T10:00:00.000Z 2022-02-04T10:00:00.000Z \\nHaving a local SwaggerUI instance and deal with CORS by a single command to\\neasily get your API documentation. \\nhttps://insertafter.com/en/blog/markdown_ast_to_react.html Print your Markdown\\ncontent with React through AST 2021-12-01T22:00:00.000Z 2021-12-01T22:00:00.000Z \\nA journey to printing my blog Markdown contents with my custom components. \\nhttps://insertafter.com/en/blog/hacktobefest_4_prs_easily.html Get 4 PRs easily\\nand usefuly for the Hacktoberfest 2021-10-12T09:07:32.000Z \\n2021-10-12T09:07:32.000Z You want to get involved into the Hacktoberfest an win\\na shirt or plant a tree? Follow your guide! \\nhttps://insertafter.com/en/blog/kafka_docker_compose.html Kafka with\\ndocker-compose 2020-12-31T13:07:32.000Z 2020-12-31T13:07:32.000Z Run Apache\\nKafka locally with docker-compose. \\nhttps://insertafter.com/en/blog/unobstrusive_dependency_injection_with_knifecycle.html\\n Unobtrusive Dependency Injection with Knifecycle 2019-01-26T12:00:00.000Z \\n2019-01-26T12:00:00.000Z Knifecycle is a NodeJS module aimed to provide DI power\\nwithout the headaches.. \\nhttps://insertafter.com/en/blog/my_vscode_configuration.html My VSCode\\nConfiguration 2019-01-03T20:00:00.000Z 2019-01-03T20:00:00.000Z A quick tour of\\nmy VSCode configuration. \\nhttps://insertafter.com/en/blog/json_structure_for_rest_apis.html Normalizing\\nJSON Data from REST APIs 2017-03-03T10:07:32.000Z 2017-03-03T10:07:32.000Z Very\\nfew developer takes the time to think about how they structure their JSON at the\\nvery beginning of the project, it is the best moment to do so though. \\nhttps://insertafter.com/en/blog/considerations_for_generating_api_clients.html \\nConsiderations for Automatic Generation of API Clients 2017-02-19T15:00:00.000Z \\n2017-02-19T15:00:00.000Z No one should loose time writing code that can be\\ngenerated automatically. Here are some tips on how I did it. \\nhttps://insertafter.com/en/blog/webservices_at_7digital.html Project Webservices\\nat 7Digital 2017-02-07T13:09:30.000Z 2017-02-07T13:09:30.000Z A sum-up of my\\nlast 6 months working at 7Digital https://insertafter.com/en/blog/metapak.html \\nMeta NPM Packages 2017-02-02T04:29:10.000Z 2017-02-02T04:29:10.000Z On managing\\na lot of NPM modules. \\nhttps://insertafter.com/en/blog/toward_stricter_query_string_parser.html Toward\\na stricter query string parser 2016-12-12T19:50:52.000Z 2016-12-12T19:50:52.000Z \\nWith most query string parsers, a lot of URIs can point to the same content. It\\nnot only mess you cache system but make your logs less expressive. To avoid\\nthose problems I just wrote a stricter query string parser. \\nhttps://insertafter.com/en/blog/http_rest_apis_with_nodejs.html Designing HTTP\\nREST APIs with NodeJS 2016-11-12T09:50:52.000Z 2016-11-12T09:50:52.000Z \\nDesigning good HTTP services is still a hard thing despite the many tools you\\ncan find to make them with NodeJS. I\'m trying to define a formal approach to\\narchitecture them by embracing the HTTP protocol nature and the RESTful\\nprinciples. https://insertafter.com/en/blog/no_more_middlewares.html No more\\nmiddlewares, please 2016-11-05T19:50:20.000Z 2016-11-05T19:50:20.000Z Why I\\nthink middlewares are a bad thing, how I am replacing them. \\nhttps://insertafter.com/en/blog/lets_subset_javascript.html Let\'s Subset\\nJavaScript 2015-07-10T13:38:03.000Z 2015-07-10T13:38:03.000Z Currently, it\'s all\\nabout JavaScript and how to compile, transpile and every \\"ile\\"y things you could\\nimagine. But what about making JavaScript smaller? \\nhttps://insertafter.com/en/blog/native-node-module.html Create Native NodeJS\\nModules Fallbacking To Emscripten Ones 2015-06-26T15:50:23.000Z \\n2015-06-26T15:50:23.000Z Suprisingly, creating a native module is not that hard.\\nMaking it compile on any platform and gracefully handle compilation fails is a\\nbit more tricky. https://insertafter.com/en/blog/watchdeps.html Watching Your\\nNodeJS Projects\'s Dependencies The Easy Way 2015-03-08T10:07:32.000Z \\n2015-03-08T10:07:32.000Z Using watchdeps to automagically watch your project\'s\\ndependencies. https://insertafter.com/en/blog/reaccess.html REST API access\\ncontrol with reaccess 2014-10-01T11:44:58.000Z 2014-10-01T11:44:58.000Z A\\npresentation introducing reaccess an its use on a MEAN stack. \\nhttps://insertafter.com/en/blog/match_ie8_with_gulp_and_rework.html Match IE8\\nWith Rework And Gulp! 2014-03-15T15:05:01.000Z 2014-03-15T15:05:01.000Z Rework\\nis a very powerful tool. It allows working with CSS contents in a friendly\\nmanner. Let\'s improve you IE8 compatibility with it. \\nhttps://insertafter.com/en/blog/jsperf_use_with_caution.html Detecting Bad\\nJavaScript Performance Tests On JSPerf 2013-06-06T16:21:50.000Z \\n2013-06-06T16:21:50.000Z JSPerf gives us a simple way to write JavaScript\\nperformance tests. Unfortunately, tests found aren\'t always well designed.\\nHere\'s how to detect and avoid them. \\nhttps://insertafter.com/en/blog/revisiting_js_singleton_pattern.html Revisiting\\nThe JavaScript Singleton Pattern 2013-05-30T07:38:19.000Z \\n2013-05-30T07:38:19.000Z JavaScript design patterns are quite good examples to\\nsharp your JavaScript skills. Let\'s take a look to the singleton pattern."}'),doc211:JSON.parse('{"path":"contents/pages/blog.atom","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":" https://insertafter.com/en/blog/index.html InsertAfter : Nicolas Froidure\'s\\nBlog, Fullstack JavaScript Developper Learn more about me \\n2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/en/blog/swagger_ui_docker_compose.html Leveraging\\ndocker-compose and SwaggerUI 2022-02-04T10:00:00.000Z 2022-02-04T10:00:00.000Z \\nHaving a local SwaggerUI instance and deal with CORS by a single command to\\neasily get your API documentation. \\nhttps://insertafter.com/en/blog/markdown_ast_to_react.html Print your Markdown\\ncontent with React through AST 2021-12-01T22:00:00.000Z 2021-12-01T22:00:00.000Z \\nA journey to printing my blog Markdown contents with my custom components. \\nhttps://insertafter.com/en/blog/hacktobefest_4_prs_easily.html Get 4 PRs easily\\nand usefuly for the Hacktoberfest 2021-10-12T09:07:32.000Z \\n2021-10-12T09:07:32.000Z You want to get involved into the Hacktoberfest an win\\na shirt or plant a tree? Follow your guide! \\nhttps://insertafter.com/en/blog/kafka_docker_compose.html Kafka with\\ndocker-compose 2020-12-31T13:07:32.000Z 2020-12-31T13:07:32.000Z Run Apache\\nKafka locally with docker-compose. \\nhttps://insertafter.com/en/blog/unobstrusive_dependency_injection_with_knifecycle.html\\n Unobtrusive Dependency Injection with Knifecycle 2019-01-26T12:00:00.000Z \\n2019-01-26T12:00:00.000Z Knifecycle is a NodeJS module aimed to provide DI power\\nwithout the headaches.. \\nhttps://insertafter.com/en/blog/my_vscode_configuration.html My VSCode\\nConfiguration 2019-01-03T20:00:00.000Z 2019-01-03T20:00:00.000Z A quick tour of\\nmy VSCode configuration. \\nhttps://insertafter.com/en/blog/json_structure_for_rest_apis.html Normalizing\\nJSON Data from REST APIs 2017-03-03T10:07:32.000Z 2017-03-03T10:07:32.000Z Very\\nfew developer takes the time to think about how they structure their JSON at the\\nvery beginning of the project, it is the best moment to do so though. \\nhttps://insertafter.com/en/blog/considerations_for_generating_api_clients.html \\nConsiderations for Automatic Generation of API Clients 2017-02-19T15:00:00.000Z \\n2017-02-19T15:00:00.000Z No one should loose time writing code that can be\\ngenerated automatically. Here are some tips on how I did it. \\nhttps://insertafter.com/en/blog/webservices_at_7digital.html Project Webservices\\nat 7Digital 2017-02-07T13:09:30.000Z 2017-02-07T13:09:30.000Z A sum-up of my\\nlast 6 months working at 7Digital https://insertafter.com/en/blog/metapak.html \\nMeta NPM Packages 2017-02-02T04:29:10.000Z 2017-02-02T04:29:10.000Z On managing\\na lot of NPM modules. \\nhttps://insertafter.com/en/blog/toward_stricter_query_string_parser.html Toward\\na stricter query string parser 2016-12-12T19:50:52.000Z 2016-12-12T19:50:52.000Z \\nWith most query string parsers, a lot of URIs can point to the same content. It\\nnot only mess you cache system but make your logs less expressive. To avoid\\nthose problems I just wrote a stricter query string parser. \\nhttps://insertafter.com/en/blog/http_rest_apis_with_nodejs.html Designing HTTP\\nREST APIs with NodeJS 2016-11-12T09:50:52.000Z 2016-11-12T09:50:52.000Z \\nDesigning good HTTP services is still a hard thing despite the many tools you\\ncan find to make them with NodeJS. I\'m trying to define a formal approach to\\narchitecture them by embracing the HTTP protocol nature and the RESTful\\nprinciples. https://insertafter.com/en/blog/no_more_middlewares.html No more\\nmiddlewares, please 2016-11-05T19:50:20.000Z 2016-11-05T19:50:20.000Z Why I\\nthink middlewares are a bad thing, how I am replacing them. \\nhttps://insertafter.com/en/blog/lets_subset_javascript.html Let\'s Subset\\nJavaScript 2015-07-10T13:38:03.000Z 2015-07-10T13:38:03.000Z Currently, it\'s all\\nabout JavaScript and how to compile, transpile and every \\"ile\\"y things you could\\nimagine. But what about making JavaScript smaller? \\nhttps://insertafter.com/en/blog/native-node-module.html Create Native NodeJS\\nModules Fallbacking To Emscripten Ones 2015-06-26T15:50:23.000Z \\n2015-06-26T15:50:23.000Z Suprisingly, creating a native module is not that hard.\\nMaking it compile on any platform and gracefully handle compilation fails is a\\nbit more tricky. https://insertafter.com/en/blog/watchdeps.html Watching Your\\nNodeJS Projects\'s Dependencies The Easy Way 2015-03-08T10:07:32.000Z \\n2015-03-08T10:07:32.000Z Using watchdeps to automagically watch your project\'s\\ndependencies. https://insertafter.com/en/blog/reaccess.html REST API access\\ncontrol with reaccess 2014-10-01T11:44:58.000Z 2014-10-01T11:44:58.000Z A\\npresentation introducing reaccess an its use on a MEAN stack. \\nhttps://insertafter.com/en/blog/match_ie8_with_gulp_and_rework.html Match IE8\\nWith Rework And Gulp! 2014-03-15T15:05:01.000Z 2014-03-15T15:05:01.000Z Rework\\nis a very powerful tool. It allows working with CSS contents in a friendly\\nmanner. Let\'s improve you IE8 compatibility with it. \\nhttps://insertafter.com/en/blog/jsperf_use_with_caution.html Detecting Bad\\nJavaScript Performance Tests On JSPerf 2013-06-06T16:21:50.000Z \\n2013-06-06T16:21:50.000Z JSPerf gives us a simple way to write JavaScript\\nperformance tests. Unfortunately, tests found aren\'t always well designed.\\nHere\'s how to detect and avoid them. \\nhttps://insertafter.com/en/blog/revisiting_js_singleton_pattern.html Revisiting\\nThe JavaScript Singleton Pattern 2013-05-30T07:38:19.000Z \\n2013-05-30T07:38:19.000Z JavaScript design patterns are quite good examples to\\nsharp your JavaScript skills. Let\'s take a look to the singleton pattern."}'),doc212:JSON.parse('{"path":"contents/pages/en/blog/index.rss","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":" InsertAfter : Nicolas Froidure\'s Blog, Fullstack JavaScript Developper Learn\\nmore about me https://insertafter.com/en/blog/index.html \\n2023-08-20T08:32:09.420Z 2023-08-20T08:32:09.420Z 1800 Leveraging docker-compose\\nand SwaggerUI Having a local SwaggerUI instance and deal with CORS by a single\\ncommand to easily get your API documentation. \\nhttps://insertafter.com/en/blog/swagger_ui_docker_compose.html \\n2022-02-04T10:00:00.000Z Print your Markdown content with React through AST A\\njourney to printing my blog Markdown contents with my custom components. \\nhttps://insertafter.com/en/blog/markdown_ast_to_react.html \\n2021-12-01T22:00:00.000Z Get 4 PRs easily and usefuly for the Hacktoberfest You\\nwant to get involved into the Hacktoberfest an win a shirt or plant a tree?\\nFollow your guide! \\nhttps://insertafter.com/en/blog/hacktobefest_4_prs_easily.html \\n2021-10-12T09:07:32.000Z Kafka with docker-compose Run Apache Kafka locally with\\ndocker-compose. https://insertafter.com/en/blog/kafka_docker_compose.html \\n2020-12-31T13:07:32.000Z Unobtrusive Dependency Injection with Knifecycle \\nKnifecycle is a NodeJS module aimed to provide DI power without the headaches.. \\nhttps://insertafter.com/en/blog/unobstrusive_dependency_injection_with_knifecycle.html\\n 2019-01-26T12:00:00.000Z My VSCode Configuration A quick tour of my VSCode\\nconfiguration. https://insertafter.com/en/blog/my_vscode_configuration.html \\n2019-01-03T20:00:00.000Z Normalizing JSON Data from REST APIs Very few developer\\ntakes the time to think about how they structure their JSON at the very\\nbeginning of the project, it is the best moment to do so though. \\nhttps://insertafter.com/en/blog/json_structure_for_rest_apis.html \\n2017-03-03T10:07:32.000Z Considerations for Automatic Generation of API Clients \\nNo one should loose time writing code that can be generated automatically. Here\\nare some tips on how I did it. \\nhttps://insertafter.com/en/blog/considerations_for_generating_api_clients.html \\n2017-02-19T15:00:00.000Z Project Webservices at 7Digital A sum-up of my last 6\\nmonths working at 7Digital \\nhttps://insertafter.com/en/blog/webservices_at_7digital.html \\n2017-02-07T13:09:30.000Z Meta NPM Packages On managing a lot of NPM modules. \\nhttps://insertafter.com/en/blog/metapak.html 2017-02-02T04:29:10.000Z Toward a\\nstricter query string parser With most query string parsers, a lot of URIs can\\npoint to the same content. It not only mess you cache system but make your logs\\nless expressive. To avoid those problems I just wrote a stricter query string\\nparser. https://insertafter.com/en/blog/toward_stricter_query_string_parser.html \\n2016-12-12T19:50:52.000Z Designing HTTP REST APIs with NodeJS Designing good\\nHTTP services is still a hard thing despite the many tools you can find to make\\nthem with NodeJS. I\'m trying to define a formal approach to architecture them by\\nembracing the HTTP protocol nature and the RESTful principles. \\nhttps://insertafter.com/en/blog/http_rest_apis_with_nodejs.html \\n2016-11-12T09:50:52.000Z No more middlewares, please Why I think middlewares are\\na bad thing, how I am replacing them. \\nhttps://insertafter.com/en/blog/no_more_middlewares.html \\n2016-11-05T19:50:20.000Z Let\'s Subset JavaScript Currently, it\'s all about\\nJavaScript and how to compile, transpile and every \\"ile\\"y things you could\\nimagine. But what about making JavaScript smaller? \\nhttps://insertafter.com/en/blog/lets_subset_javascript.html \\n2015-07-10T13:38:03.000Z Create Native NodeJS Modules Fallbacking To Emscripten\\nOnes Suprisingly, creating a native module is not that hard. Making it compile\\non any platform and gracefully handle compilation fails is a bit more tricky. \\nhttps://insertafter.com/en/blog/native-node-module.html 2015-06-26T15:50:23.000Z \\nWatching Your NodeJS Projects\'s Dependencies The Easy Way Using watchdeps to\\nautomagically watch your project\'s dependencies. \\nhttps://insertafter.com/en/blog/watchdeps.html 2015-03-08T10:07:32.000Z REST API\\naccess control with reaccess A presentation introducing reaccess an its use on a\\nMEAN stack. https://insertafter.com/en/blog/reaccess.html \\n2014-10-01T11:44:58.000Z Match IE8 With Rework And Gulp! Rework is a very\\npowerful tool. It allows working with CSS contents in a friendly manner. Let\'s\\nimprove you IE8 compatibility with it. \\nhttps://insertafter.com/en/blog/match_ie8_with_gulp_and_rework.html \\n2014-03-15T15:05:01.000Z Detecting Bad JavaScript Performance Tests On JSPerf \\nJSPerf gives us a simple way to write JavaScript performance tests.\\nUnfortunately, tests found aren\'t always well designed. Here\'s how to detect and\\navoid them. https://insertafter.com/en/blog/jsperf_use_with_caution.html \\n2013-06-06T16:21:50.000Z Revisiting The JavaScript Singleton Pattern JavaScript\\ndesign patterns are quite good examples to sharp your JavaScript skills. Let\'s\\ntake a look to the singleton pattern. \\nhttps://insertafter.com/en/blog/revisiting_js_singleton_pattern.html \\n2013-05-30T07:38:19.000Z"}'),doc213:JSON.parse('{"path":"contents/pages/blog.rss","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":" InsertAfter : Nicolas Froidure\'s Blog, Fullstack JavaScript Developper Learn\\nmore about me https://insertafter.com/en/blog/index.html \\n2023-08-20T08:32:09.420Z 2023-08-20T08:32:09.420Z 1800 Leveraging docker-compose\\nand SwaggerUI Having a local SwaggerUI instance and deal with CORS by a single\\ncommand to easily get your API documentation. \\nhttps://insertafter.com/en/blog/swagger_ui_docker_compose.html \\n2022-02-04T10:00:00.000Z Print your Markdown content with React through AST A\\njourney to printing my blog Markdown contents with my custom components. \\nhttps://insertafter.com/en/blog/markdown_ast_to_react.html \\n2021-12-01T22:00:00.000Z Get 4 PRs easily and usefuly for the Hacktoberfest You\\nwant to get involved into the Hacktoberfest an win a shirt or plant a tree?\\nFollow your guide! \\nhttps://insertafter.com/en/blog/hacktobefest_4_prs_easily.html \\n2021-10-12T09:07:32.000Z Kafka with docker-compose Run Apache Kafka locally with\\ndocker-compose. https://insertafter.com/en/blog/kafka_docker_compose.html \\n2020-12-31T13:07:32.000Z Unobtrusive Dependency Injection with Knifecycle \\nKnifecycle is a NodeJS module aimed to provide DI power without the headaches.. \\nhttps://insertafter.com/en/blog/unobstrusive_dependency_injection_with_knifecycle.html\\n 2019-01-26T12:00:00.000Z My VSCode Configuration A quick tour of my VSCode\\nconfiguration. https://insertafter.com/en/blog/my_vscode_configuration.html \\n2019-01-03T20:00:00.000Z Normalizing JSON Data from REST APIs Very few developer\\ntakes the time to think about how they structure their JSON at the very\\nbeginning of the project, it is the best moment to do so though. \\nhttps://insertafter.com/en/blog/json_structure_for_rest_apis.html \\n2017-03-03T10:07:32.000Z Considerations for Automatic Generation of API Clients \\nNo one should loose time writing code that can be generated automatically. Here\\nare some tips on how I did it. \\nhttps://insertafter.com/en/blog/considerations_for_generating_api_clients.html \\n2017-02-19T15:00:00.000Z Project Webservices at 7Digital A sum-up of my last 6\\nmonths working at 7Digital \\nhttps://insertafter.com/en/blog/webservices_at_7digital.html \\n2017-02-07T13:09:30.000Z Meta NPM Packages On managing a lot of NPM modules. \\nhttps://insertafter.com/en/blog/metapak.html 2017-02-02T04:29:10.000Z Toward a\\nstricter query string parser With most query string parsers, a lot of URIs can\\npoint to the same content. It not only mess you cache system but make your logs\\nless expressive. To avoid those problems I just wrote a stricter query string\\nparser. https://insertafter.com/en/blog/toward_stricter_query_string_parser.html \\n2016-12-12T19:50:52.000Z Designing HTTP REST APIs with NodeJS Designing good\\nHTTP services is still a hard thing despite the many tools you can find to make\\nthem with NodeJS. I\'m trying to define a formal approach to architecture them by\\nembracing the HTTP protocol nature and the RESTful principles. \\nhttps://insertafter.com/en/blog/http_rest_apis_with_nodejs.html \\n2016-11-12T09:50:52.000Z No more middlewares, please Why I think middlewares are\\na bad thing, how I am replacing them. \\nhttps://insertafter.com/en/blog/no_more_middlewares.html \\n2016-11-05T19:50:20.000Z Let\'s Subset JavaScript Currently, it\'s all about\\nJavaScript and how to compile, transpile and every \\"ile\\"y things you could\\nimagine. But what about making JavaScript smaller? \\nhttps://insertafter.com/en/blog/lets_subset_javascript.html \\n2015-07-10T13:38:03.000Z Create Native NodeJS Modules Fallbacking To Emscripten\\nOnes Suprisingly, creating a native module is not that hard. Making it compile\\non any platform and gracefully handle compilation fails is a bit more tricky. \\nhttps://insertafter.com/en/blog/native-node-module.html 2015-06-26T15:50:23.000Z \\nWatching Your NodeJS Projects\'s Dependencies The Easy Way Using watchdeps to\\nautomagically watch your project\'s dependencies. \\nhttps://insertafter.com/en/blog/watchdeps.html 2015-03-08T10:07:32.000Z REST API\\naccess control with reaccess A presentation introducing reaccess an its use on a\\nMEAN stack. https://insertafter.com/en/blog/reaccess.html \\n2014-10-01T11:44:58.000Z Match IE8 With Rework And Gulp! Rework is a very\\npowerful tool. It allows working with CSS contents in a friendly manner. Let\'s\\nimprove you IE8 compatibility with it. \\nhttps://insertafter.com/en/blog/match_ie8_with_gulp_and_rework.html \\n2014-03-15T15:05:01.000Z Detecting Bad JavaScript Performance Tests On JSPerf \\nJSPerf gives us a simple way to write JavaScript performance tests.\\nUnfortunately, tests found aren\'t always well designed. Here\'s how to detect and\\navoid them. https://insertafter.com/en/blog/jsperf_use_with_caution.html \\n2013-06-06T16:21:50.000Z Revisiting The JavaScript Singleton Pattern JavaScript\\ndesign patterns are quite good examples to sharp your JavaScript skills. Let\'s\\ntake a look to the singleton pattern. \\nhttps://insertafter.com/en/blog/revisiting_js_singleton_pattern.html \\n2013-05-30T07:38:19.000Z"}'),doc214:JSON.parse('{"path":"contents/pages/en/blog/index-2.html","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper - 2","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":"  LOGO INSERT AFTER [/IMAGES/LOGO.SVG] [/EN/INDEX.HTML]\\nHome [/en/index.html] Accueil [/fr/index.html]  *  Home [/en/index.html] \\n *  Blog [/en/blog/index.html] \\n *  Projects [/en/projects.html] \\n *  About [/en/about.html] \\n\\nBLOG\\nFind on this blog many developer resources I find useful to share and more\\ninformations on my projects.\\n\\n Easily Implement Stacks (Fifo) And Queues (Lifo) With JavaScript\\n[/en/blog/fifo_lifo_javascript.html] \\n\\nI\'m currently reviewing Javascript basis for a personnal project and it appears\\nI often use stacks and queues implicitly. Let\'s make it explicit and easyer to\\ndebug/use.\\n\\nPublished on Tuesday, April 9, 2013 11:50 AM\\n\\nPrevious [/en/blog/index.html] Twitter [https://twitter.com/nfroidure] GitHub\\n[https://github.com/nfroidure] NPM [https://www.npmjs.org/~nfroidure] LinkedIn\\n[https://www.linkedin.com/in/nfroidure] ATOM feed [/en/blog/index.atom] ©\\nNicolas Froidure 2012-2023"}'),doc215:JSON.parse('{"path":"contents/pages/en/blog/index-2.atom","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper - 2","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":" https://insertafter.com/en/blog/index-2.html InsertAfter : Nicolas Froidure\'s\\nBlog, Fullstack JavaScript Developper - 2 Learn more about me \\n2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/en/blog/fifo_lifo_javascript.html Easily Implement\\nStacks (Fifo) And Queues (Lifo) With JavaScript 2013-04-09T09:50:52.000Z \\n2013-04-09T09:50:52.000Z I\'m currently reviewing Javascript basis for a\\npersonnal project and it appears I often use stacks and queues implicitly. Let\'s\\nmake it explicit and easyer to debug/use."}'),doc216:JSON.parse('{"path":"contents/pages/blog.atom","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper - 2","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":" https://insertafter.com/en/blog/index-2.html InsertAfter : Nicolas Froidure\'s\\nBlog, Fullstack JavaScript Developper - 2 Learn more about me \\n2023-08-20T08:32:09.420Z \\nhttps://insertafter.com/en/blog/fifo_lifo_javascript.html Easily Implement\\nStacks (Fifo) And Queues (Lifo) With JavaScript 2013-04-09T09:50:52.000Z \\n2013-04-09T09:50:52.000Z I\'m currently reviewing Javascript basis for a\\npersonnal project and it appears I often use stacks and queues implicitly. Let\'s\\nmake it explicit and easyer to debug/use."}'),doc217:JSON.parse('{"path":"contents/pages/en/blog/index-2.rss","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper - 2","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":" InsertAfter : Nicolas Froidure\'s Blog, Fullstack JavaScript Developper - 2 \\nLearn more about me https://insertafter.com/en/blog/index-2.html \\n2023-08-20T08:32:09.420Z 2023-08-20T08:32:09.420Z 1800 Easily Implement Stacks\\n(Fifo) And Queues (Lifo) With JavaScript I\'m currently reviewing Javascript\\nbasis for a personnal project and it appears I often use stacks and queues\\nimplicitly. Let\'s make it explicit and easyer to debug/use. \\nhttps://insertafter.com/en/blog/fifo_lifo_javascript.html \\n2013-04-09T09:50:52.000Z"}'),doc218:JSON.parse('{"path":"contents/pages/blog.rss","title":"Nicolas Froidure\'s Blog, Fullstack JavaScript Developper - 2","description":"Learn more about me","shortTitle":"Blog","shortDesc":"Back to home","contents":" InsertAfter : Nicolas Froidure\'s Blog, Fullstack JavaScript Developper - 2 \\nLearn more about me https://insertafter.com/en/blog/index-2.html \\n2023-08-20T08:32:09.420Z 2023-08-20T08:32:09.420Z 1800 Easily Implement Stacks\\n(Fifo) And Queues (Lifo) With JavaScript I\'m currently reviewing Javascript\\nbasis for a personnal project and it appears I often use stacks and queues\\nimplicitly. Let\'s make it explicit and easyer to debug/use. \\nhttps://insertafter.com/en/blog/fifo_lifo_javascript.html \\n2013-04-09T09:50:52.000Z"}')};var index=lunr(function(){var _this=this;this.field('title',{boost:10});this.field('description',{boost:5});this.field('shortTitle',{boost:7});this.field('shortDesc');this.field('body');this.ref('id');Object.keys(documents).forEach(function(id){var document=documents[id];_this.add({id:id,path:document.path,title:document.title,description:document.description,shortTitle:document.shortTitle,shortDesc:document.shortDesc,contents:document.contents});});});module.exports={search:index.search.bind(index),documents:documents};
},{"lunr":1}]},{},[2])(2)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
